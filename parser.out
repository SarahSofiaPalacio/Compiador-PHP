Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    HASHTAG
    INVALID_NUMBER_SEQUENCE
    INVALID_VARIABLE
    abstract
    callable
    catch
    ceil
    clone
    continue
    declare
    endclare
    eval
    extends
    final
    finally
    global
    goto
    implements
    include_once
    instanceof
    insteadof
    match
    namespace
    readonly
    require
    require_once
    static
    throw
    try
    use

Grammar

Rule 0     S' -> program
Rule 1     program -> header declaration_list
Rule 2     header -> OPEN_TAG
Rule 3     footer_declaration -> CLOSE_TAG
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> COMMENT
Rule 7     declaration -> COMMENT_HASHTAG
Rule 8     declaration -> COMMENT_MULTI
Rule 9     declaration -> header_declaration
Rule 10    declaration -> var_declaration
Rule 11    declaration -> constant_declaration
Rule 12    declaration -> print_declaration
Rule 13    declaration -> echo_declaration
Rule 14    declaration -> iteration_stmt
Rule 15    declaration -> if_statement
Rule 16    declaration -> fun_declaration
Rule 17    declaration -> fun_call
Rule 18    declaration -> return_statement
Rule 19    declaration -> class_declaration
Rule 20    declaration -> create_obj_declaration
Rule 21    declaration -> interface_declaration
Rule 22    declaration -> trait_declaration
Rule 23    declaration -> footer_declaration
Rule 24    declaration -> for_loop
Rule 25    declaration -> foreach_loop
Rule 26    declaration -> switch_statement
Rule 27    declaration -> exit_statement
Rule 28    declaration -> empty
Rule 29    header_declaration -> include CADENA SEMICOLON
Rule 30    constant_declaration -> const ID EQUAL CADENA SEMICOLON
Rule 31    constant_declaration -> const ID EQUAL NUMBER SEMICOLON
Rule 32    print_declaration -> print var_declaration2 SEMICOLON
Rule 33    print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON
Rule 34    print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON
Rule 35    print_declaration -> print LPAREN CADENA RPAREN SEMICOLON
Rule 36    print_declaration -> print NUMBER SEMICOLON
Rule 37    print_declaration -> print CADENA SEMICOLON
Rule 38    echo_declaration -> echo var_declaration2 SEMICOLON
Rule 39    echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON
Rule 40    echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON
Rule 41    echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON
Rule 42    echo_declaration -> echo NUMBER SEMICOLON
Rule 43    echo_declaration -> echo CADENA SEMICOLON
Rule 44    var_declaration -> var_declaration2 SEMICOLON
Rule 45    var_declaration2 -> VARIABLE
Rule 46    var_declaration2 -> VARIABLE expression
Rule 47    var_declaration2 -> VARIABLE EQUAL NUMBER
Rule 48    var_declaration2 -> VARIABLE EQUAL VARIABLE
Rule 49    var_declaration2 -> VARIABLE EQUAL CADENA
Rule 50    var_declaration2 -> VARIABLE EQUAL Built_In_Declaration
Rule 51    var_declaration2 -> VARIABLE EQUAL expression
Rule 52    var_declaration2 -> VARIABLE assignation VARIABLE
Rule 53    var_declaration2 -> VARIABLE assignation NUMBER
Rule 54    var_declaration2 -> Built_In_Declaration
Rule 55    var_declaration2 -> Concatenar_Cadenas_declaration
Rule 56    var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN
Rule 57    var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
Rule 58    var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression
Rule 59    var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
Rule 60    var_declaration2 -> VARIABLE EQUAL create_obj_declaration
Rule 61    var_declaration2 -> VARIABLE assignment_tail
Rule 62    var_declaration2 -> VARIABLE EQUAL assignment_tail
Rule 63    assignment_tail -> COMMA var_declaration2
Rule 64    assignment_tail -> LBRACKET params RBRACKET
Rule 65    assignment_tail -> LBLOCK params RBLOCK
Rule 66    assignment_tail -> VARIABLE LBRACKET expression COMMA params
Rule 67    assignment_tail -> VARIABLE LBRACKET params RBRACKET
Rule 68    assignment_tail -> VARIABLE LBLOCK params RBLOCK
Rule 69    iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
Rule 70    iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
Rule 71    iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
Rule 72    iteration_stmt -> do COLON declaration_list endwhile SEMICOLON
Rule 73    expression -> additive_expression
Rule 74    expression -> additive_expression logical_op additive_expression
Rule 75    expression -> additive_expression comp_op additive_expression
Rule 76    expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
Rule 77    expression -> additive_expression bits_op additive_expression
Rule 78    additive_expression -> term
Rule 79    additive_expression -> term math_op term
Rule 80    term -> MINUS term
Rule 81    term -> factor
Rule 82    term -> factor increment_decrement_op
Rule 83    term -> increment_decrement_op factor
Rule 84    factor -> NUMBER
Rule 85    factor -> VARIABLE
Rule 86    factor -> LPAREN expression RPAREN
Rule 87    increment_decrement_op -> PLUSPLUS
Rule 88    increment_decrement_op -> MINUSMINUS
Rule 89    math_op -> PLUS
Rule 90    math_op -> MINUS
Rule 91    math_op -> TIMES
Rule 92    math_op -> DIVIDE
Rule 93    math_op -> MULEQUAL
Rule 94    math_op -> PLUSEQUAL
Rule 95    math_op -> MINUSEQUAL
Rule 96    math_op -> MOD
Rule 97    comp_op -> LESS
Rule 98    comp_op -> LESSEQUAL
Rule 99    comp_op -> GREATER
Rule 100   comp_op -> GREATEREQUAL
Rule 101   comp_op -> DEQUAL
Rule 102   comp_op -> DISTINT
Rule 103   comp_op -> DIVEQUAL
Rule 104   comp_op -> ISEQUAL
Rule 105   comp_op -> ISIDENTICAL
Rule 106   comp_op -> ISNOTIDENTICAL
Rule 107   logical_op -> BOOL_OR
Rule 108   logical_op -> BOOL_AND
Rule 109   logical_op -> NOT
Rule 110   logical_op -> or
Rule 111   logical_op -> and
Rule 112   logical_op -> xor
Rule 113   if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 114   else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 115   else_part -> else LBLOCK declaration_list RBLOCK
Rule 116   else_part -> endif
Rule 117   else_part -> empty_function
Rule 118   fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
Rule 119   fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
Rule 120   fun_call -> ID LPAREN params RPAREN
Rule 121   return_statement -> return expression SEMICOLON
Rule 122   return_statement -> return params SEMICOLON
Rule 123   return_statement -> return SEMICOLON
Rule 124   return_statement -> return ID LPAREN expression RPAREN SEMICOLON
Rule 125   class_declaration -> class ID LBLOCK class_body RBLOCK
Rule 126   create_obj_declaration -> new ID LPAREN params RPAREN
Rule 127   class_body -> class_body_element
Rule 128   class_body -> class_body class_body_element
Rule 129   class_body -> empty_function
Rule 130   class_body_element -> visibility var_declaration2 SEMICOLON
Rule 131   class_body_element -> visibility fun_declaration
Rule 132   class_body_element -> declaration
Rule 133   interface_declaration -> interface ID LBLOCK interface_body RBLOCK
Rule 134   interface_body -> interface_method_declaration
Rule 135   interface_body -> interface_body interface_method_declaration
Rule 136   interface_body -> empty_function
Rule 137   interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON
Rule 138   trait_declaration -> trait ID LBLOCK trait_body RBLOCK
Rule 139   trait_body -> trait_element
Rule 140   trait_body -> trait_body trait_element
Rule 141   trait_body -> empty_function
Rule 142   trait_element -> visibility var_declaration SEMICOLON
Rule 143   trait_element -> visibility fun_declaration
Rule 144   visibility -> private
Rule 145   visibility -> protected
Rule 146   visibility -> public
Rule 147   visibility -> var
Rule 148   params -> single_param
Rule 149   params -> params COMMA single_param
Rule 150   single_param -> var_declaration2
Rule 151   single_param -> NUMBER
Rule 152   single_param -> CADENA
Rule 153   single_param -> empty_function
Rule 154   for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
Rule 155   for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
Rule 156   for_init -> var_declaration2 SEMICOLON
Rule 157   for_expr -> expression SEMICOLON
Rule 158   for_update -> expression
Rule 159   exit_statement -> exit LPAREN expression RPAREN SEMICOLON
Rule 160   foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
Rule 161   foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
Rule 162   switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
Rule 163   switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
Rule 164   case_blocks -> case_blocks case_block
Rule 165   case_blocks -> case_block
Rule 166   case_blocks -> empty_function
Rule 167   case_block -> case expression COLON statement_list
Rule 168   case_block -> case expression COLON statement_list break SEMICOLON
Rule 169   default_block -> default COLON statement_list
Rule 170   default_block -> default COLON statement_list break SEMICOLON
Rule 171   default_block -> empty_function
Rule 172   statement_list -> declaration
Rule 173   statement_list -> statement_list declaration
Rule 174   statement_list -> empty_function
Rule 175   Built_In_Declaration -> array LPAREN params RPAREN
Rule 176   Built_In_Declaration -> pow LPAREN params RPAREN
Rule 177   Built_In_Declaration -> POW LPAREN params RPAREN
Rule 178   Built_In_Declaration -> abs LPAREN params RPAREN
Rule 179   Built_In_Declaration -> cos LPAREN params RPAREN
Rule 180   Built_In_Declaration -> deg2rad LPAREN params RPAREN
Rule 181   Built_In_Declaration -> rad2deg LPAREN params RPAREN
Rule 182   Built_In_Declaration -> die LPAREN params RPAREN
Rule 183   Built_In_Declaration -> exp LPAREN params RPAREN
Rule 184   Built_In_Declaration -> floor LPAREN params RPAREN
Rule 185   Built_In_Declaration -> isset LPAREN params RPAREN
Rule 186   Built_In_Declaration -> list LPAREN params RPAREN
Rule 187   Built_In_Declaration -> log LPAREN params RPAREN
Rule 188   Built_In_Declaration -> log10 LPAREN params RPAREN
Rule 189   Built_In_Declaration -> max LPAREN params RPAREN
Rule 190   Built_In_Declaration -> min LPAREN params RPAREN
Rule 191   Built_In_Declaration -> rand LPAREN params RPAREN
Rule 192   Built_In_Declaration -> round LPAREN params RPAREN
Rule 193   Built_In_Declaration -> sin LPAREN params RPAREN
Rule 194   Built_In_Declaration -> sqrt LPAREN params RPAREN
Rule 195   Built_In_Declaration -> unset LPAREN params RPAREN
Rule 196   Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE
Rule 197   Concatenar_Cadenas_declaration -> CADENA DOT CADENA
Rule 198   Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE
Rule 199   Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA
Rule 200   bits_op -> AMPERSANT
Rule 201   bits_op -> SR
Rule 202   bits_op -> SL
Rule 203   assignation -> ASSIGN
Rule 204   assignation -> SREQUAL
Rule 205   assignation -> SLEQUAL
Rule 206   assignation -> XOREQUAL
Rule 207   assignation -> ANDEQUAL
Rule 208   empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 200
ANDEQUAL             : 207
ASSIGN               : 203
BACKSLASH            : 
BOOL_AND             : 108
BOOL_OR              : 107
CADENA               : 29 30 35 37 41 43 49 152 197 197 198 199
CLOSE_TAG            : 3
COLON                : 57 70 72 155 161 163 167 168 169 170
COMMA                : 63 66 149
COMMENT              : 6
COMMENT_HASHTAG      : 7
COMMENT_MULTI        : 8
DEQUAL               : 101
DISTINT              : 102
DIVEQUAL             : 103
DIVIDE               : 92
DOT                  : 196 197 198 199
EQUAL                : 30 31 47 48 49 50 51 56 58 60 62
GREATER              : 99
GREATEREQUAL         : 100
HASHTAG              : 
ID                   : 30 31 56 58 59 118 119 120 124 125 126 133 137 138
INVALID_NUMBER_SEQUENCE : 
INVALID_VARIABLE     : 
ISEQUAL              : 104
ISIDENTICAL          : 105
ISNOTIDENTICAL       : 106
LBLOCK               : 65 68 69 71 113 114 115 118 119 125 133 138 154 160 162
LBRACKET             : 64 66 67
LESS                 : 97
LESSEQUAL            : 98
LPAREN               : 33 34 35 39 40 41 56 59 69 70 71 86 113 114 118 119 120 124 126 137 154 155 159 160 161 162 163 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
MINUS                : 80 90
MINUSEQUAL           : 95
MINUSMINUS           : 88
MOD                  : 96
MULEQUAL             : 93
NOT                  : 109
NUMBER               : 31 34 36 40 42 47 53 84 151
OBJ_OPERATOR         : 58 59
OPEN_TAG             : 2
PLUS                 : 89
PLUSEQUAL            : 94
PLUSPLUS             : 87
POW                  : 177
QUESTIONMARK         : 57
RBLOCK               : 65 68 69 71 113 114 115 118 119 125 133 138 154 160 162
RBRACKET             : 64 67
RPAREN               : 33 34 35 39 40 41 56 59 69 70 71 86 113 114 118 119 120 124 126 137 154 155 159 160 161 162 163 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
SEMICOLON            : 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 70 71 72 121 122 123 124 130 137 142 155 156 157 159 161 163 168 170
SL                   : 202
SLEQUAL              : 205
SR                   : 201
SREQUAL              : 204
TIMES                : 91
VARIABLE             : 45 46 47 48 48 49 50 51 52 52 53 56 57 58 59 60 61 62 66 67 68 85 196 196 198 199
XOREQUAL             : 206
abs                  : 178
abstract             : 
and                  : 111
array                : 175
as                   : 160 161
break                : 168 170
callable             : 
case                 : 167 168
catch                : 
ceil                 : 
class                : 125
clone                : 
const                : 30 31
continue             : 
cos                  : 179
declare              : 
default              : 169 170
deg2rad              : 180
die                  : 182
do                   : 71 72
echo                 : 38 39 40 41 42 43
else                 : 115
elseif               : 114
empty                : 28
endclare             : 
endfor               : 155
endforeach           : 161
endif                : 116
endswitch            : 163
endwhile             : 70 72
error                : 
eval                 : 
exit                 : 159
exp                  : 183
extends              : 
final                : 
finally              : 
floor                : 184
for                  : 154 155
foreach              : 160 161
function             : 118 119 137
global               : 
goto                 : 
if                   : 113
implements           : 
include              : 29
include_once         : 
instanceof           : 
insteadof            : 
interface            : 133
isset                : 185
list                 : 186
log                  : 187
log10                : 188
match                : 
max                  : 189
min                  : 190
namespace            : 
new                  : 126
or                   : 110
pow                  : 176
print                : 32 33 34 35 36 37
private              : 144
protected            : 145
public               : 146
rad2deg              : 181
rand                 : 191
readonly             : 
require              : 
require_once         : 
return               : 121 122 123 124
round                : 192
sin                  : 193
sqrt                 : 194
static               : 
switch               : 162 163
throw                : 
trait                : 138
try                  : 
unset                : 195
use                  : 
var                  : 147
while                : 69 70 71
xor                  : 112

Nonterminals, with rules where they appear

Built_In_Declaration : 50 54
Concatenar_Cadenas_declaration : 55
additive_expression  : 73 74 74 75 75 76 76 76 76 77 77
assignation          : 52 53
assignment_tail      : 61 62
bits_op              : 77
case_block           : 164 165
case_blocks          : 162 163 164
class_body           : 125 128
class_body_element   : 127 128
class_declaration    : 19
comp_op              : 75 76 76
constant_declaration : 11
create_obj_declaration : 20 60
declaration          : 4 5 132 172 173
declaration_list     : 1 5 69 70 71 72 113 114 115 118 119 154 155 160 161
default_block        : 162 163
echo_declaration     : 13
else_part            : 113 114
empty_function       : 117 129 136 141 153 166 171 174
exit_statement       : 27
expression           : 46 51 58 66 69 70 71 86 113 114 121 124 157 158 159 160 160 161 161 162 163 167 168
factor               : 81 82 83
footer_declaration   : 23
for_expr             : 154 155
for_init             : 154 155
for_loop             : 24
for_update           : 154 155
foreach_loop         : 25
fun_call             : 17
fun_declaration      : 16 131 143
header               : 1
header_declaration   : 9
if_statement         : 15
increment_decrement_op : 82 83
interface_body       : 133 135
interface_declaration : 21
interface_method_declaration : 134 135
iteration_stmt       : 14
logical_op           : 74 76
math_op              : 79
params               : 56 59 64 65 66 67 68 118 119 120 122 126 137 149 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195
print_declaration    : 12
program              : 0
return_statement     : 18 119
single_param         : 148 149
statement_list       : 167 168 169 170 173
switch_statement     : 26
term                 : 78 79 79 80
trait_body           : 138 140
trait_declaration    : 22
trait_element        : 139 140
var_declaration      : 10 142
var_declaration2     : 32 33 38 39 44 57 57 63 130 150 156
visibility           : 130 131 137 142 143

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header declaration_list
    (2) header -> . OPEN_TAG

    OPEN_TAG        shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 3

    (2) header -> OPEN_TAG .

    COMMENT         reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_HASHTAG reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_MULTI   reduce using rule 2 (header -> OPEN_TAG .)
    empty           reduce using rule 2 (header -> OPEN_TAG .)
    include         reduce using rule 2 (header -> OPEN_TAG .)
    const           reduce using rule 2 (header -> OPEN_TAG .)
    print           reduce using rule 2 (header -> OPEN_TAG .)
    echo            reduce using rule 2 (header -> OPEN_TAG .)
    while           reduce using rule 2 (header -> OPEN_TAG .)
    do              reduce using rule 2 (header -> OPEN_TAG .)
    if              reduce using rule 2 (header -> OPEN_TAG .)
    function        reduce using rule 2 (header -> OPEN_TAG .)
    ID              reduce using rule 2 (header -> OPEN_TAG .)
    return          reduce using rule 2 (header -> OPEN_TAG .)
    class           reduce using rule 2 (header -> OPEN_TAG .)
    new             reduce using rule 2 (header -> OPEN_TAG .)
    interface       reduce using rule 2 (header -> OPEN_TAG .)
    trait           reduce using rule 2 (header -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 2 (header -> OPEN_TAG .)
    for             reduce using rule 2 (header -> OPEN_TAG .)
    foreach         reduce using rule 2 (header -> OPEN_TAG .)
    switch          reduce using rule 2 (header -> OPEN_TAG .)
    exit            reduce using rule 2 (header -> OPEN_TAG .)
    VARIABLE        reduce using rule 2 (header -> OPEN_TAG .)
    array           reduce using rule 2 (header -> OPEN_TAG .)
    pow             reduce using rule 2 (header -> OPEN_TAG .)
    POW             reduce using rule 2 (header -> OPEN_TAG .)
    abs             reduce using rule 2 (header -> OPEN_TAG .)
    cos             reduce using rule 2 (header -> OPEN_TAG .)
    deg2rad         reduce using rule 2 (header -> OPEN_TAG .)
    rad2deg         reduce using rule 2 (header -> OPEN_TAG .)
    die             reduce using rule 2 (header -> OPEN_TAG .)
    exp             reduce using rule 2 (header -> OPEN_TAG .)
    floor           reduce using rule 2 (header -> OPEN_TAG .)
    isset           reduce using rule 2 (header -> OPEN_TAG .)
    list            reduce using rule 2 (header -> OPEN_TAG .)
    log             reduce using rule 2 (header -> OPEN_TAG .)
    log10           reduce using rule 2 (header -> OPEN_TAG .)
    max             reduce using rule 2 (header -> OPEN_TAG .)
    min             reduce using rule 2 (header -> OPEN_TAG .)
    rand            reduce using rule 2 (header -> OPEN_TAG .)
    round           reduce using rule 2 (header -> OPEN_TAG .)
    sin             reduce using rule 2 (header -> OPEN_TAG .)
    sqrt            reduce using rule 2 (header -> OPEN_TAG .)
    unset           reduce using rule 2 (header -> OPEN_TAG .)
    CADENA          reduce using rule 2 (header -> OPEN_TAG .)


state 4

    (1) program -> header declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    $end            reduce using rule 1 (program -> header declaration_list .)
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 5

    (4) declaration_list -> declaration .

    COMMENT         reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_MULTI   reduce using rule 4 (declaration_list -> declaration .)
    empty           reduce using rule 4 (declaration_list -> declaration .)
    include         reduce using rule 4 (declaration_list -> declaration .)
    const           reduce using rule 4 (declaration_list -> declaration .)
    print           reduce using rule 4 (declaration_list -> declaration .)
    echo            reduce using rule 4 (declaration_list -> declaration .)
    while           reduce using rule 4 (declaration_list -> declaration .)
    do              reduce using rule 4 (declaration_list -> declaration .)
    if              reduce using rule 4 (declaration_list -> declaration .)
    function        reduce using rule 4 (declaration_list -> declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration .)
    return          reduce using rule 4 (declaration_list -> declaration .)
    class           reduce using rule 4 (declaration_list -> declaration .)
    new             reduce using rule 4 (declaration_list -> declaration .)
    interface       reduce using rule 4 (declaration_list -> declaration .)
    trait           reduce using rule 4 (declaration_list -> declaration .)
    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration .)
    for             reduce using rule 4 (declaration_list -> declaration .)
    foreach         reduce using rule 4 (declaration_list -> declaration .)
    switch          reduce using rule 4 (declaration_list -> declaration .)
    exit            reduce using rule 4 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 4 (declaration_list -> declaration .)
    array           reduce using rule 4 (declaration_list -> declaration .)
    pow             reduce using rule 4 (declaration_list -> declaration .)
    POW             reduce using rule 4 (declaration_list -> declaration .)
    abs             reduce using rule 4 (declaration_list -> declaration .)
    cos             reduce using rule 4 (declaration_list -> declaration .)
    deg2rad         reduce using rule 4 (declaration_list -> declaration .)
    rad2deg         reduce using rule 4 (declaration_list -> declaration .)
    die             reduce using rule 4 (declaration_list -> declaration .)
    exp             reduce using rule 4 (declaration_list -> declaration .)
    floor           reduce using rule 4 (declaration_list -> declaration .)
    isset           reduce using rule 4 (declaration_list -> declaration .)
    list            reduce using rule 4 (declaration_list -> declaration .)
    log             reduce using rule 4 (declaration_list -> declaration .)
    log10           reduce using rule 4 (declaration_list -> declaration .)
    max             reduce using rule 4 (declaration_list -> declaration .)
    min             reduce using rule 4 (declaration_list -> declaration .)
    rand            reduce using rule 4 (declaration_list -> declaration .)
    round           reduce using rule 4 (declaration_list -> declaration .)
    sin             reduce using rule 4 (declaration_list -> declaration .)
    sqrt            reduce using rule 4 (declaration_list -> declaration .)
    unset           reduce using rule 4 (declaration_list -> declaration .)
    CADENA          reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)
    RBLOCK          reduce using rule 4 (declaration_list -> declaration .)
    endwhile        reduce using rule 4 (declaration_list -> declaration .)
    endfor          reduce using rule 4 (declaration_list -> declaration .)
    endforeach      reduce using rule 4 (declaration_list -> declaration .)


state 6

    (6) declaration -> COMMENT .

    COMMENT         reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_HASHTAG reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_MULTI   reduce using rule 6 (declaration -> COMMENT .)
    empty           reduce using rule 6 (declaration -> COMMENT .)
    include         reduce using rule 6 (declaration -> COMMENT .)
    const           reduce using rule 6 (declaration -> COMMENT .)
    print           reduce using rule 6 (declaration -> COMMENT .)
    echo            reduce using rule 6 (declaration -> COMMENT .)
    while           reduce using rule 6 (declaration -> COMMENT .)
    do              reduce using rule 6 (declaration -> COMMENT .)
    if              reduce using rule 6 (declaration -> COMMENT .)
    function        reduce using rule 6 (declaration -> COMMENT .)
    ID              reduce using rule 6 (declaration -> COMMENT .)
    return          reduce using rule 6 (declaration -> COMMENT .)
    class           reduce using rule 6 (declaration -> COMMENT .)
    new             reduce using rule 6 (declaration -> COMMENT .)
    interface       reduce using rule 6 (declaration -> COMMENT .)
    trait           reduce using rule 6 (declaration -> COMMENT .)
    CLOSE_TAG       reduce using rule 6 (declaration -> COMMENT .)
    for             reduce using rule 6 (declaration -> COMMENT .)
    foreach         reduce using rule 6 (declaration -> COMMENT .)
    switch          reduce using rule 6 (declaration -> COMMENT .)
    exit            reduce using rule 6 (declaration -> COMMENT .)
    VARIABLE        reduce using rule 6 (declaration -> COMMENT .)
    array           reduce using rule 6 (declaration -> COMMENT .)
    pow             reduce using rule 6 (declaration -> COMMENT .)
    POW             reduce using rule 6 (declaration -> COMMENT .)
    abs             reduce using rule 6 (declaration -> COMMENT .)
    cos             reduce using rule 6 (declaration -> COMMENT .)
    deg2rad         reduce using rule 6 (declaration -> COMMENT .)
    rad2deg         reduce using rule 6 (declaration -> COMMENT .)
    die             reduce using rule 6 (declaration -> COMMENT .)
    exp             reduce using rule 6 (declaration -> COMMENT .)
    floor           reduce using rule 6 (declaration -> COMMENT .)
    isset           reduce using rule 6 (declaration -> COMMENT .)
    list            reduce using rule 6 (declaration -> COMMENT .)
    log             reduce using rule 6 (declaration -> COMMENT .)
    log10           reduce using rule 6 (declaration -> COMMENT .)
    max             reduce using rule 6 (declaration -> COMMENT .)
    min             reduce using rule 6 (declaration -> COMMENT .)
    rand            reduce using rule 6 (declaration -> COMMENT .)
    round           reduce using rule 6 (declaration -> COMMENT .)
    sin             reduce using rule 6 (declaration -> COMMENT .)
    sqrt            reduce using rule 6 (declaration -> COMMENT .)
    unset           reduce using rule 6 (declaration -> COMMENT .)
    CADENA          reduce using rule 6 (declaration -> COMMENT .)
    $end            reduce using rule 6 (declaration -> COMMENT .)
    RBLOCK          reduce using rule 6 (declaration -> COMMENT .)
    endwhile        reduce using rule 6 (declaration -> COMMENT .)
    private         reduce using rule 6 (declaration -> COMMENT .)
    protected       reduce using rule 6 (declaration -> COMMENT .)
    public          reduce using rule 6 (declaration -> COMMENT .)
    var             reduce using rule 6 (declaration -> COMMENT .)
    endfor          reduce using rule 6 (declaration -> COMMENT .)
    endforeach      reduce using rule 6 (declaration -> COMMENT .)
    break           reduce using rule 6 (declaration -> COMMENT .)
    endswitch       reduce using rule 6 (declaration -> COMMENT .)
    default         reduce using rule 6 (declaration -> COMMENT .)
    case            reduce using rule 6 (declaration -> COMMENT .)


state 7

    (7) declaration -> COMMENT_HASHTAG .

    COMMENT         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_HASHTAG reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_MULTI   reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    empty           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    const           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    print           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    echo            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    while           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    do              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    if              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    function        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    ID              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    return          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    class           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    new             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    interface       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    trait           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CLOSE_TAG       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    for             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    foreach         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    switch          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exit            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    VARIABLE        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    array           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    pow             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    POW             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    abs             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    cos             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    deg2rad         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    rad2deg         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    die             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exp             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    floor           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    isset           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    list            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    log             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    log10           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    max             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    min             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    rand            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    round           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    sin             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    sqrt            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    unset           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CADENA          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    $end            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    RBLOCK          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endwhile        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    private         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    protected       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    public          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    var             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endfor          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endforeach      reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    break           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endswitch       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    default         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    case            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)


state 8

    (8) declaration -> COMMENT_MULTI .

    COMMENT         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_HASHTAG reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_MULTI   reduce using rule 8 (declaration -> COMMENT_MULTI .)
    empty           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    const           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    print           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    echo            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    while           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    do              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    if              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    function        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    ID              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    return          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    class           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    new             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    interface       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    trait           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CLOSE_TAG       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    for             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    foreach         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    switch          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exit            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    VARIABLE        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    array           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    pow             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    POW             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    abs             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    cos             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    deg2rad         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    rad2deg         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    die             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exp             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    floor           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    isset           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    list            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    log             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    log10           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    max             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    min             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    rand            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    round           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    sin             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    sqrt            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    unset           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CADENA          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    $end            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    RBLOCK          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endwhile        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    private         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    protected       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    public          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    var             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endfor          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endforeach      reduce using rule 8 (declaration -> COMMENT_MULTI .)
    break           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endswitch       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    default         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    case            reduce using rule 8 (declaration -> COMMENT_MULTI .)


state 9

    (9) declaration -> header_declaration .

    COMMENT         reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_HASHTAG reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_MULTI   reduce using rule 9 (declaration -> header_declaration .)
    empty           reduce using rule 9 (declaration -> header_declaration .)
    include         reduce using rule 9 (declaration -> header_declaration .)
    const           reduce using rule 9 (declaration -> header_declaration .)
    print           reduce using rule 9 (declaration -> header_declaration .)
    echo            reduce using rule 9 (declaration -> header_declaration .)
    while           reduce using rule 9 (declaration -> header_declaration .)
    do              reduce using rule 9 (declaration -> header_declaration .)
    if              reduce using rule 9 (declaration -> header_declaration .)
    function        reduce using rule 9 (declaration -> header_declaration .)
    ID              reduce using rule 9 (declaration -> header_declaration .)
    return          reduce using rule 9 (declaration -> header_declaration .)
    class           reduce using rule 9 (declaration -> header_declaration .)
    new             reduce using rule 9 (declaration -> header_declaration .)
    interface       reduce using rule 9 (declaration -> header_declaration .)
    trait           reduce using rule 9 (declaration -> header_declaration .)
    CLOSE_TAG       reduce using rule 9 (declaration -> header_declaration .)
    for             reduce using rule 9 (declaration -> header_declaration .)
    foreach         reduce using rule 9 (declaration -> header_declaration .)
    switch          reduce using rule 9 (declaration -> header_declaration .)
    exit            reduce using rule 9 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> header_declaration .)
    array           reduce using rule 9 (declaration -> header_declaration .)
    pow             reduce using rule 9 (declaration -> header_declaration .)
    POW             reduce using rule 9 (declaration -> header_declaration .)
    abs             reduce using rule 9 (declaration -> header_declaration .)
    cos             reduce using rule 9 (declaration -> header_declaration .)
    deg2rad         reduce using rule 9 (declaration -> header_declaration .)
    rad2deg         reduce using rule 9 (declaration -> header_declaration .)
    die             reduce using rule 9 (declaration -> header_declaration .)
    exp             reduce using rule 9 (declaration -> header_declaration .)
    floor           reduce using rule 9 (declaration -> header_declaration .)
    isset           reduce using rule 9 (declaration -> header_declaration .)
    list            reduce using rule 9 (declaration -> header_declaration .)
    log             reduce using rule 9 (declaration -> header_declaration .)
    log10           reduce using rule 9 (declaration -> header_declaration .)
    max             reduce using rule 9 (declaration -> header_declaration .)
    min             reduce using rule 9 (declaration -> header_declaration .)
    rand            reduce using rule 9 (declaration -> header_declaration .)
    round           reduce using rule 9 (declaration -> header_declaration .)
    sin             reduce using rule 9 (declaration -> header_declaration .)
    sqrt            reduce using rule 9 (declaration -> header_declaration .)
    unset           reduce using rule 9 (declaration -> header_declaration .)
    CADENA          reduce using rule 9 (declaration -> header_declaration .)
    $end            reduce using rule 9 (declaration -> header_declaration .)
    RBLOCK          reduce using rule 9 (declaration -> header_declaration .)
    endwhile        reduce using rule 9 (declaration -> header_declaration .)
    private         reduce using rule 9 (declaration -> header_declaration .)
    protected       reduce using rule 9 (declaration -> header_declaration .)
    public          reduce using rule 9 (declaration -> header_declaration .)
    var             reduce using rule 9 (declaration -> header_declaration .)
    endfor          reduce using rule 9 (declaration -> header_declaration .)
    endforeach      reduce using rule 9 (declaration -> header_declaration .)
    break           reduce using rule 9 (declaration -> header_declaration .)
    endswitch       reduce using rule 9 (declaration -> header_declaration .)
    default         reduce using rule 9 (declaration -> header_declaration .)
    case            reduce using rule 9 (declaration -> header_declaration .)


state 10

    (10) declaration -> var_declaration .

    COMMENT         reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_HASHTAG reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_MULTI   reduce using rule 10 (declaration -> var_declaration .)
    empty           reduce using rule 10 (declaration -> var_declaration .)
    include         reduce using rule 10 (declaration -> var_declaration .)
    const           reduce using rule 10 (declaration -> var_declaration .)
    print           reduce using rule 10 (declaration -> var_declaration .)
    echo            reduce using rule 10 (declaration -> var_declaration .)
    while           reduce using rule 10 (declaration -> var_declaration .)
    do              reduce using rule 10 (declaration -> var_declaration .)
    if              reduce using rule 10 (declaration -> var_declaration .)
    function        reduce using rule 10 (declaration -> var_declaration .)
    ID              reduce using rule 10 (declaration -> var_declaration .)
    return          reduce using rule 10 (declaration -> var_declaration .)
    class           reduce using rule 10 (declaration -> var_declaration .)
    new             reduce using rule 10 (declaration -> var_declaration .)
    interface       reduce using rule 10 (declaration -> var_declaration .)
    trait           reduce using rule 10 (declaration -> var_declaration .)
    CLOSE_TAG       reduce using rule 10 (declaration -> var_declaration .)
    for             reduce using rule 10 (declaration -> var_declaration .)
    foreach         reduce using rule 10 (declaration -> var_declaration .)
    switch          reduce using rule 10 (declaration -> var_declaration .)
    exit            reduce using rule 10 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 10 (declaration -> var_declaration .)
    array           reduce using rule 10 (declaration -> var_declaration .)
    pow             reduce using rule 10 (declaration -> var_declaration .)
    POW             reduce using rule 10 (declaration -> var_declaration .)
    abs             reduce using rule 10 (declaration -> var_declaration .)
    cos             reduce using rule 10 (declaration -> var_declaration .)
    deg2rad         reduce using rule 10 (declaration -> var_declaration .)
    rad2deg         reduce using rule 10 (declaration -> var_declaration .)
    die             reduce using rule 10 (declaration -> var_declaration .)
    exp             reduce using rule 10 (declaration -> var_declaration .)
    floor           reduce using rule 10 (declaration -> var_declaration .)
    isset           reduce using rule 10 (declaration -> var_declaration .)
    list            reduce using rule 10 (declaration -> var_declaration .)
    log             reduce using rule 10 (declaration -> var_declaration .)
    log10           reduce using rule 10 (declaration -> var_declaration .)
    max             reduce using rule 10 (declaration -> var_declaration .)
    min             reduce using rule 10 (declaration -> var_declaration .)
    rand            reduce using rule 10 (declaration -> var_declaration .)
    round           reduce using rule 10 (declaration -> var_declaration .)
    sin             reduce using rule 10 (declaration -> var_declaration .)
    sqrt            reduce using rule 10 (declaration -> var_declaration .)
    unset           reduce using rule 10 (declaration -> var_declaration .)
    CADENA          reduce using rule 10 (declaration -> var_declaration .)
    $end            reduce using rule 10 (declaration -> var_declaration .)
    RBLOCK          reduce using rule 10 (declaration -> var_declaration .)
    endwhile        reduce using rule 10 (declaration -> var_declaration .)
    private         reduce using rule 10 (declaration -> var_declaration .)
    protected       reduce using rule 10 (declaration -> var_declaration .)
    public          reduce using rule 10 (declaration -> var_declaration .)
    var             reduce using rule 10 (declaration -> var_declaration .)
    endfor          reduce using rule 10 (declaration -> var_declaration .)
    endforeach      reduce using rule 10 (declaration -> var_declaration .)
    break           reduce using rule 10 (declaration -> var_declaration .)
    endswitch       reduce using rule 10 (declaration -> var_declaration .)
    default         reduce using rule 10 (declaration -> var_declaration .)
    case            reduce using rule 10 (declaration -> var_declaration .)


state 11

    (11) declaration -> constant_declaration .

    COMMENT         reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_HASHTAG reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_MULTI   reduce using rule 11 (declaration -> constant_declaration .)
    empty           reduce using rule 11 (declaration -> constant_declaration .)
    include         reduce using rule 11 (declaration -> constant_declaration .)
    const           reduce using rule 11 (declaration -> constant_declaration .)
    print           reduce using rule 11 (declaration -> constant_declaration .)
    echo            reduce using rule 11 (declaration -> constant_declaration .)
    while           reduce using rule 11 (declaration -> constant_declaration .)
    do              reduce using rule 11 (declaration -> constant_declaration .)
    if              reduce using rule 11 (declaration -> constant_declaration .)
    function        reduce using rule 11 (declaration -> constant_declaration .)
    ID              reduce using rule 11 (declaration -> constant_declaration .)
    return          reduce using rule 11 (declaration -> constant_declaration .)
    class           reduce using rule 11 (declaration -> constant_declaration .)
    new             reduce using rule 11 (declaration -> constant_declaration .)
    interface       reduce using rule 11 (declaration -> constant_declaration .)
    trait           reduce using rule 11 (declaration -> constant_declaration .)
    CLOSE_TAG       reduce using rule 11 (declaration -> constant_declaration .)
    for             reduce using rule 11 (declaration -> constant_declaration .)
    foreach         reduce using rule 11 (declaration -> constant_declaration .)
    switch          reduce using rule 11 (declaration -> constant_declaration .)
    exit            reduce using rule 11 (declaration -> constant_declaration .)
    VARIABLE        reduce using rule 11 (declaration -> constant_declaration .)
    array           reduce using rule 11 (declaration -> constant_declaration .)
    pow             reduce using rule 11 (declaration -> constant_declaration .)
    POW             reduce using rule 11 (declaration -> constant_declaration .)
    abs             reduce using rule 11 (declaration -> constant_declaration .)
    cos             reduce using rule 11 (declaration -> constant_declaration .)
    deg2rad         reduce using rule 11 (declaration -> constant_declaration .)
    rad2deg         reduce using rule 11 (declaration -> constant_declaration .)
    die             reduce using rule 11 (declaration -> constant_declaration .)
    exp             reduce using rule 11 (declaration -> constant_declaration .)
    floor           reduce using rule 11 (declaration -> constant_declaration .)
    isset           reduce using rule 11 (declaration -> constant_declaration .)
    list            reduce using rule 11 (declaration -> constant_declaration .)
    log             reduce using rule 11 (declaration -> constant_declaration .)
    log10           reduce using rule 11 (declaration -> constant_declaration .)
    max             reduce using rule 11 (declaration -> constant_declaration .)
    min             reduce using rule 11 (declaration -> constant_declaration .)
    rand            reduce using rule 11 (declaration -> constant_declaration .)
    round           reduce using rule 11 (declaration -> constant_declaration .)
    sin             reduce using rule 11 (declaration -> constant_declaration .)
    sqrt            reduce using rule 11 (declaration -> constant_declaration .)
    unset           reduce using rule 11 (declaration -> constant_declaration .)
    CADENA          reduce using rule 11 (declaration -> constant_declaration .)
    $end            reduce using rule 11 (declaration -> constant_declaration .)
    RBLOCK          reduce using rule 11 (declaration -> constant_declaration .)
    endwhile        reduce using rule 11 (declaration -> constant_declaration .)
    private         reduce using rule 11 (declaration -> constant_declaration .)
    protected       reduce using rule 11 (declaration -> constant_declaration .)
    public          reduce using rule 11 (declaration -> constant_declaration .)
    var             reduce using rule 11 (declaration -> constant_declaration .)
    endfor          reduce using rule 11 (declaration -> constant_declaration .)
    endforeach      reduce using rule 11 (declaration -> constant_declaration .)
    break           reduce using rule 11 (declaration -> constant_declaration .)
    endswitch       reduce using rule 11 (declaration -> constant_declaration .)
    default         reduce using rule 11 (declaration -> constant_declaration .)
    case            reduce using rule 11 (declaration -> constant_declaration .)


state 12

    (12) declaration -> print_declaration .

    COMMENT         reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_HASHTAG reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_MULTI   reduce using rule 12 (declaration -> print_declaration .)
    empty           reduce using rule 12 (declaration -> print_declaration .)
    include         reduce using rule 12 (declaration -> print_declaration .)
    const           reduce using rule 12 (declaration -> print_declaration .)
    print           reduce using rule 12 (declaration -> print_declaration .)
    echo            reduce using rule 12 (declaration -> print_declaration .)
    while           reduce using rule 12 (declaration -> print_declaration .)
    do              reduce using rule 12 (declaration -> print_declaration .)
    if              reduce using rule 12 (declaration -> print_declaration .)
    function        reduce using rule 12 (declaration -> print_declaration .)
    ID              reduce using rule 12 (declaration -> print_declaration .)
    return          reduce using rule 12 (declaration -> print_declaration .)
    class           reduce using rule 12 (declaration -> print_declaration .)
    new             reduce using rule 12 (declaration -> print_declaration .)
    interface       reduce using rule 12 (declaration -> print_declaration .)
    trait           reduce using rule 12 (declaration -> print_declaration .)
    CLOSE_TAG       reduce using rule 12 (declaration -> print_declaration .)
    for             reduce using rule 12 (declaration -> print_declaration .)
    foreach         reduce using rule 12 (declaration -> print_declaration .)
    switch          reduce using rule 12 (declaration -> print_declaration .)
    exit            reduce using rule 12 (declaration -> print_declaration .)
    VARIABLE        reduce using rule 12 (declaration -> print_declaration .)
    array           reduce using rule 12 (declaration -> print_declaration .)
    pow             reduce using rule 12 (declaration -> print_declaration .)
    POW             reduce using rule 12 (declaration -> print_declaration .)
    abs             reduce using rule 12 (declaration -> print_declaration .)
    cos             reduce using rule 12 (declaration -> print_declaration .)
    deg2rad         reduce using rule 12 (declaration -> print_declaration .)
    rad2deg         reduce using rule 12 (declaration -> print_declaration .)
    die             reduce using rule 12 (declaration -> print_declaration .)
    exp             reduce using rule 12 (declaration -> print_declaration .)
    floor           reduce using rule 12 (declaration -> print_declaration .)
    isset           reduce using rule 12 (declaration -> print_declaration .)
    list            reduce using rule 12 (declaration -> print_declaration .)
    log             reduce using rule 12 (declaration -> print_declaration .)
    log10           reduce using rule 12 (declaration -> print_declaration .)
    max             reduce using rule 12 (declaration -> print_declaration .)
    min             reduce using rule 12 (declaration -> print_declaration .)
    rand            reduce using rule 12 (declaration -> print_declaration .)
    round           reduce using rule 12 (declaration -> print_declaration .)
    sin             reduce using rule 12 (declaration -> print_declaration .)
    sqrt            reduce using rule 12 (declaration -> print_declaration .)
    unset           reduce using rule 12 (declaration -> print_declaration .)
    CADENA          reduce using rule 12 (declaration -> print_declaration .)
    $end            reduce using rule 12 (declaration -> print_declaration .)
    RBLOCK          reduce using rule 12 (declaration -> print_declaration .)
    endwhile        reduce using rule 12 (declaration -> print_declaration .)
    private         reduce using rule 12 (declaration -> print_declaration .)
    protected       reduce using rule 12 (declaration -> print_declaration .)
    public          reduce using rule 12 (declaration -> print_declaration .)
    var             reduce using rule 12 (declaration -> print_declaration .)
    endfor          reduce using rule 12 (declaration -> print_declaration .)
    endforeach      reduce using rule 12 (declaration -> print_declaration .)
    break           reduce using rule 12 (declaration -> print_declaration .)
    endswitch       reduce using rule 12 (declaration -> print_declaration .)
    default         reduce using rule 12 (declaration -> print_declaration .)
    case            reduce using rule 12 (declaration -> print_declaration .)


state 13

    (13) declaration -> echo_declaration .

    COMMENT         reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_HASHTAG reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_MULTI   reduce using rule 13 (declaration -> echo_declaration .)
    empty           reduce using rule 13 (declaration -> echo_declaration .)
    include         reduce using rule 13 (declaration -> echo_declaration .)
    const           reduce using rule 13 (declaration -> echo_declaration .)
    print           reduce using rule 13 (declaration -> echo_declaration .)
    echo            reduce using rule 13 (declaration -> echo_declaration .)
    while           reduce using rule 13 (declaration -> echo_declaration .)
    do              reduce using rule 13 (declaration -> echo_declaration .)
    if              reduce using rule 13 (declaration -> echo_declaration .)
    function        reduce using rule 13 (declaration -> echo_declaration .)
    ID              reduce using rule 13 (declaration -> echo_declaration .)
    return          reduce using rule 13 (declaration -> echo_declaration .)
    class           reduce using rule 13 (declaration -> echo_declaration .)
    new             reduce using rule 13 (declaration -> echo_declaration .)
    interface       reduce using rule 13 (declaration -> echo_declaration .)
    trait           reduce using rule 13 (declaration -> echo_declaration .)
    CLOSE_TAG       reduce using rule 13 (declaration -> echo_declaration .)
    for             reduce using rule 13 (declaration -> echo_declaration .)
    foreach         reduce using rule 13 (declaration -> echo_declaration .)
    switch          reduce using rule 13 (declaration -> echo_declaration .)
    exit            reduce using rule 13 (declaration -> echo_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> echo_declaration .)
    array           reduce using rule 13 (declaration -> echo_declaration .)
    pow             reduce using rule 13 (declaration -> echo_declaration .)
    POW             reduce using rule 13 (declaration -> echo_declaration .)
    abs             reduce using rule 13 (declaration -> echo_declaration .)
    cos             reduce using rule 13 (declaration -> echo_declaration .)
    deg2rad         reduce using rule 13 (declaration -> echo_declaration .)
    rad2deg         reduce using rule 13 (declaration -> echo_declaration .)
    die             reduce using rule 13 (declaration -> echo_declaration .)
    exp             reduce using rule 13 (declaration -> echo_declaration .)
    floor           reduce using rule 13 (declaration -> echo_declaration .)
    isset           reduce using rule 13 (declaration -> echo_declaration .)
    list            reduce using rule 13 (declaration -> echo_declaration .)
    log             reduce using rule 13 (declaration -> echo_declaration .)
    log10           reduce using rule 13 (declaration -> echo_declaration .)
    max             reduce using rule 13 (declaration -> echo_declaration .)
    min             reduce using rule 13 (declaration -> echo_declaration .)
    rand            reduce using rule 13 (declaration -> echo_declaration .)
    round           reduce using rule 13 (declaration -> echo_declaration .)
    sin             reduce using rule 13 (declaration -> echo_declaration .)
    sqrt            reduce using rule 13 (declaration -> echo_declaration .)
    unset           reduce using rule 13 (declaration -> echo_declaration .)
    CADENA          reduce using rule 13 (declaration -> echo_declaration .)
    $end            reduce using rule 13 (declaration -> echo_declaration .)
    RBLOCK          reduce using rule 13 (declaration -> echo_declaration .)
    endwhile        reduce using rule 13 (declaration -> echo_declaration .)
    private         reduce using rule 13 (declaration -> echo_declaration .)
    protected       reduce using rule 13 (declaration -> echo_declaration .)
    public          reduce using rule 13 (declaration -> echo_declaration .)
    var             reduce using rule 13 (declaration -> echo_declaration .)
    endfor          reduce using rule 13 (declaration -> echo_declaration .)
    endforeach      reduce using rule 13 (declaration -> echo_declaration .)
    break           reduce using rule 13 (declaration -> echo_declaration .)
    endswitch       reduce using rule 13 (declaration -> echo_declaration .)
    default         reduce using rule 13 (declaration -> echo_declaration .)
    case            reduce using rule 13 (declaration -> echo_declaration .)


state 14

    (14) declaration -> iteration_stmt .

    COMMENT         reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_HASHTAG reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_MULTI   reduce using rule 14 (declaration -> iteration_stmt .)
    empty           reduce using rule 14 (declaration -> iteration_stmt .)
    include         reduce using rule 14 (declaration -> iteration_stmt .)
    const           reduce using rule 14 (declaration -> iteration_stmt .)
    print           reduce using rule 14 (declaration -> iteration_stmt .)
    echo            reduce using rule 14 (declaration -> iteration_stmt .)
    while           reduce using rule 14 (declaration -> iteration_stmt .)
    do              reduce using rule 14 (declaration -> iteration_stmt .)
    if              reduce using rule 14 (declaration -> iteration_stmt .)
    function        reduce using rule 14 (declaration -> iteration_stmt .)
    ID              reduce using rule 14 (declaration -> iteration_stmt .)
    return          reduce using rule 14 (declaration -> iteration_stmt .)
    class           reduce using rule 14 (declaration -> iteration_stmt .)
    new             reduce using rule 14 (declaration -> iteration_stmt .)
    interface       reduce using rule 14 (declaration -> iteration_stmt .)
    trait           reduce using rule 14 (declaration -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 14 (declaration -> iteration_stmt .)
    for             reduce using rule 14 (declaration -> iteration_stmt .)
    foreach         reduce using rule 14 (declaration -> iteration_stmt .)
    switch          reduce using rule 14 (declaration -> iteration_stmt .)
    exit            reduce using rule 14 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 14 (declaration -> iteration_stmt .)
    array           reduce using rule 14 (declaration -> iteration_stmt .)
    pow             reduce using rule 14 (declaration -> iteration_stmt .)
    POW             reduce using rule 14 (declaration -> iteration_stmt .)
    abs             reduce using rule 14 (declaration -> iteration_stmt .)
    cos             reduce using rule 14 (declaration -> iteration_stmt .)
    deg2rad         reduce using rule 14 (declaration -> iteration_stmt .)
    rad2deg         reduce using rule 14 (declaration -> iteration_stmt .)
    die             reduce using rule 14 (declaration -> iteration_stmt .)
    exp             reduce using rule 14 (declaration -> iteration_stmt .)
    floor           reduce using rule 14 (declaration -> iteration_stmt .)
    isset           reduce using rule 14 (declaration -> iteration_stmt .)
    list            reduce using rule 14 (declaration -> iteration_stmt .)
    log             reduce using rule 14 (declaration -> iteration_stmt .)
    log10           reduce using rule 14 (declaration -> iteration_stmt .)
    max             reduce using rule 14 (declaration -> iteration_stmt .)
    min             reduce using rule 14 (declaration -> iteration_stmt .)
    rand            reduce using rule 14 (declaration -> iteration_stmt .)
    round           reduce using rule 14 (declaration -> iteration_stmt .)
    sin             reduce using rule 14 (declaration -> iteration_stmt .)
    sqrt            reduce using rule 14 (declaration -> iteration_stmt .)
    unset           reduce using rule 14 (declaration -> iteration_stmt .)
    CADENA          reduce using rule 14 (declaration -> iteration_stmt .)
    $end            reduce using rule 14 (declaration -> iteration_stmt .)
    RBLOCK          reduce using rule 14 (declaration -> iteration_stmt .)
    endwhile        reduce using rule 14 (declaration -> iteration_stmt .)
    private         reduce using rule 14 (declaration -> iteration_stmt .)
    protected       reduce using rule 14 (declaration -> iteration_stmt .)
    public          reduce using rule 14 (declaration -> iteration_stmt .)
    var             reduce using rule 14 (declaration -> iteration_stmt .)
    endfor          reduce using rule 14 (declaration -> iteration_stmt .)
    endforeach      reduce using rule 14 (declaration -> iteration_stmt .)
    break           reduce using rule 14 (declaration -> iteration_stmt .)
    endswitch       reduce using rule 14 (declaration -> iteration_stmt .)
    default         reduce using rule 14 (declaration -> iteration_stmt .)
    case            reduce using rule 14 (declaration -> iteration_stmt .)


state 15

    (15) declaration -> if_statement .

    COMMENT         reduce using rule 15 (declaration -> if_statement .)
    COMMENT_HASHTAG reduce using rule 15 (declaration -> if_statement .)
    COMMENT_MULTI   reduce using rule 15 (declaration -> if_statement .)
    empty           reduce using rule 15 (declaration -> if_statement .)
    include         reduce using rule 15 (declaration -> if_statement .)
    const           reduce using rule 15 (declaration -> if_statement .)
    print           reduce using rule 15 (declaration -> if_statement .)
    echo            reduce using rule 15 (declaration -> if_statement .)
    while           reduce using rule 15 (declaration -> if_statement .)
    do              reduce using rule 15 (declaration -> if_statement .)
    if              reduce using rule 15 (declaration -> if_statement .)
    function        reduce using rule 15 (declaration -> if_statement .)
    ID              reduce using rule 15 (declaration -> if_statement .)
    return          reduce using rule 15 (declaration -> if_statement .)
    class           reduce using rule 15 (declaration -> if_statement .)
    new             reduce using rule 15 (declaration -> if_statement .)
    interface       reduce using rule 15 (declaration -> if_statement .)
    trait           reduce using rule 15 (declaration -> if_statement .)
    CLOSE_TAG       reduce using rule 15 (declaration -> if_statement .)
    for             reduce using rule 15 (declaration -> if_statement .)
    foreach         reduce using rule 15 (declaration -> if_statement .)
    switch          reduce using rule 15 (declaration -> if_statement .)
    exit            reduce using rule 15 (declaration -> if_statement .)
    VARIABLE        reduce using rule 15 (declaration -> if_statement .)
    array           reduce using rule 15 (declaration -> if_statement .)
    pow             reduce using rule 15 (declaration -> if_statement .)
    POW             reduce using rule 15 (declaration -> if_statement .)
    abs             reduce using rule 15 (declaration -> if_statement .)
    cos             reduce using rule 15 (declaration -> if_statement .)
    deg2rad         reduce using rule 15 (declaration -> if_statement .)
    rad2deg         reduce using rule 15 (declaration -> if_statement .)
    die             reduce using rule 15 (declaration -> if_statement .)
    exp             reduce using rule 15 (declaration -> if_statement .)
    floor           reduce using rule 15 (declaration -> if_statement .)
    isset           reduce using rule 15 (declaration -> if_statement .)
    list            reduce using rule 15 (declaration -> if_statement .)
    log             reduce using rule 15 (declaration -> if_statement .)
    log10           reduce using rule 15 (declaration -> if_statement .)
    max             reduce using rule 15 (declaration -> if_statement .)
    min             reduce using rule 15 (declaration -> if_statement .)
    rand            reduce using rule 15 (declaration -> if_statement .)
    round           reduce using rule 15 (declaration -> if_statement .)
    sin             reduce using rule 15 (declaration -> if_statement .)
    sqrt            reduce using rule 15 (declaration -> if_statement .)
    unset           reduce using rule 15 (declaration -> if_statement .)
    CADENA          reduce using rule 15 (declaration -> if_statement .)
    $end            reduce using rule 15 (declaration -> if_statement .)
    RBLOCK          reduce using rule 15 (declaration -> if_statement .)
    endwhile        reduce using rule 15 (declaration -> if_statement .)
    private         reduce using rule 15 (declaration -> if_statement .)
    protected       reduce using rule 15 (declaration -> if_statement .)
    public          reduce using rule 15 (declaration -> if_statement .)
    var             reduce using rule 15 (declaration -> if_statement .)
    endfor          reduce using rule 15 (declaration -> if_statement .)
    endforeach      reduce using rule 15 (declaration -> if_statement .)
    break           reduce using rule 15 (declaration -> if_statement .)
    endswitch       reduce using rule 15 (declaration -> if_statement .)
    default         reduce using rule 15 (declaration -> if_statement .)
    case            reduce using rule 15 (declaration -> if_statement .)


state 16

    (16) declaration -> fun_declaration .

    COMMENT         reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_HASHTAG reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_MULTI   reduce using rule 16 (declaration -> fun_declaration .)
    empty           reduce using rule 16 (declaration -> fun_declaration .)
    include         reduce using rule 16 (declaration -> fun_declaration .)
    const           reduce using rule 16 (declaration -> fun_declaration .)
    print           reduce using rule 16 (declaration -> fun_declaration .)
    echo            reduce using rule 16 (declaration -> fun_declaration .)
    while           reduce using rule 16 (declaration -> fun_declaration .)
    do              reduce using rule 16 (declaration -> fun_declaration .)
    if              reduce using rule 16 (declaration -> fun_declaration .)
    function        reduce using rule 16 (declaration -> fun_declaration .)
    ID              reduce using rule 16 (declaration -> fun_declaration .)
    return          reduce using rule 16 (declaration -> fun_declaration .)
    class           reduce using rule 16 (declaration -> fun_declaration .)
    new             reduce using rule 16 (declaration -> fun_declaration .)
    interface       reduce using rule 16 (declaration -> fun_declaration .)
    trait           reduce using rule 16 (declaration -> fun_declaration .)
    CLOSE_TAG       reduce using rule 16 (declaration -> fun_declaration .)
    for             reduce using rule 16 (declaration -> fun_declaration .)
    foreach         reduce using rule 16 (declaration -> fun_declaration .)
    switch          reduce using rule 16 (declaration -> fun_declaration .)
    exit            reduce using rule 16 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 16 (declaration -> fun_declaration .)
    array           reduce using rule 16 (declaration -> fun_declaration .)
    pow             reduce using rule 16 (declaration -> fun_declaration .)
    POW             reduce using rule 16 (declaration -> fun_declaration .)
    abs             reduce using rule 16 (declaration -> fun_declaration .)
    cos             reduce using rule 16 (declaration -> fun_declaration .)
    deg2rad         reduce using rule 16 (declaration -> fun_declaration .)
    rad2deg         reduce using rule 16 (declaration -> fun_declaration .)
    die             reduce using rule 16 (declaration -> fun_declaration .)
    exp             reduce using rule 16 (declaration -> fun_declaration .)
    floor           reduce using rule 16 (declaration -> fun_declaration .)
    isset           reduce using rule 16 (declaration -> fun_declaration .)
    list            reduce using rule 16 (declaration -> fun_declaration .)
    log             reduce using rule 16 (declaration -> fun_declaration .)
    log10           reduce using rule 16 (declaration -> fun_declaration .)
    max             reduce using rule 16 (declaration -> fun_declaration .)
    min             reduce using rule 16 (declaration -> fun_declaration .)
    rand            reduce using rule 16 (declaration -> fun_declaration .)
    round           reduce using rule 16 (declaration -> fun_declaration .)
    sin             reduce using rule 16 (declaration -> fun_declaration .)
    sqrt            reduce using rule 16 (declaration -> fun_declaration .)
    unset           reduce using rule 16 (declaration -> fun_declaration .)
    CADENA          reduce using rule 16 (declaration -> fun_declaration .)
    $end            reduce using rule 16 (declaration -> fun_declaration .)
    RBLOCK          reduce using rule 16 (declaration -> fun_declaration .)
    endwhile        reduce using rule 16 (declaration -> fun_declaration .)
    private         reduce using rule 16 (declaration -> fun_declaration .)
    protected       reduce using rule 16 (declaration -> fun_declaration .)
    public          reduce using rule 16 (declaration -> fun_declaration .)
    var             reduce using rule 16 (declaration -> fun_declaration .)
    endfor          reduce using rule 16 (declaration -> fun_declaration .)
    endforeach      reduce using rule 16 (declaration -> fun_declaration .)
    break           reduce using rule 16 (declaration -> fun_declaration .)
    endswitch       reduce using rule 16 (declaration -> fun_declaration .)
    default         reduce using rule 16 (declaration -> fun_declaration .)
    case            reduce using rule 16 (declaration -> fun_declaration .)


state 17

    (17) declaration -> fun_call .

    COMMENT         reduce using rule 17 (declaration -> fun_call .)
    COMMENT_HASHTAG reduce using rule 17 (declaration -> fun_call .)
    COMMENT_MULTI   reduce using rule 17 (declaration -> fun_call .)
    empty           reduce using rule 17 (declaration -> fun_call .)
    include         reduce using rule 17 (declaration -> fun_call .)
    const           reduce using rule 17 (declaration -> fun_call .)
    print           reduce using rule 17 (declaration -> fun_call .)
    echo            reduce using rule 17 (declaration -> fun_call .)
    while           reduce using rule 17 (declaration -> fun_call .)
    do              reduce using rule 17 (declaration -> fun_call .)
    if              reduce using rule 17 (declaration -> fun_call .)
    function        reduce using rule 17 (declaration -> fun_call .)
    ID              reduce using rule 17 (declaration -> fun_call .)
    return          reduce using rule 17 (declaration -> fun_call .)
    class           reduce using rule 17 (declaration -> fun_call .)
    new             reduce using rule 17 (declaration -> fun_call .)
    interface       reduce using rule 17 (declaration -> fun_call .)
    trait           reduce using rule 17 (declaration -> fun_call .)
    CLOSE_TAG       reduce using rule 17 (declaration -> fun_call .)
    for             reduce using rule 17 (declaration -> fun_call .)
    foreach         reduce using rule 17 (declaration -> fun_call .)
    switch          reduce using rule 17 (declaration -> fun_call .)
    exit            reduce using rule 17 (declaration -> fun_call .)
    VARIABLE        reduce using rule 17 (declaration -> fun_call .)
    array           reduce using rule 17 (declaration -> fun_call .)
    pow             reduce using rule 17 (declaration -> fun_call .)
    POW             reduce using rule 17 (declaration -> fun_call .)
    abs             reduce using rule 17 (declaration -> fun_call .)
    cos             reduce using rule 17 (declaration -> fun_call .)
    deg2rad         reduce using rule 17 (declaration -> fun_call .)
    rad2deg         reduce using rule 17 (declaration -> fun_call .)
    die             reduce using rule 17 (declaration -> fun_call .)
    exp             reduce using rule 17 (declaration -> fun_call .)
    floor           reduce using rule 17 (declaration -> fun_call .)
    isset           reduce using rule 17 (declaration -> fun_call .)
    list            reduce using rule 17 (declaration -> fun_call .)
    log             reduce using rule 17 (declaration -> fun_call .)
    log10           reduce using rule 17 (declaration -> fun_call .)
    max             reduce using rule 17 (declaration -> fun_call .)
    min             reduce using rule 17 (declaration -> fun_call .)
    rand            reduce using rule 17 (declaration -> fun_call .)
    round           reduce using rule 17 (declaration -> fun_call .)
    sin             reduce using rule 17 (declaration -> fun_call .)
    sqrt            reduce using rule 17 (declaration -> fun_call .)
    unset           reduce using rule 17 (declaration -> fun_call .)
    CADENA          reduce using rule 17 (declaration -> fun_call .)
    $end            reduce using rule 17 (declaration -> fun_call .)
    RBLOCK          reduce using rule 17 (declaration -> fun_call .)
    endwhile        reduce using rule 17 (declaration -> fun_call .)
    private         reduce using rule 17 (declaration -> fun_call .)
    protected       reduce using rule 17 (declaration -> fun_call .)
    public          reduce using rule 17 (declaration -> fun_call .)
    var             reduce using rule 17 (declaration -> fun_call .)
    endfor          reduce using rule 17 (declaration -> fun_call .)
    endforeach      reduce using rule 17 (declaration -> fun_call .)
    break           reduce using rule 17 (declaration -> fun_call .)
    endswitch       reduce using rule 17 (declaration -> fun_call .)
    default         reduce using rule 17 (declaration -> fun_call .)
    case            reduce using rule 17 (declaration -> fun_call .)


state 18

    (18) declaration -> return_statement .

    COMMENT         reduce using rule 18 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> return_statement .)
    empty           reduce using rule 18 (declaration -> return_statement .)
    include         reduce using rule 18 (declaration -> return_statement .)
    const           reduce using rule 18 (declaration -> return_statement .)
    print           reduce using rule 18 (declaration -> return_statement .)
    echo            reduce using rule 18 (declaration -> return_statement .)
    while           reduce using rule 18 (declaration -> return_statement .)
    do              reduce using rule 18 (declaration -> return_statement .)
    if              reduce using rule 18 (declaration -> return_statement .)
    function        reduce using rule 18 (declaration -> return_statement .)
    ID              reduce using rule 18 (declaration -> return_statement .)
    return          reduce using rule 18 (declaration -> return_statement .)
    class           reduce using rule 18 (declaration -> return_statement .)
    new             reduce using rule 18 (declaration -> return_statement .)
    interface       reduce using rule 18 (declaration -> return_statement .)
    trait           reduce using rule 18 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 18 (declaration -> return_statement .)
    for             reduce using rule 18 (declaration -> return_statement .)
    foreach         reduce using rule 18 (declaration -> return_statement .)
    switch          reduce using rule 18 (declaration -> return_statement .)
    exit            reduce using rule 18 (declaration -> return_statement .)
    VARIABLE        reduce using rule 18 (declaration -> return_statement .)
    array           reduce using rule 18 (declaration -> return_statement .)
    pow             reduce using rule 18 (declaration -> return_statement .)
    POW             reduce using rule 18 (declaration -> return_statement .)
    abs             reduce using rule 18 (declaration -> return_statement .)
    cos             reduce using rule 18 (declaration -> return_statement .)
    deg2rad         reduce using rule 18 (declaration -> return_statement .)
    rad2deg         reduce using rule 18 (declaration -> return_statement .)
    die             reduce using rule 18 (declaration -> return_statement .)
    exp             reduce using rule 18 (declaration -> return_statement .)
    floor           reduce using rule 18 (declaration -> return_statement .)
    isset           reduce using rule 18 (declaration -> return_statement .)
    list            reduce using rule 18 (declaration -> return_statement .)
    log             reduce using rule 18 (declaration -> return_statement .)
    log10           reduce using rule 18 (declaration -> return_statement .)
    max             reduce using rule 18 (declaration -> return_statement .)
    min             reduce using rule 18 (declaration -> return_statement .)
    rand            reduce using rule 18 (declaration -> return_statement .)
    round           reduce using rule 18 (declaration -> return_statement .)
    sin             reduce using rule 18 (declaration -> return_statement .)
    sqrt            reduce using rule 18 (declaration -> return_statement .)
    unset           reduce using rule 18 (declaration -> return_statement .)
    CADENA          reduce using rule 18 (declaration -> return_statement .)
    $end            reduce using rule 18 (declaration -> return_statement .)
    RBLOCK          reduce using rule 18 (declaration -> return_statement .)
    endwhile        reduce using rule 18 (declaration -> return_statement .)
    private         reduce using rule 18 (declaration -> return_statement .)
    protected       reduce using rule 18 (declaration -> return_statement .)
    public          reduce using rule 18 (declaration -> return_statement .)
    var             reduce using rule 18 (declaration -> return_statement .)
    endfor          reduce using rule 18 (declaration -> return_statement .)
    endforeach      reduce using rule 18 (declaration -> return_statement .)
    break           reduce using rule 18 (declaration -> return_statement .)
    endswitch       reduce using rule 18 (declaration -> return_statement .)
    default         reduce using rule 18 (declaration -> return_statement .)
    case            reduce using rule 18 (declaration -> return_statement .)


state 19

    (19) declaration -> class_declaration .

    COMMENT         reduce using rule 19 (declaration -> class_declaration .)
    COMMENT_HASHTAG reduce using rule 19 (declaration -> class_declaration .)
    COMMENT_MULTI   reduce using rule 19 (declaration -> class_declaration .)
    empty           reduce using rule 19 (declaration -> class_declaration .)
    include         reduce using rule 19 (declaration -> class_declaration .)
    const           reduce using rule 19 (declaration -> class_declaration .)
    print           reduce using rule 19 (declaration -> class_declaration .)
    echo            reduce using rule 19 (declaration -> class_declaration .)
    while           reduce using rule 19 (declaration -> class_declaration .)
    do              reduce using rule 19 (declaration -> class_declaration .)
    if              reduce using rule 19 (declaration -> class_declaration .)
    function        reduce using rule 19 (declaration -> class_declaration .)
    ID              reduce using rule 19 (declaration -> class_declaration .)
    return          reduce using rule 19 (declaration -> class_declaration .)
    class           reduce using rule 19 (declaration -> class_declaration .)
    new             reduce using rule 19 (declaration -> class_declaration .)
    interface       reduce using rule 19 (declaration -> class_declaration .)
    trait           reduce using rule 19 (declaration -> class_declaration .)
    CLOSE_TAG       reduce using rule 19 (declaration -> class_declaration .)
    for             reduce using rule 19 (declaration -> class_declaration .)
    foreach         reduce using rule 19 (declaration -> class_declaration .)
    switch          reduce using rule 19 (declaration -> class_declaration .)
    exit            reduce using rule 19 (declaration -> class_declaration .)
    VARIABLE        reduce using rule 19 (declaration -> class_declaration .)
    array           reduce using rule 19 (declaration -> class_declaration .)
    pow             reduce using rule 19 (declaration -> class_declaration .)
    POW             reduce using rule 19 (declaration -> class_declaration .)
    abs             reduce using rule 19 (declaration -> class_declaration .)
    cos             reduce using rule 19 (declaration -> class_declaration .)
    deg2rad         reduce using rule 19 (declaration -> class_declaration .)
    rad2deg         reduce using rule 19 (declaration -> class_declaration .)
    die             reduce using rule 19 (declaration -> class_declaration .)
    exp             reduce using rule 19 (declaration -> class_declaration .)
    floor           reduce using rule 19 (declaration -> class_declaration .)
    isset           reduce using rule 19 (declaration -> class_declaration .)
    list            reduce using rule 19 (declaration -> class_declaration .)
    log             reduce using rule 19 (declaration -> class_declaration .)
    log10           reduce using rule 19 (declaration -> class_declaration .)
    max             reduce using rule 19 (declaration -> class_declaration .)
    min             reduce using rule 19 (declaration -> class_declaration .)
    rand            reduce using rule 19 (declaration -> class_declaration .)
    round           reduce using rule 19 (declaration -> class_declaration .)
    sin             reduce using rule 19 (declaration -> class_declaration .)
    sqrt            reduce using rule 19 (declaration -> class_declaration .)
    unset           reduce using rule 19 (declaration -> class_declaration .)
    CADENA          reduce using rule 19 (declaration -> class_declaration .)
    $end            reduce using rule 19 (declaration -> class_declaration .)
    RBLOCK          reduce using rule 19 (declaration -> class_declaration .)
    endwhile        reduce using rule 19 (declaration -> class_declaration .)
    private         reduce using rule 19 (declaration -> class_declaration .)
    protected       reduce using rule 19 (declaration -> class_declaration .)
    public          reduce using rule 19 (declaration -> class_declaration .)
    var             reduce using rule 19 (declaration -> class_declaration .)
    endfor          reduce using rule 19 (declaration -> class_declaration .)
    endforeach      reduce using rule 19 (declaration -> class_declaration .)
    break           reduce using rule 19 (declaration -> class_declaration .)
    endswitch       reduce using rule 19 (declaration -> class_declaration .)
    default         reduce using rule 19 (declaration -> class_declaration .)
    case            reduce using rule 19 (declaration -> class_declaration .)


state 20

    (20) declaration -> create_obj_declaration .

    COMMENT         reduce using rule 20 (declaration -> create_obj_declaration .)
    COMMENT_HASHTAG reduce using rule 20 (declaration -> create_obj_declaration .)
    COMMENT_MULTI   reduce using rule 20 (declaration -> create_obj_declaration .)
    empty           reduce using rule 20 (declaration -> create_obj_declaration .)
    include         reduce using rule 20 (declaration -> create_obj_declaration .)
    const           reduce using rule 20 (declaration -> create_obj_declaration .)
    print           reduce using rule 20 (declaration -> create_obj_declaration .)
    echo            reduce using rule 20 (declaration -> create_obj_declaration .)
    while           reduce using rule 20 (declaration -> create_obj_declaration .)
    do              reduce using rule 20 (declaration -> create_obj_declaration .)
    if              reduce using rule 20 (declaration -> create_obj_declaration .)
    function        reduce using rule 20 (declaration -> create_obj_declaration .)
    ID              reduce using rule 20 (declaration -> create_obj_declaration .)
    return          reduce using rule 20 (declaration -> create_obj_declaration .)
    class           reduce using rule 20 (declaration -> create_obj_declaration .)
    new             reduce using rule 20 (declaration -> create_obj_declaration .)
    interface       reduce using rule 20 (declaration -> create_obj_declaration .)
    trait           reduce using rule 20 (declaration -> create_obj_declaration .)
    CLOSE_TAG       reduce using rule 20 (declaration -> create_obj_declaration .)
    for             reduce using rule 20 (declaration -> create_obj_declaration .)
    foreach         reduce using rule 20 (declaration -> create_obj_declaration .)
    switch          reduce using rule 20 (declaration -> create_obj_declaration .)
    exit            reduce using rule 20 (declaration -> create_obj_declaration .)
    VARIABLE        reduce using rule 20 (declaration -> create_obj_declaration .)
    array           reduce using rule 20 (declaration -> create_obj_declaration .)
    pow             reduce using rule 20 (declaration -> create_obj_declaration .)
    POW             reduce using rule 20 (declaration -> create_obj_declaration .)
    abs             reduce using rule 20 (declaration -> create_obj_declaration .)
    cos             reduce using rule 20 (declaration -> create_obj_declaration .)
    deg2rad         reduce using rule 20 (declaration -> create_obj_declaration .)
    rad2deg         reduce using rule 20 (declaration -> create_obj_declaration .)
    die             reduce using rule 20 (declaration -> create_obj_declaration .)
    exp             reduce using rule 20 (declaration -> create_obj_declaration .)
    floor           reduce using rule 20 (declaration -> create_obj_declaration .)
    isset           reduce using rule 20 (declaration -> create_obj_declaration .)
    list            reduce using rule 20 (declaration -> create_obj_declaration .)
    log             reduce using rule 20 (declaration -> create_obj_declaration .)
    log10           reduce using rule 20 (declaration -> create_obj_declaration .)
    max             reduce using rule 20 (declaration -> create_obj_declaration .)
    min             reduce using rule 20 (declaration -> create_obj_declaration .)
    rand            reduce using rule 20 (declaration -> create_obj_declaration .)
    round           reduce using rule 20 (declaration -> create_obj_declaration .)
    sin             reduce using rule 20 (declaration -> create_obj_declaration .)
    sqrt            reduce using rule 20 (declaration -> create_obj_declaration .)
    unset           reduce using rule 20 (declaration -> create_obj_declaration .)
    CADENA          reduce using rule 20 (declaration -> create_obj_declaration .)
    $end            reduce using rule 20 (declaration -> create_obj_declaration .)
    RBLOCK          reduce using rule 20 (declaration -> create_obj_declaration .)
    endwhile        reduce using rule 20 (declaration -> create_obj_declaration .)
    private         reduce using rule 20 (declaration -> create_obj_declaration .)
    protected       reduce using rule 20 (declaration -> create_obj_declaration .)
    public          reduce using rule 20 (declaration -> create_obj_declaration .)
    var             reduce using rule 20 (declaration -> create_obj_declaration .)
    endfor          reduce using rule 20 (declaration -> create_obj_declaration .)
    endforeach      reduce using rule 20 (declaration -> create_obj_declaration .)
    break           reduce using rule 20 (declaration -> create_obj_declaration .)
    endswitch       reduce using rule 20 (declaration -> create_obj_declaration .)
    default         reduce using rule 20 (declaration -> create_obj_declaration .)
    case            reduce using rule 20 (declaration -> create_obj_declaration .)


state 21

    (21) declaration -> interface_declaration .

    COMMENT         reduce using rule 21 (declaration -> interface_declaration .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> interface_declaration .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> interface_declaration .)
    empty           reduce using rule 21 (declaration -> interface_declaration .)
    include         reduce using rule 21 (declaration -> interface_declaration .)
    const           reduce using rule 21 (declaration -> interface_declaration .)
    print           reduce using rule 21 (declaration -> interface_declaration .)
    echo            reduce using rule 21 (declaration -> interface_declaration .)
    while           reduce using rule 21 (declaration -> interface_declaration .)
    do              reduce using rule 21 (declaration -> interface_declaration .)
    if              reduce using rule 21 (declaration -> interface_declaration .)
    function        reduce using rule 21 (declaration -> interface_declaration .)
    ID              reduce using rule 21 (declaration -> interface_declaration .)
    return          reduce using rule 21 (declaration -> interface_declaration .)
    class           reduce using rule 21 (declaration -> interface_declaration .)
    new             reduce using rule 21 (declaration -> interface_declaration .)
    interface       reduce using rule 21 (declaration -> interface_declaration .)
    trait           reduce using rule 21 (declaration -> interface_declaration .)
    CLOSE_TAG       reduce using rule 21 (declaration -> interface_declaration .)
    for             reduce using rule 21 (declaration -> interface_declaration .)
    foreach         reduce using rule 21 (declaration -> interface_declaration .)
    switch          reduce using rule 21 (declaration -> interface_declaration .)
    exit            reduce using rule 21 (declaration -> interface_declaration .)
    VARIABLE        reduce using rule 21 (declaration -> interface_declaration .)
    array           reduce using rule 21 (declaration -> interface_declaration .)
    pow             reduce using rule 21 (declaration -> interface_declaration .)
    POW             reduce using rule 21 (declaration -> interface_declaration .)
    abs             reduce using rule 21 (declaration -> interface_declaration .)
    cos             reduce using rule 21 (declaration -> interface_declaration .)
    deg2rad         reduce using rule 21 (declaration -> interface_declaration .)
    rad2deg         reduce using rule 21 (declaration -> interface_declaration .)
    die             reduce using rule 21 (declaration -> interface_declaration .)
    exp             reduce using rule 21 (declaration -> interface_declaration .)
    floor           reduce using rule 21 (declaration -> interface_declaration .)
    isset           reduce using rule 21 (declaration -> interface_declaration .)
    list            reduce using rule 21 (declaration -> interface_declaration .)
    log             reduce using rule 21 (declaration -> interface_declaration .)
    log10           reduce using rule 21 (declaration -> interface_declaration .)
    max             reduce using rule 21 (declaration -> interface_declaration .)
    min             reduce using rule 21 (declaration -> interface_declaration .)
    rand            reduce using rule 21 (declaration -> interface_declaration .)
    round           reduce using rule 21 (declaration -> interface_declaration .)
    sin             reduce using rule 21 (declaration -> interface_declaration .)
    sqrt            reduce using rule 21 (declaration -> interface_declaration .)
    unset           reduce using rule 21 (declaration -> interface_declaration .)
    CADENA          reduce using rule 21 (declaration -> interface_declaration .)
    $end            reduce using rule 21 (declaration -> interface_declaration .)
    RBLOCK          reduce using rule 21 (declaration -> interface_declaration .)
    endwhile        reduce using rule 21 (declaration -> interface_declaration .)
    private         reduce using rule 21 (declaration -> interface_declaration .)
    protected       reduce using rule 21 (declaration -> interface_declaration .)
    public          reduce using rule 21 (declaration -> interface_declaration .)
    var             reduce using rule 21 (declaration -> interface_declaration .)
    endfor          reduce using rule 21 (declaration -> interface_declaration .)
    endforeach      reduce using rule 21 (declaration -> interface_declaration .)
    break           reduce using rule 21 (declaration -> interface_declaration .)
    endswitch       reduce using rule 21 (declaration -> interface_declaration .)
    default         reduce using rule 21 (declaration -> interface_declaration .)
    case            reduce using rule 21 (declaration -> interface_declaration .)


state 22

    (22) declaration -> trait_declaration .

    COMMENT         reduce using rule 22 (declaration -> trait_declaration .)
    COMMENT_HASHTAG reduce using rule 22 (declaration -> trait_declaration .)
    COMMENT_MULTI   reduce using rule 22 (declaration -> trait_declaration .)
    empty           reduce using rule 22 (declaration -> trait_declaration .)
    include         reduce using rule 22 (declaration -> trait_declaration .)
    const           reduce using rule 22 (declaration -> trait_declaration .)
    print           reduce using rule 22 (declaration -> trait_declaration .)
    echo            reduce using rule 22 (declaration -> trait_declaration .)
    while           reduce using rule 22 (declaration -> trait_declaration .)
    do              reduce using rule 22 (declaration -> trait_declaration .)
    if              reduce using rule 22 (declaration -> trait_declaration .)
    function        reduce using rule 22 (declaration -> trait_declaration .)
    ID              reduce using rule 22 (declaration -> trait_declaration .)
    return          reduce using rule 22 (declaration -> trait_declaration .)
    class           reduce using rule 22 (declaration -> trait_declaration .)
    new             reduce using rule 22 (declaration -> trait_declaration .)
    interface       reduce using rule 22 (declaration -> trait_declaration .)
    trait           reduce using rule 22 (declaration -> trait_declaration .)
    CLOSE_TAG       reduce using rule 22 (declaration -> trait_declaration .)
    for             reduce using rule 22 (declaration -> trait_declaration .)
    foreach         reduce using rule 22 (declaration -> trait_declaration .)
    switch          reduce using rule 22 (declaration -> trait_declaration .)
    exit            reduce using rule 22 (declaration -> trait_declaration .)
    VARIABLE        reduce using rule 22 (declaration -> trait_declaration .)
    array           reduce using rule 22 (declaration -> trait_declaration .)
    pow             reduce using rule 22 (declaration -> trait_declaration .)
    POW             reduce using rule 22 (declaration -> trait_declaration .)
    abs             reduce using rule 22 (declaration -> trait_declaration .)
    cos             reduce using rule 22 (declaration -> trait_declaration .)
    deg2rad         reduce using rule 22 (declaration -> trait_declaration .)
    rad2deg         reduce using rule 22 (declaration -> trait_declaration .)
    die             reduce using rule 22 (declaration -> trait_declaration .)
    exp             reduce using rule 22 (declaration -> trait_declaration .)
    floor           reduce using rule 22 (declaration -> trait_declaration .)
    isset           reduce using rule 22 (declaration -> trait_declaration .)
    list            reduce using rule 22 (declaration -> trait_declaration .)
    log             reduce using rule 22 (declaration -> trait_declaration .)
    log10           reduce using rule 22 (declaration -> trait_declaration .)
    max             reduce using rule 22 (declaration -> trait_declaration .)
    min             reduce using rule 22 (declaration -> trait_declaration .)
    rand            reduce using rule 22 (declaration -> trait_declaration .)
    round           reduce using rule 22 (declaration -> trait_declaration .)
    sin             reduce using rule 22 (declaration -> trait_declaration .)
    sqrt            reduce using rule 22 (declaration -> trait_declaration .)
    unset           reduce using rule 22 (declaration -> trait_declaration .)
    CADENA          reduce using rule 22 (declaration -> trait_declaration .)
    $end            reduce using rule 22 (declaration -> trait_declaration .)
    RBLOCK          reduce using rule 22 (declaration -> trait_declaration .)
    endwhile        reduce using rule 22 (declaration -> trait_declaration .)
    private         reduce using rule 22 (declaration -> trait_declaration .)
    protected       reduce using rule 22 (declaration -> trait_declaration .)
    public          reduce using rule 22 (declaration -> trait_declaration .)
    var             reduce using rule 22 (declaration -> trait_declaration .)
    endfor          reduce using rule 22 (declaration -> trait_declaration .)
    endforeach      reduce using rule 22 (declaration -> trait_declaration .)
    break           reduce using rule 22 (declaration -> trait_declaration .)
    endswitch       reduce using rule 22 (declaration -> trait_declaration .)
    default         reduce using rule 22 (declaration -> trait_declaration .)
    case            reduce using rule 22 (declaration -> trait_declaration .)


state 23

    (23) declaration -> footer_declaration .

    COMMENT         reduce using rule 23 (declaration -> footer_declaration .)
    COMMENT_HASHTAG reduce using rule 23 (declaration -> footer_declaration .)
    COMMENT_MULTI   reduce using rule 23 (declaration -> footer_declaration .)
    empty           reduce using rule 23 (declaration -> footer_declaration .)
    include         reduce using rule 23 (declaration -> footer_declaration .)
    const           reduce using rule 23 (declaration -> footer_declaration .)
    print           reduce using rule 23 (declaration -> footer_declaration .)
    echo            reduce using rule 23 (declaration -> footer_declaration .)
    while           reduce using rule 23 (declaration -> footer_declaration .)
    do              reduce using rule 23 (declaration -> footer_declaration .)
    if              reduce using rule 23 (declaration -> footer_declaration .)
    function        reduce using rule 23 (declaration -> footer_declaration .)
    ID              reduce using rule 23 (declaration -> footer_declaration .)
    return          reduce using rule 23 (declaration -> footer_declaration .)
    class           reduce using rule 23 (declaration -> footer_declaration .)
    new             reduce using rule 23 (declaration -> footer_declaration .)
    interface       reduce using rule 23 (declaration -> footer_declaration .)
    trait           reduce using rule 23 (declaration -> footer_declaration .)
    CLOSE_TAG       reduce using rule 23 (declaration -> footer_declaration .)
    for             reduce using rule 23 (declaration -> footer_declaration .)
    foreach         reduce using rule 23 (declaration -> footer_declaration .)
    switch          reduce using rule 23 (declaration -> footer_declaration .)
    exit            reduce using rule 23 (declaration -> footer_declaration .)
    VARIABLE        reduce using rule 23 (declaration -> footer_declaration .)
    array           reduce using rule 23 (declaration -> footer_declaration .)
    pow             reduce using rule 23 (declaration -> footer_declaration .)
    POW             reduce using rule 23 (declaration -> footer_declaration .)
    abs             reduce using rule 23 (declaration -> footer_declaration .)
    cos             reduce using rule 23 (declaration -> footer_declaration .)
    deg2rad         reduce using rule 23 (declaration -> footer_declaration .)
    rad2deg         reduce using rule 23 (declaration -> footer_declaration .)
    die             reduce using rule 23 (declaration -> footer_declaration .)
    exp             reduce using rule 23 (declaration -> footer_declaration .)
    floor           reduce using rule 23 (declaration -> footer_declaration .)
    isset           reduce using rule 23 (declaration -> footer_declaration .)
    list            reduce using rule 23 (declaration -> footer_declaration .)
    log             reduce using rule 23 (declaration -> footer_declaration .)
    log10           reduce using rule 23 (declaration -> footer_declaration .)
    max             reduce using rule 23 (declaration -> footer_declaration .)
    min             reduce using rule 23 (declaration -> footer_declaration .)
    rand            reduce using rule 23 (declaration -> footer_declaration .)
    round           reduce using rule 23 (declaration -> footer_declaration .)
    sin             reduce using rule 23 (declaration -> footer_declaration .)
    sqrt            reduce using rule 23 (declaration -> footer_declaration .)
    unset           reduce using rule 23 (declaration -> footer_declaration .)
    CADENA          reduce using rule 23 (declaration -> footer_declaration .)
    $end            reduce using rule 23 (declaration -> footer_declaration .)
    RBLOCK          reduce using rule 23 (declaration -> footer_declaration .)
    endwhile        reduce using rule 23 (declaration -> footer_declaration .)
    private         reduce using rule 23 (declaration -> footer_declaration .)
    protected       reduce using rule 23 (declaration -> footer_declaration .)
    public          reduce using rule 23 (declaration -> footer_declaration .)
    var             reduce using rule 23 (declaration -> footer_declaration .)
    endfor          reduce using rule 23 (declaration -> footer_declaration .)
    endforeach      reduce using rule 23 (declaration -> footer_declaration .)
    break           reduce using rule 23 (declaration -> footer_declaration .)
    endswitch       reduce using rule 23 (declaration -> footer_declaration .)
    default         reduce using rule 23 (declaration -> footer_declaration .)
    case            reduce using rule 23 (declaration -> footer_declaration .)


state 24

    (24) declaration -> for_loop .

    COMMENT         reduce using rule 24 (declaration -> for_loop .)
    COMMENT_HASHTAG reduce using rule 24 (declaration -> for_loop .)
    COMMENT_MULTI   reduce using rule 24 (declaration -> for_loop .)
    empty           reduce using rule 24 (declaration -> for_loop .)
    include         reduce using rule 24 (declaration -> for_loop .)
    const           reduce using rule 24 (declaration -> for_loop .)
    print           reduce using rule 24 (declaration -> for_loop .)
    echo            reduce using rule 24 (declaration -> for_loop .)
    while           reduce using rule 24 (declaration -> for_loop .)
    do              reduce using rule 24 (declaration -> for_loop .)
    if              reduce using rule 24 (declaration -> for_loop .)
    function        reduce using rule 24 (declaration -> for_loop .)
    ID              reduce using rule 24 (declaration -> for_loop .)
    return          reduce using rule 24 (declaration -> for_loop .)
    class           reduce using rule 24 (declaration -> for_loop .)
    new             reduce using rule 24 (declaration -> for_loop .)
    interface       reduce using rule 24 (declaration -> for_loop .)
    trait           reduce using rule 24 (declaration -> for_loop .)
    CLOSE_TAG       reduce using rule 24 (declaration -> for_loop .)
    for             reduce using rule 24 (declaration -> for_loop .)
    foreach         reduce using rule 24 (declaration -> for_loop .)
    switch          reduce using rule 24 (declaration -> for_loop .)
    exit            reduce using rule 24 (declaration -> for_loop .)
    VARIABLE        reduce using rule 24 (declaration -> for_loop .)
    array           reduce using rule 24 (declaration -> for_loop .)
    pow             reduce using rule 24 (declaration -> for_loop .)
    POW             reduce using rule 24 (declaration -> for_loop .)
    abs             reduce using rule 24 (declaration -> for_loop .)
    cos             reduce using rule 24 (declaration -> for_loop .)
    deg2rad         reduce using rule 24 (declaration -> for_loop .)
    rad2deg         reduce using rule 24 (declaration -> for_loop .)
    die             reduce using rule 24 (declaration -> for_loop .)
    exp             reduce using rule 24 (declaration -> for_loop .)
    floor           reduce using rule 24 (declaration -> for_loop .)
    isset           reduce using rule 24 (declaration -> for_loop .)
    list            reduce using rule 24 (declaration -> for_loop .)
    log             reduce using rule 24 (declaration -> for_loop .)
    log10           reduce using rule 24 (declaration -> for_loop .)
    max             reduce using rule 24 (declaration -> for_loop .)
    min             reduce using rule 24 (declaration -> for_loop .)
    rand            reduce using rule 24 (declaration -> for_loop .)
    round           reduce using rule 24 (declaration -> for_loop .)
    sin             reduce using rule 24 (declaration -> for_loop .)
    sqrt            reduce using rule 24 (declaration -> for_loop .)
    unset           reduce using rule 24 (declaration -> for_loop .)
    CADENA          reduce using rule 24 (declaration -> for_loop .)
    $end            reduce using rule 24 (declaration -> for_loop .)
    RBLOCK          reduce using rule 24 (declaration -> for_loop .)
    endwhile        reduce using rule 24 (declaration -> for_loop .)
    private         reduce using rule 24 (declaration -> for_loop .)
    protected       reduce using rule 24 (declaration -> for_loop .)
    public          reduce using rule 24 (declaration -> for_loop .)
    var             reduce using rule 24 (declaration -> for_loop .)
    endfor          reduce using rule 24 (declaration -> for_loop .)
    endforeach      reduce using rule 24 (declaration -> for_loop .)
    break           reduce using rule 24 (declaration -> for_loop .)
    endswitch       reduce using rule 24 (declaration -> for_loop .)
    default         reduce using rule 24 (declaration -> for_loop .)
    case            reduce using rule 24 (declaration -> for_loop .)


state 25

    (25) declaration -> foreach_loop .

    COMMENT         reduce using rule 25 (declaration -> foreach_loop .)
    COMMENT_HASHTAG reduce using rule 25 (declaration -> foreach_loop .)
    COMMENT_MULTI   reduce using rule 25 (declaration -> foreach_loop .)
    empty           reduce using rule 25 (declaration -> foreach_loop .)
    include         reduce using rule 25 (declaration -> foreach_loop .)
    const           reduce using rule 25 (declaration -> foreach_loop .)
    print           reduce using rule 25 (declaration -> foreach_loop .)
    echo            reduce using rule 25 (declaration -> foreach_loop .)
    while           reduce using rule 25 (declaration -> foreach_loop .)
    do              reduce using rule 25 (declaration -> foreach_loop .)
    if              reduce using rule 25 (declaration -> foreach_loop .)
    function        reduce using rule 25 (declaration -> foreach_loop .)
    ID              reduce using rule 25 (declaration -> foreach_loop .)
    return          reduce using rule 25 (declaration -> foreach_loop .)
    class           reduce using rule 25 (declaration -> foreach_loop .)
    new             reduce using rule 25 (declaration -> foreach_loop .)
    interface       reduce using rule 25 (declaration -> foreach_loop .)
    trait           reduce using rule 25 (declaration -> foreach_loop .)
    CLOSE_TAG       reduce using rule 25 (declaration -> foreach_loop .)
    for             reduce using rule 25 (declaration -> foreach_loop .)
    foreach         reduce using rule 25 (declaration -> foreach_loop .)
    switch          reduce using rule 25 (declaration -> foreach_loop .)
    exit            reduce using rule 25 (declaration -> foreach_loop .)
    VARIABLE        reduce using rule 25 (declaration -> foreach_loop .)
    array           reduce using rule 25 (declaration -> foreach_loop .)
    pow             reduce using rule 25 (declaration -> foreach_loop .)
    POW             reduce using rule 25 (declaration -> foreach_loop .)
    abs             reduce using rule 25 (declaration -> foreach_loop .)
    cos             reduce using rule 25 (declaration -> foreach_loop .)
    deg2rad         reduce using rule 25 (declaration -> foreach_loop .)
    rad2deg         reduce using rule 25 (declaration -> foreach_loop .)
    die             reduce using rule 25 (declaration -> foreach_loop .)
    exp             reduce using rule 25 (declaration -> foreach_loop .)
    floor           reduce using rule 25 (declaration -> foreach_loop .)
    isset           reduce using rule 25 (declaration -> foreach_loop .)
    list            reduce using rule 25 (declaration -> foreach_loop .)
    log             reduce using rule 25 (declaration -> foreach_loop .)
    log10           reduce using rule 25 (declaration -> foreach_loop .)
    max             reduce using rule 25 (declaration -> foreach_loop .)
    min             reduce using rule 25 (declaration -> foreach_loop .)
    rand            reduce using rule 25 (declaration -> foreach_loop .)
    round           reduce using rule 25 (declaration -> foreach_loop .)
    sin             reduce using rule 25 (declaration -> foreach_loop .)
    sqrt            reduce using rule 25 (declaration -> foreach_loop .)
    unset           reduce using rule 25 (declaration -> foreach_loop .)
    CADENA          reduce using rule 25 (declaration -> foreach_loop .)
    $end            reduce using rule 25 (declaration -> foreach_loop .)
    RBLOCK          reduce using rule 25 (declaration -> foreach_loop .)
    endwhile        reduce using rule 25 (declaration -> foreach_loop .)
    private         reduce using rule 25 (declaration -> foreach_loop .)
    protected       reduce using rule 25 (declaration -> foreach_loop .)
    public          reduce using rule 25 (declaration -> foreach_loop .)
    var             reduce using rule 25 (declaration -> foreach_loop .)
    endfor          reduce using rule 25 (declaration -> foreach_loop .)
    endforeach      reduce using rule 25 (declaration -> foreach_loop .)
    break           reduce using rule 25 (declaration -> foreach_loop .)
    endswitch       reduce using rule 25 (declaration -> foreach_loop .)
    default         reduce using rule 25 (declaration -> foreach_loop .)
    case            reduce using rule 25 (declaration -> foreach_loop .)


state 26

    (26) declaration -> switch_statement .

    COMMENT         reduce using rule 26 (declaration -> switch_statement .)
    COMMENT_HASHTAG reduce using rule 26 (declaration -> switch_statement .)
    COMMENT_MULTI   reduce using rule 26 (declaration -> switch_statement .)
    empty           reduce using rule 26 (declaration -> switch_statement .)
    include         reduce using rule 26 (declaration -> switch_statement .)
    const           reduce using rule 26 (declaration -> switch_statement .)
    print           reduce using rule 26 (declaration -> switch_statement .)
    echo            reduce using rule 26 (declaration -> switch_statement .)
    while           reduce using rule 26 (declaration -> switch_statement .)
    do              reduce using rule 26 (declaration -> switch_statement .)
    if              reduce using rule 26 (declaration -> switch_statement .)
    function        reduce using rule 26 (declaration -> switch_statement .)
    ID              reduce using rule 26 (declaration -> switch_statement .)
    return          reduce using rule 26 (declaration -> switch_statement .)
    class           reduce using rule 26 (declaration -> switch_statement .)
    new             reduce using rule 26 (declaration -> switch_statement .)
    interface       reduce using rule 26 (declaration -> switch_statement .)
    trait           reduce using rule 26 (declaration -> switch_statement .)
    CLOSE_TAG       reduce using rule 26 (declaration -> switch_statement .)
    for             reduce using rule 26 (declaration -> switch_statement .)
    foreach         reduce using rule 26 (declaration -> switch_statement .)
    switch          reduce using rule 26 (declaration -> switch_statement .)
    exit            reduce using rule 26 (declaration -> switch_statement .)
    VARIABLE        reduce using rule 26 (declaration -> switch_statement .)
    array           reduce using rule 26 (declaration -> switch_statement .)
    pow             reduce using rule 26 (declaration -> switch_statement .)
    POW             reduce using rule 26 (declaration -> switch_statement .)
    abs             reduce using rule 26 (declaration -> switch_statement .)
    cos             reduce using rule 26 (declaration -> switch_statement .)
    deg2rad         reduce using rule 26 (declaration -> switch_statement .)
    rad2deg         reduce using rule 26 (declaration -> switch_statement .)
    die             reduce using rule 26 (declaration -> switch_statement .)
    exp             reduce using rule 26 (declaration -> switch_statement .)
    floor           reduce using rule 26 (declaration -> switch_statement .)
    isset           reduce using rule 26 (declaration -> switch_statement .)
    list            reduce using rule 26 (declaration -> switch_statement .)
    log             reduce using rule 26 (declaration -> switch_statement .)
    log10           reduce using rule 26 (declaration -> switch_statement .)
    max             reduce using rule 26 (declaration -> switch_statement .)
    min             reduce using rule 26 (declaration -> switch_statement .)
    rand            reduce using rule 26 (declaration -> switch_statement .)
    round           reduce using rule 26 (declaration -> switch_statement .)
    sin             reduce using rule 26 (declaration -> switch_statement .)
    sqrt            reduce using rule 26 (declaration -> switch_statement .)
    unset           reduce using rule 26 (declaration -> switch_statement .)
    CADENA          reduce using rule 26 (declaration -> switch_statement .)
    $end            reduce using rule 26 (declaration -> switch_statement .)
    RBLOCK          reduce using rule 26 (declaration -> switch_statement .)
    endwhile        reduce using rule 26 (declaration -> switch_statement .)
    private         reduce using rule 26 (declaration -> switch_statement .)
    protected       reduce using rule 26 (declaration -> switch_statement .)
    public          reduce using rule 26 (declaration -> switch_statement .)
    var             reduce using rule 26 (declaration -> switch_statement .)
    endfor          reduce using rule 26 (declaration -> switch_statement .)
    endforeach      reduce using rule 26 (declaration -> switch_statement .)
    break           reduce using rule 26 (declaration -> switch_statement .)
    endswitch       reduce using rule 26 (declaration -> switch_statement .)
    default         reduce using rule 26 (declaration -> switch_statement .)
    case            reduce using rule 26 (declaration -> switch_statement .)


state 27

    (27) declaration -> exit_statement .

    COMMENT         reduce using rule 27 (declaration -> exit_statement .)
    COMMENT_HASHTAG reduce using rule 27 (declaration -> exit_statement .)
    COMMENT_MULTI   reduce using rule 27 (declaration -> exit_statement .)
    empty           reduce using rule 27 (declaration -> exit_statement .)
    include         reduce using rule 27 (declaration -> exit_statement .)
    const           reduce using rule 27 (declaration -> exit_statement .)
    print           reduce using rule 27 (declaration -> exit_statement .)
    echo            reduce using rule 27 (declaration -> exit_statement .)
    while           reduce using rule 27 (declaration -> exit_statement .)
    do              reduce using rule 27 (declaration -> exit_statement .)
    if              reduce using rule 27 (declaration -> exit_statement .)
    function        reduce using rule 27 (declaration -> exit_statement .)
    ID              reduce using rule 27 (declaration -> exit_statement .)
    return          reduce using rule 27 (declaration -> exit_statement .)
    class           reduce using rule 27 (declaration -> exit_statement .)
    new             reduce using rule 27 (declaration -> exit_statement .)
    interface       reduce using rule 27 (declaration -> exit_statement .)
    trait           reduce using rule 27 (declaration -> exit_statement .)
    CLOSE_TAG       reduce using rule 27 (declaration -> exit_statement .)
    for             reduce using rule 27 (declaration -> exit_statement .)
    foreach         reduce using rule 27 (declaration -> exit_statement .)
    switch          reduce using rule 27 (declaration -> exit_statement .)
    exit            reduce using rule 27 (declaration -> exit_statement .)
    VARIABLE        reduce using rule 27 (declaration -> exit_statement .)
    array           reduce using rule 27 (declaration -> exit_statement .)
    pow             reduce using rule 27 (declaration -> exit_statement .)
    POW             reduce using rule 27 (declaration -> exit_statement .)
    abs             reduce using rule 27 (declaration -> exit_statement .)
    cos             reduce using rule 27 (declaration -> exit_statement .)
    deg2rad         reduce using rule 27 (declaration -> exit_statement .)
    rad2deg         reduce using rule 27 (declaration -> exit_statement .)
    die             reduce using rule 27 (declaration -> exit_statement .)
    exp             reduce using rule 27 (declaration -> exit_statement .)
    floor           reduce using rule 27 (declaration -> exit_statement .)
    isset           reduce using rule 27 (declaration -> exit_statement .)
    list            reduce using rule 27 (declaration -> exit_statement .)
    log             reduce using rule 27 (declaration -> exit_statement .)
    log10           reduce using rule 27 (declaration -> exit_statement .)
    max             reduce using rule 27 (declaration -> exit_statement .)
    min             reduce using rule 27 (declaration -> exit_statement .)
    rand            reduce using rule 27 (declaration -> exit_statement .)
    round           reduce using rule 27 (declaration -> exit_statement .)
    sin             reduce using rule 27 (declaration -> exit_statement .)
    sqrt            reduce using rule 27 (declaration -> exit_statement .)
    unset           reduce using rule 27 (declaration -> exit_statement .)
    CADENA          reduce using rule 27 (declaration -> exit_statement .)
    $end            reduce using rule 27 (declaration -> exit_statement .)
    RBLOCK          reduce using rule 27 (declaration -> exit_statement .)
    endwhile        reduce using rule 27 (declaration -> exit_statement .)
    private         reduce using rule 27 (declaration -> exit_statement .)
    protected       reduce using rule 27 (declaration -> exit_statement .)
    public          reduce using rule 27 (declaration -> exit_statement .)
    var             reduce using rule 27 (declaration -> exit_statement .)
    endfor          reduce using rule 27 (declaration -> exit_statement .)
    endforeach      reduce using rule 27 (declaration -> exit_statement .)
    break           reduce using rule 27 (declaration -> exit_statement .)
    endswitch       reduce using rule 27 (declaration -> exit_statement .)
    default         reduce using rule 27 (declaration -> exit_statement .)
    case            reduce using rule 27 (declaration -> exit_statement .)


state 28

    (28) declaration -> empty .

    COMMENT         reduce using rule 28 (declaration -> empty .)
    COMMENT_HASHTAG reduce using rule 28 (declaration -> empty .)
    COMMENT_MULTI   reduce using rule 28 (declaration -> empty .)
    empty           reduce using rule 28 (declaration -> empty .)
    include         reduce using rule 28 (declaration -> empty .)
    const           reduce using rule 28 (declaration -> empty .)
    print           reduce using rule 28 (declaration -> empty .)
    echo            reduce using rule 28 (declaration -> empty .)
    while           reduce using rule 28 (declaration -> empty .)
    do              reduce using rule 28 (declaration -> empty .)
    if              reduce using rule 28 (declaration -> empty .)
    function        reduce using rule 28 (declaration -> empty .)
    ID              reduce using rule 28 (declaration -> empty .)
    return          reduce using rule 28 (declaration -> empty .)
    class           reduce using rule 28 (declaration -> empty .)
    new             reduce using rule 28 (declaration -> empty .)
    interface       reduce using rule 28 (declaration -> empty .)
    trait           reduce using rule 28 (declaration -> empty .)
    CLOSE_TAG       reduce using rule 28 (declaration -> empty .)
    for             reduce using rule 28 (declaration -> empty .)
    foreach         reduce using rule 28 (declaration -> empty .)
    switch          reduce using rule 28 (declaration -> empty .)
    exit            reduce using rule 28 (declaration -> empty .)
    VARIABLE        reduce using rule 28 (declaration -> empty .)
    array           reduce using rule 28 (declaration -> empty .)
    pow             reduce using rule 28 (declaration -> empty .)
    POW             reduce using rule 28 (declaration -> empty .)
    abs             reduce using rule 28 (declaration -> empty .)
    cos             reduce using rule 28 (declaration -> empty .)
    deg2rad         reduce using rule 28 (declaration -> empty .)
    rad2deg         reduce using rule 28 (declaration -> empty .)
    die             reduce using rule 28 (declaration -> empty .)
    exp             reduce using rule 28 (declaration -> empty .)
    floor           reduce using rule 28 (declaration -> empty .)
    isset           reduce using rule 28 (declaration -> empty .)
    list            reduce using rule 28 (declaration -> empty .)
    log             reduce using rule 28 (declaration -> empty .)
    log10           reduce using rule 28 (declaration -> empty .)
    max             reduce using rule 28 (declaration -> empty .)
    min             reduce using rule 28 (declaration -> empty .)
    rand            reduce using rule 28 (declaration -> empty .)
    round           reduce using rule 28 (declaration -> empty .)
    sin             reduce using rule 28 (declaration -> empty .)
    sqrt            reduce using rule 28 (declaration -> empty .)
    unset           reduce using rule 28 (declaration -> empty .)
    CADENA          reduce using rule 28 (declaration -> empty .)
    $end            reduce using rule 28 (declaration -> empty .)
    RBLOCK          reduce using rule 28 (declaration -> empty .)
    endwhile        reduce using rule 28 (declaration -> empty .)
    private         reduce using rule 28 (declaration -> empty .)
    protected       reduce using rule 28 (declaration -> empty .)
    public          reduce using rule 28 (declaration -> empty .)
    var             reduce using rule 28 (declaration -> empty .)
    endfor          reduce using rule 28 (declaration -> empty .)
    endforeach      reduce using rule 28 (declaration -> empty .)
    break           reduce using rule 28 (declaration -> empty .)
    endswitch       reduce using rule 28 (declaration -> empty .)
    default         reduce using rule 28 (declaration -> empty .)
    case            reduce using rule 28 (declaration -> empty .)


state 29

    (29) header_declaration -> include . CADENA SEMICOLON

    CADENA          shift and go to state 75


state 30

    (197) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    DOT             shift and go to state 76


state 31

    (44) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 77


state 32

    (30) constant_declaration -> const . ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> const . ID EQUAL NUMBER SEMICOLON

    ID              shift and go to state 78


state 33

    (120) fun_call -> ID . LPAREN params RPAREN

    LPAREN          shift and go to state 79


state 34

    (32) print_declaration -> print . var_declaration2 SEMICOLON
    (33) print_declaration -> print . LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> print . LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> print . LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> print . NUMBER SEMICOLON
    (37) print_declaration -> print . CADENA SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    LPAREN          shift and go to state 81
    NUMBER          shift and go to state 82
    CADENA          shift and go to state 83
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    var_declaration2               shift and go to state 80
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 35

    (38) echo_declaration -> echo . var_declaration2 SEMICOLON
    (39) echo_declaration -> echo . LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> echo . LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> echo . LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> echo . NUMBER SEMICOLON
    (43) echo_declaration -> echo . CADENA SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    LPAREN          shift and go to state 85
    NUMBER          shift and go to state 86
    CADENA          shift and go to state 87
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    var_declaration2               shift and go to state 84
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 36

    (69) iteration_stmt -> while . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> while . LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON

    LPAREN          shift and go to state 88


state 37

    (71) iteration_stmt -> do . LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> do . COLON declaration_list endwhile SEMICOLON

    LBLOCK          shift and go to state 89
    COLON           shift and go to state 90


state 38

    (113) if_statement -> if . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 91


state 39

    (118) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    ID              shift and go to state 92


state 40

    (121) return_statement -> return . expression SEMICOLON
    (122) return_statement -> return . params SEMICOLON
    (123) return_statement -> return . SEMICOLON
    (124) return_statement -> return . ID LPAREN expression RPAREN SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 94
    ID              shift and go to state 96
    NUMBER          shift and go to state 102
    CADENA          shift and go to state 103
    MINUS           shift and go to state 105
    VARIABLE        shift and go to state 108
    COMMA           reduce using rule 208 (empty_function -> .)
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

  ! SEMICOLON       [ reduce using rule 208 (empty_function -> .) ]

    expression                     shift and go to state 93
    params                         shift and go to state 95
    additive_expression            shift and go to state 98
    single_param                   shift and go to state 99
    term                           shift and go to state 100
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 41

    (125) class_declaration -> class . ID LBLOCK class_body RBLOCK

    ID              shift and go to state 111


state 42

    (126) create_obj_declaration -> new . ID LPAREN params RPAREN

    ID              shift and go to state 112


state 43

    (133) interface_declaration -> interface . ID LBLOCK interface_body RBLOCK

    ID              shift and go to state 113


state 44

    (138) trait_declaration -> trait . ID LBLOCK trait_body RBLOCK

    ID              shift and go to state 114


state 45

    (3) footer_declaration -> CLOSE_TAG .

    COMMENT         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_HASHTAG reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_MULTI   reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    empty           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    const           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    print           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    echo            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    while           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    do              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    if              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    function        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    ID              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    return          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    class           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    new             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    interface       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    trait           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    for             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    foreach         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    switch          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exit            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    VARIABLE        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    array           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    pow             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    POW             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    abs             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    cos             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    deg2rad         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    rad2deg         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    die             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exp             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    floor           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    isset           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    list            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    log             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    log10           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    max             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    min             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    rand            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    round           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    sin             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    sqrt            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    unset           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CADENA          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    $end            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    RBLOCK          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endwhile        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    private         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    protected       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    public          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    var             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endfor          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endforeach      reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    break           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endswitch       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    default         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    case            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)


state 46

    (154) for_loop -> for . LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> for . LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON

    LPAREN          shift and go to state 115


state 47

    (160) foreach_loop -> foreach . LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> foreach . LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON

    LPAREN          shift and go to state 116


state 48

    (162) switch_statement -> switch . LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> switch . LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON

    LPAREN          shift and go to state 117


state 49

    (159) exit_statement -> exit . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 118


state 50

    (45) var_declaration2 -> VARIABLE .
    (46) var_declaration2 -> VARIABLE . expression
    (47) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (48) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (49) var_declaration2 -> VARIABLE . EQUAL CADENA
    (50) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (51) var_declaration2 -> VARIABLE . EQUAL expression
    (52) var_declaration2 -> VARIABLE . assignation VARIABLE
    (53) var_declaration2 -> VARIABLE . assignation NUMBER
    (56) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (61) var_declaration2 -> VARIABLE . assignment_tail
    (62) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (196) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (203) assignation -> . ASSIGN
    (204) assignation -> . SREQUAL
    (205) assignation -> . SLEQUAL
    (206) assignation -> . XOREQUAL
    (207) assignation -> . ANDEQUAL
    (63) assignment_tail -> . COMMA var_declaration2
    (64) assignment_tail -> . LBRACKET params RBRACKET
    (65) assignment_tail -> . LBLOCK params RBLOCK
    (66) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (67) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (68) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 45 (var_declaration2 -> VARIABLE .)
    RPAREN          reduce using rule 45 (var_declaration2 -> VARIABLE .)
    COLON           reduce using rule 45 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 45 (var_declaration2 -> VARIABLE .)
    RBLOCK          reduce using rule 45 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 121
    QUESTIONMARK    shift and go to state 124
    OBJ_OPERATOR    shift and go to state 125
    DOT             shift and go to state 127
    ASSIGN          shift and go to state 128
    SREQUAL         shift and go to state 129
    SLEQUAL         shift and go to state 130
    XOREQUAL        shift and go to state 131
    ANDEQUAL        shift and go to state 132
    COMMA           shift and go to state 133
    LBRACKET        shift and go to state 134
    LBLOCK          shift and go to state 135
    VARIABLE        shift and go to state 119
    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

  ! COMMA           [ reduce using rule 45 (var_declaration2 -> VARIABLE .) ]

    expression                     shift and go to state 120
    assignation                    shift and go to state 123
    assignment_tail                shift and go to state 126
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 51

    (54) var_declaration2 -> Built_In_Declaration .

    SEMICOLON       reduce using rule 54 (var_declaration2 -> Built_In_Declaration .)
    COMMA           reduce using rule 54 (var_declaration2 -> Built_In_Declaration .)
    RPAREN          reduce using rule 54 (var_declaration2 -> Built_In_Declaration .)
    COLON           reduce using rule 54 (var_declaration2 -> Built_In_Declaration .)
    RBRACKET        reduce using rule 54 (var_declaration2 -> Built_In_Declaration .)
    RBLOCK          reduce using rule 54 (var_declaration2 -> Built_In_Declaration .)


state 52

    (55) var_declaration2 -> Concatenar_Cadenas_declaration .

    SEMICOLON       reduce using rule 55 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    COMMA           reduce using rule 55 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RPAREN          reduce using rule 55 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    COLON           reduce using rule 55 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RBRACKET        reduce using rule 55 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RBLOCK          reduce using rule 55 (var_declaration2 -> Concatenar_Cadenas_declaration .)


state 53

    (175) Built_In_Declaration -> array . LPAREN params RPAREN

    LPAREN          shift and go to state 136


state 54

    (176) Built_In_Declaration -> pow . LPAREN params RPAREN

    LPAREN          shift and go to state 137


state 55

    (177) Built_In_Declaration -> POW . LPAREN params RPAREN

    LPAREN          shift and go to state 138


state 56

    (178) Built_In_Declaration -> abs . LPAREN params RPAREN

    LPAREN          shift and go to state 139


state 57

    (179) Built_In_Declaration -> cos . LPAREN params RPAREN

    LPAREN          shift and go to state 140


state 58

    (180) Built_In_Declaration -> deg2rad . LPAREN params RPAREN

    LPAREN          shift and go to state 141


state 59

    (181) Built_In_Declaration -> rad2deg . LPAREN params RPAREN

    LPAREN          shift and go to state 142


state 60

    (182) Built_In_Declaration -> die . LPAREN params RPAREN

    LPAREN          shift and go to state 143


state 61

    (183) Built_In_Declaration -> exp . LPAREN params RPAREN

    LPAREN          shift and go to state 144


state 62

    (184) Built_In_Declaration -> floor . LPAREN params RPAREN

    LPAREN          shift and go to state 145


state 63

    (185) Built_In_Declaration -> isset . LPAREN params RPAREN

    LPAREN          shift and go to state 146


state 64

    (186) Built_In_Declaration -> list . LPAREN params RPAREN

    LPAREN          shift and go to state 147


state 65

    (187) Built_In_Declaration -> log . LPAREN params RPAREN

    LPAREN          shift and go to state 148


state 66

    (188) Built_In_Declaration -> log10 . LPAREN params RPAREN

    LPAREN          shift and go to state 149


state 67

    (189) Built_In_Declaration -> max . LPAREN params RPAREN

    LPAREN          shift and go to state 150


state 68

    (190) Built_In_Declaration -> min . LPAREN params RPAREN

    LPAREN          shift and go to state 151


state 69

    (191) Built_In_Declaration -> rand . LPAREN params RPAREN

    LPAREN          shift and go to state 152


state 70

    (192) Built_In_Declaration -> round . LPAREN params RPAREN

    LPAREN          shift and go to state 153


state 71

    (193) Built_In_Declaration -> sin . LPAREN params RPAREN

    LPAREN          shift and go to state 154


state 72

    (194) Built_In_Declaration -> sqrt . LPAREN params RPAREN

    LPAREN          shift and go to state 155


state 73

    (195) Built_In_Declaration -> unset . LPAREN params RPAREN

    LPAREN          shift and go to state 156


state 74

    (5) declaration_list -> declaration_list declaration .

    COMMENT         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_HASHTAG reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_MULTI   reduce using rule 5 (declaration_list -> declaration_list declaration .)
    empty           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    const           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    print           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    echo            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    while           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    do              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    if              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    function        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    return          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    class           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    new             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    interface       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    trait           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    for             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    foreach         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    switch          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exit            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    array           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    pow             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    POW             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    abs             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    cos             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    deg2rad         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    rad2deg         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    die             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exp             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    floor           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    isset           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    list            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    log             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    log10           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    max             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    min             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    rand            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    round           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    sin             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    sqrt            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    unset           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CADENA          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    RBLOCK          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endwhile        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endfor          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endforeach      reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 75

    (29) header_declaration -> include CADENA . SEMICOLON

    SEMICOLON       shift and go to state 157


state 76

    (197) Concatenar_Cadenas_declaration -> CADENA DOT . CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA DOT . VARIABLE

    CADENA          shift and go to state 158
    VARIABLE        shift and go to state 159


state 77

    (44) var_declaration -> var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    empty           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    include         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    const           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    print           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    echo            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    while           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    do              reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    if              reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    function        reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    return          reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    class           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    new             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    interface       reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    trait           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    for             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    foreach         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    switch          reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    exit            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    array           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    pow             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    POW             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    abs             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    cos             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    die             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    exp             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    floor           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    isset           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    list            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    log             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    log10           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    max             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    min             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    rand            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    round           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    sin             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    unset           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    $end            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    private         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    protected       reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    public          reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    var             reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    endfor          reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    break           reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    default         reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)
    case            reduce using rule 44 (var_declaration -> var_declaration2 SEMICOLON .)


state 78

    (30) constant_declaration -> const ID . EQUAL CADENA SEMICOLON
    (31) constant_declaration -> const ID . EQUAL NUMBER SEMICOLON

    EQUAL           shift and go to state 160


state 79

    (120) fun_call -> ID LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 161
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 80

    (32) print_declaration -> print var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 163


state 81

    (33) print_declaration -> print LPAREN . var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> print LPAREN . NUMBER RPAREN SEMICOLON
    (35) print_declaration -> print LPAREN . CADENA RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 165
    CADENA          shift and go to state 166
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    var_declaration2               shift and go to state 164
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 82

    (36) print_declaration -> print NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 167


state 83

    (37) print_declaration -> print CADENA . SEMICOLON
    (197) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       shift and go to state 168
    DOT             shift and go to state 76


state 84

    (38) echo_declaration -> echo var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 169


state 85

    (39) echo_declaration -> echo LPAREN . var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> echo LPAREN . NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> echo LPAREN . CADENA RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 171
    CADENA          shift and go to state 172
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    var_declaration2               shift and go to state 170
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 86

    (42) echo_declaration -> echo NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 173


state 87

    (43) echo_declaration -> echo CADENA . SEMICOLON
    (197) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       shift and go to state 174
    DOT             shift and go to state 76


state 88

    (69) iteration_stmt -> while LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> while LPAREN . expression RPAREN COLON declaration_list endwhile SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 175
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 89

    (71) iteration_stmt -> do LBLOCK . declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 177
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 90

    (72) iteration_stmt -> do COLON . declaration_list endwhile SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 178
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 91

    (113) if_statement -> if LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 179
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 92

    (118) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    LPAREN          shift and go to state 180


state 93

    (121) return_statement -> return expression . SEMICOLON

    SEMICOLON       shift and go to state 181


state 94

    (123) return_statement -> return SEMICOLON .

    COMMENT         reduce using rule 123 (return_statement -> return SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 123 (return_statement -> return SEMICOLON .)
    COMMENT_MULTI   reduce using rule 123 (return_statement -> return SEMICOLON .)
    empty           reduce using rule 123 (return_statement -> return SEMICOLON .)
    include         reduce using rule 123 (return_statement -> return SEMICOLON .)
    const           reduce using rule 123 (return_statement -> return SEMICOLON .)
    print           reduce using rule 123 (return_statement -> return SEMICOLON .)
    echo            reduce using rule 123 (return_statement -> return SEMICOLON .)
    while           reduce using rule 123 (return_statement -> return SEMICOLON .)
    do              reduce using rule 123 (return_statement -> return SEMICOLON .)
    if              reduce using rule 123 (return_statement -> return SEMICOLON .)
    function        reduce using rule 123 (return_statement -> return SEMICOLON .)
    ID              reduce using rule 123 (return_statement -> return SEMICOLON .)
    return          reduce using rule 123 (return_statement -> return SEMICOLON .)
    class           reduce using rule 123 (return_statement -> return SEMICOLON .)
    new             reduce using rule 123 (return_statement -> return SEMICOLON .)
    interface       reduce using rule 123 (return_statement -> return SEMICOLON .)
    trait           reduce using rule 123 (return_statement -> return SEMICOLON .)
    CLOSE_TAG       reduce using rule 123 (return_statement -> return SEMICOLON .)
    for             reduce using rule 123 (return_statement -> return SEMICOLON .)
    foreach         reduce using rule 123 (return_statement -> return SEMICOLON .)
    switch          reduce using rule 123 (return_statement -> return SEMICOLON .)
    exit            reduce using rule 123 (return_statement -> return SEMICOLON .)
    VARIABLE        reduce using rule 123 (return_statement -> return SEMICOLON .)
    array           reduce using rule 123 (return_statement -> return SEMICOLON .)
    pow             reduce using rule 123 (return_statement -> return SEMICOLON .)
    POW             reduce using rule 123 (return_statement -> return SEMICOLON .)
    abs             reduce using rule 123 (return_statement -> return SEMICOLON .)
    cos             reduce using rule 123 (return_statement -> return SEMICOLON .)
    deg2rad         reduce using rule 123 (return_statement -> return SEMICOLON .)
    rad2deg         reduce using rule 123 (return_statement -> return SEMICOLON .)
    die             reduce using rule 123 (return_statement -> return SEMICOLON .)
    exp             reduce using rule 123 (return_statement -> return SEMICOLON .)
    floor           reduce using rule 123 (return_statement -> return SEMICOLON .)
    isset           reduce using rule 123 (return_statement -> return SEMICOLON .)
    list            reduce using rule 123 (return_statement -> return SEMICOLON .)
    log             reduce using rule 123 (return_statement -> return SEMICOLON .)
    log10           reduce using rule 123 (return_statement -> return SEMICOLON .)
    max             reduce using rule 123 (return_statement -> return SEMICOLON .)
    min             reduce using rule 123 (return_statement -> return SEMICOLON .)
    rand            reduce using rule 123 (return_statement -> return SEMICOLON .)
    round           reduce using rule 123 (return_statement -> return SEMICOLON .)
    sin             reduce using rule 123 (return_statement -> return SEMICOLON .)
    sqrt            reduce using rule 123 (return_statement -> return SEMICOLON .)
    unset           reduce using rule 123 (return_statement -> return SEMICOLON .)
    CADENA          reduce using rule 123 (return_statement -> return SEMICOLON .)
    $end            reduce using rule 123 (return_statement -> return SEMICOLON .)
    RBLOCK          reduce using rule 123 (return_statement -> return SEMICOLON .)
    endwhile        reduce using rule 123 (return_statement -> return SEMICOLON .)
    private         reduce using rule 123 (return_statement -> return SEMICOLON .)
    protected       reduce using rule 123 (return_statement -> return SEMICOLON .)
    public          reduce using rule 123 (return_statement -> return SEMICOLON .)
    var             reduce using rule 123 (return_statement -> return SEMICOLON .)
    endfor          reduce using rule 123 (return_statement -> return SEMICOLON .)
    endforeach      reduce using rule 123 (return_statement -> return SEMICOLON .)
    break           reduce using rule 123 (return_statement -> return SEMICOLON .)
    endswitch       reduce using rule 123 (return_statement -> return SEMICOLON .)
    default         reduce using rule 123 (return_statement -> return SEMICOLON .)
    case            reduce using rule 123 (return_statement -> return SEMICOLON .)


state 95

    (122) return_statement -> return params . SEMICOLON
    (149) params -> params . COMMA single_param

    SEMICOLON       shift and go to state 182
    COMMA           shift and go to state 183


state 96

    (124) return_statement -> return ID . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 184


state 97

    (86) factor -> LPAREN . expression RPAREN
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 185
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 98

    (73) expression -> additive_expression .
    (74) expression -> additive_expression . logical_op additive_expression
    (75) expression -> additive_expression . comp_op additive_expression
    (76) expression -> additive_expression . comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> additive_expression . bits_op additive_expression
    (107) logical_op -> . BOOL_OR
    (108) logical_op -> . BOOL_AND
    (109) logical_op -> . NOT
    (110) logical_op -> . or
    (111) logical_op -> . and
    (112) logical_op -> . xor
    (97) comp_op -> . LESS
    (98) comp_op -> . LESSEQUAL
    (99) comp_op -> . GREATER
    (100) comp_op -> . GREATEREQUAL
    (101) comp_op -> . DEQUAL
    (102) comp_op -> . DISTINT
    (103) comp_op -> . DIVEQUAL
    (104) comp_op -> . ISEQUAL
    (105) comp_op -> . ISIDENTICAL
    (106) comp_op -> . ISNOTIDENTICAL
    (200) bits_op -> . AMPERSANT
    (201) bits_op -> . SR
    (202) bits_op -> . SL

    SEMICOLON       reduce using rule 73 (expression -> additive_expression .)
    RPAREN          reduce using rule 73 (expression -> additive_expression .)
    COMMA           reduce using rule 73 (expression -> additive_expression .)
    COLON           reduce using rule 73 (expression -> additive_expression .)
    RBRACKET        reduce using rule 73 (expression -> additive_expression .)
    RBLOCK          reduce using rule 73 (expression -> additive_expression .)
    as              reduce using rule 73 (expression -> additive_expression .)
    BOOL_OR         shift and go to state 189
    BOOL_AND        shift and go to state 190
    NOT             shift and go to state 191
    or              shift and go to state 192
    and             shift and go to state 193
    xor             shift and go to state 194
    LESS            shift and go to state 195
    LESSEQUAL       shift and go to state 196
    GREATER         shift and go to state 197
    GREATEREQUAL    shift and go to state 198
    DEQUAL          shift and go to state 199
    DISTINT         shift and go to state 200
    DIVEQUAL        shift and go to state 201
    ISEQUAL         shift and go to state 202
    ISIDENTICAL     shift and go to state 203
    ISNOTIDENTICAL  shift and go to state 204
    AMPERSANT       shift and go to state 205
    SR              shift and go to state 206
    SL              shift and go to state 207

    logical_op                     shift and go to state 186
    comp_op                        shift and go to state 187
    bits_op                        shift and go to state 188

state 99

    (148) params -> single_param .

    SEMICOLON       reduce using rule 148 (params -> single_param .)
    COMMA           reduce using rule 148 (params -> single_param .)
    RPAREN          reduce using rule 148 (params -> single_param .)
    RBRACKET        reduce using rule 148 (params -> single_param .)
    RBLOCK          reduce using rule 148 (params -> single_param .)
    COLON           reduce using rule 148 (params -> single_param .)


state 100

    (78) additive_expression -> term .
    (79) additive_expression -> term . math_op term
    (89) math_op -> . PLUS
    (90) math_op -> . MINUS
    (91) math_op -> . TIMES
    (92) math_op -> . DIVIDE
    (93) math_op -> . MULEQUAL
    (94) math_op -> . PLUSEQUAL
    (95) math_op -> . MINUSEQUAL
    (96) math_op -> . MOD

    BOOL_OR         reduce using rule 78 (additive_expression -> term .)
    BOOL_AND        reduce using rule 78 (additive_expression -> term .)
    NOT             reduce using rule 78 (additive_expression -> term .)
    or              reduce using rule 78 (additive_expression -> term .)
    and             reduce using rule 78 (additive_expression -> term .)
    xor             reduce using rule 78 (additive_expression -> term .)
    LESS            reduce using rule 78 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 78 (additive_expression -> term .)
    GREATER         reduce using rule 78 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 78 (additive_expression -> term .)
    DEQUAL          reduce using rule 78 (additive_expression -> term .)
    DISTINT         reduce using rule 78 (additive_expression -> term .)
    DIVEQUAL        reduce using rule 78 (additive_expression -> term .)
    ISEQUAL         reduce using rule 78 (additive_expression -> term .)
    ISIDENTICAL     reduce using rule 78 (additive_expression -> term .)
    ISNOTIDENTICAL  reduce using rule 78 (additive_expression -> term .)
    AMPERSANT       reduce using rule 78 (additive_expression -> term .)
    SR              reduce using rule 78 (additive_expression -> term .)
    SL              reduce using rule 78 (additive_expression -> term .)
    SEMICOLON       reduce using rule 78 (additive_expression -> term .)
    RPAREN          reduce using rule 78 (additive_expression -> term .)
    COMMA           reduce using rule 78 (additive_expression -> term .)
    COLON           reduce using rule 78 (additive_expression -> term .)
    RBRACKET        reduce using rule 78 (additive_expression -> term .)
    RBLOCK          reduce using rule 78 (additive_expression -> term .)
    as              reduce using rule 78 (additive_expression -> term .)
    PLUS            shift and go to state 209
    MINUS           shift and go to state 210
    TIMES           shift and go to state 211
    DIVIDE          shift and go to state 212
    MULEQUAL        shift and go to state 213
    PLUSEQUAL       shift and go to state 214
    MINUSEQUAL      shift and go to state 215
    MOD             shift and go to state 216

    math_op                        shift and go to state 208

state 101

    (150) single_param -> var_declaration2 .

    SEMICOLON       reduce using rule 150 (single_param -> var_declaration2 .)
    COMMA           reduce using rule 150 (single_param -> var_declaration2 .)
    RPAREN          reduce using rule 150 (single_param -> var_declaration2 .)
    RBRACKET        reduce using rule 150 (single_param -> var_declaration2 .)
    RBLOCK          reduce using rule 150 (single_param -> var_declaration2 .)
    COLON           reduce using rule 150 (single_param -> var_declaration2 .)


state 102

    (151) single_param -> NUMBER .
    (84) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 84 (factor -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 84 (factor -> NUMBER .)
    RBRACKET        reduce using rule 151 (single_param -> NUMBER .)
    PLUSPLUS        reduce using rule 84 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 84 (factor -> NUMBER .)
    PLUS            reduce using rule 84 (factor -> NUMBER .)
    MINUS           reduce using rule 84 (factor -> NUMBER .)
    TIMES           reduce using rule 84 (factor -> NUMBER .)
    DIVIDE          reduce using rule 84 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 84 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 84 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 84 (factor -> NUMBER .)
    MOD             reduce using rule 84 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 84 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 84 (factor -> NUMBER .)
    NOT             reduce using rule 84 (factor -> NUMBER .)
    or              reduce using rule 84 (factor -> NUMBER .)
    and             reduce using rule 84 (factor -> NUMBER .)
    xor             reduce using rule 84 (factor -> NUMBER .)
    LESS            reduce using rule 84 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 84 (factor -> NUMBER .)
    GREATER         reduce using rule 84 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 84 (factor -> NUMBER .)
    DEQUAL          reduce using rule 84 (factor -> NUMBER .)
    DISTINT         reduce using rule 84 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 84 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 84 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 84 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 84 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 84 (factor -> NUMBER .)
    SR              reduce using rule 84 (factor -> NUMBER .)
    SL              reduce using rule 84 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 84 (factor -> NUMBER .)
    COMMA           reduce using rule 84 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 151 (single_param -> NUMBER .) ]
  ! COMMA           [ reduce using rule 151 (single_param -> NUMBER .) ]


state 103

    (152) single_param -> CADENA .
    (197) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       reduce using rule 152 (single_param -> CADENA .)
    COMMA           reduce using rule 152 (single_param -> CADENA .)
    RPAREN          reduce using rule 152 (single_param -> CADENA .)
    RBRACKET        reduce using rule 152 (single_param -> CADENA .)
    RBLOCK          reduce using rule 152 (single_param -> CADENA .)
    COLON           reduce using rule 152 (single_param -> CADENA .)
    DOT             shift and go to state 76


state 104

    (153) single_param -> empty_function .

    SEMICOLON       reduce using rule 153 (single_param -> empty_function .)
    COMMA           reduce using rule 153 (single_param -> empty_function .)
    RPAREN          reduce using rule 153 (single_param -> empty_function .)
    RBRACKET        reduce using rule 153 (single_param -> empty_function .)
    RBLOCK          reduce using rule 153 (single_param -> empty_function .)
    COLON           reduce using rule 153 (single_param -> empty_function .)


state 105

    (80) term -> MINUS . term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    term                           shift and go to state 217
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 106

    (81) term -> factor .
    (82) term -> factor . increment_decrement_op
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    PLUS            reduce using rule 81 (term -> factor .)
    MINUS           reduce using rule 81 (term -> factor .)
    TIMES           reduce using rule 81 (term -> factor .)
    DIVIDE          reduce using rule 81 (term -> factor .)
    MULEQUAL        reduce using rule 81 (term -> factor .)
    PLUSEQUAL       reduce using rule 81 (term -> factor .)
    MINUSEQUAL      reduce using rule 81 (term -> factor .)
    MOD             reduce using rule 81 (term -> factor .)
    BOOL_OR         reduce using rule 81 (term -> factor .)
    BOOL_AND        reduce using rule 81 (term -> factor .)
    NOT             reduce using rule 81 (term -> factor .)
    or              reduce using rule 81 (term -> factor .)
    and             reduce using rule 81 (term -> factor .)
    xor             reduce using rule 81 (term -> factor .)
    LESS            reduce using rule 81 (term -> factor .)
    LESSEQUAL       reduce using rule 81 (term -> factor .)
    GREATER         reduce using rule 81 (term -> factor .)
    GREATEREQUAL    reduce using rule 81 (term -> factor .)
    DEQUAL          reduce using rule 81 (term -> factor .)
    DISTINT         reduce using rule 81 (term -> factor .)
    DIVEQUAL        reduce using rule 81 (term -> factor .)
    ISEQUAL         reduce using rule 81 (term -> factor .)
    ISIDENTICAL     reduce using rule 81 (term -> factor .)
    ISNOTIDENTICAL  reduce using rule 81 (term -> factor .)
    AMPERSANT       reduce using rule 81 (term -> factor .)
    SR              reduce using rule 81 (term -> factor .)
    SL              reduce using rule 81 (term -> factor .)
    SEMICOLON       reduce using rule 81 (term -> factor .)
    RPAREN          reduce using rule 81 (term -> factor .)
    COMMA           reduce using rule 81 (term -> factor .)
    COLON           reduce using rule 81 (term -> factor .)
    RBRACKET        reduce using rule 81 (term -> factor .)
    RBLOCK          reduce using rule 81 (term -> factor .)
    as              reduce using rule 81 (term -> factor .)
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    increment_decrement_op         shift and go to state 218

state 107

    (83) term -> increment_decrement_op . factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97

    factor                         shift and go to state 219

state 108

    (45) var_declaration2 -> VARIABLE .
    (46) var_declaration2 -> VARIABLE . expression
    (47) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (48) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (49) var_declaration2 -> VARIABLE . EQUAL CADENA
    (50) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (51) var_declaration2 -> VARIABLE . EQUAL expression
    (52) var_declaration2 -> VARIABLE . assignation VARIABLE
    (53) var_declaration2 -> VARIABLE . assignation NUMBER
    (56) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (61) var_declaration2 -> VARIABLE . assignment_tail
    (62) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (85) factor -> VARIABLE .
    (196) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (203) assignation -> . ASSIGN
    (204) assignation -> . SREQUAL
    (205) assignation -> . SLEQUAL
    (206) assignation -> . XOREQUAL
    (207) assignation -> . ANDEQUAL
    (63) assignment_tail -> . COMMA var_declaration2
    (64) assignment_tail -> . LBRACKET params RBRACKET
    (65) assignment_tail -> . LBLOCK params RBLOCK
    (66) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (67) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (68) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (var_declaration2 -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 45 (var_declaration2 -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 45 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 45 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 121
    QUESTIONMARK    shift and go to state 124
    OBJ_OPERATOR    shift and go to state 125
    PLUS            reduce using rule 85 (factor -> VARIABLE .)
    TIMES           reduce using rule 85 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 85 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 85 (factor -> VARIABLE .)
    MOD             reduce using rule 85 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 85 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 85 (factor -> VARIABLE .)
    NOT             reduce using rule 85 (factor -> VARIABLE .)
    or              reduce using rule 85 (factor -> VARIABLE .)
    and             reduce using rule 85 (factor -> VARIABLE .)
    xor             reduce using rule 85 (factor -> VARIABLE .)
    LESS            reduce using rule 85 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    GREATER         reduce using rule 85 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 85 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 85 (factor -> VARIABLE .)
    DISTINT         reduce using rule 85 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 85 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 85 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 85 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 85 (factor -> VARIABLE .)
    SR              reduce using rule 85 (factor -> VARIABLE .)
    SL              reduce using rule 85 (factor -> VARIABLE .)
    DOT             shift and go to state 127
    ASSIGN          shift and go to state 128
    SREQUAL         shift and go to state 129
    SLEQUAL         shift and go to state 130
    XOREQUAL        shift and go to state 131
    ANDEQUAL        shift and go to state 132
    COMMA           shift and go to state 133
    LBRACKET        shift and go to state 134
    LBLOCK          shift and go to state 135
    VARIABLE        shift and go to state 119
    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

  ! COMMA           [ reduce using rule 45 (var_declaration2 -> VARIABLE .) ]
  ! PLUSPLUS        [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! MINUSMINUS      [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 85 (factor -> VARIABLE .) ]

    expression                     shift and go to state 120
    assignation                    shift and go to state 123
    assignment_tail                shift and go to state 126
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 109

    (87) increment_decrement_op -> PLUSPLUS .

    NUMBER          reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    VARIABLE        reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    LPAREN          reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    PLUS            reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    MINUS           reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    TIMES           reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    DIVIDE          reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    MULEQUAL        reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    PLUSEQUAL       reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    MINUSEQUAL      reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    MOD             reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    BOOL_OR         reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    BOOL_AND        reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    NOT             reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    or              reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    and             reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    xor             reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    LESS            reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    LESSEQUAL       reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    GREATER         reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    GREATEREQUAL    reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    DEQUAL          reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    DISTINT         reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    DIVEQUAL        reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    ISEQUAL         reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    ISIDENTICAL     reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    ISNOTIDENTICAL  reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    AMPERSANT       reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    SR              reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    SL              reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    SEMICOLON       reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    RPAREN          reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    COMMA           reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    COLON           reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    RBRACKET        reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    RBLOCK          reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)
    as              reduce using rule 87 (increment_decrement_op -> PLUSPLUS .)


state 110

    (88) increment_decrement_op -> MINUSMINUS .

    NUMBER          reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    VARIABLE        reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    LPAREN          reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    PLUS            reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    MINUS           reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    TIMES           reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    DIVIDE          reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    MULEQUAL        reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    PLUSEQUAL       reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    MINUSEQUAL      reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    MOD             reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    BOOL_OR         reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    BOOL_AND        reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    NOT             reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    or              reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    and             reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    xor             reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    LESS            reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    LESSEQUAL       reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    GREATER         reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    GREATEREQUAL    reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    DEQUAL          reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    DISTINT         reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    DIVEQUAL        reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    ISEQUAL         reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    ISIDENTICAL     reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    ISNOTIDENTICAL  reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    AMPERSANT       reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    SR              reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    SL              reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    SEMICOLON       reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    RPAREN          reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    COMMA           reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    COLON           reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    RBRACKET        reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    RBLOCK          reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)
    as              reduce using rule 88 (increment_decrement_op -> MINUSMINUS .)


state 111

    (125) class_declaration -> class ID . LBLOCK class_body RBLOCK

    LBLOCK          shift and go to state 220


state 112

    (126) create_obj_declaration -> new ID . LPAREN params RPAREN

    LPAREN          shift and go to state 221


state 113

    (133) interface_declaration -> interface ID . LBLOCK interface_body RBLOCK

    LBLOCK          shift and go to state 222


state 114

    (138) trait_declaration -> trait ID . LBLOCK trait_body RBLOCK

    LBLOCK          shift and go to state 223


state 115

    (154) for_loop -> for LPAREN . for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> for LPAREN . for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (156) for_init -> . var_declaration2 SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    for_init                       shift and go to state 224
    var_declaration2               shift and go to state 225
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 116

    (160) foreach_loop -> foreach LPAREN . expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> foreach LPAREN . expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 226
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 117

    (162) switch_statement -> switch LPAREN . expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> switch LPAREN . expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 227
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 118

    (159) exit_statement -> exit LPAREN . expression RPAREN SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 228
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 119

    (66) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (67) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (68) assignment_tail -> VARIABLE . LBLOCK params RBLOCK
    (85) factor -> VARIABLE .

    LBRACKET        shift and go to state 229
    LBLOCK          shift and go to state 230
    PLUSPLUS        reduce using rule 85 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 85 (factor -> VARIABLE .)
    PLUS            reduce using rule 85 (factor -> VARIABLE .)
    MINUS           reduce using rule 85 (factor -> VARIABLE .)
    TIMES           reduce using rule 85 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 85 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 85 (factor -> VARIABLE .)
    MOD             reduce using rule 85 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 85 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 85 (factor -> VARIABLE .)
    NOT             reduce using rule 85 (factor -> VARIABLE .)
    or              reduce using rule 85 (factor -> VARIABLE .)
    and             reduce using rule 85 (factor -> VARIABLE .)
    xor             reduce using rule 85 (factor -> VARIABLE .)
    LESS            reduce using rule 85 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    GREATER         reduce using rule 85 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 85 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 85 (factor -> VARIABLE .)
    DISTINT         reduce using rule 85 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 85 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 85 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 85 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 85 (factor -> VARIABLE .)
    SR              reduce using rule 85 (factor -> VARIABLE .)
    SL              reduce using rule 85 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 85 (factor -> VARIABLE .)
    RPAREN          reduce using rule 85 (factor -> VARIABLE .)
    COMMA           reduce using rule 85 (factor -> VARIABLE .)
    COLON           reduce using rule 85 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 85 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 85 (factor -> VARIABLE .)


state 120

    (46) var_declaration2 -> VARIABLE expression .

    SEMICOLON       reduce using rule 46 (var_declaration2 -> VARIABLE expression .)
    COMMA           reduce using rule 46 (var_declaration2 -> VARIABLE expression .)
    RPAREN          reduce using rule 46 (var_declaration2 -> VARIABLE expression .)
    COLON           reduce using rule 46 (var_declaration2 -> VARIABLE expression .)
    RBRACKET        reduce using rule 46 (var_declaration2 -> VARIABLE expression .)
    RBLOCK          reduce using rule 46 (var_declaration2 -> VARIABLE expression .)


state 121

    (47) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (48) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (49) var_declaration2 -> VARIABLE EQUAL . CADENA
    (50) var_declaration2 -> VARIABLE EQUAL . Built_In_Declaration
    (51) var_declaration2 -> VARIABLE EQUAL . expression
    (56) var_declaration2 -> VARIABLE EQUAL . ID LPAREN params RPAREN
    (60) var_declaration2 -> VARIABLE EQUAL . create_obj_declaration
    (62) var_declaration2 -> VARIABLE EQUAL . assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (63) assignment_tail -> . COMMA var_declaration2
    (64) assignment_tail -> . LBRACKET params RBRACKET
    (65) assignment_tail -> . LBLOCK params RBLOCK
    (66) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (67) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (68) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 232
    VARIABLE        shift and go to state 231
    CADENA          shift and go to state 233
    ID              shift and go to state 236
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    new             shift and go to state 42
    COMMA           shift and go to state 133
    LBRACKET        shift and go to state 134
    LBLOCK          shift and go to state 135
    MINUS           shift and go to state 105
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    Built_In_Declaration           shift and go to state 234
    expression                     shift and go to state 235
    create_obj_declaration         shift and go to state 237
    assignment_tail                shift and go to state 238
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 122

    (84) factor -> NUMBER .

    PLUSPLUS        reduce using rule 84 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 84 (factor -> NUMBER .)
    PLUS            reduce using rule 84 (factor -> NUMBER .)
    MINUS           reduce using rule 84 (factor -> NUMBER .)
    TIMES           reduce using rule 84 (factor -> NUMBER .)
    DIVIDE          reduce using rule 84 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 84 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 84 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 84 (factor -> NUMBER .)
    MOD             reduce using rule 84 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 84 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 84 (factor -> NUMBER .)
    NOT             reduce using rule 84 (factor -> NUMBER .)
    or              reduce using rule 84 (factor -> NUMBER .)
    and             reduce using rule 84 (factor -> NUMBER .)
    xor             reduce using rule 84 (factor -> NUMBER .)
    LESS            reduce using rule 84 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 84 (factor -> NUMBER .)
    GREATER         reduce using rule 84 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 84 (factor -> NUMBER .)
    DEQUAL          reduce using rule 84 (factor -> NUMBER .)
    DISTINT         reduce using rule 84 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 84 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 84 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 84 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 84 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 84 (factor -> NUMBER .)
    SR              reduce using rule 84 (factor -> NUMBER .)
    SL              reduce using rule 84 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 84 (factor -> NUMBER .)
    RPAREN          reduce using rule 84 (factor -> NUMBER .)
    COMMA           reduce using rule 84 (factor -> NUMBER .)
    COLON           reduce using rule 84 (factor -> NUMBER .)
    RBRACKET        reduce using rule 84 (factor -> NUMBER .)
    RBLOCK          reduce using rule 84 (factor -> NUMBER .)
    as              reduce using rule 84 (factor -> NUMBER .)


state 123

    (52) var_declaration2 -> VARIABLE assignation . VARIABLE
    (53) var_declaration2 -> VARIABLE assignation . NUMBER

    VARIABLE        shift and go to state 239
    NUMBER          shift and go to state 240


state 124

    (57) var_declaration2 -> VARIABLE QUESTIONMARK . var_declaration2 COLON var_declaration2
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    var_declaration2               shift and go to state 241
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 125

    (58) var_declaration2 -> VARIABLE OBJ_OPERATOR . ID EQUAL expression
    (59) var_declaration2 -> VARIABLE OBJ_OPERATOR . ID LPAREN params RPAREN

    ID              shift and go to state 242


state 126

    (61) var_declaration2 -> VARIABLE assignment_tail .

    SEMICOLON       reduce using rule 61 (var_declaration2 -> VARIABLE assignment_tail .)
    COMMA           reduce using rule 61 (var_declaration2 -> VARIABLE assignment_tail .)
    RPAREN          reduce using rule 61 (var_declaration2 -> VARIABLE assignment_tail .)
    COLON           reduce using rule 61 (var_declaration2 -> VARIABLE assignment_tail .)
    RBRACKET        reduce using rule 61 (var_declaration2 -> VARIABLE assignment_tail .)
    RBLOCK          reduce using rule 61 (var_declaration2 -> VARIABLE assignment_tail .)


state 127

    (196) Concatenar_Cadenas_declaration -> VARIABLE DOT . VARIABLE
    (199) Concatenar_Cadenas_declaration -> VARIABLE DOT . CADENA

    VARIABLE        shift and go to state 243
    CADENA          shift and go to state 244


state 128

    (203) assignation -> ASSIGN .

    VARIABLE        reduce using rule 203 (assignation -> ASSIGN .)
    NUMBER          reduce using rule 203 (assignation -> ASSIGN .)


state 129

    (204) assignation -> SREQUAL .

    VARIABLE        reduce using rule 204 (assignation -> SREQUAL .)
    NUMBER          reduce using rule 204 (assignation -> SREQUAL .)


state 130

    (205) assignation -> SLEQUAL .

    VARIABLE        reduce using rule 205 (assignation -> SLEQUAL .)
    NUMBER          reduce using rule 205 (assignation -> SLEQUAL .)


state 131

    (206) assignation -> XOREQUAL .

    VARIABLE        reduce using rule 206 (assignation -> XOREQUAL .)
    NUMBER          reduce using rule 206 (assignation -> XOREQUAL .)


state 132

    (207) assignation -> ANDEQUAL .

    VARIABLE        reduce using rule 207 (assignation -> ANDEQUAL .)
    NUMBER          reduce using rule 207 (assignation -> ANDEQUAL .)


state 133

    (63) assignment_tail -> COMMA . var_declaration2
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    var_declaration2               shift and go to state 245
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 134

    (64) assignment_tail -> LBRACKET . params RBRACKET
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RBRACKET        reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 246
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 135

    (65) assignment_tail -> LBLOCK . params RBLOCK
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RBLOCK          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 247
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 136

    (175) Built_In_Declaration -> array LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 248
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 137

    (176) Built_In_Declaration -> pow LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 249
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 138

    (177) Built_In_Declaration -> POW LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 250
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 139

    (178) Built_In_Declaration -> abs LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 251
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 140

    (179) Built_In_Declaration -> cos LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 252
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 141

    (180) Built_In_Declaration -> deg2rad LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 253
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 142

    (181) Built_In_Declaration -> rad2deg LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 254
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 143

    (182) Built_In_Declaration -> die LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 255
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 144

    (183) Built_In_Declaration -> exp LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 256
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 145

    (184) Built_In_Declaration -> floor LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 257
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 146

    (185) Built_In_Declaration -> isset LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 258
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 147

    (186) Built_In_Declaration -> list LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 259
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 148

    (187) Built_In_Declaration -> log LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 260
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 149

    (188) Built_In_Declaration -> log10 LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 261
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 150

    (189) Built_In_Declaration -> max LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 262
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 151

    (190) Built_In_Declaration -> min LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 263
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 152

    (191) Built_In_Declaration -> rand LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 264
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 153

    (192) Built_In_Declaration -> round LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 265
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 154

    (193) Built_In_Declaration -> sin LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 266
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 155

    (194) Built_In_Declaration -> sqrt LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 267
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 156

    (195) Built_In_Declaration -> unset LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 268
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 157

    (29) header_declaration -> include CADENA SEMICOLON .

    COMMENT         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    empty           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    include         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    const           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    print           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    echo            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    while           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    do              reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    if              reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    function        reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    ID              reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    return          reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    class           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    new             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    interface       reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    trait           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    for             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    foreach         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    switch          reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    exit            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    VARIABLE        reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    array           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    pow             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    POW             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    abs             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    cos             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    deg2rad         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    rad2deg         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    die             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    exp             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    floor           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    isset           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    list            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    log             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    log10           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    max             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    min             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    rand            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    round           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    sin             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    sqrt            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    unset           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    CADENA          reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    $end            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    RBLOCK          reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    endwhile        reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    private         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    protected       reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    public          reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    var             reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    endfor          reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    endforeach      reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    break           reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    endswitch       reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    default         reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)
    case            reduce using rule 29 (header_declaration -> include CADENA SEMICOLON .)


state 158

    (197) Concatenar_Cadenas_declaration -> CADENA DOT CADENA .

    SEMICOLON       reduce using rule 197 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    COMMA           reduce using rule 197 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RPAREN          reduce using rule 197 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    COLON           reduce using rule 197 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RBRACKET        reduce using rule 197 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RBLOCK          reduce using rule 197 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)


state 159

    (198) Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .

    SEMICOLON       reduce using rule 198 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    COMMA           reduce using rule 198 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RPAREN          reduce using rule 198 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    COLON           reduce using rule 198 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RBRACKET        reduce using rule 198 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RBLOCK          reduce using rule 198 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)


state 160

    (30) constant_declaration -> const ID EQUAL . CADENA SEMICOLON
    (31) constant_declaration -> const ID EQUAL . NUMBER SEMICOLON

    CADENA          shift and go to state 269
    NUMBER          shift and go to state 270


state 161

    (120) fun_call -> ID LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 271
    COMMA           shift and go to state 183


state 162

    (151) single_param -> NUMBER .

    RPAREN          reduce using rule 151 (single_param -> NUMBER .)
    COMMA           reduce using rule 151 (single_param -> NUMBER .)
    RBRACKET        reduce using rule 151 (single_param -> NUMBER .)
    RBLOCK          reduce using rule 151 (single_param -> NUMBER .)
    SEMICOLON       reduce using rule 151 (single_param -> NUMBER .)
    COLON           reduce using rule 151 (single_param -> NUMBER .)


state 163

    (32) print_declaration -> print var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    empty           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    include         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    const           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    print           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    echo            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    while           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    do              reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    if              reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    function        reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    ID              reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    return          reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    class           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    new             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    interface       reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    trait           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    for             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    foreach         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    switch          reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    exit            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    array           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    pow             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    POW             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    abs             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    cos             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    die             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    exp             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    floor           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    isset           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    list            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    log             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    log10           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    max             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    min             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    rand            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    round           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    sin             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    unset           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    $end            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    private         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    protected       reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    public          reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    var             reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    endfor          reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    break           reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    default         reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)
    case            reduce using rule 32 (print_declaration -> print var_declaration2 SEMICOLON .)


state 164

    (33) print_declaration -> print LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 272


state 165

    (34) print_declaration -> print LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 273


state 166

    (35) print_declaration -> print LPAREN CADENA . RPAREN SEMICOLON
    (197) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    RPAREN          shift and go to state 274
    DOT             shift and go to state 76


state 167

    (36) print_declaration -> print NUMBER SEMICOLON .

    COMMENT         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    empty           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    include         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    const           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    print           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    echo            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    while           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    do              reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    if              reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    function        reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    ID              reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    return          reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    class           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    new             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    interface       reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    trait           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    for             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    foreach         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    switch          reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    exit            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    array           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    pow             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    POW             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    abs             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    cos             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    deg2rad         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    rad2deg         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    die             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    exp             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    floor           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    isset           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    list            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    log             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    log10           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    max             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    min             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    rand            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    round           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    sin             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    sqrt            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    unset           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    CADENA          reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    $end            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    endwhile        reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    private         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    protected       reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    public          reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    var             reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    endfor          reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    endforeach      reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    break           reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    endswitch       reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    default         reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)
    case            reduce using rule 36 (print_declaration -> print NUMBER SEMICOLON .)


state 168

    (37) print_declaration -> print CADENA SEMICOLON .

    COMMENT         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    empty           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    include         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    const           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    print           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    echo            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    while           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    do              reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    if              reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    function        reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    ID              reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    return          reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    class           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    new             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    interface       reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    trait           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    for             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    foreach         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    switch          reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    exit            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    VARIABLE        reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    array           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    pow             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    POW             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    abs             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    cos             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    deg2rad         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    rad2deg         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    die             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    exp             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    floor           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    isset           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    list            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    log             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    log10           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    max             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    min             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    rand            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    round           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    sin             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    sqrt            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    unset           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    CADENA          reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    $end            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    RBLOCK          reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    endwhile        reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    private         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    protected       reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    public          reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    var             reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    endfor          reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    endforeach      reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    break           reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    endswitch       reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    default         reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)
    case            reduce using rule 37 (print_declaration -> print CADENA SEMICOLON .)


state 169

    (38) echo_declaration -> echo var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    empty           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    const           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    print           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    echo            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    while           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    do              reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    if              reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    function        reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    ID              reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    return          reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    class           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    new             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    interface       reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    trait           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    for             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    foreach         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    switch          reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exit            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    array           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    pow             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    POW             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    abs             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    cos             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    die             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exp             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    floor           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    isset           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    list            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    log             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    log10           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    max             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    min             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    rand            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    round           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    sin             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    unset           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    $end            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    private         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    protected       reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    public          reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    var             reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endfor          reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    break           reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    default         reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    case            reduce using rule 38 (echo_declaration -> echo var_declaration2 SEMICOLON .)


state 170

    (39) echo_declaration -> echo LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 275


state 171

    (40) echo_declaration -> echo LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 276


state 172

    (41) echo_declaration -> echo LPAREN CADENA . RPAREN SEMICOLON
    (197) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (198) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    RPAREN          shift and go to state 277
    DOT             shift and go to state 76


state 173

    (42) echo_declaration -> echo NUMBER SEMICOLON .

    COMMENT         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    empty           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    include         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    const           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    print           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    echo            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    while           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    do              reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    if              reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    function        reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    ID              reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    return          reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    class           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    new             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    interface       reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    trait           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    for             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    foreach         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    switch          reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    exit            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    array           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    pow             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    POW             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    abs             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    cos             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    deg2rad         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    rad2deg         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    die             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    exp             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    floor           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    isset           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    list            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    log             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    log10           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    max             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    min             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    rand            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    round           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    sin             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    sqrt            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    unset           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    CADENA          reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    $end            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    endwhile        reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    private         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    protected       reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    public          reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    var             reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    endfor          reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    endforeach      reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    break           reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    endswitch       reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    default         reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)
    case            reduce using rule 42 (echo_declaration -> echo NUMBER SEMICOLON .)


state 174

    (43) echo_declaration -> echo CADENA SEMICOLON .

    COMMENT         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    empty           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    include         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    const           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    print           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    echo            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    while           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    do              reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    if              reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    function        reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    ID              reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    return          reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    class           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    new             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    interface       reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    trait           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    for             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    foreach         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    switch          reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    exit            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    VARIABLE        reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    array           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    pow             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    POW             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    abs             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    cos             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    deg2rad         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    rad2deg         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    die             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    exp             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    floor           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    isset           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    list            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    log             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    log10           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    max             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    min             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    rand            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    round           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    sin             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    sqrt            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    unset           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    CADENA          reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    $end            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    RBLOCK          reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    endwhile        reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    private         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    protected       reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    public          reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    var             reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    endfor          reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    endforeach      reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    break           reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    endswitch       reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    default         reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)
    case            reduce using rule 43 (echo_declaration -> echo CADENA SEMICOLON .)


state 175

    (69) iteration_stmt -> while LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> while LPAREN expression . RPAREN COLON declaration_list endwhile SEMICOLON

    RPAREN          shift and go to state 278


state 176

    (85) factor -> VARIABLE .

    PLUSPLUS        reduce using rule 85 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 85 (factor -> VARIABLE .)
    PLUS            reduce using rule 85 (factor -> VARIABLE .)
    MINUS           reduce using rule 85 (factor -> VARIABLE .)
    TIMES           reduce using rule 85 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 85 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 85 (factor -> VARIABLE .)
    MOD             reduce using rule 85 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 85 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 85 (factor -> VARIABLE .)
    NOT             reduce using rule 85 (factor -> VARIABLE .)
    or              reduce using rule 85 (factor -> VARIABLE .)
    and             reduce using rule 85 (factor -> VARIABLE .)
    xor             reduce using rule 85 (factor -> VARIABLE .)
    LESS            reduce using rule 85 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    GREATER         reduce using rule 85 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 85 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 85 (factor -> VARIABLE .)
    DISTINT         reduce using rule 85 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 85 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 85 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 85 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 85 (factor -> VARIABLE .)
    SR              reduce using rule 85 (factor -> VARIABLE .)
    SL              reduce using rule 85 (factor -> VARIABLE .)
    RPAREN          reduce using rule 85 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 85 (factor -> VARIABLE .)
    COMMA           reduce using rule 85 (factor -> VARIABLE .)
    COLON           reduce using rule 85 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 85 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 85 (factor -> VARIABLE .)
    as              reduce using rule 85 (factor -> VARIABLE .)


state 177

    (71) iteration_stmt -> do LBLOCK declaration_list . RBLOCK while LPAREN expression RPAREN SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 279
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 178

    (72) iteration_stmt -> do COLON declaration_list . endwhile SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endwhile        shift and go to state 280
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 179

    (113) if_statement -> if LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 281


state 180

    (118) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 282
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 181

    (121) return_statement -> return expression SEMICOLON .

    COMMENT         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    COMMENT_MULTI   reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    empty           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    include         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    const           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    print           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    echo            reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    while           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    do              reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    if              reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    function        reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    ID              reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    return          reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    class           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    new             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    interface       reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    trait           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    for             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    foreach         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    switch          reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    exit            reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    VARIABLE        reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    array           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    pow             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    POW             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    abs             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    cos             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    deg2rad         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    rad2deg         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    die             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    exp             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    floor           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    isset           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    list            reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    log             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    log10           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    max             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    min             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    rand            reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    round           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    sin             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    sqrt            reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    unset           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    CADENA          reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    $end            reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    RBLOCK          reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    endwhile        reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    private         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    protected       reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    public          reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    var             reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    endfor          reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    endforeach      reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    break           reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    endswitch       reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    default         reduce using rule 121 (return_statement -> return expression SEMICOLON .)
    case            reduce using rule 121 (return_statement -> return expression SEMICOLON .)


state 182

    (122) return_statement -> return params SEMICOLON .

    COMMENT         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 122 (return_statement -> return params SEMICOLON .)
    COMMENT_MULTI   reduce using rule 122 (return_statement -> return params SEMICOLON .)
    empty           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    include         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    const           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    print           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    echo            reduce using rule 122 (return_statement -> return params SEMICOLON .)
    while           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    do              reduce using rule 122 (return_statement -> return params SEMICOLON .)
    if              reduce using rule 122 (return_statement -> return params SEMICOLON .)
    function        reduce using rule 122 (return_statement -> return params SEMICOLON .)
    ID              reduce using rule 122 (return_statement -> return params SEMICOLON .)
    return          reduce using rule 122 (return_statement -> return params SEMICOLON .)
    class           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    new             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    interface       reduce using rule 122 (return_statement -> return params SEMICOLON .)
    trait           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    CLOSE_TAG       reduce using rule 122 (return_statement -> return params SEMICOLON .)
    for             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    foreach         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    switch          reduce using rule 122 (return_statement -> return params SEMICOLON .)
    exit            reduce using rule 122 (return_statement -> return params SEMICOLON .)
    VARIABLE        reduce using rule 122 (return_statement -> return params SEMICOLON .)
    array           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    pow             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    POW             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    abs             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    cos             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    deg2rad         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    rad2deg         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    die             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    exp             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    floor           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    isset           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    list            reduce using rule 122 (return_statement -> return params SEMICOLON .)
    log             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    log10           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    max             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    min             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    rand            reduce using rule 122 (return_statement -> return params SEMICOLON .)
    round           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    sin             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    sqrt            reduce using rule 122 (return_statement -> return params SEMICOLON .)
    unset           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    CADENA          reduce using rule 122 (return_statement -> return params SEMICOLON .)
    $end            reduce using rule 122 (return_statement -> return params SEMICOLON .)
    RBLOCK          reduce using rule 122 (return_statement -> return params SEMICOLON .)
    endwhile        reduce using rule 122 (return_statement -> return params SEMICOLON .)
    private         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    protected       reduce using rule 122 (return_statement -> return params SEMICOLON .)
    public          reduce using rule 122 (return_statement -> return params SEMICOLON .)
    var             reduce using rule 122 (return_statement -> return params SEMICOLON .)
    endfor          reduce using rule 122 (return_statement -> return params SEMICOLON .)
    endforeach      reduce using rule 122 (return_statement -> return params SEMICOLON .)
    break           reduce using rule 122 (return_statement -> return params SEMICOLON .)
    endswitch       reduce using rule 122 (return_statement -> return params SEMICOLON .)
    default         reduce using rule 122 (return_statement -> return params SEMICOLON .)
    case            reduce using rule 122 (return_statement -> return params SEMICOLON .)


state 183

    (149) params -> params COMMA . single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    SEMICOLON       reduce using rule 208 (empty_function -> .)
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    COLON           reduce using rule 208 (empty_function -> .)
    RBRACKET        reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    single_param                   shift and go to state 283
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 184

    (124) return_statement -> return ID LPAREN . expression RPAREN SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 284
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 185

    (86) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 285


state 186

    (74) expression -> additive_expression logical_op . additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    additive_expression            shift and go to state 286
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 187

    (75) expression -> additive_expression comp_op . additive_expression
    (76) expression -> additive_expression comp_op . additive_expression logical_op additive_expression comp_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    additive_expression            shift and go to state 287
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 188

    (77) expression -> additive_expression bits_op . additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    additive_expression            shift and go to state 288
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 189

    (107) logical_op -> BOOL_OR .

    MINUS           reduce using rule 107 (logical_op -> BOOL_OR .)
    NUMBER          reduce using rule 107 (logical_op -> BOOL_OR .)
    VARIABLE        reduce using rule 107 (logical_op -> BOOL_OR .)
    LPAREN          reduce using rule 107 (logical_op -> BOOL_OR .)
    PLUSPLUS        reduce using rule 107 (logical_op -> BOOL_OR .)
    MINUSMINUS      reduce using rule 107 (logical_op -> BOOL_OR .)


state 190

    (108) logical_op -> BOOL_AND .

    MINUS           reduce using rule 108 (logical_op -> BOOL_AND .)
    NUMBER          reduce using rule 108 (logical_op -> BOOL_AND .)
    VARIABLE        reduce using rule 108 (logical_op -> BOOL_AND .)
    LPAREN          reduce using rule 108 (logical_op -> BOOL_AND .)
    PLUSPLUS        reduce using rule 108 (logical_op -> BOOL_AND .)
    MINUSMINUS      reduce using rule 108 (logical_op -> BOOL_AND .)


state 191

    (109) logical_op -> NOT .

    MINUS           reduce using rule 109 (logical_op -> NOT .)
    NUMBER          reduce using rule 109 (logical_op -> NOT .)
    VARIABLE        reduce using rule 109 (logical_op -> NOT .)
    LPAREN          reduce using rule 109 (logical_op -> NOT .)
    PLUSPLUS        reduce using rule 109 (logical_op -> NOT .)
    MINUSMINUS      reduce using rule 109 (logical_op -> NOT .)


state 192

    (110) logical_op -> or .

    MINUS           reduce using rule 110 (logical_op -> or .)
    NUMBER          reduce using rule 110 (logical_op -> or .)
    VARIABLE        reduce using rule 110 (logical_op -> or .)
    LPAREN          reduce using rule 110 (logical_op -> or .)
    PLUSPLUS        reduce using rule 110 (logical_op -> or .)
    MINUSMINUS      reduce using rule 110 (logical_op -> or .)


state 193

    (111) logical_op -> and .

    MINUS           reduce using rule 111 (logical_op -> and .)
    NUMBER          reduce using rule 111 (logical_op -> and .)
    VARIABLE        reduce using rule 111 (logical_op -> and .)
    LPAREN          reduce using rule 111 (logical_op -> and .)
    PLUSPLUS        reduce using rule 111 (logical_op -> and .)
    MINUSMINUS      reduce using rule 111 (logical_op -> and .)


state 194

    (112) logical_op -> xor .

    MINUS           reduce using rule 112 (logical_op -> xor .)
    NUMBER          reduce using rule 112 (logical_op -> xor .)
    VARIABLE        reduce using rule 112 (logical_op -> xor .)
    LPAREN          reduce using rule 112 (logical_op -> xor .)
    PLUSPLUS        reduce using rule 112 (logical_op -> xor .)
    MINUSMINUS      reduce using rule 112 (logical_op -> xor .)


state 195

    (97) comp_op -> LESS .

    MINUS           reduce using rule 97 (comp_op -> LESS .)
    NUMBER          reduce using rule 97 (comp_op -> LESS .)
    VARIABLE        reduce using rule 97 (comp_op -> LESS .)
    LPAREN          reduce using rule 97 (comp_op -> LESS .)
    PLUSPLUS        reduce using rule 97 (comp_op -> LESS .)
    MINUSMINUS      reduce using rule 97 (comp_op -> LESS .)


state 196

    (98) comp_op -> LESSEQUAL .

    MINUS           reduce using rule 98 (comp_op -> LESSEQUAL .)
    NUMBER          reduce using rule 98 (comp_op -> LESSEQUAL .)
    VARIABLE        reduce using rule 98 (comp_op -> LESSEQUAL .)
    LPAREN          reduce using rule 98 (comp_op -> LESSEQUAL .)
    PLUSPLUS        reduce using rule 98 (comp_op -> LESSEQUAL .)
    MINUSMINUS      reduce using rule 98 (comp_op -> LESSEQUAL .)


state 197

    (99) comp_op -> GREATER .

    MINUS           reduce using rule 99 (comp_op -> GREATER .)
    NUMBER          reduce using rule 99 (comp_op -> GREATER .)
    VARIABLE        reduce using rule 99 (comp_op -> GREATER .)
    LPAREN          reduce using rule 99 (comp_op -> GREATER .)
    PLUSPLUS        reduce using rule 99 (comp_op -> GREATER .)
    MINUSMINUS      reduce using rule 99 (comp_op -> GREATER .)


state 198

    (100) comp_op -> GREATEREQUAL .

    MINUS           reduce using rule 100 (comp_op -> GREATEREQUAL .)
    NUMBER          reduce using rule 100 (comp_op -> GREATEREQUAL .)
    VARIABLE        reduce using rule 100 (comp_op -> GREATEREQUAL .)
    LPAREN          reduce using rule 100 (comp_op -> GREATEREQUAL .)
    PLUSPLUS        reduce using rule 100 (comp_op -> GREATEREQUAL .)
    MINUSMINUS      reduce using rule 100 (comp_op -> GREATEREQUAL .)


state 199

    (101) comp_op -> DEQUAL .

    MINUS           reduce using rule 101 (comp_op -> DEQUAL .)
    NUMBER          reduce using rule 101 (comp_op -> DEQUAL .)
    VARIABLE        reduce using rule 101 (comp_op -> DEQUAL .)
    LPAREN          reduce using rule 101 (comp_op -> DEQUAL .)
    PLUSPLUS        reduce using rule 101 (comp_op -> DEQUAL .)
    MINUSMINUS      reduce using rule 101 (comp_op -> DEQUAL .)


state 200

    (102) comp_op -> DISTINT .

    MINUS           reduce using rule 102 (comp_op -> DISTINT .)
    NUMBER          reduce using rule 102 (comp_op -> DISTINT .)
    VARIABLE        reduce using rule 102 (comp_op -> DISTINT .)
    LPAREN          reduce using rule 102 (comp_op -> DISTINT .)
    PLUSPLUS        reduce using rule 102 (comp_op -> DISTINT .)
    MINUSMINUS      reduce using rule 102 (comp_op -> DISTINT .)


state 201

    (103) comp_op -> DIVEQUAL .

    MINUS           reduce using rule 103 (comp_op -> DIVEQUAL .)
    NUMBER          reduce using rule 103 (comp_op -> DIVEQUAL .)
    VARIABLE        reduce using rule 103 (comp_op -> DIVEQUAL .)
    LPAREN          reduce using rule 103 (comp_op -> DIVEQUAL .)
    PLUSPLUS        reduce using rule 103 (comp_op -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 103 (comp_op -> DIVEQUAL .)


state 202

    (104) comp_op -> ISEQUAL .

    MINUS           reduce using rule 104 (comp_op -> ISEQUAL .)
    NUMBER          reduce using rule 104 (comp_op -> ISEQUAL .)
    VARIABLE        reduce using rule 104 (comp_op -> ISEQUAL .)
    LPAREN          reduce using rule 104 (comp_op -> ISEQUAL .)
    PLUSPLUS        reduce using rule 104 (comp_op -> ISEQUAL .)
    MINUSMINUS      reduce using rule 104 (comp_op -> ISEQUAL .)


state 203

    (105) comp_op -> ISIDENTICAL .

    MINUS           reduce using rule 105 (comp_op -> ISIDENTICAL .)
    NUMBER          reduce using rule 105 (comp_op -> ISIDENTICAL .)
    VARIABLE        reduce using rule 105 (comp_op -> ISIDENTICAL .)
    LPAREN          reduce using rule 105 (comp_op -> ISIDENTICAL .)
    PLUSPLUS        reduce using rule 105 (comp_op -> ISIDENTICAL .)
    MINUSMINUS      reduce using rule 105 (comp_op -> ISIDENTICAL .)


state 204

    (106) comp_op -> ISNOTIDENTICAL .

    MINUS           reduce using rule 106 (comp_op -> ISNOTIDENTICAL .)
    NUMBER          reduce using rule 106 (comp_op -> ISNOTIDENTICAL .)
    VARIABLE        reduce using rule 106 (comp_op -> ISNOTIDENTICAL .)
    LPAREN          reduce using rule 106 (comp_op -> ISNOTIDENTICAL .)
    PLUSPLUS        reduce using rule 106 (comp_op -> ISNOTIDENTICAL .)
    MINUSMINUS      reduce using rule 106 (comp_op -> ISNOTIDENTICAL .)


state 205

    (200) bits_op -> AMPERSANT .

    MINUS           reduce using rule 200 (bits_op -> AMPERSANT .)
    NUMBER          reduce using rule 200 (bits_op -> AMPERSANT .)
    VARIABLE        reduce using rule 200 (bits_op -> AMPERSANT .)
    LPAREN          reduce using rule 200 (bits_op -> AMPERSANT .)
    PLUSPLUS        reduce using rule 200 (bits_op -> AMPERSANT .)
    MINUSMINUS      reduce using rule 200 (bits_op -> AMPERSANT .)


state 206

    (201) bits_op -> SR .

    MINUS           reduce using rule 201 (bits_op -> SR .)
    NUMBER          reduce using rule 201 (bits_op -> SR .)
    VARIABLE        reduce using rule 201 (bits_op -> SR .)
    LPAREN          reduce using rule 201 (bits_op -> SR .)
    PLUSPLUS        reduce using rule 201 (bits_op -> SR .)
    MINUSMINUS      reduce using rule 201 (bits_op -> SR .)


state 207

    (202) bits_op -> SL .

    MINUS           reduce using rule 202 (bits_op -> SL .)
    NUMBER          reduce using rule 202 (bits_op -> SL .)
    VARIABLE        reduce using rule 202 (bits_op -> SL .)
    LPAREN          reduce using rule 202 (bits_op -> SL .)
    PLUSPLUS        reduce using rule 202 (bits_op -> SL .)
    MINUSMINUS      reduce using rule 202 (bits_op -> SL .)


state 208

    (79) additive_expression -> term math_op . term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    term                           shift and go to state 289
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 209

    (89) math_op -> PLUS .

    MINUS           reduce using rule 89 (math_op -> PLUS .)
    NUMBER          reduce using rule 89 (math_op -> PLUS .)
    VARIABLE        reduce using rule 89 (math_op -> PLUS .)
    LPAREN          reduce using rule 89 (math_op -> PLUS .)
    PLUSPLUS        reduce using rule 89 (math_op -> PLUS .)
    MINUSMINUS      reduce using rule 89 (math_op -> PLUS .)


state 210

    (90) math_op -> MINUS .

    MINUS           reduce using rule 90 (math_op -> MINUS .)
    NUMBER          reduce using rule 90 (math_op -> MINUS .)
    VARIABLE        reduce using rule 90 (math_op -> MINUS .)
    LPAREN          reduce using rule 90 (math_op -> MINUS .)
    PLUSPLUS        reduce using rule 90 (math_op -> MINUS .)
    MINUSMINUS      reduce using rule 90 (math_op -> MINUS .)


state 211

    (91) math_op -> TIMES .

    MINUS           reduce using rule 91 (math_op -> TIMES .)
    NUMBER          reduce using rule 91 (math_op -> TIMES .)
    VARIABLE        reduce using rule 91 (math_op -> TIMES .)
    LPAREN          reduce using rule 91 (math_op -> TIMES .)
    PLUSPLUS        reduce using rule 91 (math_op -> TIMES .)
    MINUSMINUS      reduce using rule 91 (math_op -> TIMES .)


state 212

    (92) math_op -> DIVIDE .

    MINUS           reduce using rule 92 (math_op -> DIVIDE .)
    NUMBER          reduce using rule 92 (math_op -> DIVIDE .)
    VARIABLE        reduce using rule 92 (math_op -> DIVIDE .)
    LPAREN          reduce using rule 92 (math_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 92 (math_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 92 (math_op -> DIVIDE .)


state 213

    (93) math_op -> MULEQUAL .

    MINUS           reduce using rule 93 (math_op -> MULEQUAL .)
    NUMBER          reduce using rule 93 (math_op -> MULEQUAL .)
    VARIABLE        reduce using rule 93 (math_op -> MULEQUAL .)
    LPAREN          reduce using rule 93 (math_op -> MULEQUAL .)
    PLUSPLUS        reduce using rule 93 (math_op -> MULEQUAL .)
    MINUSMINUS      reduce using rule 93 (math_op -> MULEQUAL .)


state 214

    (94) math_op -> PLUSEQUAL .

    MINUS           reduce using rule 94 (math_op -> PLUSEQUAL .)
    NUMBER          reduce using rule 94 (math_op -> PLUSEQUAL .)
    VARIABLE        reduce using rule 94 (math_op -> PLUSEQUAL .)
    LPAREN          reduce using rule 94 (math_op -> PLUSEQUAL .)
    PLUSPLUS        reduce using rule 94 (math_op -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 94 (math_op -> PLUSEQUAL .)


state 215

    (95) math_op -> MINUSEQUAL .

    MINUS           reduce using rule 95 (math_op -> MINUSEQUAL .)
    NUMBER          reduce using rule 95 (math_op -> MINUSEQUAL .)
    VARIABLE        reduce using rule 95 (math_op -> MINUSEQUAL .)
    LPAREN          reduce using rule 95 (math_op -> MINUSEQUAL .)
    PLUSPLUS        reduce using rule 95 (math_op -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 95 (math_op -> MINUSEQUAL .)


state 216

    (96) math_op -> MOD .

    MINUS           reduce using rule 96 (math_op -> MOD .)
    NUMBER          reduce using rule 96 (math_op -> MOD .)
    VARIABLE        reduce using rule 96 (math_op -> MOD .)
    LPAREN          reduce using rule 96 (math_op -> MOD .)
    PLUSPLUS        reduce using rule 96 (math_op -> MOD .)
    MINUSMINUS      reduce using rule 96 (math_op -> MOD .)


state 217

    (80) term -> MINUS term .

    PLUS            reduce using rule 80 (term -> MINUS term .)
    MINUS           reduce using rule 80 (term -> MINUS term .)
    TIMES           reduce using rule 80 (term -> MINUS term .)
    DIVIDE          reduce using rule 80 (term -> MINUS term .)
    MULEQUAL        reduce using rule 80 (term -> MINUS term .)
    PLUSEQUAL       reduce using rule 80 (term -> MINUS term .)
    MINUSEQUAL      reduce using rule 80 (term -> MINUS term .)
    MOD             reduce using rule 80 (term -> MINUS term .)
    BOOL_OR         reduce using rule 80 (term -> MINUS term .)
    BOOL_AND        reduce using rule 80 (term -> MINUS term .)
    NOT             reduce using rule 80 (term -> MINUS term .)
    or              reduce using rule 80 (term -> MINUS term .)
    and             reduce using rule 80 (term -> MINUS term .)
    xor             reduce using rule 80 (term -> MINUS term .)
    LESS            reduce using rule 80 (term -> MINUS term .)
    LESSEQUAL       reduce using rule 80 (term -> MINUS term .)
    GREATER         reduce using rule 80 (term -> MINUS term .)
    GREATEREQUAL    reduce using rule 80 (term -> MINUS term .)
    DEQUAL          reduce using rule 80 (term -> MINUS term .)
    DISTINT         reduce using rule 80 (term -> MINUS term .)
    DIVEQUAL        reduce using rule 80 (term -> MINUS term .)
    ISEQUAL         reduce using rule 80 (term -> MINUS term .)
    ISIDENTICAL     reduce using rule 80 (term -> MINUS term .)
    ISNOTIDENTICAL  reduce using rule 80 (term -> MINUS term .)
    AMPERSANT       reduce using rule 80 (term -> MINUS term .)
    SR              reduce using rule 80 (term -> MINUS term .)
    SL              reduce using rule 80 (term -> MINUS term .)
    SEMICOLON       reduce using rule 80 (term -> MINUS term .)
    RPAREN          reduce using rule 80 (term -> MINUS term .)
    COMMA           reduce using rule 80 (term -> MINUS term .)
    COLON           reduce using rule 80 (term -> MINUS term .)
    RBRACKET        reduce using rule 80 (term -> MINUS term .)
    RBLOCK          reduce using rule 80 (term -> MINUS term .)
    as              reduce using rule 80 (term -> MINUS term .)


state 218

    (82) term -> factor increment_decrement_op .

    PLUS            reduce using rule 82 (term -> factor increment_decrement_op .)
    MINUS           reduce using rule 82 (term -> factor increment_decrement_op .)
    TIMES           reduce using rule 82 (term -> factor increment_decrement_op .)
    DIVIDE          reduce using rule 82 (term -> factor increment_decrement_op .)
    MULEQUAL        reduce using rule 82 (term -> factor increment_decrement_op .)
    PLUSEQUAL       reduce using rule 82 (term -> factor increment_decrement_op .)
    MINUSEQUAL      reduce using rule 82 (term -> factor increment_decrement_op .)
    MOD             reduce using rule 82 (term -> factor increment_decrement_op .)
    BOOL_OR         reduce using rule 82 (term -> factor increment_decrement_op .)
    BOOL_AND        reduce using rule 82 (term -> factor increment_decrement_op .)
    NOT             reduce using rule 82 (term -> factor increment_decrement_op .)
    or              reduce using rule 82 (term -> factor increment_decrement_op .)
    and             reduce using rule 82 (term -> factor increment_decrement_op .)
    xor             reduce using rule 82 (term -> factor increment_decrement_op .)
    LESS            reduce using rule 82 (term -> factor increment_decrement_op .)
    LESSEQUAL       reduce using rule 82 (term -> factor increment_decrement_op .)
    GREATER         reduce using rule 82 (term -> factor increment_decrement_op .)
    GREATEREQUAL    reduce using rule 82 (term -> factor increment_decrement_op .)
    DEQUAL          reduce using rule 82 (term -> factor increment_decrement_op .)
    DISTINT         reduce using rule 82 (term -> factor increment_decrement_op .)
    DIVEQUAL        reduce using rule 82 (term -> factor increment_decrement_op .)
    ISEQUAL         reduce using rule 82 (term -> factor increment_decrement_op .)
    ISIDENTICAL     reduce using rule 82 (term -> factor increment_decrement_op .)
    ISNOTIDENTICAL  reduce using rule 82 (term -> factor increment_decrement_op .)
    AMPERSANT       reduce using rule 82 (term -> factor increment_decrement_op .)
    SR              reduce using rule 82 (term -> factor increment_decrement_op .)
    SL              reduce using rule 82 (term -> factor increment_decrement_op .)
    SEMICOLON       reduce using rule 82 (term -> factor increment_decrement_op .)
    RPAREN          reduce using rule 82 (term -> factor increment_decrement_op .)
    COMMA           reduce using rule 82 (term -> factor increment_decrement_op .)
    COLON           reduce using rule 82 (term -> factor increment_decrement_op .)
    RBRACKET        reduce using rule 82 (term -> factor increment_decrement_op .)
    RBLOCK          reduce using rule 82 (term -> factor increment_decrement_op .)
    as              reduce using rule 82 (term -> factor increment_decrement_op .)


state 219

    (83) term -> increment_decrement_op factor .

    PLUS            reduce using rule 83 (term -> increment_decrement_op factor .)
    MINUS           reduce using rule 83 (term -> increment_decrement_op factor .)
    TIMES           reduce using rule 83 (term -> increment_decrement_op factor .)
    DIVIDE          reduce using rule 83 (term -> increment_decrement_op factor .)
    MULEQUAL        reduce using rule 83 (term -> increment_decrement_op factor .)
    PLUSEQUAL       reduce using rule 83 (term -> increment_decrement_op factor .)
    MINUSEQUAL      reduce using rule 83 (term -> increment_decrement_op factor .)
    MOD             reduce using rule 83 (term -> increment_decrement_op factor .)
    BOOL_OR         reduce using rule 83 (term -> increment_decrement_op factor .)
    BOOL_AND        reduce using rule 83 (term -> increment_decrement_op factor .)
    NOT             reduce using rule 83 (term -> increment_decrement_op factor .)
    or              reduce using rule 83 (term -> increment_decrement_op factor .)
    and             reduce using rule 83 (term -> increment_decrement_op factor .)
    xor             reduce using rule 83 (term -> increment_decrement_op factor .)
    LESS            reduce using rule 83 (term -> increment_decrement_op factor .)
    LESSEQUAL       reduce using rule 83 (term -> increment_decrement_op factor .)
    GREATER         reduce using rule 83 (term -> increment_decrement_op factor .)
    GREATEREQUAL    reduce using rule 83 (term -> increment_decrement_op factor .)
    DEQUAL          reduce using rule 83 (term -> increment_decrement_op factor .)
    DISTINT         reduce using rule 83 (term -> increment_decrement_op factor .)
    DIVEQUAL        reduce using rule 83 (term -> increment_decrement_op factor .)
    ISEQUAL         reduce using rule 83 (term -> increment_decrement_op factor .)
    ISIDENTICAL     reduce using rule 83 (term -> increment_decrement_op factor .)
    ISNOTIDENTICAL  reduce using rule 83 (term -> increment_decrement_op factor .)
    AMPERSANT       reduce using rule 83 (term -> increment_decrement_op factor .)
    SR              reduce using rule 83 (term -> increment_decrement_op factor .)
    SL              reduce using rule 83 (term -> increment_decrement_op factor .)
    SEMICOLON       reduce using rule 83 (term -> increment_decrement_op factor .)
    RPAREN          reduce using rule 83 (term -> increment_decrement_op factor .)
    COMMA           reduce using rule 83 (term -> increment_decrement_op factor .)
    COLON           reduce using rule 83 (term -> increment_decrement_op factor .)
    RBRACKET        reduce using rule 83 (term -> increment_decrement_op factor .)
    RBLOCK          reduce using rule 83 (term -> increment_decrement_op factor .)
    as              reduce using rule 83 (term -> increment_decrement_op factor .)


state 220

    (125) class_declaration -> class ID LBLOCK . class_body RBLOCK
    (127) class_body -> . class_body_element
    (128) class_body -> . class_body class_body_element
    (129) class_body -> . empty_function
    (130) class_body_element -> . visibility var_declaration2 SEMICOLON
    (131) class_body_element -> . visibility fun_declaration
    (132) class_body_element -> . declaration
    (208) empty_function -> .
    (144) visibility -> . private
    (145) visibility -> . protected
    (146) visibility -> . public
    (147) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 208 (empty_function -> .)
    private         shift and go to state 295
    protected       shift and go to state 296
    public          shift and go to state 297
    var             shift and go to state 298
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

  ! private         [ reduce using rule 208 (empty_function -> .) ]
  ! protected       [ reduce using rule 208 (empty_function -> .) ]
  ! public          [ reduce using rule 208 (empty_function -> .) ]
  ! var             [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 208 (empty_function -> .) ]
  ! empty           [ reduce using rule 208 (empty_function -> .) ]
  ! include         [ reduce using rule 208 (empty_function -> .) ]
  ! const           [ reduce using rule 208 (empty_function -> .) ]
  ! print           [ reduce using rule 208 (empty_function -> .) ]
  ! echo            [ reduce using rule 208 (empty_function -> .) ]
  ! while           [ reduce using rule 208 (empty_function -> .) ]
  ! do              [ reduce using rule 208 (empty_function -> .) ]
  ! if              [ reduce using rule 208 (empty_function -> .) ]
  ! function        [ reduce using rule 208 (empty_function -> .) ]
  ! ID              [ reduce using rule 208 (empty_function -> .) ]
  ! return          [ reduce using rule 208 (empty_function -> .) ]
  ! class           [ reduce using rule 208 (empty_function -> .) ]
  ! new             [ reduce using rule 208 (empty_function -> .) ]
  ! interface       [ reduce using rule 208 (empty_function -> .) ]
  ! trait           [ reduce using rule 208 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 208 (empty_function -> .) ]
  ! for             [ reduce using rule 208 (empty_function -> .) ]
  ! foreach         [ reduce using rule 208 (empty_function -> .) ]
  ! switch          [ reduce using rule 208 (empty_function -> .) ]
  ! exit            [ reduce using rule 208 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 208 (empty_function -> .) ]
  ! array           [ reduce using rule 208 (empty_function -> .) ]
  ! pow             [ reduce using rule 208 (empty_function -> .) ]
  ! POW             [ reduce using rule 208 (empty_function -> .) ]
  ! abs             [ reduce using rule 208 (empty_function -> .) ]
  ! cos             [ reduce using rule 208 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 208 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 208 (empty_function -> .) ]
  ! die             [ reduce using rule 208 (empty_function -> .) ]
  ! exp             [ reduce using rule 208 (empty_function -> .) ]
  ! floor           [ reduce using rule 208 (empty_function -> .) ]
  ! isset           [ reduce using rule 208 (empty_function -> .) ]
  ! list            [ reduce using rule 208 (empty_function -> .) ]
  ! log             [ reduce using rule 208 (empty_function -> .) ]
  ! log10           [ reduce using rule 208 (empty_function -> .) ]
  ! max             [ reduce using rule 208 (empty_function -> .) ]
  ! min             [ reduce using rule 208 (empty_function -> .) ]
  ! rand            [ reduce using rule 208 (empty_function -> .) ]
  ! round           [ reduce using rule 208 (empty_function -> .) ]
  ! sin             [ reduce using rule 208 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 208 (empty_function -> .) ]
  ! unset           [ reduce using rule 208 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 208 (empty_function -> .) ]

    class_body                     shift and go to state 290
    class_body_element             shift and go to state 291
    empty_function                 shift and go to state 292
    visibility                     shift and go to state 293
    var_declaration2               shift and go to state 31
    fun_declaration                shift and go to state 16
    declaration                    shift and go to state 294
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 221

    (126) create_obj_declaration -> new ID LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 299
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 222

    (133) interface_declaration -> interface ID LBLOCK . interface_body RBLOCK
    (134) interface_body -> . interface_method_declaration
    (135) interface_body -> . interface_body interface_method_declaration
    (136) interface_body -> . empty_function
    (137) interface_method_declaration -> . visibility function ID LPAREN params RPAREN SEMICOLON
    (208) empty_function -> .
    (144) visibility -> . private
    (145) visibility -> . protected
    (146) visibility -> . public
    (147) visibility -> . var

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
    RBLOCK          reduce using rule 208 (empty_function -> .)
    private         shift and go to state 295
    protected       shift and go to state 296
    public          shift and go to state 297
    var             shift and go to state 298

  ! private         [ reduce using rule 208 (empty_function -> .) ]
  ! protected       [ reduce using rule 208 (empty_function -> .) ]
  ! public          [ reduce using rule 208 (empty_function -> .) ]
  ! var             [ reduce using rule 208 (empty_function -> .) ]

    interface_body                 shift and go to state 300
    interface_method_declaration   shift and go to state 301
    empty_function                 shift and go to state 302
    visibility                     shift and go to state 303

state 223

    (138) trait_declaration -> trait ID LBLOCK . trait_body RBLOCK
    (139) trait_body -> . trait_element
    (140) trait_body -> . trait_body trait_element
    (141) trait_body -> . empty_function
    (142) trait_element -> . visibility var_declaration SEMICOLON
    (143) trait_element -> . visibility fun_declaration
    (208) empty_function -> .
    (144) visibility -> . private
    (145) visibility -> . protected
    (146) visibility -> . public
    (147) visibility -> . var

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
    RBLOCK          reduce using rule 208 (empty_function -> .)
    private         shift and go to state 295
    protected       shift and go to state 296
    public          shift and go to state 297
    var             shift and go to state 298

  ! private         [ reduce using rule 208 (empty_function -> .) ]
  ! protected       [ reduce using rule 208 (empty_function -> .) ]
  ! public          [ reduce using rule 208 (empty_function -> .) ]
  ! var             [ reduce using rule 208 (empty_function -> .) ]

    trait_body                     shift and go to state 304
    trait_element                  shift and go to state 305
    empty_function                 shift and go to state 306
    visibility                     shift and go to state 307

state 224

    (154) for_loop -> for LPAREN for_init . for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> for LPAREN for_init . for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (157) for_expr -> . expression SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    for_expr                       shift and go to state 308
    expression                     shift and go to state 309
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 225

    (156) for_init -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 310


state 226

    (160) foreach_loop -> foreach LPAREN expression . as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> foreach LPAREN expression . as expression RPAREN COLON declaration_list endforeach SEMICOLON

    as              shift and go to state 311


state 227

    (162) switch_statement -> switch LPAREN expression . RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> switch LPAREN expression . RPAREN COLON case_blocks default_block endswitch SEMICOLON

    RPAREN          shift and go to state 312


state 228

    (159) exit_statement -> exit LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 313


state 229

    (66) assignment_tail -> VARIABLE LBRACKET . expression COMMA params
    (67) assignment_tail -> VARIABLE LBRACKET . params RBRACKET
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 102
    CADENA          shift and go to state 103
    MINUS           shift and go to state 105
    VARIABLE        shift and go to state 108
    RBRACKET        reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    expression                     shift and go to state 314
    params                         shift and go to state 315
    additive_expression            shift and go to state 98
    single_param                   shift and go to state 99
    term                           shift and go to state 100
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 230

    (68) assignment_tail -> VARIABLE LBLOCK . params RBLOCK
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RBLOCK          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 316
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 231

    (48) var_declaration2 -> VARIABLE EQUAL VARIABLE .
    (66) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (67) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (68) assignment_tail -> VARIABLE . LBLOCK params RBLOCK
    (85) factor -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    SEMICOLON       reduce using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COMMA           reduce using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RPAREN          reduce using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COLON           reduce using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBRACKET        reduce using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBLOCK          reduce using rule 48 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    LBRACKET        shift and go to state 229
    LBLOCK          shift and go to state 230
    PLUSPLUS        reduce using rule 85 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 85 (factor -> VARIABLE .)
    PLUS            reduce using rule 85 (factor -> VARIABLE .)
    MINUS           reduce using rule 85 (factor -> VARIABLE .)
    TIMES           reduce using rule 85 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 85 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 85 (factor -> VARIABLE .)
    MOD             reduce using rule 85 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 85 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 85 (factor -> VARIABLE .)
    NOT             reduce using rule 85 (factor -> VARIABLE .)
    or              reduce using rule 85 (factor -> VARIABLE .)
    and             reduce using rule 85 (factor -> VARIABLE .)
    xor             reduce using rule 85 (factor -> VARIABLE .)
    LESS            reduce using rule 85 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 85 (factor -> VARIABLE .)
    GREATER         reduce using rule 85 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 85 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 85 (factor -> VARIABLE .)
    DISTINT         reduce using rule 85 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 85 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 85 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 85 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 85 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 85 (factor -> VARIABLE .)
    SR              reduce using rule 85 (factor -> VARIABLE .)
    SL              reduce using rule 85 (factor -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 85 (factor -> VARIABLE .) ]
  ! RBLOCK          [ reduce using rule 85 (factor -> VARIABLE .) ]


state 232

    (47) var_declaration2 -> VARIABLE EQUAL NUMBER .
    (84) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    SEMICOLON       reduce using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COMMA           reduce using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RPAREN          reduce using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COLON           reduce using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBRACKET        reduce using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBLOCK          reduce using rule 47 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    PLUSPLUS        reduce using rule 84 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 84 (factor -> NUMBER .)
    PLUS            reduce using rule 84 (factor -> NUMBER .)
    MINUS           reduce using rule 84 (factor -> NUMBER .)
    TIMES           reduce using rule 84 (factor -> NUMBER .)
    DIVIDE          reduce using rule 84 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 84 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 84 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 84 (factor -> NUMBER .)
    MOD             reduce using rule 84 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 84 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 84 (factor -> NUMBER .)
    NOT             reduce using rule 84 (factor -> NUMBER .)
    or              reduce using rule 84 (factor -> NUMBER .)
    and             reduce using rule 84 (factor -> NUMBER .)
    xor             reduce using rule 84 (factor -> NUMBER .)
    LESS            reduce using rule 84 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 84 (factor -> NUMBER .)
    GREATER         reduce using rule 84 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 84 (factor -> NUMBER .)
    DEQUAL          reduce using rule 84 (factor -> NUMBER .)
    DISTINT         reduce using rule 84 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 84 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 84 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 84 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 84 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 84 (factor -> NUMBER .)
    SR              reduce using rule 84 (factor -> NUMBER .)
    SL              reduce using rule 84 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 84 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 84 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 84 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 84 (factor -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 84 (factor -> NUMBER .) ]
  ! RBLOCK          [ reduce using rule 84 (factor -> NUMBER .) ]


state 233

    (49) var_declaration2 -> VARIABLE EQUAL CADENA .

    SEMICOLON       reduce using rule 49 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COMMA           reduce using rule 49 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RPAREN          reduce using rule 49 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COLON           reduce using rule 49 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBRACKET        reduce using rule 49 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBLOCK          reduce using rule 49 (var_declaration2 -> VARIABLE EQUAL CADENA .)


state 234

    (50) var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .

    SEMICOLON       reduce using rule 50 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    COMMA           reduce using rule 50 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RPAREN          reduce using rule 50 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    COLON           reduce using rule 50 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RBRACKET        reduce using rule 50 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RBLOCK          reduce using rule 50 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)


state 235

    (51) var_declaration2 -> VARIABLE EQUAL expression .

    SEMICOLON       reduce using rule 51 (var_declaration2 -> VARIABLE EQUAL expression .)
    COMMA           reduce using rule 51 (var_declaration2 -> VARIABLE EQUAL expression .)
    RPAREN          reduce using rule 51 (var_declaration2 -> VARIABLE EQUAL expression .)
    COLON           reduce using rule 51 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBRACKET        reduce using rule 51 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBLOCK          reduce using rule 51 (var_declaration2 -> VARIABLE EQUAL expression .)


state 236

    (56) var_declaration2 -> VARIABLE EQUAL ID . LPAREN params RPAREN

    LPAREN          shift and go to state 317


state 237

    (60) var_declaration2 -> VARIABLE EQUAL create_obj_declaration .

    SEMICOLON       reduce using rule 60 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    COMMA           reduce using rule 60 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RPAREN          reduce using rule 60 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    COLON           reduce using rule 60 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RBRACKET        reduce using rule 60 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RBLOCK          reduce using rule 60 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)


state 238

    (62) var_declaration2 -> VARIABLE EQUAL assignment_tail .

    SEMICOLON       reduce using rule 62 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COMMA           reduce using rule 62 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RPAREN          reduce using rule 62 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COLON           reduce using rule 62 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBRACKET        reduce using rule 62 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBLOCK          reduce using rule 62 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)


state 239

    (52) var_declaration2 -> VARIABLE assignation VARIABLE .

    SEMICOLON       reduce using rule 52 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    COMMA           reduce using rule 52 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RPAREN          reduce using rule 52 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    COLON           reduce using rule 52 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RBRACKET        reduce using rule 52 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RBLOCK          reduce using rule 52 (var_declaration2 -> VARIABLE assignation VARIABLE .)


state 240

    (53) var_declaration2 -> VARIABLE assignation NUMBER .

    SEMICOLON       reduce using rule 53 (var_declaration2 -> VARIABLE assignation NUMBER .)
    COMMA           reduce using rule 53 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RPAREN          reduce using rule 53 (var_declaration2 -> VARIABLE assignation NUMBER .)
    COLON           reduce using rule 53 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RBRACKET        reduce using rule 53 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RBLOCK          reduce using rule 53 (var_declaration2 -> VARIABLE assignation NUMBER .)


state 241

    (57) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 . COLON var_declaration2

    COLON           shift and go to state 318


state 242

    (58) var_declaration2 -> VARIABLE OBJ_OPERATOR ID . EQUAL expression
    (59) var_declaration2 -> VARIABLE OBJ_OPERATOR ID . LPAREN params RPAREN

    EQUAL           shift and go to state 319
    LPAREN          shift and go to state 320


state 243

    (196) Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .

    SEMICOLON       reduce using rule 196 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    COMMA           reduce using rule 196 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RPAREN          reduce using rule 196 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    COLON           reduce using rule 196 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RBRACKET        reduce using rule 196 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RBLOCK          reduce using rule 196 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)


state 244

    (199) Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .

    SEMICOLON       reduce using rule 199 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    COMMA           reduce using rule 199 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RPAREN          reduce using rule 199 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    COLON           reduce using rule 199 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RBRACKET        reduce using rule 199 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RBLOCK          reduce using rule 199 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)


state 245

    (63) assignment_tail -> COMMA var_declaration2 .

    SEMICOLON       reduce using rule 63 (assignment_tail -> COMMA var_declaration2 .)
    RPAREN          reduce using rule 63 (assignment_tail -> COMMA var_declaration2 .)
    COMMA           reduce using rule 63 (assignment_tail -> COMMA var_declaration2 .)
    COLON           reduce using rule 63 (assignment_tail -> COMMA var_declaration2 .)
    RBRACKET        reduce using rule 63 (assignment_tail -> COMMA var_declaration2 .)
    RBLOCK          reduce using rule 63 (assignment_tail -> COMMA var_declaration2 .)


state 246

    (64) assignment_tail -> LBRACKET params . RBRACKET
    (149) params -> params . COMMA single_param

    RBRACKET        shift and go to state 321
    COMMA           shift and go to state 183


state 247

    (65) assignment_tail -> LBLOCK params . RBLOCK
    (149) params -> params . COMMA single_param

    RBLOCK          shift and go to state 322
    COMMA           shift and go to state 183


state 248

    (175) Built_In_Declaration -> array LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 323
    COMMA           shift and go to state 183


state 249

    (176) Built_In_Declaration -> pow LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 324
    COMMA           shift and go to state 183


state 250

    (177) Built_In_Declaration -> POW LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 325
    COMMA           shift and go to state 183


state 251

    (178) Built_In_Declaration -> abs LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 326
    COMMA           shift and go to state 183


state 252

    (179) Built_In_Declaration -> cos LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 327
    COMMA           shift and go to state 183


state 253

    (180) Built_In_Declaration -> deg2rad LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 328
    COMMA           shift and go to state 183


state 254

    (181) Built_In_Declaration -> rad2deg LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 329
    COMMA           shift and go to state 183


state 255

    (182) Built_In_Declaration -> die LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 330
    COMMA           shift and go to state 183


state 256

    (183) Built_In_Declaration -> exp LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 331
    COMMA           shift and go to state 183


state 257

    (184) Built_In_Declaration -> floor LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 332
    COMMA           shift and go to state 183


state 258

    (185) Built_In_Declaration -> isset LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 333
    COMMA           shift and go to state 183


state 259

    (186) Built_In_Declaration -> list LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 334
    COMMA           shift and go to state 183


state 260

    (187) Built_In_Declaration -> log LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 335
    COMMA           shift and go to state 183


state 261

    (188) Built_In_Declaration -> log10 LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 336
    COMMA           shift and go to state 183


state 262

    (189) Built_In_Declaration -> max LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 337
    COMMA           shift and go to state 183


state 263

    (190) Built_In_Declaration -> min LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 338
    COMMA           shift and go to state 183


state 264

    (191) Built_In_Declaration -> rand LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 339
    COMMA           shift and go to state 183


state 265

    (192) Built_In_Declaration -> round LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 340
    COMMA           shift and go to state 183


state 266

    (193) Built_In_Declaration -> sin LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 341
    COMMA           shift and go to state 183


state 267

    (194) Built_In_Declaration -> sqrt LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 342
    COMMA           shift and go to state 183


state 268

    (195) Built_In_Declaration -> unset LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 343
    COMMA           shift and go to state 183


state 269

    (30) constant_declaration -> const ID EQUAL CADENA . SEMICOLON

    SEMICOLON       shift and go to state 344


state 270

    (31) constant_declaration -> const ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 345


state 271

    (120) fun_call -> ID LPAREN params RPAREN .

    COMMENT         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    empty           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    include         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    const           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    print           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    echo            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    while           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    do              reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    if              reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    function        reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    return          reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    class           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    new             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    interface       reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    trait           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    for             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    foreach         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    switch          reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    exit            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    array           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    pow             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    POW             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    abs             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    cos             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    deg2rad         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    rad2deg         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    die             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    exp             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    floor           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    isset           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    list            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    log             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    log10           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    max             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    min             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    rand            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    round           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    sin             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    sqrt            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    unset           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    CADENA          reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    endwhile        reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    private         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    protected       reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    public          reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    var             reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    endfor          reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    endforeach      reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    break           reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    endswitch       reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    default         reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)
    case            reduce using rule 120 (fun_call -> ID LPAREN params RPAREN .)


state 272

    (33) print_declaration -> print LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 346


state 273

    (34) print_declaration -> print LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 347


state 274

    (35) print_declaration -> print LPAREN CADENA RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 348


state 275

    (39) echo_declaration -> echo LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 349


state 276

    (40) echo_declaration -> echo LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 350


state 277

    (41) echo_declaration -> echo LPAREN CADENA RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 351


state 278

    (69) iteration_stmt -> while LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> while LPAREN expression RPAREN . COLON declaration_list endwhile SEMICOLON

    LBLOCK          shift and go to state 352
    COLON           shift and go to state 353


state 279

    (71) iteration_stmt -> do LBLOCK declaration_list RBLOCK . while LPAREN expression RPAREN SEMICOLON

    while           shift and go to state 354


state 280

    (72) iteration_stmt -> do COLON declaration_list endwhile . SEMICOLON

    SEMICOLON       shift and go to state 355


state 281

    (113) if_statement -> if LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 356


state 282

    (118) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration_list return_statement RBLOCK
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 357
    COMMA           shift and go to state 183


state 283

    (149) params -> params COMMA single_param .

    SEMICOLON       reduce using rule 149 (params -> params COMMA single_param .)
    COMMA           reduce using rule 149 (params -> params COMMA single_param .)
    RPAREN          reduce using rule 149 (params -> params COMMA single_param .)
    RBRACKET        reduce using rule 149 (params -> params COMMA single_param .)
    RBLOCK          reduce using rule 149 (params -> params COMMA single_param .)
    COLON           reduce using rule 149 (params -> params COMMA single_param .)


state 284

    (124) return_statement -> return ID LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 358


state 285

    (86) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    MULEQUAL        reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    BOOL_OR         reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    BOOL_AND        reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    or              reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    and             reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    xor             reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    ISIDENTICAL     reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    ISNOTIDENTICAL  reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    SR              reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    SL              reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 86 (factor -> LPAREN expression RPAREN .)
    as              reduce using rule 86 (factor -> LPAREN expression RPAREN .)


state 286

    (74) expression -> additive_expression logical_op additive_expression .

    SEMICOLON       reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)
    RPAREN          reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)
    COMMA           reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)
    COLON           reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)
    RBRACKET        reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)
    RBLOCK          reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)
    as              reduce using rule 74 (expression -> additive_expression logical_op additive_expression .)


state 287

    (75) expression -> additive_expression comp_op additive_expression .
    (76) expression -> additive_expression comp_op additive_expression . logical_op additive_expression comp_op additive_expression
    (107) logical_op -> . BOOL_OR
    (108) logical_op -> . BOOL_AND
    (109) logical_op -> . NOT
    (110) logical_op -> . or
    (111) logical_op -> . and
    (112) logical_op -> . xor

    SEMICOLON       reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    COLON           reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    as              reduce using rule 75 (expression -> additive_expression comp_op additive_expression .)
    BOOL_OR         shift and go to state 189
    BOOL_AND        shift and go to state 190
    NOT             shift and go to state 191
    or              shift and go to state 192
    and             shift and go to state 193
    xor             shift and go to state 194

    logical_op                     shift and go to state 359

state 288

    (77) expression -> additive_expression bits_op additive_expression .

    SEMICOLON       reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)
    RPAREN          reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)
    COMMA           reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)
    COLON           reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)
    RBRACKET        reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)
    RBLOCK          reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)
    as              reduce using rule 77 (expression -> additive_expression bits_op additive_expression .)


state 289

    (79) additive_expression -> term math_op term .

    BOOL_OR         reduce using rule 79 (additive_expression -> term math_op term .)
    BOOL_AND        reduce using rule 79 (additive_expression -> term math_op term .)
    NOT             reduce using rule 79 (additive_expression -> term math_op term .)
    or              reduce using rule 79 (additive_expression -> term math_op term .)
    and             reduce using rule 79 (additive_expression -> term math_op term .)
    xor             reduce using rule 79 (additive_expression -> term math_op term .)
    LESS            reduce using rule 79 (additive_expression -> term math_op term .)
    LESSEQUAL       reduce using rule 79 (additive_expression -> term math_op term .)
    GREATER         reduce using rule 79 (additive_expression -> term math_op term .)
    GREATEREQUAL    reduce using rule 79 (additive_expression -> term math_op term .)
    DEQUAL          reduce using rule 79 (additive_expression -> term math_op term .)
    DISTINT         reduce using rule 79 (additive_expression -> term math_op term .)
    DIVEQUAL        reduce using rule 79 (additive_expression -> term math_op term .)
    ISEQUAL         reduce using rule 79 (additive_expression -> term math_op term .)
    ISIDENTICAL     reduce using rule 79 (additive_expression -> term math_op term .)
    ISNOTIDENTICAL  reduce using rule 79 (additive_expression -> term math_op term .)
    AMPERSANT       reduce using rule 79 (additive_expression -> term math_op term .)
    SR              reduce using rule 79 (additive_expression -> term math_op term .)
    SL              reduce using rule 79 (additive_expression -> term math_op term .)
    SEMICOLON       reduce using rule 79 (additive_expression -> term math_op term .)
    RPAREN          reduce using rule 79 (additive_expression -> term math_op term .)
    COMMA           reduce using rule 79 (additive_expression -> term math_op term .)
    COLON           reduce using rule 79 (additive_expression -> term math_op term .)
    RBRACKET        reduce using rule 79 (additive_expression -> term math_op term .)
    RBLOCK          reduce using rule 79 (additive_expression -> term math_op term .)
    as              reduce using rule 79 (additive_expression -> term math_op term .)


state 290

    (125) class_declaration -> class ID LBLOCK class_body . RBLOCK
    (128) class_body -> class_body . class_body_element
    (130) class_body_element -> . visibility var_declaration2 SEMICOLON
    (131) class_body_element -> . visibility fun_declaration
    (132) class_body_element -> . declaration
    (144) visibility -> . private
    (145) visibility -> . protected
    (146) visibility -> . public
    (147) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 360
    private         shift and go to state 295
    protected       shift and go to state 296
    public          shift and go to state 297
    var             shift and go to state 298
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    class_body_element             shift and go to state 361
    visibility                     shift and go to state 293
    var_declaration2               shift and go to state 31
    fun_declaration                shift and go to state 16
    declaration                    shift and go to state 294
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 291

    (127) class_body -> class_body_element .

    RBLOCK          reduce using rule 127 (class_body -> class_body_element .)
    private         reduce using rule 127 (class_body -> class_body_element .)
    protected       reduce using rule 127 (class_body -> class_body_element .)
    public          reduce using rule 127 (class_body -> class_body_element .)
    var             reduce using rule 127 (class_body -> class_body_element .)
    COMMENT         reduce using rule 127 (class_body -> class_body_element .)
    COMMENT_HASHTAG reduce using rule 127 (class_body -> class_body_element .)
    COMMENT_MULTI   reduce using rule 127 (class_body -> class_body_element .)
    empty           reduce using rule 127 (class_body -> class_body_element .)
    include         reduce using rule 127 (class_body -> class_body_element .)
    const           reduce using rule 127 (class_body -> class_body_element .)
    print           reduce using rule 127 (class_body -> class_body_element .)
    echo            reduce using rule 127 (class_body -> class_body_element .)
    while           reduce using rule 127 (class_body -> class_body_element .)
    do              reduce using rule 127 (class_body -> class_body_element .)
    if              reduce using rule 127 (class_body -> class_body_element .)
    function        reduce using rule 127 (class_body -> class_body_element .)
    ID              reduce using rule 127 (class_body -> class_body_element .)
    return          reduce using rule 127 (class_body -> class_body_element .)
    class           reduce using rule 127 (class_body -> class_body_element .)
    new             reduce using rule 127 (class_body -> class_body_element .)
    interface       reduce using rule 127 (class_body -> class_body_element .)
    trait           reduce using rule 127 (class_body -> class_body_element .)
    CLOSE_TAG       reduce using rule 127 (class_body -> class_body_element .)
    for             reduce using rule 127 (class_body -> class_body_element .)
    foreach         reduce using rule 127 (class_body -> class_body_element .)
    switch          reduce using rule 127 (class_body -> class_body_element .)
    exit            reduce using rule 127 (class_body -> class_body_element .)
    VARIABLE        reduce using rule 127 (class_body -> class_body_element .)
    array           reduce using rule 127 (class_body -> class_body_element .)
    pow             reduce using rule 127 (class_body -> class_body_element .)
    POW             reduce using rule 127 (class_body -> class_body_element .)
    abs             reduce using rule 127 (class_body -> class_body_element .)
    cos             reduce using rule 127 (class_body -> class_body_element .)
    deg2rad         reduce using rule 127 (class_body -> class_body_element .)
    rad2deg         reduce using rule 127 (class_body -> class_body_element .)
    die             reduce using rule 127 (class_body -> class_body_element .)
    exp             reduce using rule 127 (class_body -> class_body_element .)
    floor           reduce using rule 127 (class_body -> class_body_element .)
    isset           reduce using rule 127 (class_body -> class_body_element .)
    list            reduce using rule 127 (class_body -> class_body_element .)
    log             reduce using rule 127 (class_body -> class_body_element .)
    log10           reduce using rule 127 (class_body -> class_body_element .)
    max             reduce using rule 127 (class_body -> class_body_element .)
    min             reduce using rule 127 (class_body -> class_body_element .)
    rand            reduce using rule 127 (class_body -> class_body_element .)
    round           reduce using rule 127 (class_body -> class_body_element .)
    sin             reduce using rule 127 (class_body -> class_body_element .)
    sqrt            reduce using rule 127 (class_body -> class_body_element .)
    unset           reduce using rule 127 (class_body -> class_body_element .)
    CADENA          reduce using rule 127 (class_body -> class_body_element .)


state 292

    (129) class_body -> empty_function .

    RBLOCK          reduce using rule 129 (class_body -> empty_function .)
    private         reduce using rule 129 (class_body -> empty_function .)
    protected       reduce using rule 129 (class_body -> empty_function .)
    public          reduce using rule 129 (class_body -> empty_function .)
    var             reduce using rule 129 (class_body -> empty_function .)
    COMMENT         reduce using rule 129 (class_body -> empty_function .)
    COMMENT_HASHTAG reduce using rule 129 (class_body -> empty_function .)
    COMMENT_MULTI   reduce using rule 129 (class_body -> empty_function .)
    empty           reduce using rule 129 (class_body -> empty_function .)
    include         reduce using rule 129 (class_body -> empty_function .)
    const           reduce using rule 129 (class_body -> empty_function .)
    print           reduce using rule 129 (class_body -> empty_function .)
    echo            reduce using rule 129 (class_body -> empty_function .)
    while           reduce using rule 129 (class_body -> empty_function .)
    do              reduce using rule 129 (class_body -> empty_function .)
    if              reduce using rule 129 (class_body -> empty_function .)
    function        reduce using rule 129 (class_body -> empty_function .)
    ID              reduce using rule 129 (class_body -> empty_function .)
    return          reduce using rule 129 (class_body -> empty_function .)
    class           reduce using rule 129 (class_body -> empty_function .)
    new             reduce using rule 129 (class_body -> empty_function .)
    interface       reduce using rule 129 (class_body -> empty_function .)
    trait           reduce using rule 129 (class_body -> empty_function .)
    CLOSE_TAG       reduce using rule 129 (class_body -> empty_function .)
    for             reduce using rule 129 (class_body -> empty_function .)
    foreach         reduce using rule 129 (class_body -> empty_function .)
    switch          reduce using rule 129 (class_body -> empty_function .)
    exit            reduce using rule 129 (class_body -> empty_function .)
    VARIABLE        reduce using rule 129 (class_body -> empty_function .)
    array           reduce using rule 129 (class_body -> empty_function .)
    pow             reduce using rule 129 (class_body -> empty_function .)
    POW             reduce using rule 129 (class_body -> empty_function .)
    abs             reduce using rule 129 (class_body -> empty_function .)
    cos             reduce using rule 129 (class_body -> empty_function .)
    deg2rad         reduce using rule 129 (class_body -> empty_function .)
    rad2deg         reduce using rule 129 (class_body -> empty_function .)
    die             reduce using rule 129 (class_body -> empty_function .)
    exp             reduce using rule 129 (class_body -> empty_function .)
    floor           reduce using rule 129 (class_body -> empty_function .)
    isset           reduce using rule 129 (class_body -> empty_function .)
    list            reduce using rule 129 (class_body -> empty_function .)
    log             reduce using rule 129 (class_body -> empty_function .)
    log10           reduce using rule 129 (class_body -> empty_function .)
    max             reduce using rule 129 (class_body -> empty_function .)
    min             reduce using rule 129 (class_body -> empty_function .)
    rand            reduce using rule 129 (class_body -> empty_function .)
    round           reduce using rule 129 (class_body -> empty_function .)
    sin             reduce using rule 129 (class_body -> empty_function .)
    sqrt            reduce using rule 129 (class_body -> empty_function .)
    unset           reduce using rule 129 (class_body -> empty_function .)
    CADENA          reduce using rule 129 (class_body -> empty_function .)


state 293

    (130) class_body_element -> visibility . var_declaration2 SEMICOLON
    (131) class_body_element -> visibility . fun_declaration
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 50
    function        shift and go to state 39
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    var_declaration2               shift and go to state 362
    fun_declaration                shift and go to state 363
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 294

    (132) class_body_element -> declaration .

    RBLOCK          reduce using rule 132 (class_body_element -> declaration .)
    private         reduce using rule 132 (class_body_element -> declaration .)
    protected       reduce using rule 132 (class_body_element -> declaration .)
    public          reduce using rule 132 (class_body_element -> declaration .)
    var             reduce using rule 132 (class_body_element -> declaration .)
    COMMENT         reduce using rule 132 (class_body_element -> declaration .)
    COMMENT_HASHTAG reduce using rule 132 (class_body_element -> declaration .)
    COMMENT_MULTI   reduce using rule 132 (class_body_element -> declaration .)
    empty           reduce using rule 132 (class_body_element -> declaration .)
    include         reduce using rule 132 (class_body_element -> declaration .)
    const           reduce using rule 132 (class_body_element -> declaration .)
    print           reduce using rule 132 (class_body_element -> declaration .)
    echo            reduce using rule 132 (class_body_element -> declaration .)
    while           reduce using rule 132 (class_body_element -> declaration .)
    do              reduce using rule 132 (class_body_element -> declaration .)
    if              reduce using rule 132 (class_body_element -> declaration .)
    function        reduce using rule 132 (class_body_element -> declaration .)
    ID              reduce using rule 132 (class_body_element -> declaration .)
    return          reduce using rule 132 (class_body_element -> declaration .)
    class           reduce using rule 132 (class_body_element -> declaration .)
    new             reduce using rule 132 (class_body_element -> declaration .)
    interface       reduce using rule 132 (class_body_element -> declaration .)
    trait           reduce using rule 132 (class_body_element -> declaration .)
    CLOSE_TAG       reduce using rule 132 (class_body_element -> declaration .)
    for             reduce using rule 132 (class_body_element -> declaration .)
    foreach         reduce using rule 132 (class_body_element -> declaration .)
    switch          reduce using rule 132 (class_body_element -> declaration .)
    exit            reduce using rule 132 (class_body_element -> declaration .)
    VARIABLE        reduce using rule 132 (class_body_element -> declaration .)
    array           reduce using rule 132 (class_body_element -> declaration .)
    pow             reduce using rule 132 (class_body_element -> declaration .)
    POW             reduce using rule 132 (class_body_element -> declaration .)
    abs             reduce using rule 132 (class_body_element -> declaration .)
    cos             reduce using rule 132 (class_body_element -> declaration .)
    deg2rad         reduce using rule 132 (class_body_element -> declaration .)
    rad2deg         reduce using rule 132 (class_body_element -> declaration .)
    die             reduce using rule 132 (class_body_element -> declaration .)
    exp             reduce using rule 132 (class_body_element -> declaration .)
    floor           reduce using rule 132 (class_body_element -> declaration .)
    isset           reduce using rule 132 (class_body_element -> declaration .)
    list            reduce using rule 132 (class_body_element -> declaration .)
    log             reduce using rule 132 (class_body_element -> declaration .)
    log10           reduce using rule 132 (class_body_element -> declaration .)
    max             reduce using rule 132 (class_body_element -> declaration .)
    min             reduce using rule 132 (class_body_element -> declaration .)
    rand            reduce using rule 132 (class_body_element -> declaration .)
    round           reduce using rule 132 (class_body_element -> declaration .)
    sin             reduce using rule 132 (class_body_element -> declaration .)
    sqrt            reduce using rule 132 (class_body_element -> declaration .)
    unset           reduce using rule 132 (class_body_element -> declaration .)
    CADENA          reduce using rule 132 (class_body_element -> declaration .)


state 295

    (144) visibility -> private .

    VARIABLE        reduce using rule 144 (visibility -> private .)
    function        reduce using rule 144 (visibility -> private .)
    array           reduce using rule 144 (visibility -> private .)
    pow             reduce using rule 144 (visibility -> private .)
    POW             reduce using rule 144 (visibility -> private .)
    abs             reduce using rule 144 (visibility -> private .)
    cos             reduce using rule 144 (visibility -> private .)
    deg2rad         reduce using rule 144 (visibility -> private .)
    rad2deg         reduce using rule 144 (visibility -> private .)
    die             reduce using rule 144 (visibility -> private .)
    exp             reduce using rule 144 (visibility -> private .)
    floor           reduce using rule 144 (visibility -> private .)
    isset           reduce using rule 144 (visibility -> private .)
    list            reduce using rule 144 (visibility -> private .)
    log             reduce using rule 144 (visibility -> private .)
    log10           reduce using rule 144 (visibility -> private .)
    max             reduce using rule 144 (visibility -> private .)
    min             reduce using rule 144 (visibility -> private .)
    rand            reduce using rule 144 (visibility -> private .)
    round           reduce using rule 144 (visibility -> private .)
    sin             reduce using rule 144 (visibility -> private .)
    sqrt            reduce using rule 144 (visibility -> private .)
    unset           reduce using rule 144 (visibility -> private .)
    CADENA          reduce using rule 144 (visibility -> private .)


state 296

    (145) visibility -> protected .

    VARIABLE        reduce using rule 145 (visibility -> protected .)
    function        reduce using rule 145 (visibility -> protected .)
    array           reduce using rule 145 (visibility -> protected .)
    pow             reduce using rule 145 (visibility -> protected .)
    POW             reduce using rule 145 (visibility -> protected .)
    abs             reduce using rule 145 (visibility -> protected .)
    cos             reduce using rule 145 (visibility -> protected .)
    deg2rad         reduce using rule 145 (visibility -> protected .)
    rad2deg         reduce using rule 145 (visibility -> protected .)
    die             reduce using rule 145 (visibility -> protected .)
    exp             reduce using rule 145 (visibility -> protected .)
    floor           reduce using rule 145 (visibility -> protected .)
    isset           reduce using rule 145 (visibility -> protected .)
    list            reduce using rule 145 (visibility -> protected .)
    log             reduce using rule 145 (visibility -> protected .)
    log10           reduce using rule 145 (visibility -> protected .)
    max             reduce using rule 145 (visibility -> protected .)
    min             reduce using rule 145 (visibility -> protected .)
    rand            reduce using rule 145 (visibility -> protected .)
    round           reduce using rule 145 (visibility -> protected .)
    sin             reduce using rule 145 (visibility -> protected .)
    sqrt            reduce using rule 145 (visibility -> protected .)
    unset           reduce using rule 145 (visibility -> protected .)
    CADENA          reduce using rule 145 (visibility -> protected .)


state 297

    (146) visibility -> public .

    VARIABLE        reduce using rule 146 (visibility -> public .)
    function        reduce using rule 146 (visibility -> public .)
    array           reduce using rule 146 (visibility -> public .)
    pow             reduce using rule 146 (visibility -> public .)
    POW             reduce using rule 146 (visibility -> public .)
    abs             reduce using rule 146 (visibility -> public .)
    cos             reduce using rule 146 (visibility -> public .)
    deg2rad         reduce using rule 146 (visibility -> public .)
    rad2deg         reduce using rule 146 (visibility -> public .)
    die             reduce using rule 146 (visibility -> public .)
    exp             reduce using rule 146 (visibility -> public .)
    floor           reduce using rule 146 (visibility -> public .)
    isset           reduce using rule 146 (visibility -> public .)
    list            reduce using rule 146 (visibility -> public .)
    log             reduce using rule 146 (visibility -> public .)
    log10           reduce using rule 146 (visibility -> public .)
    max             reduce using rule 146 (visibility -> public .)
    min             reduce using rule 146 (visibility -> public .)
    rand            reduce using rule 146 (visibility -> public .)
    round           reduce using rule 146 (visibility -> public .)
    sin             reduce using rule 146 (visibility -> public .)
    sqrt            reduce using rule 146 (visibility -> public .)
    unset           reduce using rule 146 (visibility -> public .)
    CADENA          reduce using rule 146 (visibility -> public .)


state 298

    (147) visibility -> var .

    VARIABLE        reduce using rule 147 (visibility -> var .)
    function        reduce using rule 147 (visibility -> var .)
    array           reduce using rule 147 (visibility -> var .)
    pow             reduce using rule 147 (visibility -> var .)
    POW             reduce using rule 147 (visibility -> var .)
    abs             reduce using rule 147 (visibility -> var .)
    cos             reduce using rule 147 (visibility -> var .)
    deg2rad         reduce using rule 147 (visibility -> var .)
    rad2deg         reduce using rule 147 (visibility -> var .)
    die             reduce using rule 147 (visibility -> var .)
    exp             reduce using rule 147 (visibility -> var .)
    floor           reduce using rule 147 (visibility -> var .)
    isset           reduce using rule 147 (visibility -> var .)
    list            reduce using rule 147 (visibility -> var .)
    log             reduce using rule 147 (visibility -> var .)
    log10           reduce using rule 147 (visibility -> var .)
    max             reduce using rule 147 (visibility -> var .)
    min             reduce using rule 147 (visibility -> var .)
    rand            reduce using rule 147 (visibility -> var .)
    round           reduce using rule 147 (visibility -> var .)
    sin             reduce using rule 147 (visibility -> var .)
    sqrt            reduce using rule 147 (visibility -> var .)
    unset           reduce using rule 147 (visibility -> var .)
    CADENA          reduce using rule 147 (visibility -> var .)


state 299

    (126) create_obj_declaration -> new ID LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 364
    COMMA           shift and go to state 183


state 300

    (133) interface_declaration -> interface ID LBLOCK interface_body . RBLOCK
    (135) interface_body -> interface_body . interface_method_declaration
    (137) interface_method_declaration -> . visibility function ID LPAREN params RPAREN SEMICOLON
    (144) visibility -> . private
    (145) visibility -> . protected
    (146) visibility -> . public
    (147) visibility -> . var

    RBLOCK          shift and go to state 365
    private         shift and go to state 295
    protected       shift and go to state 296
    public          shift and go to state 297
    var             shift and go to state 298

    interface_method_declaration   shift and go to state 366
    visibility                     shift and go to state 303

state 301

    (134) interface_body -> interface_method_declaration .

    RBLOCK          reduce using rule 134 (interface_body -> interface_method_declaration .)
    private         reduce using rule 134 (interface_body -> interface_method_declaration .)
    protected       reduce using rule 134 (interface_body -> interface_method_declaration .)
    public          reduce using rule 134 (interface_body -> interface_method_declaration .)
    var             reduce using rule 134 (interface_body -> interface_method_declaration .)


state 302

    (136) interface_body -> empty_function .

    RBLOCK          reduce using rule 136 (interface_body -> empty_function .)
    private         reduce using rule 136 (interface_body -> empty_function .)
    protected       reduce using rule 136 (interface_body -> empty_function .)
    public          reduce using rule 136 (interface_body -> empty_function .)
    var             reduce using rule 136 (interface_body -> empty_function .)


state 303

    (137) interface_method_declaration -> visibility . function ID LPAREN params RPAREN SEMICOLON

    function        shift and go to state 367


state 304

    (138) trait_declaration -> trait ID LBLOCK trait_body . RBLOCK
    (140) trait_body -> trait_body . trait_element
    (142) trait_element -> . visibility var_declaration SEMICOLON
    (143) trait_element -> . visibility fun_declaration
    (144) visibility -> . private
    (145) visibility -> . protected
    (146) visibility -> . public
    (147) visibility -> . var

    RBLOCK          shift and go to state 368
    private         shift and go to state 295
    protected       shift and go to state 296
    public          shift and go to state 297
    var             shift and go to state 298

    trait_element                  shift and go to state 369
    visibility                     shift and go to state 307

state 305

    (139) trait_body -> trait_element .

    RBLOCK          reduce using rule 139 (trait_body -> trait_element .)
    private         reduce using rule 139 (trait_body -> trait_element .)
    protected       reduce using rule 139 (trait_body -> trait_element .)
    public          reduce using rule 139 (trait_body -> trait_element .)
    var             reduce using rule 139 (trait_body -> trait_element .)


state 306

    (141) trait_body -> empty_function .

    RBLOCK          reduce using rule 141 (trait_body -> empty_function .)
    private         reduce using rule 141 (trait_body -> empty_function .)
    protected       reduce using rule 141 (trait_body -> empty_function .)
    public          reduce using rule 141 (trait_body -> empty_function .)
    var             reduce using rule 141 (trait_body -> empty_function .)


state 307

    (142) trait_element -> visibility . var_declaration SEMICOLON
    (143) trait_element -> visibility . fun_declaration
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    function        shift and go to state 39
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    var_declaration                shift and go to state 370
    fun_declaration                shift and go to state 371
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 308

    (154) for_loop -> for LPAREN for_init for_expr . for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> for LPAREN for_init for_expr . for_update RPAREN COLON declaration_list endfor SEMICOLON
    (158) for_update -> . expression
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    for_update                     shift and go to state 372
    expression                     shift and go to state 373
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 309

    (157) for_expr -> expression . SEMICOLON

    SEMICOLON       shift and go to state 374


state 310

    (156) for_init -> var_declaration2 SEMICOLON .

    MINUS           reduce using rule 156 (for_init -> var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 156 (for_init -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 156 (for_init -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 156 (for_init -> var_declaration2 SEMICOLON .)
    PLUSPLUS        reduce using rule 156 (for_init -> var_declaration2 SEMICOLON .)
    MINUSMINUS      reduce using rule 156 (for_init -> var_declaration2 SEMICOLON .)


state 311

    (160) foreach_loop -> foreach LPAREN expression as . expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> foreach LPAREN expression as . expression RPAREN COLON declaration_list endforeach SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 375
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 312

    (162) switch_statement -> switch LPAREN expression RPAREN . LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> switch LPAREN expression RPAREN . COLON case_blocks default_block endswitch SEMICOLON

    LBLOCK          shift and go to state 376
    COLON           shift and go to state 377


state 313

    (159) exit_statement -> exit LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 378


state 314

    (66) assignment_tail -> VARIABLE LBRACKET expression . COMMA params

    COMMA           shift and go to state 379


state 315

    (67) assignment_tail -> VARIABLE LBRACKET params . RBRACKET
    (149) params -> params . COMMA single_param

    RBRACKET        shift and go to state 380
    COMMA           shift and go to state 183


state 316

    (68) assignment_tail -> VARIABLE LBLOCK params . RBLOCK
    (149) params -> params . COMMA single_param

    RBLOCK          shift and go to state 381
    COMMA           shift and go to state 183


state 317

    (56) var_declaration2 -> VARIABLE EQUAL ID LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 382
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 318

    (57) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON . var_declaration2
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    var_declaration2               shift and go to state 383
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 319

    (58) var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL . expression
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 384
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 320

    (59) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN . params RPAREN
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 385
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 321

    (64) assignment_tail -> LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 64 (assignment_tail -> LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 64 (assignment_tail -> LBRACKET params RBRACKET .)
    COMMA           reduce using rule 64 (assignment_tail -> LBRACKET params RBRACKET .)
    COLON           reduce using rule 64 (assignment_tail -> LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 64 (assignment_tail -> LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 64 (assignment_tail -> LBRACKET params RBRACKET .)


state 322

    (65) assignment_tail -> LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 65 (assignment_tail -> LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 65 (assignment_tail -> LBLOCK params RBLOCK .)
    COMMA           reduce using rule 65 (assignment_tail -> LBLOCK params RBLOCK .)
    COLON           reduce using rule 65 (assignment_tail -> LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 65 (assignment_tail -> LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 65 (assignment_tail -> LBLOCK params RBLOCK .)


state 323

    (175) Built_In_Declaration -> array LPAREN params RPAREN .

    SEMICOLON       reduce using rule 175 (Built_In_Declaration -> array LPAREN params RPAREN .)
    COMMA           reduce using rule 175 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RPAREN          reduce using rule 175 (Built_In_Declaration -> array LPAREN params RPAREN .)
    COLON           reduce using rule 175 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RBRACKET        reduce using rule 175 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RBLOCK          reduce using rule 175 (Built_In_Declaration -> array LPAREN params RPAREN .)


state 324

    (176) Built_In_Declaration -> pow LPAREN params RPAREN .

    SEMICOLON       reduce using rule 176 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    COMMA           reduce using rule 176 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RPAREN          reduce using rule 176 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    COLON           reduce using rule 176 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RBRACKET        reduce using rule 176 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RBLOCK          reduce using rule 176 (Built_In_Declaration -> pow LPAREN params RPAREN .)


state 325

    (177) Built_In_Declaration -> POW LPAREN params RPAREN .

    SEMICOLON       reduce using rule 177 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    COMMA           reduce using rule 177 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RPAREN          reduce using rule 177 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    COLON           reduce using rule 177 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RBRACKET        reduce using rule 177 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RBLOCK          reduce using rule 177 (Built_In_Declaration -> POW LPAREN params RPAREN .)


state 326

    (178) Built_In_Declaration -> abs LPAREN params RPAREN .

    SEMICOLON       reduce using rule 178 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    COMMA           reduce using rule 178 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RPAREN          reduce using rule 178 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    COLON           reduce using rule 178 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RBRACKET        reduce using rule 178 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RBLOCK          reduce using rule 178 (Built_In_Declaration -> abs LPAREN params RPAREN .)


state 327

    (179) Built_In_Declaration -> cos LPAREN params RPAREN .

    SEMICOLON       reduce using rule 179 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    COMMA           reduce using rule 179 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RPAREN          reduce using rule 179 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    COLON           reduce using rule 179 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RBRACKET        reduce using rule 179 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RBLOCK          reduce using rule 179 (Built_In_Declaration -> cos LPAREN params RPAREN .)


state 328

    (180) Built_In_Declaration -> deg2rad LPAREN params RPAREN .

    SEMICOLON       reduce using rule 180 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    COMMA           reduce using rule 180 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RPAREN          reduce using rule 180 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    COLON           reduce using rule 180 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RBRACKET        reduce using rule 180 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RBLOCK          reduce using rule 180 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)


state 329

    (181) Built_In_Declaration -> rad2deg LPAREN params RPAREN .

    SEMICOLON       reduce using rule 181 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    COMMA           reduce using rule 181 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RPAREN          reduce using rule 181 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    COLON           reduce using rule 181 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RBRACKET        reduce using rule 181 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RBLOCK          reduce using rule 181 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)


state 330

    (182) Built_In_Declaration -> die LPAREN params RPAREN .

    SEMICOLON       reduce using rule 182 (Built_In_Declaration -> die LPAREN params RPAREN .)
    COMMA           reduce using rule 182 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RPAREN          reduce using rule 182 (Built_In_Declaration -> die LPAREN params RPAREN .)
    COLON           reduce using rule 182 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RBRACKET        reduce using rule 182 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RBLOCK          reduce using rule 182 (Built_In_Declaration -> die LPAREN params RPAREN .)


state 331

    (183) Built_In_Declaration -> exp LPAREN params RPAREN .

    SEMICOLON       reduce using rule 183 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    COMMA           reduce using rule 183 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RPAREN          reduce using rule 183 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    COLON           reduce using rule 183 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RBRACKET        reduce using rule 183 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RBLOCK          reduce using rule 183 (Built_In_Declaration -> exp LPAREN params RPAREN .)


state 332

    (184) Built_In_Declaration -> floor LPAREN params RPAREN .

    SEMICOLON       reduce using rule 184 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    COMMA           reduce using rule 184 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RPAREN          reduce using rule 184 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    COLON           reduce using rule 184 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RBRACKET        reduce using rule 184 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RBLOCK          reduce using rule 184 (Built_In_Declaration -> floor LPAREN params RPAREN .)


state 333

    (185) Built_In_Declaration -> isset LPAREN params RPAREN .

    SEMICOLON       reduce using rule 185 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    COMMA           reduce using rule 185 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RPAREN          reduce using rule 185 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    COLON           reduce using rule 185 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RBRACKET        reduce using rule 185 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RBLOCK          reduce using rule 185 (Built_In_Declaration -> isset LPAREN params RPAREN .)


state 334

    (186) Built_In_Declaration -> list LPAREN params RPAREN .

    SEMICOLON       reduce using rule 186 (Built_In_Declaration -> list LPAREN params RPAREN .)
    COMMA           reduce using rule 186 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RPAREN          reduce using rule 186 (Built_In_Declaration -> list LPAREN params RPAREN .)
    COLON           reduce using rule 186 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RBRACKET        reduce using rule 186 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RBLOCK          reduce using rule 186 (Built_In_Declaration -> list LPAREN params RPAREN .)


state 335

    (187) Built_In_Declaration -> log LPAREN params RPAREN .

    SEMICOLON       reduce using rule 187 (Built_In_Declaration -> log LPAREN params RPAREN .)
    COMMA           reduce using rule 187 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RPAREN          reduce using rule 187 (Built_In_Declaration -> log LPAREN params RPAREN .)
    COLON           reduce using rule 187 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RBRACKET        reduce using rule 187 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RBLOCK          reduce using rule 187 (Built_In_Declaration -> log LPAREN params RPAREN .)


state 336

    (188) Built_In_Declaration -> log10 LPAREN params RPAREN .

    SEMICOLON       reduce using rule 188 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    COMMA           reduce using rule 188 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RPAREN          reduce using rule 188 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    COLON           reduce using rule 188 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RBRACKET        reduce using rule 188 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RBLOCK          reduce using rule 188 (Built_In_Declaration -> log10 LPAREN params RPAREN .)


state 337

    (189) Built_In_Declaration -> max LPAREN params RPAREN .

    SEMICOLON       reduce using rule 189 (Built_In_Declaration -> max LPAREN params RPAREN .)
    COMMA           reduce using rule 189 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RPAREN          reduce using rule 189 (Built_In_Declaration -> max LPAREN params RPAREN .)
    COLON           reduce using rule 189 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RBRACKET        reduce using rule 189 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RBLOCK          reduce using rule 189 (Built_In_Declaration -> max LPAREN params RPAREN .)


state 338

    (190) Built_In_Declaration -> min LPAREN params RPAREN .

    SEMICOLON       reduce using rule 190 (Built_In_Declaration -> min LPAREN params RPAREN .)
    COMMA           reduce using rule 190 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RPAREN          reduce using rule 190 (Built_In_Declaration -> min LPAREN params RPAREN .)
    COLON           reduce using rule 190 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RBRACKET        reduce using rule 190 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RBLOCK          reduce using rule 190 (Built_In_Declaration -> min LPAREN params RPAREN .)


state 339

    (191) Built_In_Declaration -> rand LPAREN params RPAREN .

    SEMICOLON       reduce using rule 191 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    COMMA           reduce using rule 191 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RPAREN          reduce using rule 191 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    COLON           reduce using rule 191 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RBRACKET        reduce using rule 191 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RBLOCK          reduce using rule 191 (Built_In_Declaration -> rand LPAREN params RPAREN .)


state 340

    (192) Built_In_Declaration -> round LPAREN params RPAREN .

    SEMICOLON       reduce using rule 192 (Built_In_Declaration -> round LPAREN params RPAREN .)
    COMMA           reduce using rule 192 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RPAREN          reduce using rule 192 (Built_In_Declaration -> round LPAREN params RPAREN .)
    COLON           reduce using rule 192 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RBRACKET        reduce using rule 192 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RBLOCK          reduce using rule 192 (Built_In_Declaration -> round LPAREN params RPAREN .)


state 341

    (193) Built_In_Declaration -> sin LPAREN params RPAREN .

    SEMICOLON       reduce using rule 193 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    COMMA           reduce using rule 193 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RPAREN          reduce using rule 193 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    COLON           reduce using rule 193 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RBRACKET        reduce using rule 193 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RBLOCK          reduce using rule 193 (Built_In_Declaration -> sin LPAREN params RPAREN .)


state 342

    (194) Built_In_Declaration -> sqrt LPAREN params RPAREN .

    SEMICOLON       reduce using rule 194 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    COMMA           reduce using rule 194 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RPAREN          reduce using rule 194 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    COLON           reduce using rule 194 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RBRACKET        reduce using rule 194 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RBLOCK          reduce using rule 194 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)


state 343

    (195) Built_In_Declaration -> unset LPAREN params RPAREN .

    SEMICOLON       reduce using rule 195 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    COMMA           reduce using rule 195 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RPAREN          reduce using rule 195 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    COLON           reduce using rule 195 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RBRACKET        reduce using rule 195 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RBLOCK          reduce using rule 195 (Built_In_Declaration -> unset LPAREN params RPAREN .)


state 344

    (30) constant_declaration -> const ID EQUAL CADENA SEMICOLON .

    COMMENT         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    empty           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    include         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    const           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    print           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    echo            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    while           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    do              reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    if              reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    function        reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    ID              reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    return          reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    class           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    new             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    interface       reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    trait           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    for             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    foreach         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    switch          reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    exit            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    VARIABLE        reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    array           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    pow             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    POW             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    abs             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    cos             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    deg2rad         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    rad2deg         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    die             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    exp             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    floor           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    isset           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    list            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    log             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    log10           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    max             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    min             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    rand            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    round           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    sin             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    sqrt            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    unset           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    CADENA          reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    $end            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    RBLOCK          reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endwhile        reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    private         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    protected       reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    public          reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    var             reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endfor          reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endforeach      reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    break           reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endswitch       reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    default         reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    case            reduce using rule 30 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)


state 345

    (31) constant_declaration -> const ID EQUAL NUMBER SEMICOLON .

    COMMENT         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    empty           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    include         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    const           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    print           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    echo            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    while           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    do              reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    if              reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    function        reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    return          reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    class           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    new             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    interface       reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    trait           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    for             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    foreach         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    switch          reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    exit            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    array           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    pow             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    POW             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    abs             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    cos             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    deg2rad         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    rad2deg         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    die             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    exp             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    floor           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    isset           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    list            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    log             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    log10           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    max             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    min             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    rand            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    round           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    sin             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    sqrt            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    unset           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    CADENA          reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    $end            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endwhile        reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    private         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    protected       reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    public          reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    var             reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endfor          reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endforeach      reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    break           reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endswitch       reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    default         reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    case            reduce using rule 31 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)


state 346

    (33) print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    do              reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    return          reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    interface       reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    trait           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    switch          reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    array           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    pow             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    POW             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    abs             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    cos             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    deg2rad         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    rad2deg         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    die             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exp             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    floor           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    isset           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    list            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    log             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    log10           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    max             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    min             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    rand            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    round           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    sin             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    sqrt            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    unset           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endwhile        reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    private         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    protected       reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    public          reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    var             reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endfor          reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endforeach      reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    break           reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endswitch       reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    default         reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    case            reduce using rule 33 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)


state 347

    (34) print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .

    COMMENT         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    empty           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    include         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    const           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    print           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    echo            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    while           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    do              reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    if              reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    function        reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    return          reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    class           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    new             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    interface       reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    trait           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    for             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    foreach         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    switch          reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    exit            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    array           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    pow             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    POW             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    abs             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    cos             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    deg2rad         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    rad2deg         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    die             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    exp             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    floor           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    isset           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    list            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    log             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    log10           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    max             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    min             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    rand            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    round           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    sin             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    sqrt            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    unset           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    CADENA          reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endwhile        reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    private         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    protected       reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    public          reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    var             reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endfor          reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endforeach      reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    break           reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endswitch       reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    default         reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    case            reduce using rule 34 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)


state 348

    (35) print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .

    COMMENT         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    empty           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    include         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    const           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    print           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    echo            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    while           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    do              reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    if              reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    function        reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    ID              reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    return          reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    class           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    new             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    interface       reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    trait           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    for             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    foreach         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    switch          reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    exit            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    array           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    pow             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    POW             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    abs             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    cos             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    deg2rad         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    rad2deg         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    die             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    exp             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    floor           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    isset           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    list            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    log             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    log10           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    max             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    min             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    rand            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    round           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    sin             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    sqrt            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    unset           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    CADENA          reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    $end            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endwhile        reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    private         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    protected       reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    public          reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    var             reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endfor          reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endforeach      reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    break           reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endswitch       reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    default         reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    case            reduce using rule 35 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)


state 349

    (39) echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    do              reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    return          reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    interface       reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    trait           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    switch          reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    array           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    pow             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    POW             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    abs             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    cos             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    deg2rad         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    rad2deg         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    die             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exp             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    floor           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    isset           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    list            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    log             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    log10           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    max             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    min             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    rand            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    round           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    sin             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    sqrt            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    unset           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endwhile        reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    private         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    protected       reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    public          reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    var             reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endfor          reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endforeach      reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    break           reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endswitch       reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    default         reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    case            reduce using rule 39 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)


state 350

    (40) echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .

    COMMENT         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    empty           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    include         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    const           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    print           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    echo            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    while           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    do              reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    if              reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    function        reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    return          reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    class           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    new             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    interface       reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    trait           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    for             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    foreach         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    switch          reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    exit            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    array           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    pow             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    POW             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    abs             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    cos             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    deg2rad         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    rad2deg         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    die             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    exp             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    floor           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    isset           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    list            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    log             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    log10           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    max             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    min             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    rand            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    round           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    sin             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    sqrt            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    unset           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    CADENA          reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endwhile        reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    private         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    protected       reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    public          reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    var             reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endfor          reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endforeach      reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    break           reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endswitch       reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    default         reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    case            reduce using rule 40 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)


state 351

    (41) echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .

    COMMENT         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    empty           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    include         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    const           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    print           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    echo            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    while           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    do              reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    if              reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    function        reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    ID              reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    return          reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    class           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    new             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    interface       reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    trait           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    for             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    foreach         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    switch          reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    exit            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    array           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    pow             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    POW             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    abs             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    cos             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    deg2rad         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    rad2deg         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    die             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    exp             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    floor           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    isset           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    list            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    log             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    log10           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    max             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    min             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    rand            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    round           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    sin             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    sqrt            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    unset           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    CADENA          reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    $end            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endwhile        reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    private         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    protected       reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    public          reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    var             reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endfor          reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endforeach      reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    break           reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endswitch       reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    default         reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    case            reduce using rule 41 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)


state 352

    (69) iteration_stmt -> while LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 386
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 353

    (70) iteration_stmt -> while LPAREN expression RPAREN COLON . declaration_list endwhile SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 387
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 354

    (71) iteration_stmt -> do LBLOCK declaration_list RBLOCK while . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 388


state 355

    (72) iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .

    COMMENT         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    COMMENT_MULTI   reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    empty           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    include         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    const           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    print           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    echo            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    while           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    do              reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    if              reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    function        reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    ID              reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    return          reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    class           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    new             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    interface       reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    trait           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    CLOSE_TAG       reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    for             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    foreach         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    switch          reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    exit            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    VARIABLE        reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    array           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    pow             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    POW             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    abs             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    cos             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    deg2rad         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    rad2deg         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    die             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    exp             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    floor           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    isset           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    list            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    log             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    log10           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    max             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    min             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    rand            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    round           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    sin             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    sqrt            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    unset           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    CADENA          reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    $end            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    RBLOCK          reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endwhile        reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    private         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    protected       reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    public          reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    var             reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endfor          reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endforeach      reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    break           reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endswitch       reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    default         reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    case            reduce using rule 72 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)


state 356

    (113) if_statement -> if LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 389
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 357

    (118) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration_list return_statement RBLOCK

    LBLOCK          shift and go to state 390


state 358

    (124) return_statement -> return ID LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 391


state 359

    (76) expression -> additive_expression comp_op additive_expression logical_op . additive_expression comp_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    additive_expression            shift and go to state 392
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 360

    (125) class_declaration -> class ID LBLOCK class_body RBLOCK .

    COMMENT         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    empty           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    include         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    const           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    print           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    echo            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    while           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    do              reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    if              reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    function        reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    ID              reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    return          reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    class           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    new             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    interface       reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    trait           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    CLOSE_TAG       reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    for             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    foreach         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    switch          reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    exit            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    VARIABLE        reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    array           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    pow             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    POW             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    abs             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    cos             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    deg2rad         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    rad2deg         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    die             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    exp             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    floor           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    isset           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    list            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    log             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    log10           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    max             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    min             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    rand            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    round           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    sin             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    sqrt            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    unset           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    CADENA          reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    $end            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    RBLOCK          reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endwhile        reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    private         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    protected       reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    public          reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    var             reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endfor          reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endforeach      reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    break           reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endswitch       reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    default         reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    case            reduce using rule 125 (class_declaration -> class ID LBLOCK class_body RBLOCK .)


state 361

    (128) class_body -> class_body class_body_element .

    RBLOCK          reduce using rule 128 (class_body -> class_body class_body_element .)
    private         reduce using rule 128 (class_body -> class_body class_body_element .)
    protected       reduce using rule 128 (class_body -> class_body class_body_element .)
    public          reduce using rule 128 (class_body -> class_body class_body_element .)
    var             reduce using rule 128 (class_body -> class_body class_body_element .)
    COMMENT         reduce using rule 128 (class_body -> class_body class_body_element .)
    COMMENT_HASHTAG reduce using rule 128 (class_body -> class_body class_body_element .)
    COMMENT_MULTI   reduce using rule 128 (class_body -> class_body class_body_element .)
    empty           reduce using rule 128 (class_body -> class_body class_body_element .)
    include         reduce using rule 128 (class_body -> class_body class_body_element .)
    const           reduce using rule 128 (class_body -> class_body class_body_element .)
    print           reduce using rule 128 (class_body -> class_body class_body_element .)
    echo            reduce using rule 128 (class_body -> class_body class_body_element .)
    while           reduce using rule 128 (class_body -> class_body class_body_element .)
    do              reduce using rule 128 (class_body -> class_body class_body_element .)
    if              reduce using rule 128 (class_body -> class_body class_body_element .)
    function        reduce using rule 128 (class_body -> class_body class_body_element .)
    ID              reduce using rule 128 (class_body -> class_body class_body_element .)
    return          reduce using rule 128 (class_body -> class_body class_body_element .)
    class           reduce using rule 128 (class_body -> class_body class_body_element .)
    new             reduce using rule 128 (class_body -> class_body class_body_element .)
    interface       reduce using rule 128 (class_body -> class_body class_body_element .)
    trait           reduce using rule 128 (class_body -> class_body class_body_element .)
    CLOSE_TAG       reduce using rule 128 (class_body -> class_body class_body_element .)
    for             reduce using rule 128 (class_body -> class_body class_body_element .)
    foreach         reduce using rule 128 (class_body -> class_body class_body_element .)
    switch          reduce using rule 128 (class_body -> class_body class_body_element .)
    exit            reduce using rule 128 (class_body -> class_body class_body_element .)
    VARIABLE        reduce using rule 128 (class_body -> class_body class_body_element .)
    array           reduce using rule 128 (class_body -> class_body class_body_element .)
    pow             reduce using rule 128 (class_body -> class_body class_body_element .)
    POW             reduce using rule 128 (class_body -> class_body class_body_element .)
    abs             reduce using rule 128 (class_body -> class_body class_body_element .)
    cos             reduce using rule 128 (class_body -> class_body class_body_element .)
    deg2rad         reduce using rule 128 (class_body -> class_body class_body_element .)
    rad2deg         reduce using rule 128 (class_body -> class_body class_body_element .)
    die             reduce using rule 128 (class_body -> class_body class_body_element .)
    exp             reduce using rule 128 (class_body -> class_body class_body_element .)
    floor           reduce using rule 128 (class_body -> class_body class_body_element .)
    isset           reduce using rule 128 (class_body -> class_body class_body_element .)
    list            reduce using rule 128 (class_body -> class_body class_body_element .)
    log             reduce using rule 128 (class_body -> class_body class_body_element .)
    log10           reduce using rule 128 (class_body -> class_body class_body_element .)
    max             reduce using rule 128 (class_body -> class_body class_body_element .)
    min             reduce using rule 128 (class_body -> class_body class_body_element .)
    rand            reduce using rule 128 (class_body -> class_body class_body_element .)
    round           reduce using rule 128 (class_body -> class_body class_body_element .)
    sin             reduce using rule 128 (class_body -> class_body class_body_element .)
    sqrt            reduce using rule 128 (class_body -> class_body class_body_element .)
    unset           reduce using rule 128 (class_body -> class_body class_body_element .)
    CADENA          reduce using rule 128 (class_body -> class_body class_body_element .)


state 362

    (130) class_body_element -> visibility var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 393


state 363

    (131) class_body_element -> visibility fun_declaration .

    RBLOCK          reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    private         reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    protected       reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    public          reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    var             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    COMMENT         reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    COMMENT_HASHTAG reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    COMMENT_MULTI   reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    empty           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    include         reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    const           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    print           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    echo            reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    while           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    do              reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    if              reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    function        reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    ID              reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    return          reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    class           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    new             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    interface       reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    trait           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    CLOSE_TAG       reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    for             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    foreach         reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    switch          reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    exit            reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    VARIABLE        reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    array           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    pow             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    POW             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    abs             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    cos             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    deg2rad         reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    rad2deg         reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    die             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    exp             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    floor           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    isset           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    list            reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    log             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    log10           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    max             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    min             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    rand            reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    round           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    sin             reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    sqrt            reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    unset           reduce using rule 131 (class_body_element -> visibility fun_declaration .)
    CADENA          reduce using rule 131 (class_body_element -> visibility fun_declaration .)


state 364

    (126) create_obj_declaration -> new ID LPAREN params RPAREN .

    COMMENT         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    empty           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    const           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    print           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    echo            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    while           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    do              reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    if              reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    function        reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ID              reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    return          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    class           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    new             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    interface       reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    trait           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    for             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    foreach         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    switch          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exit            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    array           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    pow             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    POW             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    abs             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    cos             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    deg2rad         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    rad2deg         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    die             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exp             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    floor           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    isset           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    list            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    log             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    log10           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    max             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    min             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    rand            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    round           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    sin             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    sqrt            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    unset           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CADENA          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    $end            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endwhile        reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMA           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COLON           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    private         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    protected       reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    public          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    var             reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endfor          reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endforeach      reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    break           reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endswitch       reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    default         reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    case            reduce using rule 126 (create_obj_declaration -> new ID LPAREN params RPAREN .)


state 365

    (133) interface_declaration -> interface ID LBLOCK interface_body RBLOCK .

    COMMENT         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    empty           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    include         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    const           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    print           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    echo            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    while           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    do              reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    if              reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    function        reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    ID              reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    return          reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    class           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    new             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    interface       reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    trait           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    CLOSE_TAG       reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    for             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    foreach         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    switch          reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    exit            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    VARIABLE        reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    array           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    pow             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    POW             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    abs             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    cos             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    deg2rad         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    rad2deg         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    die             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    exp             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    floor           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    isset           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    list            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    log             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    log10           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    max             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    min             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    rand            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    round           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    sin             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    sqrt            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    unset           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    CADENA          reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    $end            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    RBLOCK          reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endwhile        reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    private         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    protected       reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    public          reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    var             reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endfor          reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endforeach      reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    break           reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endswitch       reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    default         reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    case            reduce using rule 133 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)


state 366

    (135) interface_body -> interface_body interface_method_declaration .

    RBLOCK          reduce using rule 135 (interface_body -> interface_body interface_method_declaration .)
    private         reduce using rule 135 (interface_body -> interface_body interface_method_declaration .)
    protected       reduce using rule 135 (interface_body -> interface_body interface_method_declaration .)
    public          reduce using rule 135 (interface_body -> interface_body interface_method_declaration .)
    var             reduce using rule 135 (interface_body -> interface_body interface_method_declaration .)


state 367

    (137) interface_method_declaration -> visibility function . ID LPAREN params RPAREN SEMICOLON

    ID              shift and go to state 394


state 368

    (138) trait_declaration -> trait ID LBLOCK trait_body RBLOCK .

    COMMENT         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    empty           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    include         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    const           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    print           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    echo            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    while           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    do              reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    if              reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    function        reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    ID              reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    return          reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    class           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    new             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    interface       reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    trait           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    CLOSE_TAG       reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    for             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    foreach         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    switch          reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    exit            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    VARIABLE        reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    array           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    pow             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    POW             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    abs             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    cos             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    deg2rad         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    rad2deg         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    die             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    exp             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    floor           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    isset           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    list            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    log             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    log10           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    max             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    min             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    rand            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    round           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    sin             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    sqrt            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    unset           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    CADENA          reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    $end            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    RBLOCK          reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endwhile        reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    private         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    protected       reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    public          reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    var             reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endfor          reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endforeach      reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    break           reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endswitch       reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    default         reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    case            reduce using rule 138 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)


state 369

    (140) trait_body -> trait_body trait_element .

    RBLOCK          reduce using rule 140 (trait_body -> trait_body trait_element .)
    private         reduce using rule 140 (trait_body -> trait_body trait_element .)
    protected       reduce using rule 140 (trait_body -> trait_body trait_element .)
    public          reduce using rule 140 (trait_body -> trait_body trait_element .)
    var             reduce using rule 140 (trait_body -> trait_body trait_element .)


state 370

    (142) trait_element -> visibility var_declaration . SEMICOLON

    SEMICOLON       shift and go to state 395


state 371

    (143) trait_element -> visibility fun_declaration .

    RBLOCK          reduce using rule 143 (trait_element -> visibility fun_declaration .)
    private         reduce using rule 143 (trait_element -> visibility fun_declaration .)
    protected       reduce using rule 143 (trait_element -> visibility fun_declaration .)
    public          reduce using rule 143 (trait_element -> visibility fun_declaration .)
    var             reduce using rule 143 (trait_element -> visibility fun_declaration .)


state 372

    (154) for_loop -> for LPAREN for_init for_expr for_update . RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> for LPAREN for_init for_expr for_update . RPAREN COLON declaration_list endfor SEMICOLON

    RPAREN          shift and go to state 396


state 373

    (158) for_update -> expression .

    RPAREN          reduce using rule 158 (for_update -> expression .)


state 374

    (157) for_expr -> expression SEMICOLON .

    MINUS           reduce using rule 157 (for_expr -> expression SEMICOLON .)
    NUMBER          reduce using rule 157 (for_expr -> expression SEMICOLON .)
    VARIABLE        reduce using rule 157 (for_expr -> expression SEMICOLON .)
    LPAREN          reduce using rule 157 (for_expr -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 157 (for_expr -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 157 (for_expr -> expression SEMICOLON .)


state 375

    (160) foreach_loop -> foreach LPAREN expression as expression . RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> foreach LPAREN expression as expression . RPAREN COLON declaration_list endforeach SEMICOLON

    RPAREN          shift and go to state 397


state 376

    (162) switch_statement -> switch LPAREN expression RPAREN LBLOCK . case_blocks default_block RBLOCK
    (164) case_blocks -> . case_blocks case_block
    (165) case_blocks -> . case_block
    (166) case_blocks -> . empty_function
    (167) case_block -> . case expression COLON statement_list
    (168) case_block -> . case expression COLON statement_list break SEMICOLON
    (208) empty_function -> .

  ! shift/reduce conflict for case resolved as shift
    case            shift and go to state 401
    default         reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)

  ! case            [ reduce using rule 208 (empty_function -> .) ]

    case_blocks                    shift and go to state 398
    case_block                     shift and go to state 399
    empty_function                 shift and go to state 400

state 377

    (163) switch_statement -> switch LPAREN expression RPAREN COLON . case_blocks default_block endswitch SEMICOLON
    (164) case_blocks -> . case_blocks case_block
    (165) case_blocks -> . case_block
    (166) case_blocks -> . empty_function
    (167) case_block -> . case expression COLON statement_list
    (168) case_block -> . case expression COLON statement_list break SEMICOLON
    (208) empty_function -> .

  ! shift/reduce conflict for case resolved as shift
    case            shift and go to state 401
    default         reduce using rule 208 (empty_function -> .)
    endswitch       reduce using rule 208 (empty_function -> .)

  ! case            [ reduce using rule 208 (empty_function -> .) ]

    case_blocks                    shift and go to state 402
    case_block                     shift and go to state 399
    empty_function                 shift and go to state 400

state 378

    (159) exit_statement -> exit LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 159 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)


state 379

    (66) assignment_tail -> VARIABLE LBRACKET expression COMMA . params
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    SEMICOLON       reduce using rule 208 (empty_function -> .)
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    COLON           reduce using rule 208 (empty_function -> .)
    RBRACKET        reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 403
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 380

    (67) assignment_tail -> VARIABLE LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 67 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 67 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COMMA           reduce using rule 67 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COLON           reduce using rule 67 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 67 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 67 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)


state 381

    (68) assignment_tail -> VARIABLE LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 68 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 68 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COMMA           reduce using rule 68 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COLON           reduce using rule 68 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 68 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 68 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)


state 382

    (56) var_declaration2 -> VARIABLE EQUAL ID LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 404
    COMMA           shift and go to state 183


state 383

    (57) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .

    SEMICOLON       reduce using rule 57 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    COMMA           reduce using rule 57 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RPAREN          reduce using rule 57 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    COLON           reduce using rule 57 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RBRACKET        reduce using rule 57 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RBLOCK          reduce using rule 57 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)


state 384

    (58) var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .

    SEMICOLON       reduce using rule 58 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    COMMA           reduce using rule 58 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RPAREN          reduce using rule 58 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    COLON           reduce using rule 58 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RBRACKET        reduce using rule 58 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RBLOCK          reduce using rule 58 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)


state 385

    (59) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params . RPAREN
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 405
    COMMA           shift and go to state 183


state 386

    (69) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 406
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 387

    (70) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list . endwhile SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endwhile        shift and go to state 407
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 388

    (71) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN . expression RPAREN SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 408
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 389

    (113) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 409
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 390

    (118) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration_list RBLOCK
    (119) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration_list return_statement RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 410
    return_statement               shift and go to state 18
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 391

    (124) return_statement -> return ID LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 124 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)


state 392

    (76) expression -> additive_expression comp_op additive_expression logical_op additive_expression . comp_op additive_expression
    (97) comp_op -> . LESS
    (98) comp_op -> . LESSEQUAL
    (99) comp_op -> . GREATER
    (100) comp_op -> . GREATEREQUAL
    (101) comp_op -> . DEQUAL
    (102) comp_op -> . DISTINT
    (103) comp_op -> . DIVEQUAL
    (104) comp_op -> . ISEQUAL
    (105) comp_op -> . ISIDENTICAL
    (106) comp_op -> . ISNOTIDENTICAL

    LESS            shift and go to state 195
    LESSEQUAL       shift and go to state 196
    GREATER         shift and go to state 197
    GREATEREQUAL    shift and go to state 198
    DEQUAL          shift and go to state 199
    DISTINT         shift and go to state 200
    DIVEQUAL        shift and go to state 201
    ISEQUAL         shift and go to state 202
    ISIDENTICAL     shift and go to state 203
    ISNOTIDENTICAL  shift and go to state 204

    comp_op                        shift and go to state 411

state 393

    (130) class_body_element -> visibility var_declaration2 SEMICOLON .

    RBLOCK          reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    private         reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    protected       reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    public          reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    var             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT         reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    empty           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    include         reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    const           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    print           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    echo            reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    while           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    do              reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    if              reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    function        reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    ID              reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    return          reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    class           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    new             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    interface       reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    trait           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    for             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    foreach         reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    switch          reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    exit            reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    array           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    pow             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    POW             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    abs             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    cos             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    die             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    exp             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    floor           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    isset           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    list            reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    log             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    log10           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    max             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    min             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    rand            reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    round           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    sin             reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    unset           reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 130 (class_body_element -> visibility var_declaration2 SEMICOLON .)


state 394

    (137) interface_method_declaration -> visibility function ID . LPAREN params RPAREN SEMICOLON

    LPAREN          shift and go to state 412


state 395

    (142) trait_element -> visibility var_declaration SEMICOLON .

    RBLOCK          reduce using rule 142 (trait_element -> visibility var_declaration SEMICOLON .)
    private         reduce using rule 142 (trait_element -> visibility var_declaration SEMICOLON .)
    protected       reduce using rule 142 (trait_element -> visibility var_declaration SEMICOLON .)
    public          reduce using rule 142 (trait_element -> visibility var_declaration SEMICOLON .)
    var             reduce using rule 142 (trait_element -> visibility var_declaration SEMICOLON .)


state 396

    (154) for_loop -> for LPAREN for_init for_expr for_update RPAREN . LBLOCK declaration_list RBLOCK
    (155) for_loop -> for LPAREN for_init for_expr for_update RPAREN . COLON declaration_list endfor SEMICOLON

    LBLOCK          shift and go to state 413
    COLON           shift and go to state 414


state 397

    (160) foreach_loop -> foreach LPAREN expression as expression RPAREN . LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> foreach LPAREN expression as expression RPAREN . COLON declaration_list endforeach SEMICOLON

    LBLOCK          shift and go to state 415
    COLON           shift and go to state 416


state 398

    (162) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks . default_block RBLOCK
    (164) case_blocks -> case_blocks . case_block
    (169) default_block -> . default COLON statement_list
    (170) default_block -> . default COLON statement_list break SEMICOLON
    (171) default_block -> . empty_function
    (167) case_block -> . case expression COLON statement_list
    (168) case_block -> . case expression COLON statement_list break SEMICOLON
    (208) empty_function -> .

    default         shift and go to state 419
    case            shift and go to state 401
    RBLOCK          reduce using rule 208 (empty_function -> .)

    default_block                  shift and go to state 417
    case_block                     shift and go to state 418
    empty_function                 shift and go to state 420

state 399

    (165) case_blocks -> case_block .

    default         reduce using rule 165 (case_blocks -> case_block .)
    case            reduce using rule 165 (case_blocks -> case_block .)
    RBLOCK          reduce using rule 165 (case_blocks -> case_block .)
    endswitch       reduce using rule 165 (case_blocks -> case_block .)


state 400

    (166) case_blocks -> empty_function .

    default         reduce using rule 166 (case_blocks -> empty_function .)
    case            reduce using rule 166 (case_blocks -> empty_function .)
    RBLOCK          reduce using rule 166 (case_blocks -> empty_function .)
    endswitch       reduce using rule 166 (case_blocks -> empty_function .)


state 401

    (167) case_block -> case . expression COLON statement_list
    (168) case_block -> case . expression COLON statement_list break SEMICOLON
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 421
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 402

    (163) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks . default_block endswitch SEMICOLON
    (164) case_blocks -> case_blocks . case_block
    (169) default_block -> . default COLON statement_list
    (170) default_block -> . default COLON statement_list break SEMICOLON
    (171) default_block -> . empty_function
    (167) case_block -> . case expression COLON statement_list
    (168) case_block -> . case expression COLON statement_list break SEMICOLON
    (208) empty_function -> .

    default         shift and go to state 419
    case            shift and go to state 401
    endswitch       reduce using rule 208 (empty_function -> .)

    default_block                  shift and go to state 422
    case_block                     shift and go to state 418
    empty_function                 shift and go to state 420

state 403

    (66) assignment_tail -> VARIABLE LBRACKET expression COMMA params .
    (149) params -> params . COMMA single_param

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 66 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RPAREN          reduce using rule 66 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COLON           reduce using rule 66 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBRACKET        reduce using rule 66 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBLOCK          reduce using rule 66 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COMMA           shift and go to state 183

  ! COMMA           [ reduce using rule 66 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .) ]


state 404

    (56) var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .

    SEMICOLON       reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    COMMA           reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    COLON           reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)


state 405

    (59) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .

    SEMICOLON       reduce using rule 59 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    COMMA           reduce using rule 59 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 59 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    COLON           reduce using rule 59 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 59 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 59 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)


state 406

    (69) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 69 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)


state 407

    (70) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile . SEMICOLON

    SEMICOLON       shift and go to state 423


state 408

    (71) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 424


state 409

    (113) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (114) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (115) else_part -> . else LBLOCK declaration_list RBLOCK
    (116) else_part -> . endif
    (117) else_part -> . empty_function
    (208) empty_function -> .

    elseif          shift and go to state 426
    else            shift and go to state 427
    endif           shift and go to state 428
    COMMENT         reduce using rule 208 (empty_function -> .)
    COMMENT_HASHTAG reduce using rule 208 (empty_function -> .)
    COMMENT_MULTI   reduce using rule 208 (empty_function -> .)
    empty           reduce using rule 208 (empty_function -> .)
    include         reduce using rule 208 (empty_function -> .)
    const           reduce using rule 208 (empty_function -> .)
    print           reduce using rule 208 (empty_function -> .)
    echo            reduce using rule 208 (empty_function -> .)
    while           reduce using rule 208 (empty_function -> .)
    do              reduce using rule 208 (empty_function -> .)
    if              reduce using rule 208 (empty_function -> .)
    function        reduce using rule 208 (empty_function -> .)
    ID              reduce using rule 208 (empty_function -> .)
    return          reduce using rule 208 (empty_function -> .)
    class           reduce using rule 208 (empty_function -> .)
    new             reduce using rule 208 (empty_function -> .)
    interface       reduce using rule 208 (empty_function -> .)
    trait           reduce using rule 208 (empty_function -> .)
    CLOSE_TAG       reduce using rule 208 (empty_function -> .)
    for             reduce using rule 208 (empty_function -> .)
    foreach         reduce using rule 208 (empty_function -> .)
    switch          reduce using rule 208 (empty_function -> .)
    exit            reduce using rule 208 (empty_function -> .)
    VARIABLE        reduce using rule 208 (empty_function -> .)
    array           reduce using rule 208 (empty_function -> .)
    pow             reduce using rule 208 (empty_function -> .)
    POW             reduce using rule 208 (empty_function -> .)
    abs             reduce using rule 208 (empty_function -> .)
    cos             reduce using rule 208 (empty_function -> .)
    deg2rad         reduce using rule 208 (empty_function -> .)
    rad2deg         reduce using rule 208 (empty_function -> .)
    die             reduce using rule 208 (empty_function -> .)
    exp             reduce using rule 208 (empty_function -> .)
    floor           reduce using rule 208 (empty_function -> .)
    isset           reduce using rule 208 (empty_function -> .)
    list            reduce using rule 208 (empty_function -> .)
    log             reduce using rule 208 (empty_function -> .)
    log10           reduce using rule 208 (empty_function -> .)
    max             reduce using rule 208 (empty_function -> .)
    min             reduce using rule 208 (empty_function -> .)
    rand            reduce using rule 208 (empty_function -> .)
    round           reduce using rule 208 (empty_function -> .)
    sin             reduce using rule 208 (empty_function -> .)
    sqrt            reduce using rule 208 (empty_function -> .)
    unset           reduce using rule 208 (empty_function -> .)
    CADENA          reduce using rule 208 (empty_function -> .)
    $end            reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)
    endwhile        reduce using rule 208 (empty_function -> .)
    private         reduce using rule 208 (empty_function -> .)
    protected       reduce using rule 208 (empty_function -> .)
    public          reduce using rule 208 (empty_function -> .)
    var             reduce using rule 208 (empty_function -> .)
    endfor          reduce using rule 208 (empty_function -> .)
    endforeach      reduce using rule 208 (empty_function -> .)
    break           reduce using rule 208 (empty_function -> .)
    endswitch       reduce using rule 208 (empty_function -> .)
    default         reduce using rule 208 (empty_function -> .)
    case            reduce using rule 208 (empty_function -> .)

    else_part                      shift and go to state 425
    empty_function                 shift and go to state 429

state 410

    (118) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list . RBLOCK
    (119) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list . return_statement RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 430
    return          shift and go to state 40
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    return_statement               shift and go to state 431
    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 411

    (76) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op . additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    additive_expression            shift and go to state 432
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 412

    (137) interface_method_declaration -> visibility function ID LPAREN . params RPAREN SEMICOLON
    (148) params -> . single_param
    (149) params -> . params COMMA single_param
    (150) single_param -> . var_declaration2
    (151) single_param -> . NUMBER
    (152) single_param -> . CADENA
    (153) single_param -> . empty_function
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (208) empty_function -> .
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 162
    CADENA          shift and go to state 103
    VARIABLE        shift and go to state 50
    RPAREN          reduce using rule 208 (empty_function -> .)
    COMMA           reduce using rule 208 (empty_function -> .)
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73

    params                         shift and go to state 433
    single_param                   shift and go to state 99
    var_declaration2               shift and go to state 101
    empty_function                 shift and go to state 104
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 413

    (154) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 434
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 414

    (155) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON . declaration_list endfor SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 435
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 415

    (160) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 436
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 416

    (161) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON . declaration_list endforeach SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 437
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 417

    (162) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block . RBLOCK

    RBLOCK          shift and go to state 438


state 418

    (164) case_blocks -> case_blocks case_block .

    default         reduce using rule 164 (case_blocks -> case_blocks case_block .)
    case            reduce using rule 164 (case_blocks -> case_blocks case_block .)
    RBLOCK          reduce using rule 164 (case_blocks -> case_blocks case_block .)
    endswitch       reduce using rule 164 (case_blocks -> case_blocks case_block .)


state 419

    (169) default_block -> default . COLON statement_list
    (170) default_block -> default . COLON statement_list break SEMICOLON

    COLON           shift and go to state 439


state 420

    (171) default_block -> empty_function .

    RBLOCK          reduce using rule 171 (default_block -> empty_function .)
    endswitch       reduce using rule 171 (default_block -> empty_function .)


state 421

    (167) case_block -> case expression . COLON statement_list
    (168) case_block -> case expression . COLON statement_list break SEMICOLON

    COLON           shift and go to state 440


state 422

    (163) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block . endswitch SEMICOLON

    endswitch       shift and go to state 441


state 423

    (70) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .

    COMMENT         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    COMMENT_MULTI   reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    empty           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    include         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    const           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    print           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    echo            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    while           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    do              reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    if              reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    function        reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    ID              reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    return          reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    class           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    new             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    interface       reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    trait           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    CLOSE_TAG       reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    for             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    foreach         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    switch          reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    exit            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    VARIABLE        reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    array           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    pow             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    POW             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    abs             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    cos             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    deg2rad         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    rad2deg         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    die             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    exp             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    floor           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    isset           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    list            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    log             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    log10           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    max             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    min             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    rand            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    round           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    sin             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    sqrt            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    unset           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    CADENA          reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    $end            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    RBLOCK          reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endwhile        reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    private         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    protected       reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    public          reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    var             reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endfor          reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endforeach      reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    break           reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endswitch       reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    default         reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    case            reduce using rule 70 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)


state 424

    (71) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 442


state 425

    (113) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    do              reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    return          reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    interface       reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    trait           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    switch          reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    array           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    pow             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    POW             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    abs             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    cos             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    deg2rad         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rad2deg         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    die             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exp             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    floor           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    isset           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    list            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log10           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    max             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    min             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rand            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    round           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sin             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sqrt            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    unset           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CADENA          reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endwhile        reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    private         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    protected       reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    public          reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    var             reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endfor          reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endforeach      reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    break           reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endswitch       reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    default         reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    case            reduce using rule 113 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)


state 426

    (114) else_part -> elseif . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 443


state 427

    (115) else_part -> else . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 444


state 428

    (116) else_part -> endif .

    COMMENT         reduce using rule 116 (else_part -> endif .)
    COMMENT_HASHTAG reduce using rule 116 (else_part -> endif .)
    COMMENT_MULTI   reduce using rule 116 (else_part -> endif .)
    empty           reduce using rule 116 (else_part -> endif .)
    include         reduce using rule 116 (else_part -> endif .)
    const           reduce using rule 116 (else_part -> endif .)
    print           reduce using rule 116 (else_part -> endif .)
    echo            reduce using rule 116 (else_part -> endif .)
    while           reduce using rule 116 (else_part -> endif .)
    do              reduce using rule 116 (else_part -> endif .)
    if              reduce using rule 116 (else_part -> endif .)
    function        reduce using rule 116 (else_part -> endif .)
    ID              reduce using rule 116 (else_part -> endif .)
    return          reduce using rule 116 (else_part -> endif .)
    class           reduce using rule 116 (else_part -> endif .)
    new             reduce using rule 116 (else_part -> endif .)
    interface       reduce using rule 116 (else_part -> endif .)
    trait           reduce using rule 116 (else_part -> endif .)
    CLOSE_TAG       reduce using rule 116 (else_part -> endif .)
    for             reduce using rule 116 (else_part -> endif .)
    foreach         reduce using rule 116 (else_part -> endif .)
    switch          reduce using rule 116 (else_part -> endif .)
    exit            reduce using rule 116 (else_part -> endif .)
    VARIABLE        reduce using rule 116 (else_part -> endif .)
    array           reduce using rule 116 (else_part -> endif .)
    pow             reduce using rule 116 (else_part -> endif .)
    POW             reduce using rule 116 (else_part -> endif .)
    abs             reduce using rule 116 (else_part -> endif .)
    cos             reduce using rule 116 (else_part -> endif .)
    deg2rad         reduce using rule 116 (else_part -> endif .)
    rad2deg         reduce using rule 116 (else_part -> endif .)
    die             reduce using rule 116 (else_part -> endif .)
    exp             reduce using rule 116 (else_part -> endif .)
    floor           reduce using rule 116 (else_part -> endif .)
    isset           reduce using rule 116 (else_part -> endif .)
    list            reduce using rule 116 (else_part -> endif .)
    log             reduce using rule 116 (else_part -> endif .)
    log10           reduce using rule 116 (else_part -> endif .)
    max             reduce using rule 116 (else_part -> endif .)
    min             reduce using rule 116 (else_part -> endif .)
    rand            reduce using rule 116 (else_part -> endif .)
    round           reduce using rule 116 (else_part -> endif .)
    sin             reduce using rule 116 (else_part -> endif .)
    sqrt            reduce using rule 116 (else_part -> endif .)
    unset           reduce using rule 116 (else_part -> endif .)
    CADENA          reduce using rule 116 (else_part -> endif .)
    $end            reduce using rule 116 (else_part -> endif .)
    RBLOCK          reduce using rule 116 (else_part -> endif .)
    endwhile        reduce using rule 116 (else_part -> endif .)
    private         reduce using rule 116 (else_part -> endif .)
    protected       reduce using rule 116 (else_part -> endif .)
    public          reduce using rule 116 (else_part -> endif .)
    var             reduce using rule 116 (else_part -> endif .)
    endfor          reduce using rule 116 (else_part -> endif .)
    endforeach      reduce using rule 116 (else_part -> endif .)
    break           reduce using rule 116 (else_part -> endif .)
    endswitch       reduce using rule 116 (else_part -> endif .)
    default         reduce using rule 116 (else_part -> endif .)
    case            reduce using rule 116 (else_part -> endif .)


state 429

    (117) else_part -> empty_function .

    COMMENT         reduce using rule 117 (else_part -> empty_function .)
    COMMENT_HASHTAG reduce using rule 117 (else_part -> empty_function .)
    COMMENT_MULTI   reduce using rule 117 (else_part -> empty_function .)
    empty           reduce using rule 117 (else_part -> empty_function .)
    include         reduce using rule 117 (else_part -> empty_function .)
    const           reduce using rule 117 (else_part -> empty_function .)
    print           reduce using rule 117 (else_part -> empty_function .)
    echo            reduce using rule 117 (else_part -> empty_function .)
    while           reduce using rule 117 (else_part -> empty_function .)
    do              reduce using rule 117 (else_part -> empty_function .)
    if              reduce using rule 117 (else_part -> empty_function .)
    function        reduce using rule 117 (else_part -> empty_function .)
    ID              reduce using rule 117 (else_part -> empty_function .)
    return          reduce using rule 117 (else_part -> empty_function .)
    class           reduce using rule 117 (else_part -> empty_function .)
    new             reduce using rule 117 (else_part -> empty_function .)
    interface       reduce using rule 117 (else_part -> empty_function .)
    trait           reduce using rule 117 (else_part -> empty_function .)
    CLOSE_TAG       reduce using rule 117 (else_part -> empty_function .)
    for             reduce using rule 117 (else_part -> empty_function .)
    foreach         reduce using rule 117 (else_part -> empty_function .)
    switch          reduce using rule 117 (else_part -> empty_function .)
    exit            reduce using rule 117 (else_part -> empty_function .)
    VARIABLE        reduce using rule 117 (else_part -> empty_function .)
    array           reduce using rule 117 (else_part -> empty_function .)
    pow             reduce using rule 117 (else_part -> empty_function .)
    POW             reduce using rule 117 (else_part -> empty_function .)
    abs             reduce using rule 117 (else_part -> empty_function .)
    cos             reduce using rule 117 (else_part -> empty_function .)
    deg2rad         reduce using rule 117 (else_part -> empty_function .)
    rad2deg         reduce using rule 117 (else_part -> empty_function .)
    die             reduce using rule 117 (else_part -> empty_function .)
    exp             reduce using rule 117 (else_part -> empty_function .)
    floor           reduce using rule 117 (else_part -> empty_function .)
    isset           reduce using rule 117 (else_part -> empty_function .)
    list            reduce using rule 117 (else_part -> empty_function .)
    log             reduce using rule 117 (else_part -> empty_function .)
    log10           reduce using rule 117 (else_part -> empty_function .)
    max             reduce using rule 117 (else_part -> empty_function .)
    min             reduce using rule 117 (else_part -> empty_function .)
    rand            reduce using rule 117 (else_part -> empty_function .)
    round           reduce using rule 117 (else_part -> empty_function .)
    sin             reduce using rule 117 (else_part -> empty_function .)
    sqrt            reduce using rule 117 (else_part -> empty_function .)
    unset           reduce using rule 117 (else_part -> empty_function .)
    CADENA          reduce using rule 117 (else_part -> empty_function .)
    $end            reduce using rule 117 (else_part -> empty_function .)
    RBLOCK          reduce using rule 117 (else_part -> empty_function .)
    endwhile        reduce using rule 117 (else_part -> empty_function .)
    private         reduce using rule 117 (else_part -> empty_function .)
    protected       reduce using rule 117 (else_part -> empty_function .)
    public          reduce using rule 117 (else_part -> empty_function .)
    var             reduce using rule 117 (else_part -> empty_function .)
    endfor          reduce using rule 117 (else_part -> empty_function .)
    endforeach      reduce using rule 117 (else_part -> empty_function .)
    break           reduce using rule 117 (else_part -> empty_function .)
    endswitch       reduce using rule 117 (else_part -> empty_function .)
    default         reduce using rule 117 (else_part -> empty_function .)
    case            reduce using rule 117 (else_part -> empty_function .)


state 430

    (118) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 118 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)


state 431

    (119) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement . RBLOCK
    (18) declaration -> return_statement .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 445
    return          reduce using rule 18 (declaration -> return_statement .)
    COMMENT         reduce using rule 18 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> return_statement .)
    empty           reduce using rule 18 (declaration -> return_statement .)
    include         reduce using rule 18 (declaration -> return_statement .)
    const           reduce using rule 18 (declaration -> return_statement .)
    print           reduce using rule 18 (declaration -> return_statement .)
    echo            reduce using rule 18 (declaration -> return_statement .)
    while           reduce using rule 18 (declaration -> return_statement .)
    do              reduce using rule 18 (declaration -> return_statement .)
    if              reduce using rule 18 (declaration -> return_statement .)
    function        reduce using rule 18 (declaration -> return_statement .)
    ID              reduce using rule 18 (declaration -> return_statement .)
    class           reduce using rule 18 (declaration -> return_statement .)
    new             reduce using rule 18 (declaration -> return_statement .)
    interface       reduce using rule 18 (declaration -> return_statement .)
    trait           reduce using rule 18 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 18 (declaration -> return_statement .)
    for             reduce using rule 18 (declaration -> return_statement .)
    foreach         reduce using rule 18 (declaration -> return_statement .)
    switch          reduce using rule 18 (declaration -> return_statement .)
    exit            reduce using rule 18 (declaration -> return_statement .)
    VARIABLE        reduce using rule 18 (declaration -> return_statement .)
    array           reduce using rule 18 (declaration -> return_statement .)
    pow             reduce using rule 18 (declaration -> return_statement .)
    POW             reduce using rule 18 (declaration -> return_statement .)
    abs             reduce using rule 18 (declaration -> return_statement .)
    cos             reduce using rule 18 (declaration -> return_statement .)
    deg2rad         reduce using rule 18 (declaration -> return_statement .)
    rad2deg         reduce using rule 18 (declaration -> return_statement .)
    die             reduce using rule 18 (declaration -> return_statement .)
    exp             reduce using rule 18 (declaration -> return_statement .)
    floor           reduce using rule 18 (declaration -> return_statement .)
    isset           reduce using rule 18 (declaration -> return_statement .)
    list            reduce using rule 18 (declaration -> return_statement .)
    log             reduce using rule 18 (declaration -> return_statement .)
    log10           reduce using rule 18 (declaration -> return_statement .)
    max             reduce using rule 18 (declaration -> return_statement .)
    min             reduce using rule 18 (declaration -> return_statement .)
    rand            reduce using rule 18 (declaration -> return_statement .)
    round           reduce using rule 18 (declaration -> return_statement .)
    sin             reduce using rule 18 (declaration -> return_statement .)
    sqrt            reduce using rule 18 (declaration -> return_statement .)
    unset           reduce using rule 18 (declaration -> return_statement .)
    CADENA          reduce using rule 18 (declaration -> return_statement .)

  ! RBLOCK          [ reduce using rule 18 (declaration -> return_statement .) ]


state 432

    (76) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .

    SEMICOLON       reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COLON           reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    as              reduce using rule 76 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)


state 433

    (137) interface_method_declaration -> visibility function ID LPAREN params . RPAREN SEMICOLON
    (149) params -> params . COMMA single_param

    RPAREN          shift and go to state 446
    COMMA           shift and go to state 183


state 434

    (154) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 447
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 435

    (155) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list . endfor SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endfor          shift and go to state 448
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 436

    (160) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 449
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 437

    (161) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list . endforeach SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endforeach      shift and go to state 450
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 438

    (162) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .

    COMMENT         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    COMMENT_HASHTAG reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    COMMENT_MULTI   reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    empty           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    include         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    const           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    print           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    echo            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    while           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    do              reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    if              reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    function        reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    ID              reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    return          reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    class           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    new             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    interface       reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    trait           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    CLOSE_TAG       reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    for             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    foreach         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    switch          reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    exit            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    VARIABLE        reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    array           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    pow             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    POW             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    abs             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    cos             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    deg2rad         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    rad2deg         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    die             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    exp             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    floor           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    isset           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    list            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    log             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    log10           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    max             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    min             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    rand            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    round           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    sin             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    sqrt            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    unset           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    CADENA          reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    $end            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    RBLOCK          reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endwhile        reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    private         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    protected       reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    public          reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    var             reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endfor          reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endforeach      reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    break           reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endswitch       reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    default         reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    case            reduce using rule 162 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)


state 439

    (169) default_block -> default COLON . statement_list
    (170) default_block -> default COLON . statement_list break SEMICOLON
    (172) statement_list -> . declaration
    (173) statement_list -> . statement_list declaration
    (174) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (208) empty_function -> .
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    break           reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)
    endswitch       reduce using rule 208 (empty_function -> .)
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

  ! COMMENT         [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 208 (empty_function -> .) ]
  ! empty           [ reduce using rule 208 (empty_function -> .) ]
  ! include         [ reduce using rule 208 (empty_function -> .) ]
  ! const           [ reduce using rule 208 (empty_function -> .) ]
  ! print           [ reduce using rule 208 (empty_function -> .) ]
  ! echo            [ reduce using rule 208 (empty_function -> .) ]
  ! while           [ reduce using rule 208 (empty_function -> .) ]
  ! do              [ reduce using rule 208 (empty_function -> .) ]
  ! if              [ reduce using rule 208 (empty_function -> .) ]
  ! function        [ reduce using rule 208 (empty_function -> .) ]
  ! ID              [ reduce using rule 208 (empty_function -> .) ]
  ! return          [ reduce using rule 208 (empty_function -> .) ]
  ! class           [ reduce using rule 208 (empty_function -> .) ]
  ! new             [ reduce using rule 208 (empty_function -> .) ]
  ! interface       [ reduce using rule 208 (empty_function -> .) ]
  ! trait           [ reduce using rule 208 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 208 (empty_function -> .) ]
  ! for             [ reduce using rule 208 (empty_function -> .) ]
  ! foreach         [ reduce using rule 208 (empty_function -> .) ]
  ! switch          [ reduce using rule 208 (empty_function -> .) ]
  ! exit            [ reduce using rule 208 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 208 (empty_function -> .) ]
  ! array           [ reduce using rule 208 (empty_function -> .) ]
  ! pow             [ reduce using rule 208 (empty_function -> .) ]
  ! POW             [ reduce using rule 208 (empty_function -> .) ]
  ! abs             [ reduce using rule 208 (empty_function -> .) ]
  ! cos             [ reduce using rule 208 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 208 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 208 (empty_function -> .) ]
  ! die             [ reduce using rule 208 (empty_function -> .) ]
  ! exp             [ reduce using rule 208 (empty_function -> .) ]
  ! floor           [ reduce using rule 208 (empty_function -> .) ]
  ! isset           [ reduce using rule 208 (empty_function -> .) ]
  ! list            [ reduce using rule 208 (empty_function -> .) ]
  ! log             [ reduce using rule 208 (empty_function -> .) ]
  ! log10           [ reduce using rule 208 (empty_function -> .) ]
  ! max             [ reduce using rule 208 (empty_function -> .) ]
  ! min             [ reduce using rule 208 (empty_function -> .) ]
  ! rand            [ reduce using rule 208 (empty_function -> .) ]
  ! round           [ reduce using rule 208 (empty_function -> .) ]
  ! sin             [ reduce using rule 208 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 208 (empty_function -> .) ]
  ! unset           [ reduce using rule 208 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 208 (empty_function -> .) ]

    statement_list                 shift and go to state 451
    declaration                    shift and go to state 452
    empty_function                 shift and go to state 453
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 440

    (167) case_block -> case expression COLON . statement_list
    (168) case_block -> case expression COLON . statement_list break SEMICOLON
    (172) statement_list -> . declaration
    (173) statement_list -> . statement_list declaration
    (174) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (208) empty_function -> .
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    break           reduce using rule 208 (empty_function -> .)
    default         reduce using rule 208 (empty_function -> .)
    case            reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)
    endswitch       reduce using rule 208 (empty_function -> .)
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

  ! COMMENT         [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 208 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 208 (empty_function -> .) ]
  ! empty           [ reduce using rule 208 (empty_function -> .) ]
  ! include         [ reduce using rule 208 (empty_function -> .) ]
  ! const           [ reduce using rule 208 (empty_function -> .) ]
  ! print           [ reduce using rule 208 (empty_function -> .) ]
  ! echo            [ reduce using rule 208 (empty_function -> .) ]
  ! while           [ reduce using rule 208 (empty_function -> .) ]
  ! do              [ reduce using rule 208 (empty_function -> .) ]
  ! if              [ reduce using rule 208 (empty_function -> .) ]
  ! function        [ reduce using rule 208 (empty_function -> .) ]
  ! ID              [ reduce using rule 208 (empty_function -> .) ]
  ! return          [ reduce using rule 208 (empty_function -> .) ]
  ! class           [ reduce using rule 208 (empty_function -> .) ]
  ! new             [ reduce using rule 208 (empty_function -> .) ]
  ! interface       [ reduce using rule 208 (empty_function -> .) ]
  ! trait           [ reduce using rule 208 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 208 (empty_function -> .) ]
  ! for             [ reduce using rule 208 (empty_function -> .) ]
  ! foreach         [ reduce using rule 208 (empty_function -> .) ]
  ! switch          [ reduce using rule 208 (empty_function -> .) ]
  ! exit            [ reduce using rule 208 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 208 (empty_function -> .) ]
  ! array           [ reduce using rule 208 (empty_function -> .) ]
  ! pow             [ reduce using rule 208 (empty_function -> .) ]
  ! POW             [ reduce using rule 208 (empty_function -> .) ]
  ! abs             [ reduce using rule 208 (empty_function -> .) ]
  ! cos             [ reduce using rule 208 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 208 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 208 (empty_function -> .) ]
  ! die             [ reduce using rule 208 (empty_function -> .) ]
  ! exp             [ reduce using rule 208 (empty_function -> .) ]
  ! floor           [ reduce using rule 208 (empty_function -> .) ]
  ! isset           [ reduce using rule 208 (empty_function -> .) ]
  ! list            [ reduce using rule 208 (empty_function -> .) ]
  ! log             [ reduce using rule 208 (empty_function -> .) ]
  ! log10           [ reduce using rule 208 (empty_function -> .) ]
  ! max             [ reduce using rule 208 (empty_function -> .) ]
  ! min             [ reduce using rule 208 (empty_function -> .) ]
  ! rand            [ reduce using rule 208 (empty_function -> .) ]
  ! round           [ reduce using rule 208 (empty_function -> .) ]
  ! sin             [ reduce using rule 208 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 208 (empty_function -> .) ]
  ! unset           [ reduce using rule 208 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 208 (empty_function -> .) ]

    statement_list                 shift and go to state 454
    declaration                    shift and go to state 452
    empty_function                 shift and go to state 453
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 441

    (163) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch . SEMICOLON

    SEMICOLON       shift and go to state 455


state 442

    (71) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 71 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)


state 443

    (114) else_part -> elseif LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (73) expression -> . additive_expression
    (74) expression -> . additive_expression logical_op additive_expression
    (75) expression -> . additive_expression comp_op additive_expression
    (76) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (77) expression -> . additive_expression bits_op additive_expression
    (78) additive_expression -> . term
    (79) additive_expression -> . term math_op term
    (80) term -> . MINUS term
    (81) term -> . factor
    (82) term -> . factor increment_decrement_op
    (83) term -> . increment_decrement_op factor
    (84) factor -> . NUMBER
    (85) factor -> . VARIABLE
    (86) factor -> . LPAREN expression RPAREN
    (87) increment_decrement_op -> . PLUSPLUS
    (88) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 105
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 176
    LPAREN          shift and go to state 97
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110

    expression                     shift and go to state 456
    additive_expression            shift and go to state 98
    term                           shift and go to state 100
    factor                         shift and go to state 106
    increment_decrement_op         shift and go to state 107

state 444

    (115) else_part -> else LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 457
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 445

    (119) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .

    COMMENT         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_HASHTAG reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_MULTI   reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    empty           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    include         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    const           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    print           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    echo            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    while           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    do              reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    if              reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    function        reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    ID              reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    return          reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    class           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    new             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    interface       reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    trait           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CLOSE_TAG       reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    for             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    foreach         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    switch          reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exit            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    VARIABLE        reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    array           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    pow             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    POW             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    abs             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    cos             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    deg2rad         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rad2deg         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    die             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exp             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    floor           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    isset           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    list            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log10           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    max             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    min             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rand            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    round           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sin             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sqrt            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    unset           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CADENA          reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    $end            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    RBLOCK          reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endwhile        reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    private         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    protected       reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    public          reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    var             reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endfor          reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endforeach      reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    break           reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endswitch       reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    default         reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    case            reduce using rule 119 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)


state 446

    (137) interface_method_declaration -> visibility function ID LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 458


state 447

    (154) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 154 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)


state 448

    (155) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor . SEMICOLON

    SEMICOLON       shift and go to state 459


state 449

    (160) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 160 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)


state 450

    (161) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach . SEMICOLON

    SEMICOLON       shift and go to state 460


state 451

    (169) default_block -> default COLON statement_list .
    (170) default_block -> default COLON statement_list . break SEMICOLON
    (173) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          reduce using rule 169 (default_block -> default COLON statement_list .)
    endswitch       reduce using rule 169 (default_block -> default COLON statement_list .)
    break           shift and go to state 461
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 462
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 452

    (172) statement_list -> declaration .

    break           reduce using rule 172 (statement_list -> declaration .)
    COMMENT         reduce using rule 172 (statement_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 172 (statement_list -> declaration .)
    COMMENT_MULTI   reduce using rule 172 (statement_list -> declaration .)
    empty           reduce using rule 172 (statement_list -> declaration .)
    include         reduce using rule 172 (statement_list -> declaration .)
    const           reduce using rule 172 (statement_list -> declaration .)
    print           reduce using rule 172 (statement_list -> declaration .)
    echo            reduce using rule 172 (statement_list -> declaration .)
    while           reduce using rule 172 (statement_list -> declaration .)
    do              reduce using rule 172 (statement_list -> declaration .)
    if              reduce using rule 172 (statement_list -> declaration .)
    function        reduce using rule 172 (statement_list -> declaration .)
    ID              reduce using rule 172 (statement_list -> declaration .)
    return          reduce using rule 172 (statement_list -> declaration .)
    class           reduce using rule 172 (statement_list -> declaration .)
    new             reduce using rule 172 (statement_list -> declaration .)
    interface       reduce using rule 172 (statement_list -> declaration .)
    trait           reduce using rule 172 (statement_list -> declaration .)
    CLOSE_TAG       reduce using rule 172 (statement_list -> declaration .)
    for             reduce using rule 172 (statement_list -> declaration .)
    foreach         reduce using rule 172 (statement_list -> declaration .)
    switch          reduce using rule 172 (statement_list -> declaration .)
    exit            reduce using rule 172 (statement_list -> declaration .)
    VARIABLE        reduce using rule 172 (statement_list -> declaration .)
    array           reduce using rule 172 (statement_list -> declaration .)
    pow             reduce using rule 172 (statement_list -> declaration .)
    POW             reduce using rule 172 (statement_list -> declaration .)
    abs             reduce using rule 172 (statement_list -> declaration .)
    cos             reduce using rule 172 (statement_list -> declaration .)
    deg2rad         reduce using rule 172 (statement_list -> declaration .)
    rad2deg         reduce using rule 172 (statement_list -> declaration .)
    die             reduce using rule 172 (statement_list -> declaration .)
    exp             reduce using rule 172 (statement_list -> declaration .)
    floor           reduce using rule 172 (statement_list -> declaration .)
    isset           reduce using rule 172 (statement_list -> declaration .)
    list            reduce using rule 172 (statement_list -> declaration .)
    log             reduce using rule 172 (statement_list -> declaration .)
    log10           reduce using rule 172 (statement_list -> declaration .)
    max             reduce using rule 172 (statement_list -> declaration .)
    min             reduce using rule 172 (statement_list -> declaration .)
    rand            reduce using rule 172 (statement_list -> declaration .)
    round           reduce using rule 172 (statement_list -> declaration .)
    sin             reduce using rule 172 (statement_list -> declaration .)
    sqrt            reduce using rule 172 (statement_list -> declaration .)
    unset           reduce using rule 172 (statement_list -> declaration .)
    CADENA          reduce using rule 172 (statement_list -> declaration .)
    RBLOCK          reduce using rule 172 (statement_list -> declaration .)
    endswitch       reduce using rule 172 (statement_list -> declaration .)
    default         reduce using rule 172 (statement_list -> declaration .)
    case            reduce using rule 172 (statement_list -> declaration .)


state 453

    (174) statement_list -> empty_function .

    break           reduce using rule 174 (statement_list -> empty_function .)
    COMMENT         reduce using rule 174 (statement_list -> empty_function .)
    COMMENT_HASHTAG reduce using rule 174 (statement_list -> empty_function .)
    COMMENT_MULTI   reduce using rule 174 (statement_list -> empty_function .)
    empty           reduce using rule 174 (statement_list -> empty_function .)
    include         reduce using rule 174 (statement_list -> empty_function .)
    const           reduce using rule 174 (statement_list -> empty_function .)
    print           reduce using rule 174 (statement_list -> empty_function .)
    echo            reduce using rule 174 (statement_list -> empty_function .)
    while           reduce using rule 174 (statement_list -> empty_function .)
    do              reduce using rule 174 (statement_list -> empty_function .)
    if              reduce using rule 174 (statement_list -> empty_function .)
    function        reduce using rule 174 (statement_list -> empty_function .)
    ID              reduce using rule 174 (statement_list -> empty_function .)
    return          reduce using rule 174 (statement_list -> empty_function .)
    class           reduce using rule 174 (statement_list -> empty_function .)
    new             reduce using rule 174 (statement_list -> empty_function .)
    interface       reduce using rule 174 (statement_list -> empty_function .)
    trait           reduce using rule 174 (statement_list -> empty_function .)
    CLOSE_TAG       reduce using rule 174 (statement_list -> empty_function .)
    for             reduce using rule 174 (statement_list -> empty_function .)
    foreach         reduce using rule 174 (statement_list -> empty_function .)
    switch          reduce using rule 174 (statement_list -> empty_function .)
    exit            reduce using rule 174 (statement_list -> empty_function .)
    VARIABLE        reduce using rule 174 (statement_list -> empty_function .)
    array           reduce using rule 174 (statement_list -> empty_function .)
    pow             reduce using rule 174 (statement_list -> empty_function .)
    POW             reduce using rule 174 (statement_list -> empty_function .)
    abs             reduce using rule 174 (statement_list -> empty_function .)
    cos             reduce using rule 174 (statement_list -> empty_function .)
    deg2rad         reduce using rule 174 (statement_list -> empty_function .)
    rad2deg         reduce using rule 174 (statement_list -> empty_function .)
    die             reduce using rule 174 (statement_list -> empty_function .)
    exp             reduce using rule 174 (statement_list -> empty_function .)
    floor           reduce using rule 174 (statement_list -> empty_function .)
    isset           reduce using rule 174 (statement_list -> empty_function .)
    list            reduce using rule 174 (statement_list -> empty_function .)
    log             reduce using rule 174 (statement_list -> empty_function .)
    log10           reduce using rule 174 (statement_list -> empty_function .)
    max             reduce using rule 174 (statement_list -> empty_function .)
    min             reduce using rule 174 (statement_list -> empty_function .)
    rand            reduce using rule 174 (statement_list -> empty_function .)
    round           reduce using rule 174 (statement_list -> empty_function .)
    sin             reduce using rule 174 (statement_list -> empty_function .)
    sqrt            reduce using rule 174 (statement_list -> empty_function .)
    unset           reduce using rule 174 (statement_list -> empty_function .)
    CADENA          reduce using rule 174 (statement_list -> empty_function .)
    RBLOCK          reduce using rule 174 (statement_list -> empty_function .)
    endswitch       reduce using rule 174 (statement_list -> empty_function .)
    default         reduce using rule 174 (statement_list -> empty_function .)
    case            reduce using rule 174 (statement_list -> empty_function .)


state 454

    (167) case_block -> case expression COLON statement_list .
    (168) case_block -> case expression COLON statement_list . break SEMICOLON
    (173) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    default         reduce using rule 167 (case_block -> case expression COLON statement_list .)
    case            reduce using rule 167 (case_block -> case expression COLON statement_list .)
    RBLOCK          reduce using rule 167 (case_block -> case expression COLON statement_list .)
    endswitch       reduce using rule 167 (case_block -> case expression COLON statement_list .)
    break           shift and go to state 463
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 462
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 455

    (163) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .

    COMMENT         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    COMMENT_MULTI   reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    empty           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    include         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    const           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    print           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    echo            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    while           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    do              reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    if              reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    function        reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    ID              reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    return          reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    class           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    new             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    interface       reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    trait           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    CLOSE_TAG       reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    for             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    foreach         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    switch          reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    exit            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    VARIABLE        reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    array           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    pow             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    POW             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    abs             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    cos             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    deg2rad         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    rad2deg         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    die             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    exp             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    floor           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    isset           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    list            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    log             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    log10           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    max             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    min             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    rand            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    round           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    sin             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    sqrt            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    unset           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    CADENA          reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    $end            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    RBLOCK          reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endwhile        reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    private         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    protected       reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    public          reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    var             reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endfor          reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endforeach      reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    break           reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endswitch       reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    default         reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    case            reduce using rule 163 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)


state 456

    (114) else_part -> elseif LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 464


state 457

    (115) else_part -> else LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 465
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 458

    (137) interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .

    RBLOCK          reduce using rule 137 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    private         reduce using rule 137 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    protected       reduce using rule 137 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    public          reduce using rule 137 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    var             reduce using rule 137 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)


state 459

    (155) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .

    COMMENT         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    COMMENT_MULTI   reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    empty           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    include         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    const           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    print           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    echo            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    while           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    do              reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    if              reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    function        reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    ID              reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    return          reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    class           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    new             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    interface       reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    trait           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    CLOSE_TAG       reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    for             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    foreach         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    switch          reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    exit            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    VARIABLE        reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    array           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    pow             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    POW             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    abs             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    cos             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    deg2rad         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    rad2deg         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    die             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    exp             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    floor           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    isset           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    list            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    log             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    log10           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    max             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    min             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    rand            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    round           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    sin             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    sqrt            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    unset           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    CADENA          reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    $end            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    RBLOCK          reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endwhile        reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    private         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    protected       reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    public          reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    var             reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endfor          reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endforeach      reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    break           reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endswitch       reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    default         reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    case            reduce using rule 155 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)


state 460

    (161) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .

    COMMENT         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    COMMENT_MULTI   reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    empty           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    include         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    const           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    print           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    echo            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    while           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    do              reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    if              reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    function        reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    ID              reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    return          reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    class           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    new             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    interface       reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    trait           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    CLOSE_TAG       reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    for             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    foreach         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    switch          reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    exit            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    VARIABLE        reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    array           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    pow             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    POW             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    abs             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    cos             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    deg2rad         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    rad2deg         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    die             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    exp             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    floor           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    isset           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    list            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    log             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    log10           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    max             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    min             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    rand            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    round           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    sin             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    sqrt            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    unset           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    CADENA          reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    $end            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    RBLOCK          reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endwhile        reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    private         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    protected       reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    public          reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    var             reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endfor          reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endforeach      reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    break           reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endswitch       reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    default         reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    case            reduce using rule 161 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)


state 461

    (170) default_block -> default COLON statement_list break . SEMICOLON

    SEMICOLON       shift and go to state 466


state 462

    (173) statement_list -> statement_list declaration .

    break           reduce using rule 173 (statement_list -> statement_list declaration .)
    COMMENT         reduce using rule 173 (statement_list -> statement_list declaration .)
    COMMENT_HASHTAG reduce using rule 173 (statement_list -> statement_list declaration .)
    COMMENT_MULTI   reduce using rule 173 (statement_list -> statement_list declaration .)
    empty           reduce using rule 173 (statement_list -> statement_list declaration .)
    include         reduce using rule 173 (statement_list -> statement_list declaration .)
    const           reduce using rule 173 (statement_list -> statement_list declaration .)
    print           reduce using rule 173 (statement_list -> statement_list declaration .)
    echo            reduce using rule 173 (statement_list -> statement_list declaration .)
    while           reduce using rule 173 (statement_list -> statement_list declaration .)
    do              reduce using rule 173 (statement_list -> statement_list declaration .)
    if              reduce using rule 173 (statement_list -> statement_list declaration .)
    function        reduce using rule 173 (statement_list -> statement_list declaration .)
    ID              reduce using rule 173 (statement_list -> statement_list declaration .)
    return          reduce using rule 173 (statement_list -> statement_list declaration .)
    class           reduce using rule 173 (statement_list -> statement_list declaration .)
    new             reduce using rule 173 (statement_list -> statement_list declaration .)
    interface       reduce using rule 173 (statement_list -> statement_list declaration .)
    trait           reduce using rule 173 (statement_list -> statement_list declaration .)
    CLOSE_TAG       reduce using rule 173 (statement_list -> statement_list declaration .)
    for             reduce using rule 173 (statement_list -> statement_list declaration .)
    foreach         reduce using rule 173 (statement_list -> statement_list declaration .)
    switch          reduce using rule 173 (statement_list -> statement_list declaration .)
    exit            reduce using rule 173 (statement_list -> statement_list declaration .)
    VARIABLE        reduce using rule 173 (statement_list -> statement_list declaration .)
    array           reduce using rule 173 (statement_list -> statement_list declaration .)
    pow             reduce using rule 173 (statement_list -> statement_list declaration .)
    POW             reduce using rule 173 (statement_list -> statement_list declaration .)
    abs             reduce using rule 173 (statement_list -> statement_list declaration .)
    cos             reduce using rule 173 (statement_list -> statement_list declaration .)
    deg2rad         reduce using rule 173 (statement_list -> statement_list declaration .)
    rad2deg         reduce using rule 173 (statement_list -> statement_list declaration .)
    die             reduce using rule 173 (statement_list -> statement_list declaration .)
    exp             reduce using rule 173 (statement_list -> statement_list declaration .)
    floor           reduce using rule 173 (statement_list -> statement_list declaration .)
    isset           reduce using rule 173 (statement_list -> statement_list declaration .)
    list            reduce using rule 173 (statement_list -> statement_list declaration .)
    log             reduce using rule 173 (statement_list -> statement_list declaration .)
    log10           reduce using rule 173 (statement_list -> statement_list declaration .)
    max             reduce using rule 173 (statement_list -> statement_list declaration .)
    min             reduce using rule 173 (statement_list -> statement_list declaration .)
    rand            reduce using rule 173 (statement_list -> statement_list declaration .)
    round           reduce using rule 173 (statement_list -> statement_list declaration .)
    sin             reduce using rule 173 (statement_list -> statement_list declaration .)
    sqrt            reduce using rule 173 (statement_list -> statement_list declaration .)
    unset           reduce using rule 173 (statement_list -> statement_list declaration .)
    CADENA          reduce using rule 173 (statement_list -> statement_list declaration .)
    RBLOCK          reduce using rule 173 (statement_list -> statement_list declaration .)
    endswitch       reduce using rule 173 (statement_list -> statement_list declaration .)
    default         reduce using rule 173 (statement_list -> statement_list declaration .)
    case            reduce using rule 173 (statement_list -> statement_list declaration .)


state 463

    (168) case_block -> case expression COLON statement_list break . SEMICOLON

    SEMICOLON       shift and go to state 467


state 464

    (114) else_part -> elseif LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 468


state 465

    (115) else_part -> else LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 115 (else_part -> else LBLOCK declaration_list RBLOCK .)


state 466

    (170) default_block -> default COLON statement_list break SEMICOLON .

    RBLOCK          reduce using rule 170 (default_block -> default COLON statement_list break SEMICOLON .)
    endswitch       reduce using rule 170 (default_block -> default COLON statement_list break SEMICOLON .)


state 467

    (168) case_block -> case expression COLON statement_list break SEMICOLON .

    default         reduce using rule 168 (case_block -> case expression COLON statement_list break SEMICOLON .)
    case            reduce using rule 168 (case_block -> case expression COLON statement_list break SEMICOLON .)
    RBLOCK          reduce using rule 168 (case_block -> case expression COLON statement_list break SEMICOLON .)
    endswitch       reduce using rule 168 (case_block -> case expression COLON statement_list break SEMICOLON .)


state 468

    (114) else_part -> elseif LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration_list               shift and go to state 469
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 469

    (114) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . create_obj_declaration
    (21) declaration -> . interface_declaration
    (22) declaration -> . trait_declaration
    (23) declaration -> . footer_declaration
    (24) declaration -> . for_loop
    (25) declaration -> . foreach_loop
    (26) declaration -> . switch_statement
    (27) declaration -> . exit_statement
    (28) declaration -> . empty
    (29) header_declaration -> . include CADENA SEMICOLON
    (44) var_declaration -> . var_declaration2 SEMICOLON
    (30) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (31) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (32) print_declaration -> . print var_declaration2 SEMICOLON
    (33) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (34) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (35) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (36) print_declaration -> . print NUMBER SEMICOLON
    (37) print_declaration -> . print CADENA SEMICOLON
    (38) echo_declaration -> . echo var_declaration2 SEMICOLON
    (39) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (40) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (41) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (42) echo_declaration -> . echo NUMBER SEMICOLON
    (43) echo_declaration -> . echo CADENA SEMICOLON
    (69) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (70) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (71) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (72) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (113) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (118) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (119) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (120) fun_call -> . ID LPAREN params RPAREN
    (121) return_statement -> . return expression SEMICOLON
    (122) return_statement -> . return params SEMICOLON
    (123) return_statement -> . return SEMICOLON
    (124) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (125) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (126) create_obj_declaration -> . new ID LPAREN params RPAREN
    (133) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (138) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (3) footer_declaration -> . CLOSE_TAG
    (154) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (155) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (160) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (161) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (162) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (163) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (159) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (45) var_declaration2 -> . VARIABLE
    (46) var_declaration2 -> . VARIABLE expression
    (47) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (48) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (49) var_declaration2 -> . VARIABLE EQUAL CADENA
    (50) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (51) var_declaration2 -> . VARIABLE EQUAL expression
    (52) var_declaration2 -> . VARIABLE assignation VARIABLE
    (53) var_declaration2 -> . VARIABLE assignation NUMBER
    (54) var_declaration2 -> . Built_In_Declaration
    (55) var_declaration2 -> . Concatenar_Cadenas_declaration
    (56) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (57) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (58) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (59) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (60) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (61) var_declaration2 -> . VARIABLE assignment_tail
    (62) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (175) Built_In_Declaration -> . array LPAREN params RPAREN
    (176) Built_In_Declaration -> . pow LPAREN params RPAREN
    (177) Built_In_Declaration -> . POW LPAREN params RPAREN
    (178) Built_In_Declaration -> . abs LPAREN params RPAREN
    (179) Built_In_Declaration -> . cos LPAREN params RPAREN
    (180) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (181) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (182) Built_In_Declaration -> . die LPAREN params RPAREN
    (183) Built_In_Declaration -> . exp LPAREN params RPAREN
    (184) Built_In_Declaration -> . floor LPAREN params RPAREN
    (185) Built_In_Declaration -> . isset LPAREN params RPAREN
    (186) Built_In_Declaration -> . list LPAREN params RPAREN
    (187) Built_In_Declaration -> . log LPAREN params RPAREN
    (188) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (189) Built_In_Declaration -> . max LPAREN params RPAREN
    (190) Built_In_Declaration -> . min LPAREN params RPAREN
    (191) Built_In_Declaration -> . rand LPAREN params RPAREN
    (192) Built_In_Declaration -> . round LPAREN params RPAREN
    (193) Built_In_Declaration -> . sin LPAREN params RPAREN
    (194) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (195) Built_In_Declaration -> . unset LPAREN params RPAREN
    (196) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (197) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (198) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (199) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 470
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 28
    include         shift and go to state 29
    const           shift and go to state 32
    print           shift and go to state 34
    echo            shift and go to state 35
    while           shift and go to state 36
    do              shift and go to state 37
    if              shift and go to state 38
    function        shift and go to state 39
    ID              shift and go to state 33
    return          shift and go to state 40
    class           shift and go to state 41
    new             shift and go to state 42
    interface       shift and go to state 43
    trait           shift and go to state 44
    CLOSE_TAG       shift and go to state 45
    for             shift and go to state 46
    foreach         shift and go to state 47
    switch          shift and go to state 48
    exit            shift and go to state 49
    VARIABLE        shift and go to state 50
    array           shift and go to state 53
    pow             shift and go to state 54
    POW             shift and go to state 55
    abs             shift and go to state 56
    cos             shift and go to state 57
    deg2rad         shift and go to state 58
    rad2deg         shift and go to state 59
    die             shift and go to state 60
    exp             shift and go to state 61
    floor           shift and go to state 62
    isset           shift and go to state 63
    list            shift and go to state 64
    log             shift and go to state 65
    log10           shift and go to state 66
    max             shift and go to state 67
    min             shift and go to state 68
    rand            shift and go to state 69
    round           shift and go to state 70
    sin             shift and go to state 71
    sqrt            shift and go to state 72
    unset           shift and go to state 73
    CADENA          shift and go to state 30

    declaration                    shift and go to state 74
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    create_obj_declaration         shift and go to state 20
    interface_declaration          shift and go to state 21
    trait_declaration              shift and go to state 22
    footer_declaration             shift and go to state 23
    for_loop                       shift and go to state 24
    foreach_loop                   shift and go to state 25
    switch_statement               shift and go to state 26
    exit_statement                 shift and go to state 27
    var_declaration2               shift and go to state 31
    Built_In_Declaration           shift and go to state 51
    Concatenar_Cadenas_declaration shift and go to state 52

state 470

    (114) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (114) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (115) else_part -> . else LBLOCK declaration_list RBLOCK
    (116) else_part -> . endif
    (117) else_part -> . empty_function
    (208) empty_function -> .

    elseif          shift and go to state 426
    else            shift and go to state 427
    endif           shift and go to state 428
    COMMENT         reduce using rule 208 (empty_function -> .)
    COMMENT_HASHTAG reduce using rule 208 (empty_function -> .)
    COMMENT_MULTI   reduce using rule 208 (empty_function -> .)
    empty           reduce using rule 208 (empty_function -> .)
    include         reduce using rule 208 (empty_function -> .)
    const           reduce using rule 208 (empty_function -> .)
    print           reduce using rule 208 (empty_function -> .)
    echo            reduce using rule 208 (empty_function -> .)
    while           reduce using rule 208 (empty_function -> .)
    do              reduce using rule 208 (empty_function -> .)
    if              reduce using rule 208 (empty_function -> .)
    function        reduce using rule 208 (empty_function -> .)
    ID              reduce using rule 208 (empty_function -> .)
    return          reduce using rule 208 (empty_function -> .)
    class           reduce using rule 208 (empty_function -> .)
    new             reduce using rule 208 (empty_function -> .)
    interface       reduce using rule 208 (empty_function -> .)
    trait           reduce using rule 208 (empty_function -> .)
    CLOSE_TAG       reduce using rule 208 (empty_function -> .)
    for             reduce using rule 208 (empty_function -> .)
    foreach         reduce using rule 208 (empty_function -> .)
    switch          reduce using rule 208 (empty_function -> .)
    exit            reduce using rule 208 (empty_function -> .)
    VARIABLE        reduce using rule 208 (empty_function -> .)
    array           reduce using rule 208 (empty_function -> .)
    pow             reduce using rule 208 (empty_function -> .)
    POW             reduce using rule 208 (empty_function -> .)
    abs             reduce using rule 208 (empty_function -> .)
    cos             reduce using rule 208 (empty_function -> .)
    deg2rad         reduce using rule 208 (empty_function -> .)
    rad2deg         reduce using rule 208 (empty_function -> .)
    die             reduce using rule 208 (empty_function -> .)
    exp             reduce using rule 208 (empty_function -> .)
    floor           reduce using rule 208 (empty_function -> .)
    isset           reduce using rule 208 (empty_function -> .)
    list            reduce using rule 208 (empty_function -> .)
    log             reduce using rule 208 (empty_function -> .)
    log10           reduce using rule 208 (empty_function -> .)
    max             reduce using rule 208 (empty_function -> .)
    min             reduce using rule 208 (empty_function -> .)
    rand            reduce using rule 208 (empty_function -> .)
    round           reduce using rule 208 (empty_function -> .)
    sin             reduce using rule 208 (empty_function -> .)
    sqrt            reduce using rule 208 (empty_function -> .)
    unset           reduce using rule 208 (empty_function -> .)
    CADENA          reduce using rule 208 (empty_function -> .)
    $end            reduce using rule 208 (empty_function -> .)
    RBLOCK          reduce using rule 208 (empty_function -> .)
    endwhile        reduce using rule 208 (empty_function -> .)
    private         reduce using rule 208 (empty_function -> .)
    protected       reduce using rule 208 (empty_function -> .)
    public          reduce using rule 208 (empty_function -> .)
    var             reduce using rule 208 (empty_function -> .)
    endfor          reduce using rule 208 (empty_function -> .)
    endforeach      reduce using rule 208 (empty_function -> .)
    break           reduce using rule 208 (empty_function -> .)
    endswitch       reduce using rule 208 (empty_function -> .)
    default         reduce using rule 208 (empty_function -> .)
    case            reduce using rule 208 (empty_function -> .)

    else_part                      shift and go to state 471
    empty_function                 shift and go to state 429

state 471

    (114) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    do              reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    return          reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    interface       reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    trait           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    switch          reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    array           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    pow             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    POW             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    abs             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    cos             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    deg2rad         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rad2deg         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    die             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exp             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    floor           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    isset           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    list            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log10           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    max             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    min             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rand            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    round           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sin             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sqrt            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    unset           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CADENA          reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endwhile        reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    private         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    protected       reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    public          reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    var             reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endfor          reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endforeach      reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    break           reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endswitch       reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    default         reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    case            reduce using rule 114 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 40 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for private in state 220 resolved as shift
WARNING: shift/reduce conflict for protected in state 220 resolved as shift
WARNING: shift/reduce conflict for public in state 220 resolved as shift
WARNING: shift/reduce conflict for var in state 220 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 220 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 220 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 220 resolved as shift
WARNING: shift/reduce conflict for empty in state 220 resolved as shift
WARNING: shift/reduce conflict for include in state 220 resolved as shift
WARNING: shift/reduce conflict for const in state 220 resolved as shift
WARNING: shift/reduce conflict for print in state 220 resolved as shift
WARNING: shift/reduce conflict for echo in state 220 resolved as shift
WARNING: shift/reduce conflict for while in state 220 resolved as shift
WARNING: shift/reduce conflict for do in state 220 resolved as shift
WARNING: shift/reduce conflict for if in state 220 resolved as shift
WARNING: shift/reduce conflict for function in state 220 resolved as shift
WARNING: shift/reduce conflict for ID in state 220 resolved as shift
WARNING: shift/reduce conflict for return in state 220 resolved as shift
WARNING: shift/reduce conflict for class in state 220 resolved as shift
WARNING: shift/reduce conflict for new in state 220 resolved as shift
WARNING: shift/reduce conflict for interface in state 220 resolved as shift
WARNING: shift/reduce conflict for trait in state 220 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 220 resolved as shift
WARNING: shift/reduce conflict for for in state 220 resolved as shift
WARNING: shift/reduce conflict for foreach in state 220 resolved as shift
WARNING: shift/reduce conflict for switch in state 220 resolved as shift
WARNING: shift/reduce conflict for exit in state 220 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 220 resolved as shift
WARNING: shift/reduce conflict for array in state 220 resolved as shift
WARNING: shift/reduce conflict for pow in state 220 resolved as shift
WARNING: shift/reduce conflict for POW in state 220 resolved as shift
WARNING: shift/reduce conflict for abs in state 220 resolved as shift
WARNING: shift/reduce conflict for cos in state 220 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 220 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 220 resolved as shift
WARNING: shift/reduce conflict for die in state 220 resolved as shift
WARNING: shift/reduce conflict for exp in state 220 resolved as shift
WARNING: shift/reduce conflict for floor in state 220 resolved as shift
WARNING: shift/reduce conflict for isset in state 220 resolved as shift
WARNING: shift/reduce conflict for list in state 220 resolved as shift
WARNING: shift/reduce conflict for log in state 220 resolved as shift
WARNING: shift/reduce conflict for log10 in state 220 resolved as shift
WARNING: shift/reduce conflict for max in state 220 resolved as shift
WARNING: shift/reduce conflict for min in state 220 resolved as shift
WARNING: shift/reduce conflict for rand in state 220 resolved as shift
WARNING: shift/reduce conflict for round in state 220 resolved as shift
WARNING: shift/reduce conflict for sin in state 220 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 220 resolved as shift
WARNING: shift/reduce conflict for unset in state 220 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 220 resolved as shift
WARNING: shift/reduce conflict for private in state 222 resolved as shift
WARNING: shift/reduce conflict for protected in state 222 resolved as shift
WARNING: shift/reduce conflict for public in state 222 resolved as shift
WARNING: shift/reduce conflict for var in state 222 resolved as shift
WARNING: shift/reduce conflict for private in state 223 resolved as shift
WARNING: shift/reduce conflict for protected in state 223 resolved as shift
WARNING: shift/reduce conflict for public in state 223 resolved as shift
WARNING: shift/reduce conflict for var in state 223 resolved as shift
WARNING: shift/reduce conflict for case in state 376 resolved as shift
WARNING: shift/reduce conflict for case in state 377 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 403 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 431 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 439 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 439 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 439 resolved as shift
WARNING: shift/reduce conflict for empty in state 439 resolved as shift
WARNING: shift/reduce conflict for include in state 439 resolved as shift
WARNING: shift/reduce conflict for const in state 439 resolved as shift
WARNING: shift/reduce conflict for print in state 439 resolved as shift
WARNING: shift/reduce conflict for echo in state 439 resolved as shift
WARNING: shift/reduce conflict for while in state 439 resolved as shift
WARNING: shift/reduce conflict for do in state 439 resolved as shift
WARNING: shift/reduce conflict for if in state 439 resolved as shift
WARNING: shift/reduce conflict for function in state 439 resolved as shift
WARNING: shift/reduce conflict for ID in state 439 resolved as shift
WARNING: shift/reduce conflict for return in state 439 resolved as shift
WARNING: shift/reduce conflict for class in state 439 resolved as shift
WARNING: shift/reduce conflict for new in state 439 resolved as shift
WARNING: shift/reduce conflict for interface in state 439 resolved as shift
WARNING: shift/reduce conflict for trait in state 439 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 439 resolved as shift
WARNING: shift/reduce conflict for for in state 439 resolved as shift
WARNING: shift/reduce conflict for foreach in state 439 resolved as shift
WARNING: shift/reduce conflict for switch in state 439 resolved as shift
WARNING: shift/reduce conflict for exit in state 439 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 439 resolved as shift
WARNING: shift/reduce conflict for array in state 439 resolved as shift
WARNING: shift/reduce conflict for pow in state 439 resolved as shift
WARNING: shift/reduce conflict for POW in state 439 resolved as shift
WARNING: shift/reduce conflict for abs in state 439 resolved as shift
WARNING: shift/reduce conflict for cos in state 439 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 439 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 439 resolved as shift
WARNING: shift/reduce conflict for die in state 439 resolved as shift
WARNING: shift/reduce conflict for exp in state 439 resolved as shift
WARNING: shift/reduce conflict for floor in state 439 resolved as shift
WARNING: shift/reduce conflict for isset in state 439 resolved as shift
WARNING: shift/reduce conflict for list in state 439 resolved as shift
WARNING: shift/reduce conflict for log in state 439 resolved as shift
WARNING: shift/reduce conflict for log10 in state 439 resolved as shift
WARNING: shift/reduce conflict for max in state 439 resolved as shift
WARNING: shift/reduce conflict for min in state 439 resolved as shift
WARNING: shift/reduce conflict for rand in state 439 resolved as shift
WARNING: shift/reduce conflict for round in state 439 resolved as shift
WARNING: shift/reduce conflict for sin in state 439 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 439 resolved as shift
WARNING: shift/reduce conflict for unset in state 439 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 439 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 440 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 440 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 440 resolved as shift
WARNING: shift/reduce conflict for empty in state 440 resolved as shift
WARNING: shift/reduce conflict for include in state 440 resolved as shift
WARNING: shift/reduce conflict for const in state 440 resolved as shift
WARNING: shift/reduce conflict for print in state 440 resolved as shift
WARNING: shift/reduce conflict for echo in state 440 resolved as shift
WARNING: shift/reduce conflict for while in state 440 resolved as shift
WARNING: shift/reduce conflict for do in state 440 resolved as shift
WARNING: shift/reduce conflict for if in state 440 resolved as shift
WARNING: shift/reduce conflict for function in state 440 resolved as shift
WARNING: shift/reduce conflict for ID in state 440 resolved as shift
WARNING: shift/reduce conflict for return in state 440 resolved as shift
WARNING: shift/reduce conflict for class in state 440 resolved as shift
WARNING: shift/reduce conflict for new in state 440 resolved as shift
WARNING: shift/reduce conflict for interface in state 440 resolved as shift
WARNING: shift/reduce conflict for trait in state 440 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 440 resolved as shift
WARNING: shift/reduce conflict for for in state 440 resolved as shift
WARNING: shift/reduce conflict for foreach in state 440 resolved as shift
WARNING: shift/reduce conflict for switch in state 440 resolved as shift
WARNING: shift/reduce conflict for exit in state 440 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 440 resolved as shift
WARNING: shift/reduce conflict for array in state 440 resolved as shift
WARNING: shift/reduce conflict for pow in state 440 resolved as shift
WARNING: shift/reduce conflict for POW in state 440 resolved as shift
WARNING: shift/reduce conflict for abs in state 440 resolved as shift
WARNING: shift/reduce conflict for cos in state 440 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 440 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 440 resolved as shift
WARNING: shift/reduce conflict for die in state 440 resolved as shift
WARNING: shift/reduce conflict for exp in state 440 resolved as shift
WARNING: shift/reduce conflict for floor in state 440 resolved as shift
WARNING: shift/reduce conflict for isset in state 440 resolved as shift
WARNING: shift/reduce conflict for list in state 440 resolved as shift
WARNING: shift/reduce conflict for log in state 440 resolved as shift
WARNING: shift/reduce conflict for log10 in state 440 resolved as shift
WARNING: shift/reduce conflict for max in state 440 resolved as shift
WARNING: shift/reduce conflict for min in state 440 resolved as shift
WARNING: shift/reduce conflict for rand in state 440 resolved as shift
WARNING: shift/reduce conflict for round in state 440 resolved as shift
WARNING: shift/reduce conflict for sin in state 440 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 440 resolved as shift
WARNING: shift/reduce conflict for unset in state 440 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 440 resolved as shift
WARNING: reduce/reduce conflict in state 102 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (single_param -> NUMBER) in state 102
WARNING: reduce/reduce conflict in state 108 resolved using rule (var_declaration2 -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 108
WARNING: reduce/reduce conflict in state 231 resolved using rule (var_declaration2 -> VARIABLE EQUAL VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 231
WARNING: reduce/reduce conflict in state 232 resolved using rule (var_declaration2 -> VARIABLE EQUAL NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 232
