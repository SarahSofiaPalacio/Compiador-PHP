Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANT
    ANDEQUAL
    ASSIGN
    BACKSLASH
    BOOL_AND
    BOOL_OR
    COLON
    COMILLASDOBLES
    COMILLASIMPLE
    DIVEQUAL
    DOT
    HASHTAG
    INVALID_NUMBER_SEQUENCE
    INVALID_VARIABLE
    ISIDENTICAL
    ISNOTIDENTICAL
    MINUSEQUAL
    MOD
    MULEQUAL
    NOT
    PLUSEQUAL
    POW
    QUESTIONMARK
    SL
    SLEQUAL
    SR
    SREQUAL
    XOREQUAL
    abs
    abstract
    and
    array
    as
    break
    callable
    case
    catch
    ceil
    clone
    continue
    cos
    declare
    default
    deg2rad
    die
    do
    else
    elseif
    endclare
    endfor
    endforeach
    endif
    endswitch
    endwhile
    eval
    exit
    exp
    extends
    final
    finally
    floor
    for
    foreach
    global
    goto
    if
    implements
    include_once
    instanceof
    insteadof
    interface
    isset
    list
    log
    log10
    match
    max
    min
    namespace
    objectoperator
    or
    php
    pow
    private
    protected
    public
    rad2deg
    rand
    readonly
    require
    require_once
    return
    round
    sin
    sqrt
    static
    switch
    throw
    trait
    try
    unset
    use
    var
    xor

Grammar

Rule 0     S' -> program
Rule 1     program -> header declaration_list
Rule 2     header -> OPEN_TAG
Rule 3     footer_declaration -> CLOSE_TAG
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> COMMENT
Rule 7     declaration -> COMMENT_HASHTAG
Rule 8     declaration -> COMMENT_MULTI
Rule 9     declaration -> header_declaration
Rule 10    declaration -> var_declaration
Rule 11    declaration -> constant_declaration
Rule 12    declaration -> print_declaration
Rule 13    declaration -> echo_declaration
Rule 14    declaration -> iteration_stmt
Rule 15    declaration -> fun_declaration
Rule 16    declaration -> fun_call
Rule 17    declaration -> obj_declaration
Rule 18    declaration -> create_obj_declaration
Rule 19    declaration -> footer_declaration
Rule 20    declaration -> empty
Rule 21    data_type -> NUMBER
Rule 22    data_type -> CADENA
Rule 23    header_declaration -> include CADENA SEMICOLON
Rule 24    constant_declaration -> const ID EQUAL data_type SEMICOLON
Rule 25    print_declaration -> print var_declaration2 SEMICOLON
Rule 26    print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON
Rule 27    print_declaration -> print LPAREN data_type RPAREN SEMICOLON
Rule 28    print_declaration -> print data_type SEMICOLON
Rule 29    echo_declaration -> echo var_declaration2 SEMICOLON
Rule 30    echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON
Rule 31    echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON
Rule 32    echo_declaration -> echo data_type SEMICOLON
Rule 33    var_declaration -> var_declaration2 SEMICOLON
Rule 34    var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
Rule 35    var_declaration2 -> VARIABLE
Rule 36    var_declaration2 -> VARIABLE COMMA var_declaration2
Rule 37    var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2
Rule 38    var_declaration2 -> VARIABLE EQUAL NUMBER
Rule 39    var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2
Rule 40    var_declaration2 -> VARIABLE EQUAL VARIABLE
Rule 41    var_declaration2 -> VARIABLE EQUAL CADENA
Rule 42    var_declaration2 -> VARIABLE EQUAL expression
Rule 43    var_declaration2 -> COMMA
Rule 44    var_declaration2 -> data_type COMMA var_declaration2
Rule 45    var_declaration2 -> NUMBER RBRACKET
Rule 46    var_declaration2 -> VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
Rule 47    var_declaration2 -> CADENA COMMA var_declaration2
Rule 48    var_declaration2 -> CADENA RBRACKET
Rule 49    iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK
Rule 50    expression -> additive_expression
Rule 51    expression -> additive_expression comp_op additive_expression
Rule 52    additive_expression -> additive_expression math_op additive_expression
Rule 53    additive_expression -> NUMBER
Rule 54    additive_expression -> NUMBER MINUSMINUS
Rule 55    additive_expression -> NUMBER PLUSPLUS
Rule 56    additive_expression -> VARIABLE
Rule 57    math_op -> PLUS
Rule 58    math_op -> MINUS
Rule 59    math_op -> TIMES
Rule 60    math_op -> DIVIDE
Rule 61    comp_op -> LESS
Rule 62    comp_op -> LESSEQUAL
Rule 63    comp_op -> GREATER
Rule 64    comp_op -> GREATEREQUAL
Rule 65    comp_op -> DEQUAL
Rule 66    comp_op -> DISTINT
Rule 67    comp_op -> ISEQUAL
Rule 68    fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
Rule 69    fun_call -> ID LPAREN params RPAREN
Rule 70    obj_declaration -> class ID LBLOCK declaration RBLOCK
Rule 71    create_obj_declaration -> new ID LPAREN params RPAREN
Rule 72    params -> param_list
Rule 73    params -> var_declaration2
Rule 74    params -> empty_function
Rule 75    param_list -> param_list COMMA params
Rule 76    param_list -> params
Rule 77    empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 
ANDEQUAL             : 
ASSIGN               : 
BACKSLASH            : 
BOOL_AND             : 
BOOL_OR              : 
CADENA               : 22 23 41 47 48
CLOSE_TAG            : 3
COLON                : 
COMILLASDOBLES       : 
COMILLASIMPLE        : 
COMMA                : 36 37 39 43 44 46 47 75
COMMENT              : 6
COMMENT_HASHTAG      : 7
COMMENT_MULTI        : 8
DEQUAL               : 65
DISTINT              : 66
DIVEQUAL             : 
DIVIDE               : 60
DOT                  : 
EQUAL                : 24 37 38 39 40 41 42 46
GREATER              : 63
GREATEREQUAL         : 64
HASHTAG              : 
ID                   : 24 68 69 70 71
INVALID_NUMBER_SEQUENCE : 
INVALID_VARIABLE     : 
ISEQUAL              : 67
ISIDENTICAL          : 
ISNOTIDENTICAL       : 
LBLOCK               : 49 68 70
LBRACKET             : 34 46
LESS                 : 61
LESSEQUAL            : 62
LPAREN               : 26 27 30 31 49 68 69 71
MINUS                : 58
MINUSEQUAL           : 
MINUSMINUS           : 54
MOD                  : 
MULEQUAL             : 
NOT                  : 
NUMBER               : 21 34 37 38 45 53 54 55
OPEN_TAG             : 2
PLUS                 : 57
PLUSEQUAL            : 
PLUSPLUS             : 55
POW                  : 
QUESTIONMARK         : 
RBLOCK               : 49 68 70
RBRACKET             : 34 45 48
RPAREN               : 26 27 30 31 49 68 69 71
SEMICOLON            : 23 24 25 26 27 28 29 30 31 32 33 34
SL                   : 
SLEQUAL              : 
SR                   : 
SREQUAL              : 
TIMES                : 59
VARIABLE             : 34 35 36 37 38 39 39 40 40 41 42 46 56
XOREQUAL             : 
abs                  : 
abstract             : 
and                  : 
array                : 
as                   : 
break                : 
callable             : 
case                 : 
catch                : 
ceil                 : 
class                : 70
clone                : 
const                : 24
continue             : 
cos                  : 
declare              : 
default              : 
deg2rad              : 
die                  : 
do                   : 
echo                 : 29 30 31 32
else                 : 
elseif               : 
empty                : 20
endclare             : 
endfor               : 
endforeach           : 
endif                : 
endswitch            : 
endwhile             : 
error                : 
eval                 : 
exit                 : 
exp                  : 
extends              : 
final                : 
finally              : 
floor                : 
for                  : 
foreach              : 
function             : 68
global               : 
goto                 : 
if                   : 
implements           : 
include              : 23
include_once         : 
instanceof           : 
insteadof            : 
interface            : 
isset                : 
list                 : 
log                  : 
log10                : 
match                : 
max                  : 
min                  : 
namespace            : 
new                  : 71
objectoperator       : 
or                   : 
php                  : 
pow                  : 
print                : 25 26 27 28
private              : 
protected            : 
public               : 
rad2deg              : 
rand                 : 
readonly             : 
require              : 
require_once         : 
return               : 
round                : 
sin                  : 
sqrt                 : 
static               : 
switch               : 
throw                : 
trait                : 
try                  : 
unset                : 
use                  : 
var                  : 
while                : 49
xor                  : 

Nonterminals, with rules where they appear

additive_expression  : 50 51 51 52 52
comp_op              : 51
constant_declaration : 11
create_obj_declaration : 18
data_type            : 24 27 28 31 32 44 46
declaration          : 4 5 49 68 70
declaration_list     : 1 5
echo_declaration     : 13
empty_function       : 74
expression           : 42 49
footer_declaration   : 19
fun_call             : 16
fun_declaration      : 15
header               : 1
header_declaration   : 9
iteration_stmt       : 14
math_op              : 52
obj_declaration      : 17
param_list           : 72 75
params               : 68 69 71 75 76
print_declaration    : 12
program              : 0
var_declaration      : 10
var_declaration2     : 25 26 29 30 33 36 37 39 44 46 47 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header declaration_list
    (2) header -> . OPEN_TAG

    OPEN_TAG        shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . fun_declaration
    (16) declaration -> . fun_call
    (17) declaration -> . obj_declaration
    (18) declaration -> . create_obj_declaration
    (19) declaration -> . footer_declaration
    (20) declaration -> . empty
    (23) header_declaration -> . include CADENA SEMICOLON
    (33) var_declaration -> . var_declaration2 SEMICOLON
    (34) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (24) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (25) print_declaration -> . print var_declaration2 SEMICOLON
    (26) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (28) print_declaration -> . print data_type SEMICOLON
    (29) echo_declaration -> . echo var_declaration2 SEMICOLON
    (30) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (32) echo_declaration -> . echo data_type SEMICOLON
    (49) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (68) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (69) fun_call -> . ID LPAREN params RPAREN
    (70) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (71) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 20
    include         shift and go to state 21
    VARIABLE        shift and go to state 24
    const           shift and go to state 26
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    function        shift and go to state 32
    ID              shift and go to state 27
    class           shift and go to state 33
    new             shift and go to state 34
    CLOSE_TAG       shift and go to state 35
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    fun_declaration                shift and go to state 15
    fun_call                       shift and go to state 16
    obj_declaration                shift and go to state 17
    create_obj_declaration         shift and go to state 18
    footer_declaration             shift and go to state 19
    var_declaration2               shift and go to state 23
    data_type                      shift and go to state 28

state 3

    (2) header -> OPEN_TAG .

    COMMENT         reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_HASHTAG reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_MULTI   reduce using rule 2 (header -> OPEN_TAG .)
    empty           reduce using rule 2 (header -> OPEN_TAG .)
    include         reduce using rule 2 (header -> OPEN_TAG .)
    VARIABLE        reduce using rule 2 (header -> OPEN_TAG .)
    const           reduce using rule 2 (header -> OPEN_TAG .)
    print           reduce using rule 2 (header -> OPEN_TAG .)
    echo            reduce using rule 2 (header -> OPEN_TAG .)
    while           reduce using rule 2 (header -> OPEN_TAG .)
    function        reduce using rule 2 (header -> OPEN_TAG .)
    ID              reduce using rule 2 (header -> OPEN_TAG .)
    class           reduce using rule 2 (header -> OPEN_TAG .)
    new             reduce using rule 2 (header -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 2 (header -> OPEN_TAG .)
    COMMA           reduce using rule 2 (header -> OPEN_TAG .)
    NUMBER          reduce using rule 2 (header -> OPEN_TAG .)
    CADENA          reduce using rule 2 (header -> OPEN_TAG .)


state 4

    (1) program -> header declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . fun_declaration
    (16) declaration -> . fun_call
    (17) declaration -> . obj_declaration
    (18) declaration -> . create_obj_declaration
    (19) declaration -> . footer_declaration
    (20) declaration -> . empty
    (23) header_declaration -> . include CADENA SEMICOLON
    (33) var_declaration -> . var_declaration2 SEMICOLON
    (34) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (24) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (25) print_declaration -> . print var_declaration2 SEMICOLON
    (26) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (28) print_declaration -> . print data_type SEMICOLON
    (29) echo_declaration -> . echo var_declaration2 SEMICOLON
    (30) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (32) echo_declaration -> . echo data_type SEMICOLON
    (49) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (68) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (69) fun_call -> . ID LPAREN params RPAREN
    (70) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (71) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    $end            reduce using rule 1 (program -> header declaration_list .)
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 20
    include         shift and go to state 21
    VARIABLE        shift and go to state 24
    const           shift and go to state 26
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    function        shift and go to state 32
    ID              shift and go to state 27
    class           shift and go to state 33
    new             shift and go to state 34
    CLOSE_TAG       shift and go to state 35
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    declaration                    shift and go to state 37
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    fun_declaration                shift and go to state 15
    fun_call                       shift and go to state 16
    obj_declaration                shift and go to state 17
    create_obj_declaration         shift and go to state 18
    footer_declaration             shift and go to state 19
    var_declaration2               shift and go to state 23
    data_type                      shift and go to state 28

state 5

    (4) declaration_list -> declaration .

    COMMENT         reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_MULTI   reduce using rule 4 (declaration_list -> declaration .)
    empty           reduce using rule 4 (declaration_list -> declaration .)
    include         reduce using rule 4 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 4 (declaration_list -> declaration .)
    const           reduce using rule 4 (declaration_list -> declaration .)
    print           reduce using rule 4 (declaration_list -> declaration .)
    echo            reduce using rule 4 (declaration_list -> declaration .)
    while           reduce using rule 4 (declaration_list -> declaration .)
    function        reduce using rule 4 (declaration_list -> declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration .)
    class           reduce using rule 4 (declaration_list -> declaration .)
    new             reduce using rule 4 (declaration_list -> declaration .)
    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration .)
    COMMA           reduce using rule 4 (declaration_list -> declaration .)
    NUMBER          reduce using rule 4 (declaration_list -> declaration .)
    CADENA          reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)


state 6

    (6) declaration -> COMMENT .

    COMMENT         reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_HASHTAG reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_MULTI   reduce using rule 6 (declaration -> COMMENT .)
    empty           reduce using rule 6 (declaration -> COMMENT .)
    include         reduce using rule 6 (declaration -> COMMENT .)
    VARIABLE        reduce using rule 6 (declaration -> COMMENT .)
    const           reduce using rule 6 (declaration -> COMMENT .)
    print           reduce using rule 6 (declaration -> COMMENT .)
    echo            reduce using rule 6 (declaration -> COMMENT .)
    while           reduce using rule 6 (declaration -> COMMENT .)
    function        reduce using rule 6 (declaration -> COMMENT .)
    ID              reduce using rule 6 (declaration -> COMMENT .)
    class           reduce using rule 6 (declaration -> COMMENT .)
    new             reduce using rule 6 (declaration -> COMMENT .)
    CLOSE_TAG       reduce using rule 6 (declaration -> COMMENT .)
    COMMA           reduce using rule 6 (declaration -> COMMENT .)
    NUMBER          reduce using rule 6 (declaration -> COMMENT .)
    CADENA          reduce using rule 6 (declaration -> COMMENT .)
    $end            reduce using rule 6 (declaration -> COMMENT .)
    RBLOCK          reduce using rule 6 (declaration -> COMMENT .)


state 7

    (7) declaration -> COMMENT_HASHTAG .

    COMMENT         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_HASHTAG reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_MULTI   reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    empty           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    VARIABLE        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    const           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    print           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    echo            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    while           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    function        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    ID              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    class           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    new             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CLOSE_TAG       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMA           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    NUMBER          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CADENA          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    $end            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    RBLOCK          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)


state 8

    (8) declaration -> COMMENT_MULTI .

    COMMENT         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_HASHTAG reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_MULTI   reduce using rule 8 (declaration -> COMMENT_MULTI .)
    empty           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    VARIABLE        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    const           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    print           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    echo            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    while           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    function        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    ID              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    class           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    new             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CLOSE_TAG       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMA           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    NUMBER          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CADENA          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    $end            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    RBLOCK          reduce using rule 8 (declaration -> COMMENT_MULTI .)


state 9

    (9) declaration -> header_declaration .

    COMMENT         reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_HASHTAG reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_MULTI   reduce using rule 9 (declaration -> header_declaration .)
    empty           reduce using rule 9 (declaration -> header_declaration .)
    include         reduce using rule 9 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> header_declaration .)
    const           reduce using rule 9 (declaration -> header_declaration .)
    print           reduce using rule 9 (declaration -> header_declaration .)
    echo            reduce using rule 9 (declaration -> header_declaration .)
    while           reduce using rule 9 (declaration -> header_declaration .)
    function        reduce using rule 9 (declaration -> header_declaration .)
    ID              reduce using rule 9 (declaration -> header_declaration .)
    class           reduce using rule 9 (declaration -> header_declaration .)
    new             reduce using rule 9 (declaration -> header_declaration .)
    CLOSE_TAG       reduce using rule 9 (declaration -> header_declaration .)
    COMMA           reduce using rule 9 (declaration -> header_declaration .)
    NUMBER          reduce using rule 9 (declaration -> header_declaration .)
    CADENA          reduce using rule 9 (declaration -> header_declaration .)
    $end            reduce using rule 9 (declaration -> header_declaration .)
    RBLOCK          reduce using rule 9 (declaration -> header_declaration .)


state 10

    (10) declaration -> var_declaration .

    COMMENT         reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_HASHTAG reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_MULTI   reduce using rule 10 (declaration -> var_declaration .)
    empty           reduce using rule 10 (declaration -> var_declaration .)
    include         reduce using rule 10 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 10 (declaration -> var_declaration .)
    const           reduce using rule 10 (declaration -> var_declaration .)
    print           reduce using rule 10 (declaration -> var_declaration .)
    echo            reduce using rule 10 (declaration -> var_declaration .)
    while           reduce using rule 10 (declaration -> var_declaration .)
    function        reduce using rule 10 (declaration -> var_declaration .)
    ID              reduce using rule 10 (declaration -> var_declaration .)
    class           reduce using rule 10 (declaration -> var_declaration .)
    new             reduce using rule 10 (declaration -> var_declaration .)
    CLOSE_TAG       reduce using rule 10 (declaration -> var_declaration .)
    COMMA           reduce using rule 10 (declaration -> var_declaration .)
    NUMBER          reduce using rule 10 (declaration -> var_declaration .)
    CADENA          reduce using rule 10 (declaration -> var_declaration .)
    $end            reduce using rule 10 (declaration -> var_declaration .)
    RBLOCK          reduce using rule 10 (declaration -> var_declaration .)


state 11

    (11) declaration -> constant_declaration .

    COMMENT         reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_HASHTAG reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_MULTI   reduce using rule 11 (declaration -> constant_declaration .)
    empty           reduce using rule 11 (declaration -> constant_declaration .)
    include         reduce using rule 11 (declaration -> constant_declaration .)
    VARIABLE        reduce using rule 11 (declaration -> constant_declaration .)
    const           reduce using rule 11 (declaration -> constant_declaration .)
    print           reduce using rule 11 (declaration -> constant_declaration .)
    echo            reduce using rule 11 (declaration -> constant_declaration .)
    while           reduce using rule 11 (declaration -> constant_declaration .)
    function        reduce using rule 11 (declaration -> constant_declaration .)
    ID              reduce using rule 11 (declaration -> constant_declaration .)
    class           reduce using rule 11 (declaration -> constant_declaration .)
    new             reduce using rule 11 (declaration -> constant_declaration .)
    CLOSE_TAG       reduce using rule 11 (declaration -> constant_declaration .)
    COMMA           reduce using rule 11 (declaration -> constant_declaration .)
    NUMBER          reduce using rule 11 (declaration -> constant_declaration .)
    CADENA          reduce using rule 11 (declaration -> constant_declaration .)
    $end            reduce using rule 11 (declaration -> constant_declaration .)
    RBLOCK          reduce using rule 11 (declaration -> constant_declaration .)


state 12

    (12) declaration -> print_declaration .

    COMMENT         reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_HASHTAG reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_MULTI   reduce using rule 12 (declaration -> print_declaration .)
    empty           reduce using rule 12 (declaration -> print_declaration .)
    include         reduce using rule 12 (declaration -> print_declaration .)
    VARIABLE        reduce using rule 12 (declaration -> print_declaration .)
    const           reduce using rule 12 (declaration -> print_declaration .)
    print           reduce using rule 12 (declaration -> print_declaration .)
    echo            reduce using rule 12 (declaration -> print_declaration .)
    while           reduce using rule 12 (declaration -> print_declaration .)
    function        reduce using rule 12 (declaration -> print_declaration .)
    ID              reduce using rule 12 (declaration -> print_declaration .)
    class           reduce using rule 12 (declaration -> print_declaration .)
    new             reduce using rule 12 (declaration -> print_declaration .)
    CLOSE_TAG       reduce using rule 12 (declaration -> print_declaration .)
    COMMA           reduce using rule 12 (declaration -> print_declaration .)
    NUMBER          reduce using rule 12 (declaration -> print_declaration .)
    CADENA          reduce using rule 12 (declaration -> print_declaration .)
    $end            reduce using rule 12 (declaration -> print_declaration .)
    RBLOCK          reduce using rule 12 (declaration -> print_declaration .)


state 13

    (13) declaration -> echo_declaration .

    COMMENT         reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_HASHTAG reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_MULTI   reduce using rule 13 (declaration -> echo_declaration .)
    empty           reduce using rule 13 (declaration -> echo_declaration .)
    include         reduce using rule 13 (declaration -> echo_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> echo_declaration .)
    const           reduce using rule 13 (declaration -> echo_declaration .)
    print           reduce using rule 13 (declaration -> echo_declaration .)
    echo            reduce using rule 13 (declaration -> echo_declaration .)
    while           reduce using rule 13 (declaration -> echo_declaration .)
    function        reduce using rule 13 (declaration -> echo_declaration .)
    ID              reduce using rule 13 (declaration -> echo_declaration .)
    class           reduce using rule 13 (declaration -> echo_declaration .)
    new             reduce using rule 13 (declaration -> echo_declaration .)
    CLOSE_TAG       reduce using rule 13 (declaration -> echo_declaration .)
    COMMA           reduce using rule 13 (declaration -> echo_declaration .)
    NUMBER          reduce using rule 13 (declaration -> echo_declaration .)
    CADENA          reduce using rule 13 (declaration -> echo_declaration .)
    $end            reduce using rule 13 (declaration -> echo_declaration .)
    RBLOCK          reduce using rule 13 (declaration -> echo_declaration .)


state 14

    (14) declaration -> iteration_stmt .

    COMMENT         reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_HASHTAG reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_MULTI   reduce using rule 14 (declaration -> iteration_stmt .)
    empty           reduce using rule 14 (declaration -> iteration_stmt .)
    include         reduce using rule 14 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 14 (declaration -> iteration_stmt .)
    const           reduce using rule 14 (declaration -> iteration_stmt .)
    print           reduce using rule 14 (declaration -> iteration_stmt .)
    echo            reduce using rule 14 (declaration -> iteration_stmt .)
    while           reduce using rule 14 (declaration -> iteration_stmt .)
    function        reduce using rule 14 (declaration -> iteration_stmt .)
    ID              reduce using rule 14 (declaration -> iteration_stmt .)
    class           reduce using rule 14 (declaration -> iteration_stmt .)
    new             reduce using rule 14 (declaration -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 14 (declaration -> iteration_stmt .)
    COMMA           reduce using rule 14 (declaration -> iteration_stmt .)
    NUMBER          reduce using rule 14 (declaration -> iteration_stmt .)
    CADENA          reduce using rule 14 (declaration -> iteration_stmt .)
    $end            reduce using rule 14 (declaration -> iteration_stmt .)
    RBLOCK          reduce using rule 14 (declaration -> iteration_stmt .)


state 15

    (15) declaration -> fun_declaration .

    COMMENT         reduce using rule 15 (declaration -> fun_declaration .)
    COMMENT_HASHTAG reduce using rule 15 (declaration -> fun_declaration .)
    COMMENT_MULTI   reduce using rule 15 (declaration -> fun_declaration .)
    empty           reduce using rule 15 (declaration -> fun_declaration .)
    include         reduce using rule 15 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 15 (declaration -> fun_declaration .)
    const           reduce using rule 15 (declaration -> fun_declaration .)
    print           reduce using rule 15 (declaration -> fun_declaration .)
    echo            reduce using rule 15 (declaration -> fun_declaration .)
    while           reduce using rule 15 (declaration -> fun_declaration .)
    function        reduce using rule 15 (declaration -> fun_declaration .)
    ID              reduce using rule 15 (declaration -> fun_declaration .)
    class           reduce using rule 15 (declaration -> fun_declaration .)
    new             reduce using rule 15 (declaration -> fun_declaration .)
    CLOSE_TAG       reduce using rule 15 (declaration -> fun_declaration .)
    COMMA           reduce using rule 15 (declaration -> fun_declaration .)
    NUMBER          reduce using rule 15 (declaration -> fun_declaration .)
    CADENA          reduce using rule 15 (declaration -> fun_declaration .)
    $end            reduce using rule 15 (declaration -> fun_declaration .)
    RBLOCK          reduce using rule 15 (declaration -> fun_declaration .)


state 16

    (16) declaration -> fun_call .

    COMMENT         reduce using rule 16 (declaration -> fun_call .)
    COMMENT_HASHTAG reduce using rule 16 (declaration -> fun_call .)
    COMMENT_MULTI   reduce using rule 16 (declaration -> fun_call .)
    empty           reduce using rule 16 (declaration -> fun_call .)
    include         reduce using rule 16 (declaration -> fun_call .)
    VARIABLE        reduce using rule 16 (declaration -> fun_call .)
    const           reduce using rule 16 (declaration -> fun_call .)
    print           reduce using rule 16 (declaration -> fun_call .)
    echo            reduce using rule 16 (declaration -> fun_call .)
    while           reduce using rule 16 (declaration -> fun_call .)
    function        reduce using rule 16 (declaration -> fun_call .)
    ID              reduce using rule 16 (declaration -> fun_call .)
    class           reduce using rule 16 (declaration -> fun_call .)
    new             reduce using rule 16 (declaration -> fun_call .)
    CLOSE_TAG       reduce using rule 16 (declaration -> fun_call .)
    COMMA           reduce using rule 16 (declaration -> fun_call .)
    NUMBER          reduce using rule 16 (declaration -> fun_call .)
    CADENA          reduce using rule 16 (declaration -> fun_call .)
    $end            reduce using rule 16 (declaration -> fun_call .)
    RBLOCK          reduce using rule 16 (declaration -> fun_call .)


state 17

    (17) declaration -> obj_declaration .

    COMMENT         reduce using rule 17 (declaration -> obj_declaration .)
    COMMENT_HASHTAG reduce using rule 17 (declaration -> obj_declaration .)
    COMMENT_MULTI   reduce using rule 17 (declaration -> obj_declaration .)
    empty           reduce using rule 17 (declaration -> obj_declaration .)
    include         reduce using rule 17 (declaration -> obj_declaration .)
    VARIABLE        reduce using rule 17 (declaration -> obj_declaration .)
    const           reduce using rule 17 (declaration -> obj_declaration .)
    print           reduce using rule 17 (declaration -> obj_declaration .)
    echo            reduce using rule 17 (declaration -> obj_declaration .)
    while           reduce using rule 17 (declaration -> obj_declaration .)
    function        reduce using rule 17 (declaration -> obj_declaration .)
    ID              reduce using rule 17 (declaration -> obj_declaration .)
    class           reduce using rule 17 (declaration -> obj_declaration .)
    new             reduce using rule 17 (declaration -> obj_declaration .)
    CLOSE_TAG       reduce using rule 17 (declaration -> obj_declaration .)
    COMMA           reduce using rule 17 (declaration -> obj_declaration .)
    NUMBER          reduce using rule 17 (declaration -> obj_declaration .)
    CADENA          reduce using rule 17 (declaration -> obj_declaration .)
    $end            reduce using rule 17 (declaration -> obj_declaration .)
    RBLOCK          reduce using rule 17 (declaration -> obj_declaration .)


state 18

    (18) declaration -> create_obj_declaration .

    COMMENT         reduce using rule 18 (declaration -> create_obj_declaration .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> create_obj_declaration .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> create_obj_declaration .)
    empty           reduce using rule 18 (declaration -> create_obj_declaration .)
    include         reduce using rule 18 (declaration -> create_obj_declaration .)
    VARIABLE        reduce using rule 18 (declaration -> create_obj_declaration .)
    const           reduce using rule 18 (declaration -> create_obj_declaration .)
    print           reduce using rule 18 (declaration -> create_obj_declaration .)
    echo            reduce using rule 18 (declaration -> create_obj_declaration .)
    while           reduce using rule 18 (declaration -> create_obj_declaration .)
    function        reduce using rule 18 (declaration -> create_obj_declaration .)
    ID              reduce using rule 18 (declaration -> create_obj_declaration .)
    class           reduce using rule 18 (declaration -> create_obj_declaration .)
    new             reduce using rule 18 (declaration -> create_obj_declaration .)
    CLOSE_TAG       reduce using rule 18 (declaration -> create_obj_declaration .)
    COMMA           reduce using rule 18 (declaration -> create_obj_declaration .)
    NUMBER          reduce using rule 18 (declaration -> create_obj_declaration .)
    CADENA          reduce using rule 18 (declaration -> create_obj_declaration .)
    $end            reduce using rule 18 (declaration -> create_obj_declaration .)
    RBLOCK          reduce using rule 18 (declaration -> create_obj_declaration .)


state 19

    (19) declaration -> footer_declaration .

    COMMENT         reduce using rule 19 (declaration -> footer_declaration .)
    COMMENT_HASHTAG reduce using rule 19 (declaration -> footer_declaration .)
    COMMENT_MULTI   reduce using rule 19 (declaration -> footer_declaration .)
    empty           reduce using rule 19 (declaration -> footer_declaration .)
    include         reduce using rule 19 (declaration -> footer_declaration .)
    VARIABLE        reduce using rule 19 (declaration -> footer_declaration .)
    const           reduce using rule 19 (declaration -> footer_declaration .)
    print           reduce using rule 19 (declaration -> footer_declaration .)
    echo            reduce using rule 19 (declaration -> footer_declaration .)
    while           reduce using rule 19 (declaration -> footer_declaration .)
    function        reduce using rule 19 (declaration -> footer_declaration .)
    ID              reduce using rule 19 (declaration -> footer_declaration .)
    class           reduce using rule 19 (declaration -> footer_declaration .)
    new             reduce using rule 19 (declaration -> footer_declaration .)
    CLOSE_TAG       reduce using rule 19 (declaration -> footer_declaration .)
    COMMA           reduce using rule 19 (declaration -> footer_declaration .)
    NUMBER          reduce using rule 19 (declaration -> footer_declaration .)
    CADENA          reduce using rule 19 (declaration -> footer_declaration .)
    $end            reduce using rule 19 (declaration -> footer_declaration .)
    RBLOCK          reduce using rule 19 (declaration -> footer_declaration .)


state 20

    (20) declaration -> empty .

    COMMENT         reduce using rule 20 (declaration -> empty .)
    COMMENT_HASHTAG reduce using rule 20 (declaration -> empty .)
    COMMENT_MULTI   reduce using rule 20 (declaration -> empty .)
    empty           reduce using rule 20 (declaration -> empty .)
    include         reduce using rule 20 (declaration -> empty .)
    VARIABLE        reduce using rule 20 (declaration -> empty .)
    const           reduce using rule 20 (declaration -> empty .)
    print           reduce using rule 20 (declaration -> empty .)
    echo            reduce using rule 20 (declaration -> empty .)
    while           reduce using rule 20 (declaration -> empty .)
    function        reduce using rule 20 (declaration -> empty .)
    ID              reduce using rule 20 (declaration -> empty .)
    class           reduce using rule 20 (declaration -> empty .)
    new             reduce using rule 20 (declaration -> empty .)
    CLOSE_TAG       reduce using rule 20 (declaration -> empty .)
    COMMA           reduce using rule 20 (declaration -> empty .)
    NUMBER          reduce using rule 20 (declaration -> empty .)
    CADENA          reduce using rule 20 (declaration -> empty .)
    $end            reduce using rule 20 (declaration -> empty .)
    RBLOCK          reduce using rule 20 (declaration -> empty .)


state 21

    (23) header_declaration -> include . CADENA SEMICOLON

    CADENA          shift and go to state 38


state 22

    (47) var_declaration2 -> CADENA . COMMA var_declaration2
    (48) var_declaration2 -> CADENA . RBRACKET
    (22) data_type -> CADENA .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 39
    RBRACKET        shift and go to state 40
    SEMICOLON       reduce using rule 22 (data_type -> CADENA .)
    RPAREN          reduce using rule 22 (data_type -> CADENA .)

  ! COMMA           [ reduce using rule 22 (data_type -> CADENA .) ]


state 23

    (33) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 41


state 24

    (34) var_declaration -> VARIABLE . LBRACKET NUMBER RBRACKET SEMICOLON
    (35) var_declaration2 -> VARIABLE .
    (36) var_declaration2 -> VARIABLE . COMMA var_declaration2
    (37) var_declaration2 -> VARIABLE . EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (39) var_declaration2 -> VARIABLE . EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (41) var_declaration2 -> VARIABLE . EQUAL CADENA
    (42) var_declaration2 -> VARIABLE . EQUAL expression
    (46) var_declaration2 -> VARIABLE . EQUAL LBRACKET data_type COMMA var_declaration2

    LBRACKET        shift and go to state 42
    SEMICOLON       reduce using rule 35 (var_declaration2 -> VARIABLE .)
    COMMA           shift and go to state 43
    EQUAL           shift and go to state 44


state 25

    (45) var_declaration2 -> NUMBER . RBRACKET
    (21) data_type -> NUMBER .

    RBRACKET        shift and go to state 45
    COMMA           reduce using rule 21 (data_type -> NUMBER .)
    SEMICOLON       reduce using rule 21 (data_type -> NUMBER .)
    RPAREN          reduce using rule 21 (data_type -> NUMBER .)


state 26

    (24) constant_declaration -> const . ID EQUAL data_type SEMICOLON

    ID              shift and go to state 46


state 27

    (69) fun_call -> ID . LPAREN params RPAREN

    LPAREN          shift and go to state 47


state 28

    (44) var_declaration2 -> data_type . COMMA var_declaration2

    COMMA           shift and go to state 48


state 29

    (25) print_declaration -> print . var_declaration2 SEMICOLON
    (26) print_declaration -> print . LPAREN var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> print . LPAREN data_type RPAREN SEMICOLON
    (28) print_declaration -> print . data_type SEMICOLON
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    LPAREN          shift and go to state 50
    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 49
    data_type                      shift and go to state 51

state 30

    (29) echo_declaration -> echo . var_declaration2 SEMICOLON
    (30) echo_declaration -> echo . LPAREN var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> echo . LPAREN data_type RPAREN SEMICOLON
    (32) echo_declaration -> echo . data_type SEMICOLON
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    LPAREN          shift and go to state 54
    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 53
    data_type                      shift and go to state 55

state 31

    (49) iteration_stmt -> while . LPAREN expression RPAREN LBLOCK declaration RBLOCK

    LPAREN          shift and go to state 56


state 32

    (68) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration RBLOCK

    ID              shift and go to state 57


state 33

    (70) obj_declaration -> class . ID LBLOCK declaration RBLOCK

    ID              shift and go to state 58


state 34

    (71) create_obj_declaration -> new . ID LPAREN params RPAREN

    ID              shift and go to state 59


state 35

    (3) footer_declaration -> CLOSE_TAG .

    COMMENT         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_HASHTAG reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_MULTI   reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    empty           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    VARIABLE        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    const           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    print           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    echo            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    while           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    function        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    ID              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    class           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    new             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMA           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    NUMBER          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CADENA          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    $end            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    RBLOCK          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)


state 36

    (43) var_declaration2 -> COMMA .

    SEMICOLON       reduce using rule 43 (var_declaration2 -> COMMA .)
    RPAREN          reduce using rule 43 (var_declaration2 -> COMMA .)
    COMMA           reduce using rule 43 (var_declaration2 -> COMMA .)


state 37

    (5) declaration_list -> declaration_list declaration .

    COMMENT         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_HASHTAG reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_MULTI   reduce using rule 5 (declaration_list -> declaration_list declaration .)
    empty           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    const           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    print           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    echo            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    while           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    function        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    class           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    new             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMA           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CADENA          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 38

    (23) header_declaration -> include CADENA . SEMICOLON

    SEMICOLON       shift and go to state 60


state 39

    (47) var_declaration2 -> CADENA COMMA . var_declaration2
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 61
    data_type                      shift and go to state 28

state 40

    (48) var_declaration2 -> CADENA RBRACKET .

    SEMICOLON       reduce using rule 48 (var_declaration2 -> CADENA RBRACKET .)
    RPAREN          reduce using rule 48 (var_declaration2 -> CADENA RBRACKET .)
    COMMA           reduce using rule 48 (var_declaration2 -> CADENA RBRACKET .)


state 41

    (33) var_declaration -> var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    empty           reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    include         reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    const           reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    print           reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    echo            reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    while           reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    function        reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    class           reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    new             reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMA           reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    $end            reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 33 (var_declaration -> var_declaration2 SEMICOLON .)


state 42

    (34) var_declaration -> VARIABLE LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 62


state 43

    (36) var_declaration2 -> VARIABLE COMMA . var_declaration2
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 63
    data_type                      shift and go to state 28

state 44

    (37) var_declaration2 -> VARIABLE EQUAL . NUMBER COMMA var_declaration2
    (38) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (39) var_declaration2 -> VARIABLE EQUAL . VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (41) var_declaration2 -> VARIABLE EQUAL . CADENA
    (42) var_declaration2 -> VARIABLE EQUAL . expression
    (46) var_declaration2 -> VARIABLE EQUAL . LBRACKET data_type COMMA var_declaration2
    (50) expression -> . additive_expression
    (51) expression -> . additive_expression comp_op additive_expression
    (52) additive_expression -> . additive_expression math_op additive_expression
    (53) additive_expression -> . NUMBER
    (54) additive_expression -> . NUMBER MINUSMINUS
    (55) additive_expression -> . NUMBER PLUSPLUS
    (56) additive_expression -> . VARIABLE

    NUMBER          shift and go to state 65
    VARIABLE        shift and go to state 64
    CADENA          shift and go to state 66
    LBRACKET        shift and go to state 68

    expression                     shift and go to state 67
    additive_expression            shift and go to state 69

state 45

    (45) var_declaration2 -> NUMBER RBRACKET .

    SEMICOLON       reduce using rule 45 (var_declaration2 -> NUMBER RBRACKET .)
    RPAREN          reduce using rule 45 (var_declaration2 -> NUMBER RBRACKET .)
    COMMA           reduce using rule 45 (var_declaration2 -> NUMBER RBRACKET .)


state 46

    (24) constant_declaration -> const ID . EQUAL data_type SEMICOLON

    EQUAL           shift and go to state 70


state 47

    (69) fun_call -> ID LPAREN . params RPAREN
    (72) params -> . param_list
    (73) params -> . var_declaration2
    (74) params -> . empty_function
    (75) param_list -> . param_list COMMA params
    (76) param_list -> . params
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (77) empty_function -> .
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22
    RPAREN          reduce using rule 77 (empty_function -> .)

  ! COMMA           [ reduce using rule 77 (empty_function -> .) ]

    params                         shift and go to state 71
    param_list                     shift and go to state 72
    var_declaration2               shift and go to state 73
    empty_function                 shift and go to state 74
    data_type                      shift and go to state 28

state 48

    (44) var_declaration2 -> data_type COMMA . var_declaration2
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    data_type                      shift and go to state 28
    var_declaration2               shift and go to state 75

state 49

    (25) print_declaration -> print var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 76


state 50

    (26) print_declaration -> print LPAREN . var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> print LPAREN . data_type RPAREN SEMICOLON
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 77
    data_type                      shift and go to state 78

state 51

    (28) print_declaration -> print data_type . SEMICOLON
    (44) var_declaration2 -> data_type . COMMA var_declaration2

    SEMICOLON       shift and go to state 79
    COMMA           shift and go to state 48


state 52

    (35) var_declaration2 -> VARIABLE .
    (36) var_declaration2 -> VARIABLE . COMMA var_declaration2
    (37) var_declaration2 -> VARIABLE . EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (39) var_declaration2 -> VARIABLE . EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (41) var_declaration2 -> VARIABLE . EQUAL CADENA
    (42) var_declaration2 -> VARIABLE . EQUAL expression
    (46) var_declaration2 -> VARIABLE . EQUAL LBRACKET data_type COMMA var_declaration2

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 35 (var_declaration2 -> VARIABLE .)
    RPAREN          reduce using rule 35 (var_declaration2 -> VARIABLE .)
    COMMA           shift and go to state 43
    EQUAL           shift and go to state 44

  ! COMMA           [ reduce using rule 35 (var_declaration2 -> VARIABLE .) ]


state 53

    (29) echo_declaration -> echo var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 80


state 54

    (30) echo_declaration -> echo LPAREN . var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> echo LPAREN . data_type RPAREN SEMICOLON
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 81
    data_type                      shift and go to state 82

state 55

    (32) echo_declaration -> echo data_type . SEMICOLON
    (44) var_declaration2 -> data_type . COMMA var_declaration2

    SEMICOLON       shift and go to state 83
    COMMA           shift and go to state 48


state 56

    (49) iteration_stmt -> while LPAREN . expression RPAREN LBLOCK declaration RBLOCK
    (50) expression -> . additive_expression
    (51) expression -> . additive_expression comp_op additive_expression
    (52) additive_expression -> . additive_expression math_op additive_expression
    (53) additive_expression -> . NUMBER
    (54) additive_expression -> . NUMBER MINUSMINUS
    (55) additive_expression -> . NUMBER PLUSPLUS
    (56) additive_expression -> . VARIABLE

    NUMBER          shift and go to state 85
    VARIABLE        shift and go to state 86

    expression                     shift and go to state 84
    additive_expression            shift and go to state 69

state 57

    (68) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration RBLOCK

    LPAREN          shift and go to state 87


state 58

    (70) obj_declaration -> class ID . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 88


state 59

    (71) create_obj_declaration -> new ID . LPAREN params RPAREN

    LPAREN          shift and go to state 89


state 60

    (23) header_declaration -> include CADENA SEMICOLON .

    COMMENT         reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    empty           reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    include         reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    VARIABLE        reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    const           reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    print           reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    echo            reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    while           reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    function        reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    ID              reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    class           reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    new             reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    COMMA           reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    NUMBER          reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    CADENA          reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    $end            reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)
    RBLOCK          reduce using rule 23 (header_declaration -> include CADENA SEMICOLON .)


state 61

    (47) var_declaration2 -> CADENA COMMA var_declaration2 .

    SEMICOLON       reduce using rule 47 (var_declaration2 -> CADENA COMMA var_declaration2 .)
    RPAREN          reduce using rule 47 (var_declaration2 -> CADENA COMMA var_declaration2 .)
    COMMA           reduce using rule 47 (var_declaration2 -> CADENA COMMA var_declaration2 .)


state 62

    (34) var_declaration -> VARIABLE LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 90


state 63

    (36) var_declaration2 -> VARIABLE COMMA var_declaration2 .

    SEMICOLON       reduce using rule 36 (var_declaration2 -> VARIABLE COMMA var_declaration2 .)
    RPAREN          reduce using rule 36 (var_declaration2 -> VARIABLE COMMA var_declaration2 .)
    COMMA           reduce using rule 36 (var_declaration2 -> VARIABLE COMMA var_declaration2 .)


state 64

    (39) var_declaration2 -> VARIABLE EQUAL VARIABLE . COMMA var_declaration2
    (40) var_declaration2 -> VARIABLE EQUAL VARIABLE .
    (56) additive_expression -> VARIABLE .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 91
    SEMICOLON       reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RPAREN          reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    LESS            reduce using rule 56 (additive_expression -> VARIABLE .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> VARIABLE .)
    GREATER         reduce using rule 56 (additive_expression -> VARIABLE .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> VARIABLE .)
    DEQUAL          reduce using rule 56 (additive_expression -> VARIABLE .)
    DISTINT         reduce using rule 56 (additive_expression -> VARIABLE .)
    ISEQUAL         reduce using rule 56 (additive_expression -> VARIABLE .)
    PLUS            reduce using rule 56 (additive_expression -> VARIABLE .)
    MINUS           reduce using rule 56 (additive_expression -> VARIABLE .)
    TIMES           reduce using rule 56 (additive_expression -> VARIABLE .)
    DIVIDE          reduce using rule 56 (additive_expression -> VARIABLE .)

  ! COMMA           [ reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 56 (additive_expression -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 56 (additive_expression -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 56 (additive_expression -> VARIABLE .) ]


state 65

    (37) var_declaration2 -> VARIABLE EQUAL NUMBER . COMMA var_declaration2
    (38) var_declaration2 -> VARIABLE EQUAL NUMBER .
    (53) additive_expression -> NUMBER .
    (54) additive_expression -> NUMBER . MINUSMINUS
    (55) additive_expression -> NUMBER . PLUSPLUS

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 38 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 38 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 92
    SEMICOLON       reduce using rule 38 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RPAREN          reduce using rule 38 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    LESS            reduce using rule 53 (additive_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 53 (additive_expression -> NUMBER .)
    GREATER         reduce using rule 53 (additive_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 53 (additive_expression -> NUMBER .)
    DEQUAL          reduce using rule 53 (additive_expression -> NUMBER .)
    DISTINT         reduce using rule 53 (additive_expression -> NUMBER .)
    ISEQUAL         reduce using rule 53 (additive_expression -> NUMBER .)
    PLUS            reduce using rule 53 (additive_expression -> NUMBER .)
    MINUS           reduce using rule 53 (additive_expression -> NUMBER .)
    TIMES           reduce using rule 53 (additive_expression -> NUMBER .)
    DIVIDE          reduce using rule 53 (additive_expression -> NUMBER .)
    MINUSMINUS      shift and go to state 93
    PLUSPLUS        shift and go to state 94

  ! COMMA           [ reduce using rule 38 (var_declaration2 -> VARIABLE EQUAL NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 53 (additive_expression -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 53 (additive_expression -> NUMBER .) ]
  ! COMMA           [ reduce using rule 53 (additive_expression -> NUMBER .) ]


state 66

    (41) var_declaration2 -> VARIABLE EQUAL CADENA .

    SEMICOLON       reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RPAREN          reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COMMA           reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)


state 67

    (42) var_declaration2 -> VARIABLE EQUAL expression .

    SEMICOLON       reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL expression .)
    RPAREN          reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL expression .)
    COMMA           reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL expression .)


state 68

    (46) var_declaration2 -> VARIABLE EQUAL LBRACKET . data_type COMMA var_declaration2
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    NUMBER          shift and go to state 96
    CADENA          shift and go to state 97

    data_type                      shift and go to state 95

state 69

    (50) expression -> additive_expression .
    (51) expression -> additive_expression . comp_op additive_expression
    (52) additive_expression -> additive_expression . math_op additive_expression
    (61) comp_op -> . LESS
    (62) comp_op -> . LESSEQUAL
    (63) comp_op -> . GREATER
    (64) comp_op -> . GREATEREQUAL
    (65) comp_op -> . DEQUAL
    (66) comp_op -> . DISTINT
    (67) comp_op -> . ISEQUAL
    (57) math_op -> . PLUS
    (58) math_op -> . MINUS
    (59) math_op -> . TIMES
    (60) math_op -> . DIVIDE

    SEMICOLON       reduce using rule 50 (expression -> additive_expression .)
    RPAREN          reduce using rule 50 (expression -> additive_expression .)
    COMMA           reduce using rule 50 (expression -> additive_expression .)
    LESS            shift and go to state 100
    LESSEQUAL       shift and go to state 101
    GREATER         shift and go to state 102
    GREATEREQUAL    shift and go to state 103
    DEQUAL          shift and go to state 104
    DISTINT         shift and go to state 105
    ISEQUAL         shift and go to state 106
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110

    comp_op                        shift and go to state 98
    math_op                        shift and go to state 99

state 70

    (24) constant_declaration -> const ID EQUAL . data_type SEMICOLON
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    NUMBER          shift and go to state 96
    CADENA          shift and go to state 97

    data_type                      shift and go to state 111

state 71

    (69) fun_call -> ID LPAREN params . RPAREN
    (76) param_list -> params .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 112
    COMMA           reduce using rule 76 (param_list -> params .)

  ! RPAREN          [ reduce using rule 76 (param_list -> params .) ]


state 72

    (72) params -> param_list .
    (75) param_list -> param_list . COMMA params

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 72 (params -> param_list .)
    COMMA           shift and go to state 113

  ! COMMA           [ reduce using rule 72 (params -> param_list .) ]


state 73

    (73) params -> var_declaration2 .

    RPAREN          reduce using rule 73 (params -> var_declaration2 .)
    COMMA           reduce using rule 73 (params -> var_declaration2 .)


state 74

    (74) params -> empty_function .

    RPAREN          reduce using rule 74 (params -> empty_function .)
    COMMA           reduce using rule 74 (params -> empty_function .)


state 75

    (44) var_declaration2 -> data_type COMMA var_declaration2 .

    SEMICOLON       reduce using rule 44 (var_declaration2 -> data_type COMMA var_declaration2 .)
    RPAREN          reduce using rule 44 (var_declaration2 -> data_type COMMA var_declaration2 .)
    COMMA           reduce using rule 44 (var_declaration2 -> data_type COMMA var_declaration2 .)


state 76

    (25) print_declaration -> print var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    empty           reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    include         reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    const           reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    print           reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    echo            reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    while           reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    function        reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    ID              reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    class           reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    new             reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMA           reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    $end            reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 25 (print_declaration -> print var_declaration2 SEMICOLON .)


state 77

    (26) print_declaration -> print LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 114


state 78

    (27) print_declaration -> print LPAREN data_type . RPAREN SEMICOLON
    (44) var_declaration2 -> data_type . COMMA var_declaration2

    RPAREN          shift and go to state 115
    COMMA           shift and go to state 48


state 79

    (28) print_declaration -> print data_type SEMICOLON .

    COMMENT         reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    empty           reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    include         reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    VARIABLE        reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    const           reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    print           reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    echo            reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    while           reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    function        reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    ID              reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    class           reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    new             reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    COMMA           reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    NUMBER          reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    CADENA          reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    $end            reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)
    RBLOCK          reduce using rule 28 (print_declaration -> print data_type SEMICOLON .)


state 80

    (29) echo_declaration -> echo var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    empty           reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include         reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    const           reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    print           reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    echo            reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    while           reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    function        reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    ID              reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    class           reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    new             reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMA           reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    $end            reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 29 (echo_declaration -> echo var_declaration2 SEMICOLON .)


state 81

    (30) echo_declaration -> echo LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 116


state 82

    (31) echo_declaration -> echo LPAREN data_type . RPAREN SEMICOLON
    (44) var_declaration2 -> data_type . COMMA var_declaration2

    RPAREN          shift and go to state 117
    COMMA           shift and go to state 48


state 83

    (32) echo_declaration -> echo data_type SEMICOLON .

    COMMENT         reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    empty           reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    include         reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    VARIABLE        reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    const           reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    print           reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    echo            reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    while           reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    function        reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    ID              reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    class           reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    new             reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    COMMA           reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    NUMBER          reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    CADENA          reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    $end            reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)
    RBLOCK          reduce using rule 32 (echo_declaration -> echo data_type SEMICOLON .)


state 84

    (49) iteration_stmt -> while LPAREN expression . RPAREN LBLOCK declaration RBLOCK

    RPAREN          shift and go to state 118


state 85

    (53) additive_expression -> NUMBER .
    (54) additive_expression -> NUMBER . MINUSMINUS
    (55) additive_expression -> NUMBER . PLUSPLUS

    LESS            reduce using rule 53 (additive_expression -> NUMBER .)
    LESSEQUAL       reduce using rule 53 (additive_expression -> NUMBER .)
    GREATER         reduce using rule 53 (additive_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 53 (additive_expression -> NUMBER .)
    DEQUAL          reduce using rule 53 (additive_expression -> NUMBER .)
    DISTINT         reduce using rule 53 (additive_expression -> NUMBER .)
    ISEQUAL         reduce using rule 53 (additive_expression -> NUMBER .)
    PLUS            reduce using rule 53 (additive_expression -> NUMBER .)
    MINUS           reduce using rule 53 (additive_expression -> NUMBER .)
    TIMES           reduce using rule 53 (additive_expression -> NUMBER .)
    DIVIDE          reduce using rule 53 (additive_expression -> NUMBER .)
    RPAREN          reduce using rule 53 (additive_expression -> NUMBER .)
    SEMICOLON       reduce using rule 53 (additive_expression -> NUMBER .)
    COMMA           reduce using rule 53 (additive_expression -> NUMBER .)
    MINUSMINUS      shift and go to state 93
    PLUSPLUS        shift and go to state 94


state 86

    (56) additive_expression -> VARIABLE .

    LESS            reduce using rule 56 (additive_expression -> VARIABLE .)
    LESSEQUAL       reduce using rule 56 (additive_expression -> VARIABLE .)
    GREATER         reduce using rule 56 (additive_expression -> VARIABLE .)
    GREATEREQUAL    reduce using rule 56 (additive_expression -> VARIABLE .)
    DEQUAL          reduce using rule 56 (additive_expression -> VARIABLE .)
    DISTINT         reduce using rule 56 (additive_expression -> VARIABLE .)
    ISEQUAL         reduce using rule 56 (additive_expression -> VARIABLE .)
    PLUS            reduce using rule 56 (additive_expression -> VARIABLE .)
    MINUS           reduce using rule 56 (additive_expression -> VARIABLE .)
    TIMES           reduce using rule 56 (additive_expression -> VARIABLE .)
    DIVIDE          reduce using rule 56 (additive_expression -> VARIABLE .)
    RPAREN          reduce using rule 56 (additive_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 56 (additive_expression -> VARIABLE .)
    COMMA           reduce using rule 56 (additive_expression -> VARIABLE .)


state 87

    (68) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration RBLOCK
    (72) params -> . param_list
    (73) params -> . var_declaration2
    (74) params -> . empty_function
    (75) param_list -> . param_list COMMA params
    (76) param_list -> . params
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (77) empty_function -> .
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22
    RPAREN          reduce using rule 77 (empty_function -> .)

  ! COMMA           [ reduce using rule 77 (empty_function -> .) ]

    params                         shift and go to state 119
    param_list                     shift and go to state 72
    var_declaration2               shift and go to state 73
    empty_function                 shift and go to state 74
    data_type                      shift and go to state 28

state 88

    (70) obj_declaration -> class ID LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . fun_declaration
    (16) declaration -> . fun_call
    (17) declaration -> . obj_declaration
    (18) declaration -> . create_obj_declaration
    (19) declaration -> . footer_declaration
    (20) declaration -> . empty
    (23) header_declaration -> . include CADENA SEMICOLON
    (33) var_declaration -> . var_declaration2 SEMICOLON
    (34) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (24) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (25) print_declaration -> . print var_declaration2 SEMICOLON
    (26) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (28) print_declaration -> . print data_type SEMICOLON
    (29) echo_declaration -> . echo var_declaration2 SEMICOLON
    (30) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (32) echo_declaration -> . echo data_type SEMICOLON
    (49) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (68) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (69) fun_call -> . ID LPAREN params RPAREN
    (70) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (71) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 20
    include         shift and go to state 21
    VARIABLE        shift and go to state 24
    const           shift and go to state 26
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    function        shift and go to state 32
    ID              shift and go to state 27
    class           shift and go to state 33
    new             shift and go to state 34
    CLOSE_TAG       shift and go to state 35
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    declaration                    shift and go to state 120
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    fun_declaration                shift and go to state 15
    fun_call                       shift and go to state 16
    obj_declaration                shift and go to state 17
    create_obj_declaration         shift and go to state 18
    footer_declaration             shift and go to state 19
    var_declaration2               shift and go to state 23
    data_type                      shift and go to state 28

state 89

    (71) create_obj_declaration -> new ID LPAREN . params RPAREN
    (72) params -> . param_list
    (73) params -> . var_declaration2
    (74) params -> . empty_function
    (75) param_list -> . param_list COMMA params
    (76) param_list -> . params
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (77) empty_function -> .
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22
    RPAREN          reduce using rule 77 (empty_function -> .)

  ! COMMA           [ reduce using rule 77 (empty_function -> .) ]

    params                         shift and go to state 121
    param_list                     shift and go to state 72
    var_declaration2               shift and go to state 73
    empty_function                 shift and go to state 74
    data_type                      shift and go to state 28

state 90

    (34) var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 122


state 91

    (39) var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA . var_declaration2
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 123
    data_type                      shift and go to state 28

state 92

    (37) var_declaration2 -> VARIABLE EQUAL NUMBER COMMA . var_declaration2
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    var_declaration2               shift and go to state 124
    data_type                      shift and go to state 28

state 93

    (54) additive_expression -> NUMBER MINUSMINUS .

    LESS            reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    LESSEQUAL       reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    GREATER         reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    GREATEREQUAL    reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    DEQUAL          reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    DISTINT         reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    ISEQUAL         reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    PLUS            reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    MINUS           reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    TIMES           reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    DIVIDE          reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    SEMICOLON       reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    RPAREN          reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)
    COMMA           reduce using rule 54 (additive_expression -> NUMBER MINUSMINUS .)


state 94

    (55) additive_expression -> NUMBER PLUSPLUS .

    LESS            reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    LESSEQUAL       reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    GREATER         reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    GREATEREQUAL    reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    DEQUAL          reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    DISTINT         reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    ISEQUAL         reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    PLUS            reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    MINUS           reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    TIMES           reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    DIVIDE          reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    SEMICOLON       reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    RPAREN          reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)
    COMMA           reduce using rule 55 (additive_expression -> NUMBER PLUSPLUS .)


state 95

    (46) var_declaration2 -> VARIABLE EQUAL LBRACKET data_type . COMMA var_declaration2

    COMMA           shift and go to state 125


state 96

    (21) data_type -> NUMBER .

    COMMA           reduce using rule 21 (data_type -> NUMBER .)
    SEMICOLON       reduce using rule 21 (data_type -> NUMBER .)


state 97

    (22) data_type -> CADENA .

    COMMA           reduce using rule 22 (data_type -> CADENA .)
    SEMICOLON       reduce using rule 22 (data_type -> CADENA .)


state 98

    (51) expression -> additive_expression comp_op . additive_expression
    (52) additive_expression -> . additive_expression math_op additive_expression
    (53) additive_expression -> . NUMBER
    (54) additive_expression -> . NUMBER MINUSMINUS
    (55) additive_expression -> . NUMBER PLUSPLUS
    (56) additive_expression -> . VARIABLE

    NUMBER          shift and go to state 85
    VARIABLE        shift and go to state 86

    additive_expression            shift and go to state 126

state 99

    (52) additive_expression -> additive_expression math_op . additive_expression
    (52) additive_expression -> . additive_expression math_op additive_expression
    (53) additive_expression -> . NUMBER
    (54) additive_expression -> . NUMBER MINUSMINUS
    (55) additive_expression -> . NUMBER PLUSPLUS
    (56) additive_expression -> . VARIABLE

    NUMBER          shift and go to state 85
    VARIABLE        shift and go to state 86

    additive_expression            shift and go to state 127

state 100

    (61) comp_op -> LESS .

    NUMBER          reduce using rule 61 (comp_op -> LESS .)
    VARIABLE        reduce using rule 61 (comp_op -> LESS .)


state 101

    (62) comp_op -> LESSEQUAL .

    NUMBER          reduce using rule 62 (comp_op -> LESSEQUAL .)
    VARIABLE        reduce using rule 62 (comp_op -> LESSEQUAL .)


state 102

    (63) comp_op -> GREATER .

    NUMBER          reduce using rule 63 (comp_op -> GREATER .)
    VARIABLE        reduce using rule 63 (comp_op -> GREATER .)


state 103

    (64) comp_op -> GREATEREQUAL .

    NUMBER          reduce using rule 64 (comp_op -> GREATEREQUAL .)
    VARIABLE        reduce using rule 64 (comp_op -> GREATEREQUAL .)


state 104

    (65) comp_op -> DEQUAL .

    NUMBER          reduce using rule 65 (comp_op -> DEQUAL .)
    VARIABLE        reduce using rule 65 (comp_op -> DEQUAL .)


state 105

    (66) comp_op -> DISTINT .

    NUMBER          reduce using rule 66 (comp_op -> DISTINT .)
    VARIABLE        reduce using rule 66 (comp_op -> DISTINT .)


state 106

    (67) comp_op -> ISEQUAL .

    NUMBER          reduce using rule 67 (comp_op -> ISEQUAL .)
    VARIABLE        reduce using rule 67 (comp_op -> ISEQUAL .)


state 107

    (57) math_op -> PLUS .

    NUMBER          reduce using rule 57 (math_op -> PLUS .)
    VARIABLE        reduce using rule 57 (math_op -> PLUS .)


state 108

    (58) math_op -> MINUS .

    NUMBER          reduce using rule 58 (math_op -> MINUS .)
    VARIABLE        reduce using rule 58 (math_op -> MINUS .)


state 109

    (59) math_op -> TIMES .

    NUMBER          reduce using rule 59 (math_op -> TIMES .)
    VARIABLE        reduce using rule 59 (math_op -> TIMES .)


state 110

    (60) math_op -> DIVIDE .

    NUMBER          reduce using rule 60 (math_op -> DIVIDE .)
    VARIABLE        reduce using rule 60 (math_op -> DIVIDE .)


state 111

    (24) constant_declaration -> const ID EQUAL data_type . SEMICOLON

    SEMICOLON       shift and go to state 128


state 112

    (69) fun_call -> ID LPAREN params RPAREN .

    COMMENT         reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    empty           reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    include         reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    const           reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    print           reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    echo            reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    while           reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    function        reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    class           reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    new             reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    COMMA           reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    NUMBER          reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    CADENA          reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 69 (fun_call -> ID LPAREN params RPAREN .)


state 113

    (75) param_list -> param_list COMMA . params
    (72) params -> . param_list
    (73) params -> . var_declaration2
    (74) params -> . empty_function
    (75) param_list -> . param_list COMMA params
    (76) param_list -> . params
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (77) empty_function -> .
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

  ! shift/reduce conflict for COMMA resolved as shift
    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22
    RPAREN          reduce using rule 77 (empty_function -> .)

  ! COMMA           [ reduce using rule 77 (empty_function -> .) ]

    param_list                     shift and go to state 72
    params                         shift and go to state 129
    var_declaration2               shift and go to state 73
    empty_function                 shift and go to state 74
    data_type                      shift and go to state 28

state 114

    (26) print_declaration -> print LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 130


state 115

    (27) print_declaration -> print LPAREN data_type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 131


state 116

    (30) echo_declaration -> echo LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 132


state 117

    (31) echo_declaration -> echo LPAREN data_type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 133


state 118

    (49) iteration_stmt -> while LPAREN expression RPAREN . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 134


state 119

    (68) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration RBLOCK
    (76) param_list -> params .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 135
    COMMA           reduce using rule 76 (param_list -> params .)

  ! RPAREN          [ reduce using rule 76 (param_list -> params .) ]


state 120

    (70) obj_declaration -> class ID LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 136


state 121

    (71) create_obj_declaration -> new ID LPAREN params . RPAREN
    (76) param_list -> params .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 137
    COMMA           reduce using rule 76 (param_list -> params .)

  ! RPAREN          [ reduce using rule 76 (param_list -> params .) ]


state 122

    (34) var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .

    COMMENT         reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    COMMENT_MULTI   reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    empty           reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    include         reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    VARIABLE        reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    const           reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    print           reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    echo            reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    while           reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    function        reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    class           reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    new             reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    CLOSE_TAG       reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    COMMA           reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    CADENA          reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 34 (var_declaration -> VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON .)


state 123

    (39) var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2 .

    SEMICOLON       reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2 .)
    RPAREN          reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2 .)
    COMMA           reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL VARIABLE COMMA var_declaration2 .)


state 124

    (37) var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2 .

    SEMICOLON       reduce using rule 37 (var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2 .)
    RPAREN          reduce using rule 37 (var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2 .)
    COMMA           reduce using rule 37 (var_declaration2 -> VARIABLE EQUAL NUMBER COMMA var_declaration2 .)


state 125

    (46) var_declaration2 -> VARIABLE EQUAL LBRACKET data_type COMMA . var_declaration2
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    VARIABLE        shift and go to state 52
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    data_type                      shift and go to state 28
    var_declaration2               shift and go to state 138

state 126

    (51) expression -> additive_expression comp_op additive_expression .
    (52) additive_expression -> additive_expression . math_op additive_expression
    (57) math_op -> . PLUS
    (58) math_op -> . MINUS
    (59) math_op -> . TIMES
    (60) math_op -> . DIVIDE

    SEMICOLON       reduce using rule 51 (expression -> additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 51 (expression -> additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 51 (expression -> additive_expression comp_op additive_expression .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110

    math_op                        shift and go to state 99

state 127

    (52) additive_expression -> additive_expression math_op additive_expression .
    (52) additive_expression -> additive_expression . math_op additive_expression
    (57) math_op -> . PLUS
    (58) math_op -> . MINUS
    (59) math_op -> . TIMES
    (60) math_op -> . DIVIDE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LESS            reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    LESSEQUAL       reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    GREATER         reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    GREATEREQUAL    reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    DEQUAL          reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    DISTINT         reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    ISEQUAL         reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    SEMICOLON       reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    RPAREN          reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    COMMA           reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 110

  ! PLUS            [ reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .) ]
  ! MINUS           [ reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .) ]
  ! TIMES           [ reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .) ]
  ! DIVIDE          [ reduce using rule 52 (additive_expression -> additive_expression math_op additive_expression .) ]

    math_op                        shift and go to state 99

state 128

    (24) constant_declaration -> const ID EQUAL data_type SEMICOLON .

    COMMENT         reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    empty           reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    include         reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    VARIABLE        reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    const           reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    print           reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    echo            reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    while           reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    function        reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    ID              reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    class           reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    new             reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMA           reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    NUMBER          reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    CADENA          reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    $end            reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    RBLOCK          reduce using rule 24 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)


state 129

    (75) param_list -> param_list COMMA params .
    (76) param_list -> params .

  ! reduce/reduce conflict for RPAREN resolved using rule 75 (param_list -> param_list COMMA params .)
  ! reduce/reduce conflict for COMMA resolved using rule 75 (param_list -> param_list COMMA params .)
    RPAREN          reduce using rule 75 (param_list -> param_list COMMA params .)
    COMMA           reduce using rule 75 (param_list -> param_list COMMA params .)

  ! RPAREN          [ reduce using rule 76 (param_list -> params .) ]
  ! COMMA           [ reduce using rule 76 (param_list -> params .) ]


state 130

    (26) print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMA           reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    NUMBER          reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 26 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)


state 131

    (27) print_declaration -> print LPAREN data_type RPAREN SEMICOLON .

    COMMENT         reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    empty           reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    include         reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    const           reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    print           reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    echo            reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    while           reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    function        reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    ID              reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    class           reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    new             reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMA           reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    NUMBER          reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    CADENA          reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    $end            reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 27 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)


state 132

    (30) echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMA           reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    NUMBER          reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 30 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)


state 133

    (31) echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .

    COMMENT         reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    empty           reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    include         reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    const           reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    print           reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    echo            reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    while           reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    function        reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    ID              reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    class           reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    new             reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMA           reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    NUMBER          reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    CADENA          reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    $end            reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 31 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)


state 134

    (49) iteration_stmt -> while LPAREN expression RPAREN LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . fun_declaration
    (16) declaration -> . fun_call
    (17) declaration -> . obj_declaration
    (18) declaration -> . create_obj_declaration
    (19) declaration -> . footer_declaration
    (20) declaration -> . empty
    (23) header_declaration -> . include CADENA SEMICOLON
    (33) var_declaration -> . var_declaration2 SEMICOLON
    (34) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (24) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (25) print_declaration -> . print var_declaration2 SEMICOLON
    (26) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (28) print_declaration -> . print data_type SEMICOLON
    (29) echo_declaration -> . echo var_declaration2 SEMICOLON
    (30) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (32) echo_declaration -> . echo data_type SEMICOLON
    (49) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (68) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (69) fun_call -> . ID LPAREN params RPAREN
    (70) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (71) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 20
    include         shift and go to state 21
    VARIABLE        shift and go to state 24
    const           shift and go to state 26
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    function        shift and go to state 32
    ID              shift and go to state 27
    class           shift and go to state 33
    new             shift and go to state 34
    CLOSE_TAG       shift and go to state 35
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    declaration                    shift and go to state 139
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    fun_declaration                shift and go to state 15
    fun_call                       shift and go to state 16
    obj_declaration                shift and go to state 17
    create_obj_declaration         shift and go to state 18
    footer_declaration             shift and go to state 19
    var_declaration2               shift and go to state 23
    data_type                      shift and go to state 28

state 135

    (68) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 140


state 136

    (70) obj_declaration -> class ID LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    empty           reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    include         reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    const           reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    print           reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    echo            reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    while           reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    function        reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    ID              reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    class           reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    new             reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMA           reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    NUMBER          reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    CADENA          reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    $end            reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 70 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)


state 137

    (71) create_obj_declaration -> new ID LPAREN params RPAREN .

    COMMENT         reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    empty           reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include         reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    const           reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    print           reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    echo            reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    while           reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    function        reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ID              reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    class           reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    new             reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMA           reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    NUMBER          reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CADENA          reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    $end            reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 71 (create_obj_declaration -> new ID LPAREN params RPAREN .)


state 138

    (46) var_declaration2 -> VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2 .

    SEMICOLON       reduce using rule 46 (var_declaration2 -> VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2 .)
    RPAREN          reduce using rule 46 (var_declaration2 -> VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2 .)
    COMMA           reduce using rule 46 (var_declaration2 -> VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2 .)


state 139

    (49) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 141


state 140

    (68) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . fun_declaration
    (16) declaration -> . fun_call
    (17) declaration -> . obj_declaration
    (18) declaration -> . create_obj_declaration
    (19) declaration -> . footer_declaration
    (20) declaration -> . empty
    (23) header_declaration -> . include CADENA SEMICOLON
    (33) var_declaration -> . var_declaration2 SEMICOLON
    (34) var_declaration -> . VARIABLE LBRACKET NUMBER RBRACKET SEMICOLON
    (24) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (25) print_declaration -> . print var_declaration2 SEMICOLON
    (26) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (27) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (28) print_declaration -> . print data_type SEMICOLON
    (29) echo_declaration -> . echo var_declaration2 SEMICOLON
    (30) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (31) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (32) echo_declaration -> . echo data_type SEMICOLON
    (49) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (68) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (69) fun_call -> . ID LPAREN params RPAREN
    (70) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (71) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (35) var_declaration2 -> . VARIABLE
    (36) var_declaration2 -> . VARIABLE COMMA var_declaration2
    (37) var_declaration2 -> . VARIABLE EQUAL NUMBER COMMA var_declaration2
    (38) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (39) var_declaration2 -> . VARIABLE EQUAL VARIABLE COMMA var_declaration2
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL expression
    (43) var_declaration2 -> . COMMA
    (44) var_declaration2 -> . data_type COMMA var_declaration2
    (45) var_declaration2 -> . NUMBER RBRACKET
    (46) var_declaration2 -> . VARIABLE EQUAL LBRACKET data_type COMMA var_declaration2
    (47) var_declaration2 -> . CADENA COMMA var_declaration2
    (48) var_declaration2 -> . CADENA RBRACKET
    (21) data_type -> . NUMBER
    (22) data_type -> . CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 20
    include         shift and go to state 21
    VARIABLE        shift and go to state 24
    const           shift and go to state 26
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    function        shift and go to state 32
    ID              shift and go to state 27
    class           shift and go to state 33
    new             shift and go to state 34
    CLOSE_TAG       shift and go to state 35
    COMMA           shift and go to state 36
    NUMBER          shift and go to state 25
    CADENA          shift and go to state 22

    declaration                    shift and go to state 142
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    fun_declaration                shift and go to state 15
    fun_call                       shift and go to state 16
    obj_declaration                shift and go to state 17
    create_obj_declaration         shift and go to state 18
    footer_declaration             shift and go to state 19
    var_declaration2               shift and go to state 23
    data_type                      shift and go to state 28

state 141

    (49) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    empty           reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    include         reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    const           reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    print           reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    echo            reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    while           reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    function        reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    ID              reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    class           reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    new             reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMA           reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    NUMBER          reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    CADENA          reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    $end            reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 49 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)


state 142

    (68) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 143


state 143

    (68) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    empty           reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    include         reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    const           reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    print           reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    echo            reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    while           reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    function        reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    ID              reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    class           reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    new             reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMA           reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    NUMBER          reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    CADENA          reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    $end            reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 68 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 22 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 52 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 65 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 65 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 89 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 113 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: reduce/reduce conflict in state 64 resolved using rule (var_declaration2 -> VARIABLE EQUAL VARIABLE)
WARNING: rejected rule (additive_expression -> VARIABLE) in state 64
WARNING: reduce/reduce conflict in state 65 resolved using rule (var_declaration2 -> VARIABLE EQUAL NUMBER)
WARNING: rejected rule (additive_expression -> NUMBER) in state 65
WARNING: reduce/reduce conflict in state 129 resolved using rule (param_list -> param_list COMMA params)
WARNING: rejected rule (param_list -> params) in state 129
