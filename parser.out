Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANT
    ANDEQUAL
    ASSIGN
    BACKSLASH
    COLON
    COMILLASDOBLES
    COMILLASIMPLE
    DIVEQUAL
    DOT
    HASHTAG
    INVALID_NUMBER_SEQUENCE
    INVALID_VARIABLE
    ISIDENTICAL
    ISNOTIDENTICAL
    MINUSEQUAL
    MOD
    MULEQUAL
    PLUSEQUAL
    POW
    QUESTIONMARK
    SL
    SLEQUAL
    SR
    SREQUAL
    XOREQUAL
    abs
    abstract
    break
    callable
    case
    catch
    ceil
    clone
    continue
    cos
    declare
    default
    deg2rad
    die
    do
    endclare
    endfor
    endforeach
    endswitch
    endwhile
    eval
    exp
    extends
    final
    finally
    floor
    global
    goto
    implements
    include_once
    instanceof
    insteadof
    interface
    isset
    list
    log
    log10
    match
    max
    min
    namespace
    objectoperator
    php
    pow
    private
    protected
    public
    rad2deg
    rand
    readonly
    require
    require_once
    return
    round
    sin
    sqrt
    static
    switch
    throw
    trait
    try
    unset
    use
    var
    xor

Grammar

Rule 0     S' -> program
Rule 1     program -> header declaration_list
Rule 2     header -> OPEN_TAG
Rule 3     footer_declaration -> CLOSE_TAG
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> COMMENT
Rule 7     declaration -> COMMENT_HASHTAG
Rule 8     declaration -> COMMENT_MULTI
Rule 9     declaration -> header_declaration
Rule 10    declaration -> var_declaration
Rule 11    declaration -> constant_declaration
Rule 12    declaration -> print_declaration
Rule 13    declaration -> echo_declaration
Rule 14    declaration -> iteration_stmt
Rule 15    declaration -> if_statement
Rule 16    declaration -> fun_declaration
Rule 17    declaration -> fun_call
Rule 18    declaration -> obj_declaration
Rule 19    declaration -> create_obj_declaration
Rule 20    declaration -> footer_declaration
Rule 21    declaration -> for_loop
Rule 22    declaration -> foreach_loop
Rule 23    declaration -> exit_statement
Rule 24    declaration -> empty
Rule 25    data_type -> NUMBER
Rule 26    data_type -> CADENA
Rule 27    header_declaration -> include CADENA SEMICOLON
Rule 28    constant_declaration -> const ID EQUAL data_type SEMICOLON
Rule 29    print_declaration -> print var_declaration2 SEMICOLON
Rule 30    print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON
Rule 31    print_declaration -> print LPAREN data_type RPAREN SEMICOLON
Rule 32    print_declaration -> print data_type SEMICOLON
Rule 33    echo_declaration -> echo var_declaration2 SEMICOLON
Rule 34    echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON
Rule 35    echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON
Rule 36    echo_declaration -> echo data_type SEMICOLON
Rule 37    var_declaration -> var_declaration2 SEMICOLON
Rule 38    var_declaration2 -> VARIABLE
Rule 39    var_declaration2 -> VARIABLE EQUAL NUMBER
Rule 40    var_declaration2 -> VARIABLE EQUAL VARIABLE
Rule 41    var_declaration2 -> VARIABLE EQUAL CADENA
Rule 42    var_declaration2 -> VARIABLE EQUAL array_declaration
Rule 43    var_declaration2 -> VARIABLE EQUAL expression
Rule 44    var_declaration2 -> VARIABLE assignment_tail
Rule 45    var_declaration2 -> VARIABLE EQUAL assignment_tail
Rule 46    assignment_tail -> COMMA var_declaration2
Rule 47    assignment_tail -> LBRACKET params RBRACKET
Rule 48    assignment_tail -> LBLOCK params RBLOCK
Rule 49    assignment_tail -> VARIABLE LBRACKET expression COMMA params
Rule 50    assignment_tail -> VARIABLE LBRACKET params RBRACKET
Rule 51    assignment_tail -> VARIABLE LBLOCK params RBLOCK
Rule 52    iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK
Rule 53    expression -> additive_expression
Rule 54    expression -> additive_expression logical_op additive_expression
Rule 55    expression -> additive_expression comp_op additive_expression
Rule 56    expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
Rule 57    additive_expression -> term
Rule 58    additive_expression -> term math_op term
Rule 59    term -> factor
Rule 60    term -> factor increment_decrement_op
Rule 61    term -> increment_decrement_op factor
Rule 62    factor -> NUMBER
Rule 63    factor -> VARIABLE
Rule 64    factor -> LPAREN expression RPAREN
Rule 65    increment_decrement_op -> PLUSPLUS
Rule 66    increment_decrement_op -> MINUSMINUS
Rule 67    math_op -> PLUS
Rule 68    math_op -> MINUS
Rule 69    math_op -> TIMES
Rule 70    math_op -> DIVIDE
Rule 71    comp_op -> LESS
Rule 72    comp_op -> LESSEQUAL
Rule 73    comp_op -> GREATER
Rule 74    comp_op -> GREATEREQUAL
Rule 75    comp_op -> DEQUAL
Rule 76    comp_op -> DISTINT
Rule 77    comp_op -> ISEQUAL
Rule 78    logical_op -> BOOL_OR
Rule 79    logical_op -> BOOL_AND
Rule 80    logical_op -> NOT
Rule 81    logical_op -> or
Rule 82    logical_op -> and
Rule 83    if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 84    else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 85    else_part -> else LBLOCK declaration_list RBLOCK
Rule 86    else_part -> endif
Rule 87    else_part -> empty
Rule 88    fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
Rule 89    fun_call -> ID LPAREN params RPAREN
Rule 90    obj_declaration -> class ID LBLOCK declaration RBLOCK
Rule 91    create_obj_declaration -> new ID LPAREN params RPAREN
Rule 92    params -> single_param
Rule 93    params -> params COMMA single_param
Rule 94    single_param -> var_declaration2
Rule 95    single_param -> data_type
Rule 96    single_param -> empty_function
Rule 97    for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
Rule 98    for_init -> var_declaration2 SEMICOLON
Rule 99    for_expr -> expression SEMICOLON
Rule 100   for_update -> expression
Rule 101   exit_statement -> exit LPAREN expression RPAREN SEMICOLON
Rule 102   foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
Rule 103   array_declaration -> array LPAREN params RPAREN
Rule 104   empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 
ANDEQUAL             : 
ASSIGN               : 
BACKSLASH            : 
BOOL_AND             : 79
BOOL_OR              : 78
CADENA               : 26 27 41
CLOSE_TAG            : 3
COLON                : 
COMILLASDOBLES       : 
COMILLASIMPLE        : 
COMMA                : 46 49 93
COMMENT              : 6
COMMENT_HASHTAG      : 7
COMMENT_MULTI        : 8
DEQUAL               : 75
DISTINT              : 76
DIVEQUAL             : 
DIVIDE               : 70
DOT                  : 
EQUAL                : 28 39 40 41 42 43 45
GREATER              : 73
GREATEREQUAL         : 74
HASHTAG              : 
ID                   : 28 88 89 90 91
INVALID_NUMBER_SEQUENCE : 
INVALID_VARIABLE     : 
ISEQUAL              : 77
ISIDENTICAL          : 
ISNOTIDENTICAL       : 
LBLOCK               : 48 51 52 83 84 85 88 90 97 102
LBRACKET             : 47 49 50
LESS                 : 71
LESSEQUAL            : 72
LPAREN               : 30 31 34 35 52 64 83 84 88 89 91 97 101 102 103
MINUS                : 68
MINUSEQUAL           : 
MINUSMINUS           : 66
MOD                  : 
MULEQUAL             : 
NOT                  : 80
NUMBER               : 25 39 62
OPEN_TAG             : 2
PLUS                 : 67
PLUSEQUAL            : 
PLUSPLUS             : 65
POW                  : 
QUESTIONMARK         : 
RBLOCK               : 48 51 52 83 84 85 88 90 97 102
RBRACKET             : 47 50
RPAREN               : 30 31 34 35 52 64 83 84 88 89 91 97 101 102 103
SEMICOLON            : 27 28 29 30 31 32 33 34 35 36 37 98 99 101
SL                   : 
SLEQUAL              : 
SR                   : 
SREQUAL              : 
TIMES                : 69
VARIABLE             : 38 39 40 40 41 42 43 44 45 49 50 51 63
XOREQUAL             : 
abs                  : 
abstract             : 
and                  : 82
array                : 103
as                   : 102
break                : 
callable             : 
case                 : 
catch                : 
ceil                 : 
class                : 90
clone                : 
const                : 28
continue             : 
cos                  : 
declare              : 
default              : 
deg2rad              : 
die                  : 
do                   : 
echo                 : 33 34 35 36
else                 : 85
elseif               : 84
empty                : 24 87
endclare             : 
endfor               : 
endforeach           : 
endif                : 86
endswitch            : 
endwhile             : 
error                : 
eval                 : 
exit                 : 101
exp                  : 
extends              : 
final                : 
finally              : 
floor                : 
for                  : 97
foreach              : 102
function             : 88
global               : 
goto                 : 
if                   : 83
implements           : 
include              : 27
include_once         : 
instanceof           : 
insteadof            : 
interface            : 
isset                : 
list                 : 
log                  : 
log10                : 
match                : 
max                  : 
min                  : 
namespace            : 
new                  : 91
objectoperator       : 
or                   : 81
php                  : 
pow                  : 
print                : 29 30 31 32
private              : 
protected            : 
public               : 
rad2deg              : 
rand                 : 
readonly             : 
require              : 
require_once         : 
return               : 
round                : 
sin                  : 
sqrt                 : 
static               : 
switch               : 
throw                : 
trait                : 
try                  : 
unset                : 
use                  : 
var                  : 
while                : 52
xor                  : 

Nonterminals, with rules where they appear

additive_expression  : 53 54 54 55 55 56 56 56 56
array_declaration    : 42
assignment_tail      : 44 45
comp_op              : 55 56 56
constant_declaration : 11
create_obj_declaration : 19
data_type            : 28 31 32 35 36 95
declaration          : 4 5 52 88 90
declaration_list     : 1 5 83 84 85 97 102
echo_declaration     : 13
else_part            : 83 84
empty_function       : 96
exit_statement       : 23
expression           : 43 49 52 64 83 84 99 100 101 102 102
factor               : 59 60 61
footer_declaration   : 20
for_expr             : 97
for_init             : 97
for_loop             : 21
for_update           : 97
foreach_loop         : 22
fun_call             : 17
fun_declaration      : 16
header               : 1
header_declaration   : 9
if_statement         : 15
increment_decrement_op : 60 61
iteration_stmt       : 14
logical_op           : 54 56
math_op              : 58
obj_declaration      : 18
params               : 47 48 49 50 51 88 89 91 93 103
print_declaration    : 12
program              : 0
single_param         : 92 93
term                 : 57 58 58
var_declaration      : 10
var_declaration2     : 29 30 33 34 37 46 94 98

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header declaration_list
    (2) header -> . OPEN_TAG

    OPEN_TAG        shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 3

    (2) header -> OPEN_TAG .

    COMMENT         reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_HASHTAG reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_MULTI   reduce using rule 2 (header -> OPEN_TAG .)
    empty           reduce using rule 2 (header -> OPEN_TAG .)
    include         reduce using rule 2 (header -> OPEN_TAG .)
    const           reduce using rule 2 (header -> OPEN_TAG .)
    print           reduce using rule 2 (header -> OPEN_TAG .)
    echo            reduce using rule 2 (header -> OPEN_TAG .)
    while           reduce using rule 2 (header -> OPEN_TAG .)
    if              reduce using rule 2 (header -> OPEN_TAG .)
    function        reduce using rule 2 (header -> OPEN_TAG .)
    ID              reduce using rule 2 (header -> OPEN_TAG .)
    class           reduce using rule 2 (header -> OPEN_TAG .)
    new             reduce using rule 2 (header -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 2 (header -> OPEN_TAG .)
    for             reduce using rule 2 (header -> OPEN_TAG .)
    foreach         reduce using rule 2 (header -> OPEN_TAG .)
    exit            reduce using rule 2 (header -> OPEN_TAG .)
    VARIABLE        reduce using rule 2 (header -> OPEN_TAG .)


state 4

    (1) program -> header declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    $end            reduce using rule 1 (program -> header declaration_list .)
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 5

    (4) declaration_list -> declaration .

    COMMENT         reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_MULTI   reduce using rule 4 (declaration_list -> declaration .)
    empty           reduce using rule 4 (declaration_list -> declaration .)
    include         reduce using rule 4 (declaration_list -> declaration .)
    const           reduce using rule 4 (declaration_list -> declaration .)
    print           reduce using rule 4 (declaration_list -> declaration .)
    echo            reduce using rule 4 (declaration_list -> declaration .)
    while           reduce using rule 4 (declaration_list -> declaration .)
    if              reduce using rule 4 (declaration_list -> declaration .)
    function        reduce using rule 4 (declaration_list -> declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration .)
    class           reduce using rule 4 (declaration_list -> declaration .)
    new             reduce using rule 4 (declaration_list -> declaration .)
    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration .)
    for             reduce using rule 4 (declaration_list -> declaration .)
    foreach         reduce using rule 4 (declaration_list -> declaration .)
    exit            reduce using rule 4 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)
    RBLOCK          reduce using rule 4 (declaration_list -> declaration .)


state 6

    (6) declaration -> COMMENT .

    COMMENT         reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_HASHTAG reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_MULTI   reduce using rule 6 (declaration -> COMMENT .)
    empty           reduce using rule 6 (declaration -> COMMENT .)
    include         reduce using rule 6 (declaration -> COMMENT .)
    const           reduce using rule 6 (declaration -> COMMENT .)
    print           reduce using rule 6 (declaration -> COMMENT .)
    echo            reduce using rule 6 (declaration -> COMMENT .)
    while           reduce using rule 6 (declaration -> COMMENT .)
    if              reduce using rule 6 (declaration -> COMMENT .)
    function        reduce using rule 6 (declaration -> COMMENT .)
    ID              reduce using rule 6 (declaration -> COMMENT .)
    class           reduce using rule 6 (declaration -> COMMENT .)
    new             reduce using rule 6 (declaration -> COMMENT .)
    CLOSE_TAG       reduce using rule 6 (declaration -> COMMENT .)
    for             reduce using rule 6 (declaration -> COMMENT .)
    foreach         reduce using rule 6 (declaration -> COMMENT .)
    exit            reduce using rule 6 (declaration -> COMMENT .)
    VARIABLE        reduce using rule 6 (declaration -> COMMENT .)
    $end            reduce using rule 6 (declaration -> COMMENT .)
    RBLOCK          reduce using rule 6 (declaration -> COMMENT .)


state 7

    (7) declaration -> COMMENT_HASHTAG .

    COMMENT         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_HASHTAG reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_MULTI   reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    empty           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    const           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    print           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    echo            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    while           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    if              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    function        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    ID              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    class           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    new             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CLOSE_TAG       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    for             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    foreach         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exit            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    VARIABLE        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    $end            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    RBLOCK          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)


state 8

    (8) declaration -> COMMENT_MULTI .

    COMMENT         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_HASHTAG reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_MULTI   reduce using rule 8 (declaration -> COMMENT_MULTI .)
    empty           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    const           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    print           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    echo            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    while           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    if              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    function        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    ID              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    class           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    new             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CLOSE_TAG       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    for             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    foreach         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exit            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    VARIABLE        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    $end            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    RBLOCK          reduce using rule 8 (declaration -> COMMENT_MULTI .)


state 9

    (9) declaration -> header_declaration .

    COMMENT         reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_HASHTAG reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_MULTI   reduce using rule 9 (declaration -> header_declaration .)
    empty           reduce using rule 9 (declaration -> header_declaration .)
    include         reduce using rule 9 (declaration -> header_declaration .)
    const           reduce using rule 9 (declaration -> header_declaration .)
    print           reduce using rule 9 (declaration -> header_declaration .)
    echo            reduce using rule 9 (declaration -> header_declaration .)
    while           reduce using rule 9 (declaration -> header_declaration .)
    if              reduce using rule 9 (declaration -> header_declaration .)
    function        reduce using rule 9 (declaration -> header_declaration .)
    ID              reduce using rule 9 (declaration -> header_declaration .)
    class           reduce using rule 9 (declaration -> header_declaration .)
    new             reduce using rule 9 (declaration -> header_declaration .)
    CLOSE_TAG       reduce using rule 9 (declaration -> header_declaration .)
    for             reduce using rule 9 (declaration -> header_declaration .)
    foreach         reduce using rule 9 (declaration -> header_declaration .)
    exit            reduce using rule 9 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> header_declaration .)
    $end            reduce using rule 9 (declaration -> header_declaration .)
    RBLOCK          reduce using rule 9 (declaration -> header_declaration .)


state 10

    (10) declaration -> var_declaration .

    COMMENT         reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_HASHTAG reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_MULTI   reduce using rule 10 (declaration -> var_declaration .)
    empty           reduce using rule 10 (declaration -> var_declaration .)
    include         reduce using rule 10 (declaration -> var_declaration .)
    const           reduce using rule 10 (declaration -> var_declaration .)
    print           reduce using rule 10 (declaration -> var_declaration .)
    echo            reduce using rule 10 (declaration -> var_declaration .)
    while           reduce using rule 10 (declaration -> var_declaration .)
    if              reduce using rule 10 (declaration -> var_declaration .)
    function        reduce using rule 10 (declaration -> var_declaration .)
    ID              reduce using rule 10 (declaration -> var_declaration .)
    class           reduce using rule 10 (declaration -> var_declaration .)
    new             reduce using rule 10 (declaration -> var_declaration .)
    CLOSE_TAG       reduce using rule 10 (declaration -> var_declaration .)
    for             reduce using rule 10 (declaration -> var_declaration .)
    foreach         reduce using rule 10 (declaration -> var_declaration .)
    exit            reduce using rule 10 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 10 (declaration -> var_declaration .)
    $end            reduce using rule 10 (declaration -> var_declaration .)
    RBLOCK          reduce using rule 10 (declaration -> var_declaration .)


state 11

    (11) declaration -> constant_declaration .

    COMMENT         reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_HASHTAG reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_MULTI   reduce using rule 11 (declaration -> constant_declaration .)
    empty           reduce using rule 11 (declaration -> constant_declaration .)
    include         reduce using rule 11 (declaration -> constant_declaration .)
    const           reduce using rule 11 (declaration -> constant_declaration .)
    print           reduce using rule 11 (declaration -> constant_declaration .)
    echo            reduce using rule 11 (declaration -> constant_declaration .)
    while           reduce using rule 11 (declaration -> constant_declaration .)
    if              reduce using rule 11 (declaration -> constant_declaration .)
    function        reduce using rule 11 (declaration -> constant_declaration .)
    ID              reduce using rule 11 (declaration -> constant_declaration .)
    class           reduce using rule 11 (declaration -> constant_declaration .)
    new             reduce using rule 11 (declaration -> constant_declaration .)
    CLOSE_TAG       reduce using rule 11 (declaration -> constant_declaration .)
    for             reduce using rule 11 (declaration -> constant_declaration .)
    foreach         reduce using rule 11 (declaration -> constant_declaration .)
    exit            reduce using rule 11 (declaration -> constant_declaration .)
    VARIABLE        reduce using rule 11 (declaration -> constant_declaration .)
    $end            reduce using rule 11 (declaration -> constant_declaration .)
    RBLOCK          reduce using rule 11 (declaration -> constant_declaration .)


state 12

    (12) declaration -> print_declaration .

    COMMENT         reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_HASHTAG reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_MULTI   reduce using rule 12 (declaration -> print_declaration .)
    empty           reduce using rule 12 (declaration -> print_declaration .)
    include         reduce using rule 12 (declaration -> print_declaration .)
    const           reduce using rule 12 (declaration -> print_declaration .)
    print           reduce using rule 12 (declaration -> print_declaration .)
    echo            reduce using rule 12 (declaration -> print_declaration .)
    while           reduce using rule 12 (declaration -> print_declaration .)
    if              reduce using rule 12 (declaration -> print_declaration .)
    function        reduce using rule 12 (declaration -> print_declaration .)
    ID              reduce using rule 12 (declaration -> print_declaration .)
    class           reduce using rule 12 (declaration -> print_declaration .)
    new             reduce using rule 12 (declaration -> print_declaration .)
    CLOSE_TAG       reduce using rule 12 (declaration -> print_declaration .)
    for             reduce using rule 12 (declaration -> print_declaration .)
    foreach         reduce using rule 12 (declaration -> print_declaration .)
    exit            reduce using rule 12 (declaration -> print_declaration .)
    VARIABLE        reduce using rule 12 (declaration -> print_declaration .)
    $end            reduce using rule 12 (declaration -> print_declaration .)
    RBLOCK          reduce using rule 12 (declaration -> print_declaration .)


state 13

    (13) declaration -> echo_declaration .

    COMMENT         reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_HASHTAG reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_MULTI   reduce using rule 13 (declaration -> echo_declaration .)
    empty           reduce using rule 13 (declaration -> echo_declaration .)
    include         reduce using rule 13 (declaration -> echo_declaration .)
    const           reduce using rule 13 (declaration -> echo_declaration .)
    print           reduce using rule 13 (declaration -> echo_declaration .)
    echo            reduce using rule 13 (declaration -> echo_declaration .)
    while           reduce using rule 13 (declaration -> echo_declaration .)
    if              reduce using rule 13 (declaration -> echo_declaration .)
    function        reduce using rule 13 (declaration -> echo_declaration .)
    ID              reduce using rule 13 (declaration -> echo_declaration .)
    class           reduce using rule 13 (declaration -> echo_declaration .)
    new             reduce using rule 13 (declaration -> echo_declaration .)
    CLOSE_TAG       reduce using rule 13 (declaration -> echo_declaration .)
    for             reduce using rule 13 (declaration -> echo_declaration .)
    foreach         reduce using rule 13 (declaration -> echo_declaration .)
    exit            reduce using rule 13 (declaration -> echo_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> echo_declaration .)
    $end            reduce using rule 13 (declaration -> echo_declaration .)
    RBLOCK          reduce using rule 13 (declaration -> echo_declaration .)


state 14

    (14) declaration -> iteration_stmt .

    COMMENT         reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_HASHTAG reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_MULTI   reduce using rule 14 (declaration -> iteration_stmt .)
    empty           reduce using rule 14 (declaration -> iteration_stmt .)
    include         reduce using rule 14 (declaration -> iteration_stmt .)
    const           reduce using rule 14 (declaration -> iteration_stmt .)
    print           reduce using rule 14 (declaration -> iteration_stmt .)
    echo            reduce using rule 14 (declaration -> iteration_stmt .)
    while           reduce using rule 14 (declaration -> iteration_stmt .)
    if              reduce using rule 14 (declaration -> iteration_stmt .)
    function        reduce using rule 14 (declaration -> iteration_stmt .)
    ID              reduce using rule 14 (declaration -> iteration_stmt .)
    class           reduce using rule 14 (declaration -> iteration_stmt .)
    new             reduce using rule 14 (declaration -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 14 (declaration -> iteration_stmt .)
    for             reduce using rule 14 (declaration -> iteration_stmt .)
    foreach         reduce using rule 14 (declaration -> iteration_stmt .)
    exit            reduce using rule 14 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 14 (declaration -> iteration_stmt .)
    $end            reduce using rule 14 (declaration -> iteration_stmt .)
    RBLOCK          reduce using rule 14 (declaration -> iteration_stmt .)


state 15

    (15) declaration -> if_statement .

    COMMENT         reduce using rule 15 (declaration -> if_statement .)
    COMMENT_HASHTAG reduce using rule 15 (declaration -> if_statement .)
    COMMENT_MULTI   reduce using rule 15 (declaration -> if_statement .)
    empty           reduce using rule 15 (declaration -> if_statement .)
    include         reduce using rule 15 (declaration -> if_statement .)
    const           reduce using rule 15 (declaration -> if_statement .)
    print           reduce using rule 15 (declaration -> if_statement .)
    echo            reduce using rule 15 (declaration -> if_statement .)
    while           reduce using rule 15 (declaration -> if_statement .)
    if              reduce using rule 15 (declaration -> if_statement .)
    function        reduce using rule 15 (declaration -> if_statement .)
    ID              reduce using rule 15 (declaration -> if_statement .)
    class           reduce using rule 15 (declaration -> if_statement .)
    new             reduce using rule 15 (declaration -> if_statement .)
    CLOSE_TAG       reduce using rule 15 (declaration -> if_statement .)
    for             reduce using rule 15 (declaration -> if_statement .)
    foreach         reduce using rule 15 (declaration -> if_statement .)
    exit            reduce using rule 15 (declaration -> if_statement .)
    VARIABLE        reduce using rule 15 (declaration -> if_statement .)
    $end            reduce using rule 15 (declaration -> if_statement .)
    RBLOCK          reduce using rule 15 (declaration -> if_statement .)


state 16

    (16) declaration -> fun_declaration .

    COMMENT         reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_HASHTAG reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_MULTI   reduce using rule 16 (declaration -> fun_declaration .)
    empty           reduce using rule 16 (declaration -> fun_declaration .)
    include         reduce using rule 16 (declaration -> fun_declaration .)
    const           reduce using rule 16 (declaration -> fun_declaration .)
    print           reduce using rule 16 (declaration -> fun_declaration .)
    echo            reduce using rule 16 (declaration -> fun_declaration .)
    while           reduce using rule 16 (declaration -> fun_declaration .)
    if              reduce using rule 16 (declaration -> fun_declaration .)
    function        reduce using rule 16 (declaration -> fun_declaration .)
    ID              reduce using rule 16 (declaration -> fun_declaration .)
    class           reduce using rule 16 (declaration -> fun_declaration .)
    new             reduce using rule 16 (declaration -> fun_declaration .)
    CLOSE_TAG       reduce using rule 16 (declaration -> fun_declaration .)
    for             reduce using rule 16 (declaration -> fun_declaration .)
    foreach         reduce using rule 16 (declaration -> fun_declaration .)
    exit            reduce using rule 16 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 16 (declaration -> fun_declaration .)
    $end            reduce using rule 16 (declaration -> fun_declaration .)
    RBLOCK          reduce using rule 16 (declaration -> fun_declaration .)


state 17

    (17) declaration -> fun_call .

    COMMENT         reduce using rule 17 (declaration -> fun_call .)
    COMMENT_HASHTAG reduce using rule 17 (declaration -> fun_call .)
    COMMENT_MULTI   reduce using rule 17 (declaration -> fun_call .)
    empty           reduce using rule 17 (declaration -> fun_call .)
    include         reduce using rule 17 (declaration -> fun_call .)
    const           reduce using rule 17 (declaration -> fun_call .)
    print           reduce using rule 17 (declaration -> fun_call .)
    echo            reduce using rule 17 (declaration -> fun_call .)
    while           reduce using rule 17 (declaration -> fun_call .)
    if              reduce using rule 17 (declaration -> fun_call .)
    function        reduce using rule 17 (declaration -> fun_call .)
    ID              reduce using rule 17 (declaration -> fun_call .)
    class           reduce using rule 17 (declaration -> fun_call .)
    new             reduce using rule 17 (declaration -> fun_call .)
    CLOSE_TAG       reduce using rule 17 (declaration -> fun_call .)
    for             reduce using rule 17 (declaration -> fun_call .)
    foreach         reduce using rule 17 (declaration -> fun_call .)
    exit            reduce using rule 17 (declaration -> fun_call .)
    VARIABLE        reduce using rule 17 (declaration -> fun_call .)
    $end            reduce using rule 17 (declaration -> fun_call .)
    RBLOCK          reduce using rule 17 (declaration -> fun_call .)


state 18

    (18) declaration -> obj_declaration .

    COMMENT         reduce using rule 18 (declaration -> obj_declaration .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> obj_declaration .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> obj_declaration .)
    empty           reduce using rule 18 (declaration -> obj_declaration .)
    include         reduce using rule 18 (declaration -> obj_declaration .)
    const           reduce using rule 18 (declaration -> obj_declaration .)
    print           reduce using rule 18 (declaration -> obj_declaration .)
    echo            reduce using rule 18 (declaration -> obj_declaration .)
    while           reduce using rule 18 (declaration -> obj_declaration .)
    if              reduce using rule 18 (declaration -> obj_declaration .)
    function        reduce using rule 18 (declaration -> obj_declaration .)
    ID              reduce using rule 18 (declaration -> obj_declaration .)
    class           reduce using rule 18 (declaration -> obj_declaration .)
    new             reduce using rule 18 (declaration -> obj_declaration .)
    CLOSE_TAG       reduce using rule 18 (declaration -> obj_declaration .)
    for             reduce using rule 18 (declaration -> obj_declaration .)
    foreach         reduce using rule 18 (declaration -> obj_declaration .)
    exit            reduce using rule 18 (declaration -> obj_declaration .)
    VARIABLE        reduce using rule 18 (declaration -> obj_declaration .)
    $end            reduce using rule 18 (declaration -> obj_declaration .)
    RBLOCK          reduce using rule 18 (declaration -> obj_declaration .)


state 19

    (19) declaration -> create_obj_declaration .

    COMMENT         reduce using rule 19 (declaration -> create_obj_declaration .)
    COMMENT_HASHTAG reduce using rule 19 (declaration -> create_obj_declaration .)
    COMMENT_MULTI   reduce using rule 19 (declaration -> create_obj_declaration .)
    empty           reduce using rule 19 (declaration -> create_obj_declaration .)
    include         reduce using rule 19 (declaration -> create_obj_declaration .)
    const           reduce using rule 19 (declaration -> create_obj_declaration .)
    print           reduce using rule 19 (declaration -> create_obj_declaration .)
    echo            reduce using rule 19 (declaration -> create_obj_declaration .)
    while           reduce using rule 19 (declaration -> create_obj_declaration .)
    if              reduce using rule 19 (declaration -> create_obj_declaration .)
    function        reduce using rule 19 (declaration -> create_obj_declaration .)
    ID              reduce using rule 19 (declaration -> create_obj_declaration .)
    class           reduce using rule 19 (declaration -> create_obj_declaration .)
    new             reduce using rule 19 (declaration -> create_obj_declaration .)
    CLOSE_TAG       reduce using rule 19 (declaration -> create_obj_declaration .)
    for             reduce using rule 19 (declaration -> create_obj_declaration .)
    foreach         reduce using rule 19 (declaration -> create_obj_declaration .)
    exit            reduce using rule 19 (declaration -> create_obj_declaration .)
    VARIABLE        reduce using rule 19 (declaration -> create_obj_declaration .)
    $end            reduce using rule 19 (declaration -> create_obj_declaration .)
    RBLOCK          reduce using rule 19 (declaration -> create_obj_declaration .)


state 20

    (20) declaration -> footer_declaration .

    COMMENT         reduce using rule 20 (declaration -> footer_declaration .)
    COMMENT_HASHTAG reduce using rule 20 (declaration -> footer_declaration .)
    COMMENT_MULTI   reduce using rule 20 (declaration -> footer_declaration .)
    empty           reduce using rule 20 (declaration -> footer_declaration .)
    include         reduce using rule 20 (declaration -> footer_declaration .)
    const           reduce using rule 20 (declaration -> footer_declaration .)
    print           reduce using rule 20 (declaration -> footer_declaration .)
    echo            reduce using rule 20 (declaration -> footer_declaration .)
    while           reduce using rule 20 (declaration -> footer_declaration .)
    if              reduce using rule 20 (declaration -> footer_declaration .)
    function        reduce using rule 20 (declaration -> footer_declaration .)
    ID              reduce using rule 20 (declaration -> footer_declaration .)
    class           reduce using rule 20 (declaration -> footer_declaration .)
    new             reduce using rule 20 (declaration -> footer_declaration .)
    CLOSE_TAG       reduce using rule 20 (declaration -> footer_declaration .)
    for             reduce using rule 20 (declaration -> footer_declaration .)
    foreach         reduce using rule 20 (declaration -> footer_declaration .)
    exit            reduce using rule 20 (declaration -> footer_declaration .)
    VARIABLE        reduce using rule 20 (declaration -> footer_declaration .)
    $end            reduce using rule 20 (declaration -> footer_declaration .)
    RBLOCK          reduce using rule 20 (declaration -> footer_declaration .)


state 21

    (21) declaration -> for_loop .

    COMMENT         reduce using rule 21 (declaration -> for_loop .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> for_loop .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> for_loop .)
    empty           reduce using rule 21 (declaration -> for_loop .)
    include         reduce using rule 21 (declaration -> for_loop .)
    const           reduce using rule 21 (declaration -> for_loop .)
    print           reduce using rule 21 (declaration -> for_loop .)
    echo            reduce using rule 21 (declaration -> for_loop .)
    while           reduce using rule 21 (declaration -> for_loop .)
    if              reduce using rule 21 (declaration -> for_loop .)
    function        reduce using rule 21 (declaration -> for_loop .)
    ID              reduce using rule 21 (declaration -> for_loop .)
    class           reduce using rule 21 (declaration -> for_loop .)
    new             reduce using rule 21 (declaration -> for_loop .)
    CLOSE_TAG       reduce using rule 21 (declaration -> for_loop .)
    for             reduce using rule 21 (declaration -> for_loop .)
    foreach         reduce using rule 21 (declaration -> for_loop .)
    exit            reduce using rule 21 (declaration -> for_loop .)
    VARIABLE        reduce using rule 21 (declaration -> for_loop .)
    $end            reduce using rule 21 (declaration -> for_loop .)
    RBLOCK          reduce using rule 21 (declaration -> for_loop .)


state 22

    (22) declaration -> foreach_loop .

    COMMENT         reduce using rule 22 (declaration -> foreach_loop .)
    COMMENT_HASHTAG reduce using rule 22 (declaration -> foreach_loop .)
    COMMENT_MULTI   reduce using rule 22 (declaration -> foreach_loop .)
    empty           reduce using rule 22 (declaration -> foreach_loop .)
    include         reduce using rule 22 (declaration -> foreach_loop .)
    const           reduce using rule 22 (declaration -> foreach_loop .)
    print           reduce using rule 22 (declaration -> foreach_loop .)
    echo            reduce using rule 22 (declaration -> foreach_loop .)
    while           reduce using rule 22 (declaration -> foreach_loop .)
    if              reduce using rule 22 (declaration -> foreach_loop .)
    function        reduce using rule 22 (declaration -> foreach_loop .)
    ID              reduce using rule 22 (declaration -> foreach_loop .)
    class           reduce using rule 22 (declaration -> foreach_loop .)
    new             reduce using rule 22 (declaration -> foreach_loop .)
    CLOSE_TAG       reduce using rule 22 (declaration -> foreach_loop .)
    for             reduce using rule 22 (declaration -> foreach_loop .)
    foreach         reduce using rule 22 (declaration -> foreach_loop .)
    exit            reduce using rule 22 (declaration -> foreach_loop .)
    VARIABLE        reduce using rule 22 (declaration -> foreach_loop .)
    $end            reduce using rule 22 (declaration -> foreach_loop .)
    RBLOCK          reduce using rule 22 (declaration -> foreach_loop .)


state 23

    (23) declaration -> exit_statement .

    COMMENT         reduce using rule 23 (declaration -> exit_statement .)
    COMMENT_HASHTAG reduce using rule 23 (declaration -> exit_statement .)
    COMMENT_MULTI   reduce using rule 23 (declaration -> exit_statement .)
    empty           reduce using rule 23 (declaration -> exit_statement .)
    include         reduce using rule 23 (declaration -> exit_statement .)
    const           reduce using rule 23 (declaration -> exit_statement .)
    print           reduce using rule 23 (declaration -> exit_statement .)
    echo            reduce using rule 23 (declaration -> exit_statement .)
    while           reduce using rule 23 (declaration -> exit_statement .)
    if              reduce using rule 23 (declaration -> exit_statement .)
    function        reduce using rule 23 (declaration -> exit_statement .)
    ID              reduce using rule 23 (declaration -> exit_statement .)
    class           reduce using rule 23 (declaration -> exit_statement .)
    new             reduce using rule 23 (declaration -> exit_statement .)
    CLOSE_TAG       reduce using rule 23 (declaration -> exit_statement .)
    for             reduce using rule 23 (declaration -> exit_statement .)
    foreach         reduce using rule 23 (declaration -> exit_statement .)
    exit            reduce using rule 23 (declaration -> exit_statement .)
    VARIABLE        reduce using rule 23 (declaration -> exit_statement .)
    $end            reduce using rule 23 (declaration -> exit_statement .)
    RBLOCK          reduce using rule 23 (declaration -> exit_statement .)


state 24

    (24) declaration -> empty .

    COMMENT         reduce using rule 24 (declaration -> empty .)
    COMMENT_HASHTAG reduce using rule 24 (declaration -> empty .)
    COMMENT_MULTI   reduce using rule 24 (declaration -> empty .)
    empty           reduce using rule 24 (declaration -> empty .)
    include         reduce using rule 24 (declaration -> empty .)
    const           reduce using rule 24 (declaration -> empty .)
    print           reduce using rule 24 (declaration -> empty .)
    echo            reduce using rule 24 (declaration -> empty .)
    while           reduce using rule 24 (declaration -> empty .)
    if              reduce using rule 24 (declaration -> empty .)
    function        reduce using rule 24 (declaration -> empty .)
    ID              reduce using rule 24 (declaration -> empty .)
    class           reduce using rule 24 (declaration -> empty .)
    new             reduce using rule 24 (declaration -> empty .)
    CLOSE_TAG       reduce using rule 24 (declaration -> empty .)
    for             reduce using rule 24 (declaration -> empty .)
    foreach         reduce using rule 24 (declaration -> empty .)
    exit            reduce using rule 24 (declaration -> empty .)
    VARIABLE        reduce using rule 24 (declaration -> empty .)
    $end            reduce using rule 24 (declaration -> empty .)
    RBLOCK          reduce using rule 24 (declaration -> empty .)


state 25

    (27) header_declaration -> include . CADENA SEMICOLON

    CADENA          shift and go to state 42


state 26

    (37) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 43


state 27

    (28) constant_declaration -> const . ID EQUAL data_type SEMICOLON

    ID              shift and go to state 44


state 28

    (89) fun_call -> ID . LPAREN params RPAREN

    LPAREN          shift and go to state 45


state 29

    (29) print_declaration -> print . var_declaration2 SEMICOLON
    (30) print_declaration -> print . LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> print . LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> print . data_type SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    LPAREN          shift and go to state 47
    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 46
    data_type                      shift and go to state 48

state 30

    (33) echo_declaration -> echo . var_declaration2 SEMICOLON
    (34) echo_declaration -> echo . LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> echo . LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> echo . data_type SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    LPAREN          shift and go to state 52
    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 51
    data_type                      shift and go to state 53

state 31

    (52) iteration_stmt -> while . LPAREN expression RPAREN LBLOCK declaration RBLOCK

    LPAREN          shift and go to state 54


state 32

    (83) if_statement -> if . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 55


state 33

    (88) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration RBLOCK

    ID              shift and go to state 56


state 34

    (90) obj_declaration -> class . ID LBLOCK declaration RBLOCK

    ID              shift and go to state 57


state 35

    (91) create_obj_declaration -> new . ID LPAREN params RPAREN

    ID              shift and go to state 58


state 36

    (3) footer_declaration -> CLOSE_TAG .

    COMMENT         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_HASHTAG reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_MULTI   reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    empty           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    const           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    print           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    echo            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    while           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    if              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    function        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    ID              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    class           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    new             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    for             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    foreach         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exit            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    VARIABLE        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    $end            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    RBLOCK          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)


state 37

    (97) for_loop -> for . LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK

    LPAREN          shift and go to state 59


state 38

    (102) foreach_loop -> foreach . LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK

    LPAREN          shift and go to state 60


state 39

    (101) exit_statement -> exit . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 61


state 40

    (38) var_declaration2 -> VARIABLE .
    (39) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (40) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (41) var_declaration2 -> VARIABLE . EQUAL CADENA
    (42) var_declaration2 -> VARIABLE . EQUAL array_declaration
    (43) var_declaration2 -> VARIABLE . EQUAL expression
    (44) var_declaration2 -> VARIABLE . assignment_tail
    (45) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (46) assignment_tail -> . COMMA var_declaration2
    (47) assignment_tail -> . LBRACKET params RBRACKET
    (48) assignment_tail -> . LBLOCK params RBLOCK
    (49) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (50) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (51) assignment_tail -> . VARIABLE LBLOCK params RBLOCK

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 38 (var_declaration2 -> VARIABLE .)
    RPAREN          reduce using rule 38 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 38 (var_declaration2 -> VARIABLE .)
    RBLOCK          reduce using rule 38 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 63
    COMMA           shift and go to state 65
    LBRACKET        shift and go to state 66
    LBLOCK          shift and go to state 67
    VARIABLE        shift and go to state 62

  ! COMMA           [ reduce using rule 38 (var_declaration2 -> VARIABLE .) ]

    assignment_tail                shift and go to state 64

state 41

    (5) declaration_list -> declaration_list declaration .

    COMMENT         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_HASHTAG reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_MULTI   reduce using rule 5 (declaration_list -> declaration_list declaration .)
    empty           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    const           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    print           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    echo            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    while           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    if              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    function        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    class           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    new             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    for             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    foreach         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exit            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    RBLOCK          reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 42

    (27) header_declaration -> include CADENA . SEMICOLON

    SEMICOLON       shift and go to state 68


state 43

    (37) var_declaration -> var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    empty           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    include         reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    const           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    print           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    echo            reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    while           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    if              reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    function        reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    class           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    new             reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    for             reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    foreach         reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    exit            reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    $end            reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)


state 44

    (28) constant_declaration -> const ID . EQUAL data_type SEMICOLON

    EQUAL           shift and go to state 69


state 45

    (89) fun_call -> ID LPAREN . params RPAREN
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RPAREN          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 70
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 46

    (29) print_declaration -> print var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 75


state 47

    (30) print_declaration -> print LPAREN . var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> print LPAREN . data_type RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 76
    data_type                      shift and go to state 77

state 48

    (32) print_declaration -> print data_type . SEMICOLON

    SEMICOLON       shift and go to state 78


state 49

    (25) data_type -> NUMBER .

    SEMICOLON       reduce using rule 25 (data_type -> NUMBER .)
    RPAREN          reduce using rule 25 (data_type -> NUMBER .)
    COMMA           reduce using rule 25 (data_type -> NUMBER .)
    RBRACKET        reduce using rule 25 (data_type -> NUMBER .)
    RBLOCK          reduce using rule 25 (data_type -> NUMBER .)


state 50

    (26) data_type -> CADENA .

    SEMICOLON       reduce using rule 26 (data_type -> CADENA .)
    RPAREN          reduce using rule 26 (data_type -> CADENA .)
    COMMA           reduce using rule 26 (data_type -> CADENA .)
    RBRACKET        reduce using rule 26 (data_type -> CADENA .)
    RBLOCK          reduce using rule 26 (data_type -> CADENA .)


state 51

    (33) echo_declaration -> echo var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 79


state 52

    (34) echo_declaration -> echo LPAREN . var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> echo LPAREN . data_type RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 80
    data_type                      shift and go to state 81

state 53

    (36) echo_declaration -> echo data_type . SEMICOLON

    SEMICOLON       shift and go to state 82


state 54

    (52) iteration_stmt -> while LPAREN . expression RPAREN LBLOCK declaration RBLOCK
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 84
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 55

    (83) if_statement -> if LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 93
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 56

    (88) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration RBLOCK

    LPAREN          shift and go to state 94


state 57

    (90) obj_declaration -> class ID . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 95


state 58

    (91) create_obj_declaration -> new ID . LPAREN params RPAREN

    LPAREN          shift and go to state 96


state 59

    (97) for_loop -> for LPAREN . for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (98) for_init -> . var_declaration2 SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    VARIABLE        shift and go to state 40

    for_init                       shift and go to state 97
    var_declaration2               shift and go to state 98

state 60

    (102) foreach_loop -> foreach LPAREN . expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 99
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 61

    (101) exit_statement -> exit LPAREN . expression RPAREN SEMICOLON
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 100
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 62

    (49) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (50) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (51) assignment_tail -> VARIABLE . LBLOCK params RBLOCK

    LBRACKET        shift and go to state 101
    LBLOCK          shift and go to state 102


state 63

    (39) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (40) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (41) var_declaration2 -> VARIABLE EQUAL . CADENA
    (42) var_declaration2 -> VARIABLE EQUAL . array_declaration
    (43) var_declaration2 -> VARIABLE EQUAL . expression
    (45) var_declaration2 -> VARIABLE EQUAL . assignment_tail
    (103) array_declaration -> . array LPAREN params RPAREN
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (46) assignment_tail -> . COMMA var_declaration2
    (47) assignment_tail -> . LBRACKET params RBRACKET
    (48) assignment_tail -> . LBLOCK params RBLOCK
    (49) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (50) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (51) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 104
    VARIABLE        shift and go to state 103
    CADENA          shift and go to state 105
    array           shift and go to state 109
    COMMA           shift and go to state 65
    LBRACKET        shift and go to state 66
    LBLOCK          shift and go to state 67
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    array_declaration              shift and go to state 106
    expression                     shift and go to state 107
    assignment_tail                shift and go to state 108
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 64

    (44) var_declaration2 -> VARIABLE assignment_tail .

    SEMICOLON       reduce using rule 44 (var_declaration2 -> VARIABLE assignment_tail .)
    RPAREN          reduce using rule 44 (var_declaration2 -> VARIABLE assignment_tail .)
    COMMA           reduce using rule 44 (var_declaration2 -> VARIABLE assignment_tail .)
    RBRACKET        reduce using rule 44 (var_declaration2 -> VARIABLE assignment_tail .)
    RBLOCK          reduce using rule 44 (var_declaration2 -> VARIABLE assignment_tail .)


state 65

    (46) assignment_tail -> COMMA . var_declaration2
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    VARIABLE        shift and go to state 40

    var_declaration2               shift and go to state 110

state 66

    (47) assignment_tail -> LBRACKET . params RBRACKET
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RBRACKET        reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 111
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 67

    (48) assignment_tail -> LBLOCK . params RBLOCK
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RBLOCK          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 112
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 68

    (27) header_declaration -> include CADENA SEMICOLON .

    COMMENT         reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    empty           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    include         reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    const           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    print           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    echo            reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    while           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    if              reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    function        reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    ID              reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    class           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    new             reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    for             reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    foreach         reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    exit            reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    VARIABLE        reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    $end            reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    RBLOCK          reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)


state 69

    (28) constant_declaration -> const ID EQUAL . data_type SEMICOLON
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    data_type                      shift and go to state 113

state 70

    (89) fun_call -> ID LPAREN params . RPAREN
    (93) params -> params . COMMA single_param

    RPAREN          shift and go to state 114
    COMMA           shift and go to state 115


state 71

    (92) params -> single_param .

    RPAREN          reduce using rule 92 (params -> single_param .)
    COMMA           reduce using rule 92 (params -> single_param .)
    RBRACKET        reduce using rule 92 (params -> single_param .)
    RBLOCK          reduce using rule 92 (params -> single_param .)
    SEMICOLON       reduce using rule 92 (params -> single_param .)


state 72

    (94) single_param -> var_declaration2 .

    RPAREN          reduce using rule 94 (single_param -> var_declaration2 .)
    COMMA           reduce using rule 94 (single_param -> var_declaration2 .)
    RBRACKET        reduce using rule 94 (single_param -> var_declaration2 .)
    RBLOCK          reduce using rule 94 (single_param -> var_declaration2 .)
    SEMICOLON       reduce using rule 94 (single_param -> var_declaration2 .)


state 73

    (95) single_param -> data_type .

    RPAREN          reduce using rule 95 (single_param -> data_type .)
    COMMA           reduce using rule 95 (single_param -> data_type .)
    RBRACKET        reduce using rule 95 (single_param -> data_type .)
    RBLOCK          reduce using rule 95 (single_param -> data_type .)
    SEMICOLON       reduce using rule 95 (single_param -> data_type .)


state 74

    (96) single_param -> empty_function .

    RPAREN          reduce using rule 96 (single_param -> empty_function .)
    COMMA           reduce using rule 96 (single_param -> empty_function .)
    RBRACKET        reduce using rule 96 (single_param -> empty_function .)
    RBLOCK          reduce using rule 96 (single_param -> empty_function .)
    SEMICOLON       reduce using rule 96 (single_param -> empty_function .)


state 75

    (29) print_declaration -> print var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    empty           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    include         reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    const           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    print           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    echo            reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    while           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    if              reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    function        reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    ID              reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    class           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    new             reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    for             reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    foreach         reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    exit            reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    $end            reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)


state 76

    (30) print_declaration -> print LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 116


state 77

    (31) print_declaration -> print LPAREN data_type . RPAREN SEMICOLON

    RPAREN          shift and go to state 117


state 78

    (32) print_declaration -> print data_type SEMICOLON .

    COMMENT         reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    empty           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    include         reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    const           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    print           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    echo            reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    while           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    if              reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    function        reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    ID              reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    class           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    new             reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    for             reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    foreach         reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    exit            reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    VARIABLE        reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    $end            reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    RBLOCK          reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)


state 79

    (33) echo_declaration -> echo var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    empty           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include         reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    const           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    print           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    echo            reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    while           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    if              reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    function        reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    ID              reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    class           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    new             reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    for             reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    foreach         reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exit            reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    $end            reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)


state 80

    (34) echo_declaration -> echo LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 118


state 81

    (35) echo_declaration -> echo LPAREN data_type . RPAREN SEMICOLON

    RPAREN          shift and go to state 119


state 82

    (36) echo_declaration -> echo data_type SEMICOLON .

    COMMENT         reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    empty           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    include         reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    const           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    print           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    echo            reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    while           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    if              reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    function        reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    ID              reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    class           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    new             reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    for             reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    foreach         reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    exit            reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    VARIABLE        reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    $end            reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    RBLOCK          reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)


state 83

    (64) factor -> LPAREN . expression RPAREN
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 120
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 84

    (52) iteration_stmt -> while LPAREN expression . RPAREN LBLOCK declaration RBLOCK

    RPAREN          shift and go to state 121


state 85

    (53) expression -> additive_expression .
    (54) expression -> additive_expression . logical_op additive_expression
    (55) expression -> additive_expression . comp_op additive_expression
    (56) expression -> additive_expression . comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (78) logical_op -> . BOOL_OR
    (79) logical_op -> . BOOL_AND
    (80) logical_op -> . NOT
    (81) logical_op -> . or
    (82) logical_op -> . and
    (71) comp_op -> . LESS
    (72) comp_op -> . LESSEQUAL
    (73) comp_op -> . GREATER
    (74) comp_op -> . GREATEREQUAL
    (75) comp_op -> . DEQUAL
    (76) comp_op -> . DISTINT
    (77) comp_op -> . ISEQUAL

    RPAREN          reduce using rule 53 (expression -> additive_expression .)
    as              reduce using rule 53 (expression -> additive_expression .)
    SEMICOLON       reduce using rule 53 (expression -> additive_expression .)
    COMMA           reduce using rule 53 (expression -> additive_expression .)
    RBRACKET        reduce using rule 53 (expression -> additive_expression .)
    RBLOCK          reduce using rule 53 (expression -> additive_expression .)
    BOOL_OR         shift and go to state 124
    BOOL_AND        shift and go to state 125
    NOT             shift and go to state 126
    or              shift and go to state 127
    and             shift and go to state 128
    LESS            shift and go to state 129
    LESSEQUAL       shift and go to state 130
    GREATER         shift and go to state 131
    GREATEREQUAL    shift and go to state 132
    DEQUAL          shift and go to state 133
    DISTINT         shift and go to state 134
    ISEQUAL         shift and go to state 135

    logical_op                     shift and go to state 122
    comp_op                        shift and go to state 123

state 86

    (57) additive_expression -> term .
    (58) additive_expression -> term . math_op term
    (67) math_op -> . PLUS
    (68) math_op -> . MINUS
    (69) math_op -> . TIMES
    (70) math_op -> . DIVIDE

    BOOL_OR         reduce using rule 57 (additive_expression -> term .)
    BOOL_AND        reduce using rule 57 (additive_expression -> term .)
    NOT             reduce using rule 57 (additive_expression -> term .)
    or              reduce using rule 57 (additive_expression -> term .)
    and             reduce using rule 57 (additive_expression -> term .)
    LESS            reduce using rule 57 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 57 (additive_expression -> term .)
    GREATER         reduce using rule 57 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 57 (additive_expression -> term .)
    DEQUAL          reduce using rule 57 (additive_expression -> term .)
    DISTINT         reduce using rule 57 (additive_expression -> term .)
    ISEQUAL         reduce using rule 57 (additive_expression -> term .)
    RPAREN          reduce using rule 57 (additive_expression -> term .)
    as              reduce using rule 57 (additive_expression -> term .)
    SEMICOLON       reduce using rule 57 (additive_expression -> term .)
    COMMA           reduce using rule 57 (additive_expression -> term .)
    RBRACKET        reduce using rule 57 (additive_expression -> term .)
    RBLOCK          reduce using rule 57 (additive_expression -> term .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    TIMES           shift and go to state 139
    DIVIDE          shift and go to state 140

    math_op                        shift and go to state 136

state 87

    (59) term -> factor .
    (60) term -> factor . increment_decrement_op
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    PLUS            reduce using rule 59 (term -> factor .)
    MINUS           reduce using rule 59 (term -> factor .)
    TIMES           reduce using rule 59 (term -> factor .)
    DIVIDE          reduce using rule 59 (term -> factor .)
    BOOL_OR         reduce using rule 59 (term -> factor .)
    BOOL_AND        reduce using rule 59 (term -> factor .)
    NOT             reduce using rule 59 (term -> factor .)
    or              reduce using rule 59 (term -> factor .)
    and             reduce using rule 59 (term -> factor .)
    LESS            reduce using rule 59 (term -> factor .)
    LESSEQUAL       reduce using rule 59 (term -> factor .)
    GREATER         reduce using rule 59 (term -> factor .)
    GREATEREQUAL    reduce using rule 59 (term -> factor .)
    DEQUAL          reduce using rule 59 (term -> factor .)
    DISTINT         reduce using rule 59 (term -> factor .)
    ISEQUAL         reduce using rule 59 (term -> factor .)
    RPAREN          reduce using rule 59 (term -> factor .)
    as              reduce using rule 59 (term -> factor .)
    SEMICOLON       reduce using rule 59 (term -> factor .)
    COMMA           reduce using rule 59 (term -> factor .)
    RBRACKET        reduce using rule 59 (term -> factor .)
    RBLOCK          reduce using rule 59 (term -> factor .)
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    increment_decrement_op         shift and go to state 141

state 88

    (61) term -> increment_decrement_op . factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83

    factor                         shift and go to state 142

state 89

    (62) factor -> NUMBER .

    PLUSPLUS        reduce using rule 62 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 62 (factor -> NUMBER .)
    PLUS            reduce using rule 62 (factor -> NUMBER .)
    MINUS           reduce using rule 62 (factor -> NUMBER .)
    TIMES           reduce using rule 62 (factor -> NUMBER .)
    DIVIDE          reduce using rule 62 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 62 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 62 (factor -> NUMBER .)
    NOT             reduce using rule 62 (factor -> NUMBER .)
    or              reduce using rule 62 (factor -> NUMBER .)
    and             reduce using rule 62 (factor -> NUMBER .)
    LESS            reduce using rule 62 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 62 (factor -> NUMBER .)
    GREATER         reduce using rule 62 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 62 (factor -> NUMBER .)
    DEQUAL          reduce using rule 62 (factor -> NUMBER .)
    DISTINT         reduce using rule 62 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 62 (factor -> NUMBER .)
    RPAREN          reduce using rule 62 (factor -> NUMBER .)
    as              reduce using rule 62 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 62 (factor -> NUMBER .)
    COMMA           reduce using rule 62 (factor -> NUMBER .)
    RBRACKET        reduce using rule 62 (factor -> NUMBER .)
    RBLOCK          reduce using rule 62 (factor -> NUMBER .)


state 90

    (63) factor -> VARIABLE .

    PLUSPLUS        reduce using rule 63 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 63 (factor -> VARIABLE .)
    PLUS            reduce using rule 63 (factor -> VARIABLE .)
    MINUS           reduce using rule 63 (factor -> VARIABLE .)
    TIMES           reduce using rule 63 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 63 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 63 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 63 (factor -> VARIABLE .)
    NOT             reduce using rule 63 (factor -> VARIABLE .)
    or              reduce using rule 63 (factor -> VARIABLE .)
    and             reduce using rule 63 (factor -> VARIABLE .)
    LESS            reduce using rule 63 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 63 (factor -> VARIABLE .)
    GREATER         reduce using rule 63 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 63 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 63 (factor -> VARIABLE .)
    DISTINT         reduce using rule 63 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 63 (factor -> VARIABLE .)
    RPAREN          reduce using rule 63 (factor -> VARIABLE .)
    as              reduce using rule 63 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 63 (factor -> VARIABLE .)
    COMMA           reduce using rule 63 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 63 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 63 (factor -> VARIABLE .)


state 91

    (65) increment_decrement_op -> PLUSPLUS .

    NUMBER          reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    VARIABLE        reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    LPAREN          reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    PLUS            reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    MINUS           reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    TIMES           reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    DIVIDE          reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    BOOL_OR         reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    BOOL_AND        reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    NOT             reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    or              reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    and             reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    LESS            reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    LESSEQUAL       reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    GREATER         reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    GREATEREQUAL    reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    DEQUAL          reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    DISTINT         reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    ISEQUAL         reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    RPAREN          reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    as              reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    SEMICOLON       reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    COMMA           reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    RBRACKET        reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)
    RBLOCK          reduce using rule 65 (increment_decrement_op -> PLUSPLUS .)


state 92

    (66) increment_decrement_op -> MINUSMINUS .

    NUMBER          reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    VARIABLE        reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    LPAREN          reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    PLUS            reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    MINUS           reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    TIMES           reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    DIVIDE          reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    BOOL_OR         reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    BOOL_AND        reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    NOT             reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    or              reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    and             reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    LESS            reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    LESSEQUAL       reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    GREATER         reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    GREATEREQUAL    reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    DEQUAL          reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    DISTINT         reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    ISEQUAL         reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    RPAREN          reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    as              reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    SEMICOLON       reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    COMMA           reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    RBRACKET        reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)
    RBLOCK          reduce using rule 66 (increment_decrement_op -> MINUSMINUS .)


state 93

    (83) if_statement -> if LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 143


state 94

    (88) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration RBLOCK
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RPAREN          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 144
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 95

    (90) obj_declaration -> class ID LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 145
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 96

    (91) create_obj_declaration -> new ID LPAREN . params RPAREN
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RPAREN          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 146
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 97

    (97) for_loop -> for LPAREN for_init . for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (99) for_expr -> . expression SEMICOLON
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    for_expr                       shift and go to state 147
    expression                     shift and go to state 148
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 98

    (98) for_init -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 149


state 99

    (102) foreach_loop -> foreach LPAREN expression . as expression RPAREN LBLOCK declaration_list RBLOCK

    as              shift and go to state 150


state 100

    (101) exit_statement -> exit LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 151


state 101

    (49) assignment_tail -> VARIABLE LBRACKET . expression COMMA params
    (50) assignment_tail -> VARIABLE LBRACKET . params RBRACKET
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    VARIABLE        shift and go to state 152
    NUMBER          shift and go to state 155
    CADENA          shift and go to state 50
    RBRACKET        reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 153
    params                         shift and go to state 154
    additive_expression            shift and go to state 85
    single_param                   shift and go to state 71
    term                           shift and go to state 86
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 102

    (51) assignment_tail -> VARIABLE LBLOCK . params RBLOCK
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RBLOCK          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 156
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 103

    (40) var_declaration2 -> VARIABLE EQUAL VARIABLE .
    (49) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (50) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (51) assignment_tail -> VARIABLE . LBLOCK params RBLOCK
    (63) factor -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    SEMICOLON       reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RPAREN          reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COMMA           reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBRACKET        reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBLOCK          reduce using rule 40 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    LBRACKET        shift and go to state 101
    LBLOCK          shift and go to state 102
    PLUSPLUS        reduce using rule 63 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 63 (factor -> VARIABLE .)
    PLUS            reduce using rule 63 (factor -> VARIABLE .)
    MINUS           reduce using rule 63 (factor -> VARIABLE .)
    TIMES           reduce using rule 63 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 63 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 63 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 63 (factor -> VARIABLE .)
    NOT             reduce using rule 63 (factor -> VARIABLE .)
    or              reduce using rule 63 (factor -> VARIABLE .)
    and             reduce using rule 63 (factor -> VARIABLE .)
    LESS            reduce using rule 63 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 63 (factor -> VARIABLE .)
    GREATER         reduce using rule 63 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 63 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 63 (factor -> VARIABLE .)
    DISTINT         reduce using rule 63 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 63 (factor -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! RBLOCK          [ reduce using rule 63 (factor -> VARIABLE .) ]


state 104

    (39) var_declaration2 -> VARIABLE EQUAL NUMBER .
    (62) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    SEMICOLON       reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RPAREN          reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COMMA           reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBRACKET        reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBLOCK          reduce using rule 39 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    PLUSPLUS        reduce using rule 62 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 62 (factor -> NUMBER .)
    PLUS            reduce using rule 62 (factor -> NUMBER .)
    MINUS           reduce using rule 62 (factor -> NUMBER .)
    TIMES           reduce using rule 62 (factor -> NUMBER .)
    DIVIDE          reduce using rule 62 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 62 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 62 (factor -> NUMBER .)
    NOT             reduce using rule 62 (factor -> NUMBER .)
    or              reduce using rule 62 (factor -> NUMBER .)
    and             reduce using rule 62 (factor -> NUMBER .)
    LESS            reduce using rule 62 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 62 (factor -> NUMBER .)
    GREATER         reduce using rule 62 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 62 (factor -> NUMBER .)
    DEQUAL          reduce using rule 62 (factor -> NUMBER .)
    DISTINT         reduce using rule 62 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 62 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 62 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 62 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 62 (factor -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 62 (factor -> NUMBER .) ]
  ! RBLOCK          [ reduce using rule 62 (factor -> NUMBER .) ]


state 105

    (41) var_declaration2 -> VARIABLE EQUAL CADENA .

    SEMICOLON       reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RPAREN          reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COMMA           reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBRACKET        reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBLOCK          reduce using rule 41 (var_declaration2 -> VARIABLE EQUAL CADENA .)


state 106

    (42) var_declaration2 -> VARIABLE EQUAL array_declaration .

    SEMICOLON       reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL array_declaration .)
    RPAREN          reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL array_declaration .)
    COMMA           reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL array_declaration .)
    RBRACKET        reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL array_declaration .)
    RBLOCK          reduce using rule 42 (var_declaration2 -> VARIABLE EQUAL array_declaration .)


state 107

    (43) var_declaration2 -> VARIABLE EQUAL expression .

    SEMICOLON       reduce using rule 43 (var_declaration2 -> VARIABLE EQUAL expression .)
    RPAREN          reduce using rule 43 (var_declaration2 -> VARIABLE EQUAL expression .)
    COMMA           reduce using rule 43 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBRACKET        reduce using rule 43 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBLOCK          reduce using rule 43 (var_declaration2 -> VARIABLE EQUAL expression .)


state 108

    (45) var_declaration2 -> VARIABLE EQUAL assignment_tail .

    SEMICOLON       reduce using rule 45 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RPAREN          reduce using rule 45 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COMMA           reduce using rule 45 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBRACKET        reduce using rule 45 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBLOCK          reduce using rule 45 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)


state 109

    (103) array_declaration -> array . LPAREN params RPAREN

    LPAREN          shift and go to state 157


state 110

    (46) assignment_tail -> COMMA var_declaration2 .

    SEMICOLON       reduce using rule 46 (assignment_tail -> COMMA var_declaration2 .)
    RPAREN          reduce using rule 46 (assignment_tail -> COMMA var_declaration2 .)
    COMMA           reduce using rule 46 (assignment_tail -> COMMA var_declaration2 .)
    RBRACKET        reduce using rule 46 (assignment_tail -> COMMA var_declaration2 .)
    RBLOCK          reduce using rule 46 (assignment_tail -> COMMA var_declaration2 .)


state 111

    (47) assignment_tail -> LBRACKET params . RBRACKET
    (93) params -> params . COMMA single_param

    RBRACKET        shift and go to state 158
    COMMA           shift and go to state 115


state 112

    (48) assignment_tail -> LBLOCK params . RBLOCK
    (93) params -> params . COMMA single_param

    RBLOCK          shift and go to state 159
    COMMA           shift and go to state 115


state 113

    (28) constant_declaration -> const ID EQUAL data_type . SEMICOLON

    SEMICOLON       shift and go to state 160


state 114

    (89) fun_call -> ID LPAREN params RPAREN .

    COMMENT         reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    empty           reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    include         reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    const           reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    print           reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    echo            reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    while           reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    if              reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    function        reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    class           reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    new             reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    for             reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    foreach         reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    exit            reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 89 (fun_call -> ID LPAREN params RPAREN .)


state 115

    (93) params -> params COMMA . single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    SEMICOLON       reduce using rule 104 (empty_function -> .)
    RPAREN          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)
    RBRACKET        reduce using rule 104 (empty_function -> .)
    RBLOCK          reduce using rule 104 (empty_function -> .)

    single_param                   shift and go to state 161
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 116

    (30) print_declaration -> print LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 162


state 117

    (31) print_declaration -> print LPAREN data_type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 163


state 118

    (34) echo_declaration -> echo LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 119

    (35) echo_declaration -> echo LPAREN data_type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 120

    (64) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 166


state 121

    (52) iteration_stmt -> while LPAREN expression RPAREN . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 167


state 122

    (54) expression -> additive_expression logical_op . additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    additive_expression            shift and go to state 168
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 123

    (55) expression -> additive_expression comp_op . additive_expression
    (56) expression -> additive_expression comp_op . additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    additive_expression            shift and go to state 169
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 124

    (78) logical_op -> BOOL_OR .

    NUMBER          reduce using rule 78 (logical_op -> BOOL_OR .)
    VARIABLE        reduce using rule 78 (logical_op -> BOOL_OR .)
    LPAREN          reduce using rule 78 (logical_op -> BOOL_OR .)
    PLUSPLUS        reduce using rule 78 (logical_op -> BOOL_OR .)
    MINUSMINUS      reduce using rule 78 (logical_op -> BOOL_OR .)


state 125

    (79) logical_op -> BOOL_AND .

    NUMBER          reduce using rule 79 (logical_op -> BOOL_AND .)
    VARIABLE        reduce using rule 79 (logical_op -> BOOL_AND .)
    LPAREN          reduce using rule 79 (logical_op -> BOOL_AND .)
    PLUSPLUS        reduce using rule 79 (logical_op -> BOOL_AND .)
    MINUSMINUS      reduce using rule 79 (logical_op -> BOOL_AND .)


state 126

    (80) logical_op -> NOT .

    NUMBER          reduce using rule 80 (logical_op -> NOT .)
    VARIABLE        reduce using rule 80 (logical_op -> NOT .)
    LPAREN          reduce using rule 80 (logical_op -> NOT .)
    PLUSPLUS        reduce using rule 80 (logical_op -> NOT .)
    MINUSMINUS      reduce using rule 80 (logical_op -> NOT .)


state 127

    (81) logical_op -> or .

    NUMBER          reduce using rule 81 (logical_op -> or .)
    VARIABLE        reduce using rule 81 (logical_op -> or .)
    LPAREN          reduce using rule 81 (logical_op -> or .)
    PLUSPLUS        reduce using rule 81 (logical_op -> or .)
    MINUSMINUS      reduce using rule 81 (logical_op -> or .)


state 128

    (82) logical_op -> and .

    NUMBER          reduce using rule 82 (logical_op -> and .)
    VARIABLE        reduce using rule 82 (logical_op -> and .)
    LPAREN          reduce using rule 82 (logical_op -> and .)
    PLUSPLUS        reduce using rule 82 (logical_op -> and .)
    MINUSMINUS      reduce using rule 82 (logical_op -> and .)


state 129

    (71) comp_op -> LESS .

    NUMBER          reduce using rule 71 (comp_op -> LESS .)
    VARIABLE        reduce using rule 71 (comp_op -> LESS .)
    LPAREN          reduce using rule 71 (comp_op -> LESS .)
    PLUSPLUS        reduce using rule 71 (comp_op -> LESS .)
    MINUSMINUS      reduce using rule 71 (comp_op -> LESS .)


state 130

    (72) comp_op -> LESSEQUAL .

    NUMBER          reduce using rule 72 (comp_op -> LESSEQUAL .)
    VARIABLE        reduce using rule 72 (comp_op -> LESSEQUAL .)
    LPAREN          reduce using rule 72 (comp_op -> LESSEQUAL .)
    PLUSPLUS        reduce using rule 72 (comp_op -> LESSEQUAL .)
    MINUSMINUS      reduce using rule 72 (comp_op -> LESSEQUAL .)


state 131

    (73) comp_op -> GREATER .

    NUMBER          reduce using rule 73 (comp_op -> GREATER .)
    VARIABLE        reduce using rule 73 (comp_op -> GREATER .)
    LPAREN          reduce using rule 73 (comp_op -> GREATER .)
    PLUSPLUS        reduce using rule 73 (comp_op -> GREATER .)
    MINUSMINUS      reduce using rule 73 (comp_op -> GREATER .)


state 132

    (74) comp_op -> GREATEREQUAL .

    NUMBER          reduce using rule 74 (comp_op -> GREATEREQUAL .)
    VARIABLE        reduce using rule 74 (comp_op -> GREATEREQUAL .)
    LPAREN          reduce using rule 74 (comp_op -> GREATEREQUAL .)
    PLUSPLUS        reduce using rule 74 (comp_op -> GREATEREQUAL .)
    MINUSMINUS      reduce using rule 74 (comp_op -> GREATEREQUAL .)


state 133

    (75) comp_op -> DEQUAL .

    NUMBER          reduce using rule 75 (comp_op -> DEQUAL .)
    VARIABLE        reduce using rule 75 (comp_op -> DEQUAL .)
    LPAREN          reduce using rule 75 (comp_op -> DEQUAL .)
    PLUSPLUS        reduce using rule 75 (comp_op -> DEQUAL .)
    MINUSMINUS      reduce using rule 75 (comp_op -> DEQUAL .)


state 134

    (76) comp_op -> DISTINT .

    NUMBER          reduce using rule 76 (comp_op -> DISTINT .)
    VARIABLE        reduce using rule 76 (comp_op -> DISTINT .)
    LPAREN          reduce using rule 76 (comp_op -> DISTINT .)
    PLUSPLUS        reduce using rule 76 (comp_op -> DISTINT .)
    MINUSMINUS      reduce using rule 76 (comp_op -> DISTINT .)


state 135

    (77) comp_op -> ISEQUAL .

    NUMBER          reduce using rule 77 (comp_op -> ISEQUAL .)
    VARIABLE        reduce using rule 77 (comp_op -> ISEQUAL .)
    LPAREN          reduce using rule 77 (comp_op -> ISEQUAL .)
    PLUSPLUS        reduce using rule 77 (comp_op -> ISEQUAL .)
    MINUSMINUS      reduce using rule 77 (comp_op -> ISEQUAL .)


state 136

    (58) additive_expression -> term math_op . term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    term                           shift and go to state 170
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 137

    (67) math_op -> PLUS .

    NUMBER          reduce using rule 67 (math_op -> PLUS .)
    VARIABLE        reduce using rule 67 (math_op -> PLUS .)
    LPAREN          reduce using rule 67 (math_op -> PLUS .)
    PLUSPLUS        reduce using rule 67 (math_op -> PLUS .)
    MINUSMINUS      reduce using rule 67 (math_op -> PLUS .)


state 138

    (68) math_op -> MINUS .

    NUMBER          reduce using rule 68 (math_op -> MINUS .)
    VARIABLE        reduce using rule 68 (math_op -> MINUS .)
    LPAREN          reduce using rule 68 (math_op -> MINUS .)
    PLUSPLUS        reduce using rule 68 (math_op -> MINUS .)
    MINUSMINUS      reduce using rule 68 (math_op -> MINUS .)


state 139

    (69) math_op -> TIMES .

    NUMBER          reduce using rule 69 (math_op -> TIMES .)
    VARIABLE        reduce using rule 69 (math_op -> TIMES .)
    LPAREN          reduce using rule 69 (math_op -> TIMES .)
    PLUSPLUS        reduce using rule 69 (math_op -> TIMES .)
    MINUSMINUS      reduce using rule 69 (math_op -> TIMES .)


state 140

    (70) math_op -> DIVIDE .

    NUMBER          reduce using rule 70 (math_op -> DIVIDE .)
    VARIABLE        reduce using rule 70 (math_op -> DIVIDE .)
    LPAREN          reduce using rule 70 (math_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 70 (math_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 70 (math_op -> DIVIDE .)


state 141

    (60) term -> factor increment_decrement_op .

    PLUS            reduce using rule 60 (term -> factor increment_decrement_op .)
    MINUS           reduce using rule 60 (term -> factor increment_decrement_op .)
    TIMES           reduce using rule 60 (term -> factor increment_decrement_op .)
    DIVIDE          reduce using rule 60 (term -> factor increment_decrement_op .)
    BOOL_OR         reduce using rule 60 (term -> factor increment_decrement_op .)
    BOOL_AND        reduce using rule 60 (term -> factor increment_decrement_op .)
    NOT             reduce using rule 60 (term -> factor increment_decrement_op .)
    or              reduce using rule 60 (term -> factor increment_decrement_op .)
    and             reduce using rule 60 (term -> factor increment_decrement_op .)
    LESS            reduce using rule 60 (term -> factor increment_decrement_op .)
    LESSEQUAL       reduce using rule 60 (term -> factor increment_decrement_op .)
    GREATER         reduce using rule 60 (term -> factor increment_decrement_op .)
    GREATEREQUAL    reduce using rule 60 (term -> factor increment_decrement_op .)
    DEQUAL          reduce using rule 60 (term -> factor increment_decrement_op .)
    DISTINT         reduce using rule 60 (term -> factor increment_decrement_op .)
    ISEQUAL         reduce using rule 60 (term -> factor increment_decrement_op .)
    RPAREN          reduce using rule 60 (term -> factor increment_decrement_op .)
    as              reduce using rule 60 (term -> factor increment_decrement_op .)
    SEMICOLON       reduce using rule 60 (term -> factor increment_decrement_op .)
    COMMA           reduce using rule 60 (term -> factor increment_decrement_op .)
    RBRACKET        reduce using rule 60 (term -> factor increment_decrement_op .)
    RBLOCK          reduce using rule 60 (term -> factor increment_decrement_op .)


state 142

    (61) term -> increment_decrement_op factor .

    PLUS            reduce using rule 61 (term -> increment_decrement_op factor .)
    MINUS           reduce using rule 61 (term -> increment_decrement_op factor .)
    TIMES           reduce using rule 61 (term -> increment_decrement_op factor .)
    DIVIDE          reduce using rule 61 (term -> increment_decrement_op factor .)
    BOOL_OR         reduce using rule 61 (term -> increment_decrement_op factor .)
    BOOL_AND        reduce using rule 61 (term -> increment_decrement_op factor .)
    NOT             reduce using rule 61 (term -> increment_decrement_op factor .)
    or              reduce using rule 61 (term -> increment_decrement_op factor .)
    and             reduce using rule 61 (term -> increment_decrement_op factor .)
    LESS            reduce using rule 61 (term -> increment_decrement_op factor .)
    LESSEQUAL       reduce using rule 61 (term -> increment_decrement_op factor .)
    GREATER         reduce using rule 61 (term -> increment_decrement_op factor .)
    GREATEREQUAL    reduce using rule 61 (term -> increment_decrement_op factor .)
    DEQUAL          reduce using rule 61 (term -> increment_decrement_op factor .)
    DISTINT         reduce using rule 61 (term -> increment_decrement_op factor .)
    ISEQUAL         reduce using rule 61 (term -> increment_decrement_op factor .)
    RPAREN          reduce using rule 61 (term -> increment_decrement_op factor .)
    as              reduce using rule 61 (term -> increment_decrement_op factor .)
    SEMICOLON       reduce using rule 61 (term -> increment_decrement_op factor .)
    COMMA           reduce using rule 61 (term -> increment_decrement_op factor .)
    RBRACKET        reduce using rule 61 (term -> increment_decrement_op factor .)
    RBLOCK          reduce using rule 61 (term -> increment_decrement_op factor .)


state 143

    (83) if_statement -> if LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 171


state 144

    (88) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration RBLOCK
    (93) params -> params . COMMA single_param

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 115


state 145

    (90) obj_declaration -> class ID LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 173


state 146

    (91) create_obj_declaration -> new ID LPAREN params . RPAREN
    (93) params -> params . COMMA single_param

    RPAREN          shift and go to state 174
    COMMA           shift and go to state 115


state 147

    (97) for_loop -> for LPAREN for_init for_expr . for_update RPAREN LBLOCK declaration_list RBLOCK
    (100) for_update -> . expression
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    for_update                     shift and go to state 175
    expression                     shift and go to state 176
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 148

    (99) for_expr -> expression . SEMICOLON

    SEMICOLON       shift and go to state 177


state 149

    (98) for_init -> var_declaration2 SEMICOLON .

    NUMBER          reduce using rule 98 (for_init -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 98 (for_init -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 98 (for_init -> var_declaration2 SEMICOLON .)
    PLUSPLUS        reduce using rule 98 (for_init -> var_declaration2 SEMICOLON .)
    MINUSMINUS      reduce using rule 98 (for_init -> var_declaration2 SEMICOLON .)


state 150

    (102) foreach_loop -> foreach LPAREN expression as . expression RPAREN LBLOCK declaration_list RBLOCK
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 178
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 151

    (101) exit_statement -> exit LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 179


state 152

    (38) var_declaration2 -> VARIABLE .
    (39) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (40) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (41) var_declaration2 -> VARIABLE . EQUAL CADENA
    (42) var_declaration2 -> VARIABLE . EQUAL array_declaration
    (43) var_declaration2 -> VARIABLE . EQUAL expression
    (44) var_declaration2 -> VARIABLE . assignment_tail
    (45) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (63) factor -> VARIABLE .
    (46) assignment_tail -> . COMMA var_declaration2
    (47) assignment_tail -> . LBRACKET params RBRACKET
    (48) assignment_tail -> . LBLOCK params RBLOCK
    (49) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (50) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (51) assignment_tail -> . VARIABLE LBLOCK params RBLOCK

  ! reduce/reduce conflict for COMMA resolved using rule 38 (var_declaration2 -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
    RBRACKET        reduce using rule 38 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 63
    PLUSPLUS        reduce using rule 63 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 63 (factor -> VARIABLE .)
    PLUS            reduce using rule 63 (factor -> VARIABLE .)
    MINUS           reduce using rule 63 (factor -> VARIABLE .)
    TIMES           reduce using rule 63 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 63 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 63 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 63 (factor -> VARIABLE .)
    NOT             reduce using rule 63 (factor -> VARIABLE .)
    or              reduce using rule 63 (factor -> VARIABLE .)
    and             reduce using rule 63 (factor -> VARIABLE .)
    LESS            reduce using rule 63 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 63 (factor -> VARIABLE .)
    GREATER         reduce using rule 63 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 63 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 63 (factor -> VARIABLE .)
    DISTINT         reduce using rule 63 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 63 (factor -> VARIABLE .)
    COMMA           shift and go to state 65
    LBRACKET        shift and go to state 66
    LBLOCK          shift and go to state 67
    VARIABLE        shift and go to state 62

  ! COMMA           [ reduce using rule 38 (var_declaration2 -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 63 (factor -> VARIABLE .) ]

    assignment_tail                shift and go to state 64

state 153

    (49) assignment_tail -> VARIABLE LBRACKET expression . COMMA params

    COMMA           shift and go to state 180


state 154

    (50) assignment_tail -> VARIABLE LBRACKET params . RBRACKET
    (93) params -> params . COMMA single_param

    RBRACKET        shift and go to state 181
    COMMA           shift and go to state 115


state 155

    (25) data_type -> NUMBER .
    (62) factor -> NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 25 (data_type -> NUMBER .)
    RBRACKET        reduce using rule 25 (data_type -> NUMBER .)
    COMMA           reduce using rule 25 (data_type -> NUMBER .)
    PLUSPLUS        reduce using rule 62 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 62 (factor -> NUMBER .)
    PLUS            reduce using rule 62 (factor -> NUMBER .)
    MINUS           reduce using rule 62 (factor -> NUMBER .)
    TIMES           reduce using rule 62 (factor -> NUMBER .)
    DIVIDE          reduce using rule 62 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 62 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 62 (factor -> NUMBER .)
    NOT             reduce using rule 62 (factor -> NUMBER .)
    or              reduce using rule 62 (factor -> NUMBER .)
    and             reduce using rule 62 (factor -> NUMBER .)
    LESS            reduce using rule 62 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 62 (factor -> NUMBER .)
    GREATER         reduce using rule 62 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 62 (factor -> NUMBER .)
    DEQUAL          reduce using rule 62 (factor -> NUMBER .)
    DISTINT         reduce using rule 62 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 62 (factor -> NUMBER .)

  ! COMMA           [ reduce using rule 62 (factor -> NUMBER .) ]


state 156

    (51) assignment_tail -> VARIABLE LBLOCK params . RBLOCK
    (93) params -> params . COMMA single_param

    RBLOCK          shift and go to state 182
    COMMA           shift and go to state 115


state 157

    (103) array_declaration -> array LPAREN . params RPAREN
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    RPAREN          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 183
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 158

    (47) assignment_tail -> LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 47 (assignment_tail -> LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 47 (assignment_tail -> LBRACKET params RBRACKET .)
    COMMA           reduce using rule 47 (assignment_tail -> LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 47 (assignment_tail -> LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 47 (assignment_tail -> LBRACKET params RBRACKET .)


state 159

    (48) assignment_tail -> LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 48 (assignment_tail -> LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 48 (assignment_tail -> LBLOCK params RBLOCK .)
    COMMA           reduce using rule 48 (assignment_tail -> LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 48 (assignment_tail -> LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 48 (assignment_tail -> LBLOCK params RBLOCK .)


state 160

    (28) constant_declaration -> const ID EQUAL data_type SEMICOLON .

    COMMENT         reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    empty           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    include         reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    const           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    print           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    echo            reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    while           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    if              reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    function        reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    ID              reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    class           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    new             reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    for             reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    foreach         reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    exit            reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    VARIABLE        reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    $end            reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    RBLOCK          reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)


state 161

    (93) params -> params COMMA single_param .

    RPAREN          reduce using rule 93 (params -> params COMMA single_param .)
    COMMA           reduce using rule 93 (params -> params COMMA single_param .)
    RBRACKET        reduce using rule 93 (params -> params COMMA single_param .)
    RBLOCK          reduce using rule 93 (params -> params COMMA single_param .)
    SEMICOLON       reduce using rule 93 (params -> params COMMA single_param .)


state 162

    (30) print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)


state 163

    (31) print_declaration -> print LPAREN data_type RPAREN SEMICOLON .

    COMMENT         reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    empty           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    include         reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    const           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    print           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    echo            reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    while           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    if              reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    function        reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    ID              reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    class           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    new             reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    for             reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    foreach         reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    exit            reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    $end            reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)


state 164

    (34) echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)


state 165

    (35) echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .

    COMMENT         reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    empty           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    include         reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    const           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    print           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    echo            reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    while           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    if              reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    function        reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    ID              reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    class           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    new             reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    for             reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    foreach         reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    exit            reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    $end            reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)


state 166

    (64) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    BOOL_OR         reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    BOOL_AND        reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    or              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    and             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    as              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 64 (factor -> LPAREN expression RPAREN .)


state 167

    (52) iteration_stmt -> while LPAREN expression RPAREN LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 184
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 168

    (54) expression -> additive_expression logical_op additive_expression .

    RPAREN          reduce using rule 54 (expression -> additive_expression logical_op additive_expression .)
    as              reduce using rule 54 (expression -> additive_expression logical_op additive_expression .)
    SEMICOLON       reduce using rule 54 (expression -> additive_expression logical_op additive_expression .)
    COMMA           reduce using rule 54 (expression -> additive_expression logical_op additive_expression .)
    RBRACKET        reduce using rule 54 (expression -> additive_expression logical_op additive_expression .)
    RBLOCK          reduce using rule 54 (expression -> additive_expression logical_op additive_expression .)


state 169

    (55) expression -> additive_expression comp_op additive_expression .
    (56) expression -> additive_expression comp_op additive_expression . logical_op additive_expression comp_op additive_expression
    (78) logical_op -> . BOOL_OR
    (79) logical_op -> . BOOL_AND
    (80) logical_op -> . NOT
    (81) logical_op -> . or
    (82) logical_op -> . and

    RPAREN          reduce using rule 55 (expression -> additive_expression comp_op additive_expression .)
    as              reduce using rule 55 (expression -> additive_expression comp_op additive_expression .)
    SEMICOLON       reduce using rule 55 (expression -> additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 55 (expression -> additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 55 (expression -> additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 55 (expression -> additive_expression comp_op additive_expression .)
    BOOL_OR         shift and go to state 124
    BOOL_AND        shift and go to state 125
    NOT             shift and go to state 126
    or              shift and go to state 127
    and             shift and go to state 128

    logical_op                     shift and go to state 185

state 170

    (58) additive_expression -> term math_op term .

    BOOL_OR         reduce using rule 58 (additive_expression -> term math_op term .)
    BOOL_AND        reduce using rule 58 (additive_expression -> term math_op term .)
    NOT             reduce using rule 58 (additive_expression -> term math_op term .)
    or              reduce using rule 58 (additive_expression -> term math_op term .)
    and             reduce using rule 58 (additive_expression -> term math_op term .)
    LESS            reduce using rule 58 (additive_expression -> term math_op term .)
    LESSEQUAL       reduce using rule 58 (additive_expression -> term math_op term .)
    GREATER         reduce using rule 58 (additive_expression -> term math_op term .)
    GREATEREQUAL    reduce using rule 58 (additive_expression -> term math_op term .)
    DEQUAL          reduce using rule 58 (additive_expression -> term math_op term .)
    DISTINT         reduce using rule 58 (additive_expression -> term math_op term .)
    ISEQUAL         reduce using rule 58 (additive_expression -> term math_op term .)
    RPAREN          reduce using rule 58 (additive_expression -> term math_op term .)
    as              reduce using rule 58 (additive_expression -> term math_op term .)
    SEMICOLON       reduce using rule 58 (additive_expression -> term math_op term .)
    COMMA           reduce using rule 58 (additive_expression -> term math_op term .)
    RBRACKET        reduce using rule 58 (additive_expression -> term math_op term .)
    RBLOCK          reduce using rule 58 (additive_expression -> term math_op term .)


state 171

    (83) if_statement -> if LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 186
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 172

    (88) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 187


state 173

    (90) obj_declaration -> class ID LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    empty           reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    include         reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    const           reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    print           reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    echo            reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    while           reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    if              reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    function        reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    ID              reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    class           reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    new             reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    for             reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    foreach         reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    exit            reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    $end            reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 90 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)


state 174

    (91) create_obj_declaration -> new ID LPAREN params RPAREN .

    COMMENT         reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    empty           reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include         reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    const           reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    print           reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    echo            reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    while           reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    if              reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    function        reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ID              reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    class           reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    new             reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    for             reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    foreach         reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exit            reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    $end            reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 91 (create_obj_declaration -> new ID LPAREN params RPAREN .)


state 175

    (97) for_loop -> for LPAREN for_init for_expr for_update . RPAREN LBLOCK declaration_list RBLOCK

    RPAREN          shift and go to state 188


state 176

    (100) for_update -> expression .

    RPAREN          reduce using rule 100 (for_update -> expression .)


state 177

    (99) for_expr -> expression SEMICOLON .

    NUMBER          reduce using rule 99 (for_expr -> expression SEMICOLON .)
    VARIABLE        reduce using rule 99 (for_expr -> expression SEMICOLON .)
    LPAREN          reduce using rule 99 (for_expr -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 99 (for_expr -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 99 (for_expr -> expression SEMICOLON .)


state 178

    (102) foreach_loop -> foreach LPAREN expression as expression . RPAREN LBLOCK declaration_list RBLOCK

    RPAREN          shift and go to state 189


state 179

    (101) exit_statement -> exit LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 101 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)


state 180

    (49) assignment_tail -> VARIABLE LBRACKET expression COMMA . params
    (92) params -> . single_param
    (93) params -> . params COMMA single_param
    (94) single_param -> . var_declaration2
    (95) single_param -> . data_type
    (96) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (104) empty_function -> .

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50
    SEMICOLON       reduce using rule 104 (empty_function -> .)
    RPAREN          reduce using rule 104 (empty_function -> .)
    COMMA           reduce using rule 104 (empty_function -> .)
    RBRACKET        reduce using rule 104 (empty_function -> .)
    RBLOCK          reduce using rule 104 (empty_function -> .)

    params                         shift and go to state 190
    single_param                   shift and go to state 71
    var_declaration2               shift and go to state 72
    data_type                      shift and go to state 73
    empty_function                 shift and go to state 74

state 181

    (50) assignment_tail -> VARIABLE LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 50 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 50 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COMMA           reduce using rule 50 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 50 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 50 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)


state 182

    (51) assignment_tail -> VARIABLE LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 51 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 51 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COMMA           reduce using rule 51 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 51 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 51 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)


state 183

    (103) array_declaration -> array LPAREN params . RPAREN
    (93) params -> params . COMMA single_param

    RPAREN          shift and go to state 191
    COMMA           shift and go to state 115


state 184

    (52) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 192


state 185

    (56) expression -> additive_expression comp_op additive_expression logical_op . additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    additive_expression            shift and go to state 193
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 186

    (83) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    RBLOCK          shift and go to state 194
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 187

    (88) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 195
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 188

    (97) for_loop -> for LPAREN for_init for_expr for_update RPAREN . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 196


state 189

    (102) foreach_loop -> foreach LPAREN expression as expression RPAREN . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 197


state 190

    (49) assignment_tail -> VARIABLE LBRACKET expression COMMA params .
    (93) params -> params . COMMA single_param

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 49 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RPAREN          reduce using rule 49 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBRACKET        reduce using rule 49 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBLOCK          reduce using rule 49 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COMMA           shift and go to state 115

  ! COMMA           [ reduce using rule 49 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .) ]


state 191

    (103) array_declaration -> array LPAREN params RPAREN .

    SEMICOLON       reduce using rule 103 (array_declaration -> array LPAREN params RPAREN .)
    RPAREN          reduce using rule 103 (array_declaration -> array LPAREN params RPAREN .)
    COMMA           reduce using rule 103 (array_declaration -> array LPAREN params RPAREN .)
    RBRACKET        reduce using rule 103 (array_declaration -> array LPAREN params RPAREN .)
    RBLOCK          reduce using rule 103 (array_declaration -> array LPAREN params RPAREN .)


state 192

    (52) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    empty           reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    include         reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    const           reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    print           reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    echo            reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    while           reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    if              reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    function        reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    ID              reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    class           reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    new             reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    for             reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    foreach         reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    exit            reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    $end            reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 52 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)


state 193

    (56) expression -> additive_expression comp_op additive_expression logical_op additive_expression . comp_op additive_expression
    (71) comp_op -> . LESS
    (72) comp_op -> . LESSEQUAL
    (73) comp_op -> . GREATER
    (74) comp_op -> . GREATEREQUAL
    (75) comp_op -> . DEQUAL
    (76) comp_op -> . DISTINT
    (77) comp_op -> . ISEQUAL

    LESS            shift and go to state 129
    LESSEQUAL       shift and go to state 130
    GREATER         shift and go to state 131
    GREATEREQUAL    shift and go to state 132
    DEQUAL          shift and go to state 133
    DISTINT         shift and go to state 134
    ISEQUAL         shift and go to state 135

    comp_op                        shift and go to state 198

state 194

    (83) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (84) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (85) else_part -> . else LBLOCK declaration_list RBLOCK
    (86) else_part -> . endif
    (87) else_part -> . empty

    elseif          shift and go to state 200
    else            shift and go to state 201
    endif           shift and go to state 202
    empty           shift and go to state 203

    else_part                      shift and go to state 199

state 195

    (88) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 204


state 196

    (97) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 205
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 197

    (102) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 206
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 198

    (56) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op . additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    additive_expression            shift and go to state 207
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 199

    (83) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 83 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)


state 200

    (84) else_part -> elseif . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 208


state 201

    (85) else_part -> else . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 209


state 202

    (86) else_part -> endif .

    COMMENT         reduce using rule 86 (else_part -> endif .)
    COMMENT_HASHTAG reduce using rule 86 (else_part -> endif .)
    COMMENT_MULTI   reduce using rule 86 (else_part -> endif .)
    empty           reduce using rule 86 (else_part -> endif .)
    include         reduce using rule 86 (else_part -> endif .)
    const           reduce using rule 86 (else_part -> endif .)
    print           reduce using rule 86 (else_part -> endif .)
    echo            reduce using rule 86 (else_part -> endif .)
    while           reduce using rule 86 (else_part -> endif .)
    if              reduce using rule 86 (else_part -> endif .)
    function        reduce using rule 86 (else_part -> endif .)
    ID              reduce using rule 86 (else_part -> endif .)
    class           reduce using rule 86 (else_part -> endif .)
    new             reduce using rule 86 (else_part -> endif .)
    CLOSE_TAG       reduce using rule 86 (else_part -> endif .)
    for             reduce using rule 86 (else_part -> endif .)
    foreach         reduce using rule 86 (else_part -> endif .)
    exit            reduce using rule 86 (else_part -> endif .)
    VARIABLE        reduce using rule 86 (else_part -> endif .)
    $end            reduce using rule 86 (else_part -> endif .)
    RBLOCK          reduce using rule 86 (else_part -> endif .)


state 203

    (87) else_part -> empty .

    COMMENT         reduce using rule 87 (else_part -> empty .)
    COMMENT_HASHTAG reduce using rule 87 (else_part -> empty .)
    COMMENT_MULTI   reduce using rule 87 (else_part -> empty .)
    empty           reduce using rule 87 (else_part -> empty .)
    include         reduce using rule 87 (else_part -> empty .)
    const           reduce using rule 87 (else_part -> empty .)
    print           reduce using rule 87 (else_part -> empty .)
    echo            reduce using rule 87 (else_part -> empty .)
    while           reduce using rule 87 (else_part -> empty .)
    if              reduce using rule 87 (else_part -> empty .)
    function        reduce using rule 87 (else_part -> empty .)
    ID              reduce using rule 87 (else_part -> empty .)
    class           reduce using rule 87 (else_part -> empty .)
    new             reduce using rule 87 (else_part -> empty .)
    CLOSE_TAG       reduce using rule 87 (else_part -> empty .)
    for             reduce using rule 87 (else_part -> empty .)
    foreach         reduce using rule 87 (else_part -> empty .)
    exit            reduce using rule 87 (else_part -> empty .)
    VARIABLE        reduce using rule 87 (else_part -> empty .)
    $end            reduce using rule 87 (else_part -> empty .)
    RBLOCK          reduce using rule 87 (else_part -> empty .)


state 204

    (88) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    empty           reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    include         reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    const           reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    print           reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    echo            reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    while           reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    if              reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    function        reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    ID              reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    class           reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    new             reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    for             reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    foreach         reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    exit            reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    $end            reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 88 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)


state 205

    (97) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    RBLOCK          shift and go to state 210
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 206

    (102) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    RBLOCK          shift and go to state 211
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 207

    (56) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .

    RPAREN          reduce using rule 56 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    as              reduce using rule 56 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    SEMICOLON       reduce using rule 56 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 56 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 56 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 56 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)


state 208

    (84) else_part -> elseif LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (53) expression -> . additive_expression
    (54) expression -> . additive_expression logical_op additive_expression
    (55) expression -> . additive_expression comp_op additive_expression
    (56) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (57) additive_expression -> . term
    (58) additive_expression -> . term math_op term
    (59) term -> . factor
    (60) term -> . factor increment_decrement_op
    (61) term -> . increment_decrement_op factor
    (62) factor -> . NUMBER
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) increment_decrement_op -> . PLUSPLUS
    (66) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 89
    VARIABLE        shift and go to state 90
    LPAREN          shift and go to state 83
    PLUSPLUS        shift and go to state 91
    MINUSMINUS      shift and go to state 92

    expression                     shift and go to state 212
    additive_expression            shift and go to state 85
    term                           shift and go to state 86
    factor                         shift and go to state 87
    increment_decrement_op         shift and go to state 88

state 209

    (85) else_part -> else LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 213
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 210

    (97) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 97 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)


state 211

    (102) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 102 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)


state 212

    (84) else_part -> elseif LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 214


state 213

    (85) else_part -> else LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    RBLOCK          shift and go to state 215
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 214

    (84) else_part -> elseif LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 216


state 215

    (85) else_part -> else LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 85 (else_part -> else LBLOCK declaration_list RBLOCK .)


state 216

    (84) else_part -> elseif LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 217
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 217

    (84) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (52) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (83) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (88) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (89) fun_call -> . ID LPAREN params RPAREN
    (90) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (91) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (97) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (102) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (101) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE
    (39) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (40) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (41) var_declaration2 -> . VARIABLE EQUAL CADENA
    (42) var_declaration2 -> . VARIABLE EQUAL array_declaration
    (43) var_declaration2 -> . VARIABLE EQUAL expression
    (44) var_declaration2 -> . VARIABLE assignment_tail
    (45) var_declaration2 -> . VARIABLE EQUAL assignment_tail

    RBLOCK          shift and go to state 218
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 218

    (84) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (84) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (85) else_part -> . else LBLOCK declaration_list RBLOCK
    (86) else_part -> . endif
    (87) else_part -> . empty

    elseif          shift and go to state 200
    else            shift and go to state 201
    endif           shift and go to state 202
    empty           shift and go to state 203

    else_part                      shift and go to state 219

state 219

    (84) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 84 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 40 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 152 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 190 resolved as shift
WARNING: reduce/reduce conflict in state 103 resolved using rule (var_declaration2 -> VARIABLE EQUAL VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (var_declaration2 -> VARIABLE EQUAL NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 104
WARNING: reduce/reduce conflict in state 152 resolved using rule (var_declaration2 -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 152
WARNING: reduce/reduce conflict in state 155 resolved using rule (data_type -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 155
