Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANT
    ANDEQUAL
    ASSIGN
    BACKSLASH
    COLON
    COMILLASDOBLES
    COMILLASIMPLE
    DIVEQUAL
    DOT
    HASHTAG
    INVALID_NUMBER_SEQUENCE
    INVALID_VARIABLE
    ISIDENTICAL
    ISNOTIDENTICAL
    MINUSEQUAL
    MOD
    MULEQUAL
    PLUSEQUAL
    POW
    QUESTIONMARK
    SL
    SLEQUAL
    SR
    SREQUAL
    XOREQUAL
    abs
    abstract
    array
    break
    callable
    case
    catch
    ceil
    clone
    continue
    cos
    declare
    default
    deg2rad
    die
    do
    endclare
    endfor
    endforeach
    endswitch
    endwhile
    eval
    exp
    extends
    final
    finally
    floor
    global
    goto
    implements
    include_once
    instanceof
    insteadof
    interface
    isset
    list
    log
    log10
    match
    max
    min
    namespace
    objectoperator
    php
    pow
    private
    protected
    public
    rad2deg
    rand
    readonly
    require
    require_once
    return
    round
    sin
    sqrt
    static
    switch
    throw
    trait
    try
    unset
    use
    var
    xor

Grammar

Rule 0     S' -> program
Rule 1     program -> header declaration_list
Rule 2     header -> OPEN_TAG
Rule 3     footer_declaration -> CLOSE_TAG
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> COMMENT
Rule 7     declaration -> COMMENT_HASHTAG
Rule 8     declaration -> COMMENT_MULTI
Rule 9     declaration -> header_declaration
Rule 10    declaration -> var_declaration
Rule 11    declaration -> constant_declaration
Rule 12    declaration -> print_declaration
Rule 13    declaration -> echo_declaration
Rule 14    declaration -> iteration_stmt
Rule 15    declaration -> if_statement
Rule 16    declaration -> fun_declaration
Rule 17    declaration -> fun_call
Rule 18    declaration -> obj_declaration
Rule 19    declaration -> create_obj_declaration
Rule 20    declaration -> footer_declaration
Rule 21    declaration -> for_loop
Rule 22    declaration -> foreach_loop
Rule 23    declaration -> exit_statement
Rule 24    declaration -> empty
Rule 25    data_type -> NUMBER
Rule 26    data_type -> CADENA
Rule 27    header_declaration -> include CADENA SEMICOLON
Rule 28    constant_declaration -> const ID EQUAL data_type SEMICOLON
Rule 29    print_declaration -> print var_declaration2 SEMICOLON
Rule 30    print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON
Rule 31    print_declaration -> print LPAREN data_type RPAREN SEMICOLON
Rule 32    print_declaration -> print data_type SEMICOLON
Rule 33    echo_declaration -> echo var_declaration2 SEMICOLON
Rule 34    echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON
Rule 35    echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON
Rule 36    echo_declaration -> echo data_type SEMICOLON
Rule 37    var_declaration -> var_declaration2 SEMICOLON
Rule 38    var_declaration2 -> VARIABLE assignment_tail
Rule 39    assignment_tail -> EQUAL expression
Rule 40    assignment_tail -> EQUAL NUMBER COMMA var_declaration2
Rule 41    assignment_tail -> EQUAL VARIABLE COMMA var_declaration2
Rule 42    assignment_tail -> EQUAL CADENA
Rule 43    assignment_tail -> COMMA var_declaration2
Rule 44    assignment_tail -> EQUAL LBRACKET expression COMMA var_declaration2
Rule 45    assignment_tail -> EQUAL LBRACKET data_type COMMA var_declaration2
Rule 46    assignment_tail -> RBRACKET
Rule 47    iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK
Rule 48    expression -> additive_expression
Rule 49    expression -> additive_expression logical_op additive_expression
Rule 50    expression -> additive_expression comp_op additive_expression
Rule 51    expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
Rule 52    additive_expression -> term
Rule 53    additive_expression -> term math_op term
Rule 54    term -> factor
Rule 55    term -> factor increment_decrement_op
Rule 56    term -> increment_decrement_op factor
Rule 57    factor -> NUMBER
Rule 58    factor -> VARIABLE
Rule 59    factor -> LPAREN expression RPAREN
Rule 60    increment_decrement_op -> PLUSPLUS
Rule 61    increment_decrement_op -> MINUSMINUS
Rule 62    math_op -> PLUS
Rule 63    math_op -> MINUS
Rule 64    math_op -> TIMES
Rule 65    math_op -> DIVIDE
Rule 66    comp_op -> LESS
Rule 67    comp_op -> LESSEQUAL
Rule 68    comp_op -> GREATER
Rule 69    comp_op -> GREATEREQUAL
Rule 70    comp_op -> DEQUAL
Rule 71    comp_op -> DISTINT
Rule 72    comp_op -> ISEQUAL
Rule 73    logical_op -> BOOL_OR
Rule 74    logical_op -> BOOL_AND
Rule 75    logical_op -> NOT
Rule 76    logical_op -> or
Rule 77    logical_op -> and
Rule 78    if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 79    else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 80    else_part -> else LBLOCK declaration_list RBLOCK
Rule 81    else_part -> endif
Rule 82    else_part -> empty
Rule 83    fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
Rule 84    fun_call -> ID LPAREN params RPAREN
Rule 85    obj_declaration -> class ID LBLOCK declaration RBLOCK
Rule 86    create_obj_declaration -> new ID LPAREN params RPAREN
Rule 87    params -> single_param
Rule 88    params -> params COMMA single_param
Rule 89    single_param -> var_declaration2
Rule 90    single_param -> empty_function
Rule 91    for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
Rule 92    for_init -> var_declaration2 SEMICOLON
Rule 93    for_expr -> expression SEMICOLON
Rule 94    for_update -> expression
Rule 95    exit_statement -> exit LPAREN expression RPAREN SEMICOLON
Rule 96    foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
Rule 97    empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 
ANDEQUAL             : 
ASSIGN               : 
BACKSLASH            : 
BOOL_AND             : 74
BOOL_OR              : 73
CADENA               : 26 27 42
CLOSE_TAG            : 3
COLON                : 
COMILLASDOBLES       : 
COMILLASIMPLE        : 
COMMA                : 40 41 43 44 45 88
COMMENT              : 6
COMMENT_HASHTAG      : 7
COMMENT_MULTI        : 8
DEQUAL               : 70
DISTINT              : 71
DIVEQUAL             : 
DIVIDE               : 65
DOT                  : 
EQUAL                : 28 39 40 41 42 44 45
GREATER              : 68
GREATEREQUAL         : 69
HASHTAG              : 
ID                   : 28 83 84 85 86
INVALID_NUMBER_SEQUENCE : 
INVALID_VARIABLE     : 
ISEQUAL              : 72
ISIDENTICAL          : 
ISNOTIDENTICAL       : 
LBLOCK               : 47 78 79 80 83 85 91 96
LBRACKET             : 44 45
LESS                 : 66
LESSEQUAL            : 67
LPAREN               : 30 31 34 35 47 59 78 79 83 84 86 91 95 96
MINUS                : 63
MINUSEQUAL           : 
MINUSMINUS           : 61
MOD                  : 
MULEQUAL             : 
NOT                  : 75
NUMBER               : 25 40 57
OPEN_TAG             : 2
PLUS                 : 62
PLUSEQUAL            : 
PLUSPLUS             : 60
POW                  : 
QUESTIONMARK         : 
RBLOCK               : 47 78 79 80 83 85 91 96
RBRACKET             : 46
RPAREN               : 30 31 34 35 47 59 78 79 83 84 86 91 95 96
SEMICOLON            : 27 28 29 30 31 32 33 34 35 36 37 92 93 95
SL                   : 
SLEQUAL              : 
SR                   : 
SREQUAL              : 
TIMES                : 64
VARIABLE             : 38 41 58
XOREQUAL             : 
abs                  : 
abstract             : 
and                  : 77
array                : 
as                   : 96
break                : 
callable             : 
case                 : 
catch                : 
ceil                 : 
class                : 85
clone                : 
const                : 28
continue             : 
cos                  : 
declare              : 
default              : 
deg2rad              : 
die                  : 
do                   : 
echo                 : 33 34 35 36
else                 : 80
elseif               : 79
empty                : 24 82
endclare             : 
endfor               : 
endforeach           : 
endif                : 81
endswitch            : 
endwhile             : 
error                : 
eval                 : 
exit                 : 95
exp                  : 
extends              : 
final                : 
finally              : 
floor                : 
for                  : 91
foreach              : 96
function             : 83
global               : 
goto                 : 
if                   : 78
implements           : 
include              : 27
include_once         : 
instanceof           : 
insteadof            : 
interface            : 
isset                : 
list                 : 
log                  : 
log10                : 
match                : 
max                  : 
min                  : 
namespace            : 
new                  : 86
objectoperator       : 
or                   : 76
php                  : 
pow                  : 
print                : 29 30 31 32
private              : 
protected            : 
public               : 
rad2deg              : 
rand                 : 
readonly             : 
require              : 
require_once         : 
return               : 
round                : 
sin                  : 
sqrt                 : 
static               : 
switch               : 
throw                : 
trait                : 
try                  : 
unset                : 
use                  : 
var                  : 
while                : 47
xor                  : 

Nonterminals, with rules where they appear

additive_expression  : 48 49 49 50 50 51 51 51 51
assignment_tail      : 38
comp_op              : 50 51 51
constant_declaration : 11
create_obj_declaration : 19
data_type            : 28 31 32 35 36 45
declaration          : 4 5 47 83 85
declaration_list     : 1 5 78 79 80 91 96
echo_declaration     : 13
else_part            : 78 79
empty_function       : 90
exit_statement       : 23
expression           : 39 44 47 59 78 79 93 94 95 96 96
factor               : 54 55 56
footer_declaration   : 20
for_expr             : 91
for_init             : 91
for_loop             : 21
for_update           : 91
foreach_loop         : 22
fun_call             : 17
fun_declaration      : 16
header               : 1
header_declaration   : 9
if_statement         : 15
increment_decrement_op : 55 56
iteration_stmt       : 14
logical_op           : 49 51
math_op              : 53
obj_declaration      : 18
params               : 83 84 86 88
print_declaration    : 12
program              : 0
single_param         : 87 88
term                 : 52 53 53
var_declaration      : 10
var_declaration2     : 29 30 33 34 37 40 41 43 44 45 89 92

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header declaration_list
    (2) header -> . OPEN_TAG

    OPEN_TAG        shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 3

    (2) header -> OPEN_TAG .

    COMMENT         reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_HASHTAG reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_MULTI   reduce using rule 2 (header -> OPEN_TAG .)
    empty           reduce using rule 2 (header -> OPEN_TAG .)
    include         reduce using rule 2 (header -> OPEN_TAG .)
    const           reduce using rule 2 (header -> OPEN_TAG .)
    print           reduce using rule 2 (header -> OPEN_TAG .)
    echo            reduce using rule 2 (header -> OPEN_TAG .)
    while           reduce using rule 2 (header -> OPEN_TAG .)
    if              reduce using rule 2 (header -> OPEN_TAG .)
    function        reduce using rule 2 (header -> OPEN_TAG .)
    ID              reduce using rule 2 (header -> OPEN_TAG .)
    class           reduce using rule 2 (header -> OPEN_TAG .)
    new             reduce using rule 2 (header -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 2 (header -> OPEN_TAG .)
    for             reduce using rule 2 (header -> OPEN_TAG .)
    foreach         reduce using rule 2 (header -> OPEN_TAG .)
    exit            reduce using rule 2 (header -> OPEN_TAG .)
    VARIABLE        reduce using rule 2 (header -> OPEN_TAG .)


state 4

    (1) program -> header declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    $end            reduce using rule 1 (program -> header declaration_list .)
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 5

    (4) declaration_list -> declaration .

    COMMENT         reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_MULTI   reduce using rule 4 (declaration_list -> declaration .)
    empty           reduce using rule 4 (declaration_list -> declaration .)
    include         reduce using rule 4 (declaration_list -> declaration .)
    const           reduce using rule 4 (declaration_list -> declaration .)
    print           reduce using rule 4 (declaration_list -> declaration .)
    echo            reduce using rule 4 (declaration_list -> declaration .)
    while           reduce using rule 4 (declaration_list -> declaration .)
    if              reduce using rule 4 (declaration_list -> declaration .)
    function        reduce using rule 4 (declaration_list -> declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration .)
    class           reduce using rule 4 (declaration_list -> declaration .)
    new             reduce using rule 4 (declaration_list -> declaration .)
    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration .)
    for             reduce using rule 4 (declaration_list -> declaration .)
    foreach         reduce using rule 4 (declaration_list -> declaration .)
    exit            reduce using rule 4 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)
    RBLOCK          reduce using rule 4 (declaration_list -> declaration .)


state 6

    (6) declaration -> COMMENT .

    COMMENT         reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_HASHTAG reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_MULTI   reduce using rule 6 (declaration -> COMMENT .)
    empty           reduce using rule 6 (declaration -> COMMENT .)
    include         reduce using rule 6 (declaration -> COMMENT .)
    const           reduce using rule 6 (declaration -> COMMENT .)
    print           reduce using rule 6 (declaration -> COMMENT .)
    echo            reduce using rule 6 (declaration -> COMMENT .)
    while           reduce using rule 6 (declaration -> COMMENT .)
    if              reduce using rule 6 (declaration -> COMMENT .)
    function        reduce using rule 6 (declaration -> COMMENT .)
    ID              reduce using rule 6 (declaration -> COMMENT .)
    class           reduce using rule 6 (declaration -> COMMENT .)
    new             reduce using rule 6 (declaration -> COMMENT .)
    CLOSE_TAG       reduce using rule 6 (declaration -> COMMENT .)
    for             reduce using rule 6 (declaration -> COMMENT .)
    foreach         reduce using rule 6 (declaration -> COMMENT .)
    exit            reduce using rule 6 (declaration -> COMMENT .)
    VARIABLE        reduce using rule 6 (declaration -> COMMENT .)
    $end            reduce using rule 6 (declaration -> COMMENT .)
    RBLOCK          reduce using rule 6 (declaration -> COMMENT .)


state 7

    (7) declaration -> COMMENT_HASHTAG .

    COMMENT         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_HASHTAG reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_MULTI   reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    empty           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    const           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    print           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    echo            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    while           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    if              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    function        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    ID              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    class           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    new             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CLOSE_TAG       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    for             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    foreach         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exit            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    VARIABLE        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    $end            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    RBLOCK          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)


state 8

    (8) declaration -> COMMENT_MULTI .

    COMMENT         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_HASHTAG reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_MULTI   reduce using rule 8 (declaration -> COMMENT_MULTI .)
    empty           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    const           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    print           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    echo            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    while           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    if              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    function        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    ID              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    class           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    new             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CLOSE_TAG       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    for             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    foreach         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exit            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    VARIABLE        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    $end            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    RBLOCK          reduce using rule 8 (declaration -> COMMENT_MULTI .)


state 9

    (9) declaration -> header_declaration .

    COMMENT         reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_HASHTAG reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_MULTI   reduce using rule 9 (declaration -> header_declaration .)
    empty           reduce using rule 9 (declaration -> header_declaration .)
    include         reduce using rule 9 (declaration -> header_declaration .)
    const           reduce using rule 9 (declaration -> header_declaration .)
    print           reduce using rule 9 (declaration -> header_declaration .)
    echo            reduce using rule 9 (declaration -> header_declaration .)
    while           reduce using rule 9 (declaration -> header_declaration .)
    if              reduce using rule 9 (declaration -> header_declaration .)
    function        reduce using rule 9 (declaration -> header_declaration .)
    ID              reduce using rule 9 (declaration -> header_declaration .)
    class           reduce using rule 9 (declaration -> header_declaration .)
    new             reduce using rule 9 (declaration -> header_declaration .)
    CLOSE_TAG       reduce using rule 9 (declaration -> header_declaration .)
    for             reduce using rule 9 (declaration -> header_declaration .)
    foreach         reduce using rule 9 (declaration -> header_declaration .)
    exit            reduce using rule 9 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> header_declaration .)
    $end            reduce using rule 9 (declaration -> header_declaration .)
    RBLOCK          reduce using rule 9 (declaration -> header_declaration .)


state 10

    (10) declaration -> var_declaration .

    COMMENT         reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_HASHTAG reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_MULTI   reduce using rule 10 (declaration -> var_declaration .)
    empty           reduce using rule 10 (declaration -> var_declaration .)
    include         reduce using rule 10 (declaration -> var_declaration .)
    const           reduce using rule 10 (declaration -> var_declaration .)
    print           reduce using rule 10 (declaration -> var_declaration .)
    echo            reduce using rule 10 (declaration -> var_declaration .)
    while           reduce using rule 10 (declaration -> var_declaration .)
    if              reduce using rule 10 (declaration -> var_declaration .)
    function        reduce using rule 10 (declaration -> var_declaration .)
    ID              reduce using rule 10 (declaration -> var_declaration .)
    class           reduce using rule 10 (declaration -> var_declaration .)
    new             reduce using rule 10 (declaration -> var_declaration .)
    CLOSE_TAG       reduce using rule 10 (declaration -> var_declaration .)
    for             reduce using rule 10 (declaration -> var_declaration .)
    foreach         reduce using rule 10 (declaration -> var_declaration .)
    exit            reduce using rule 10 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 10 (declaration -> var_declaration .)
    $end            reduce using rule 10 (declaration -> var_declaration .)
    RBLOCK          reduce using rule 10 (declaration -> var_declaration .)


state 11

    (11) declaration -> constant_declaration .

    COMMENT         reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_HASHTAG reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_MULTI   reduce using rule 11 (declaration -> constant_declaration .)
    empty           reduce using rule 11 (declaration -> constant_declaration .)
    include         reduce using rule 11 (declaration -> constant_declaration .)
    const           reduce using rule 11 (declaration -> constant_declaration .)
    print           reduce using rule 11 (declaration -> constant_declaration .)
    echo            reduce using rule 11 (declaration -> constant_declaration .)
    while           reduce using rule 11 (declaration -> constant_declaration .)
    if              reduce using rule 11 (declaration -> constant_declaration .)
    function        reduce using rule 11 (declaration -> constant_declaration .)
    ID              reduce using rule 11 (declaration -> constant_declaration .)
    class           reduce using rule 11 (declaration -> constant_declaration .)
    new             reduce using rule 11 (declaration -> constant_declaration .)
    CLOSE_TAG       reduce using rule 11 (declaration -> constant_declaration .)
    for             reduce using rule 11 (declaration -> constant_declaration .)
    foreach         reduce using rule 11 (declaration -> constant_declaration .)
    exit            reduce using rule 11 (declaration -> constant_declaration .)
    VARIABLE        reduce using rule 11 (declaration -> constant_declaration .)
    $end            reduce using rule 11 (declaration -> constant_declaration .)
    RBLOCK          reduce using rule 11 (declaration -> constant_declaration .)


state 12

    (12) declaration -> print_declaration .

    COMMENT         reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_HASHTAG reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_MULTI   reduce using rule 12 (declaration -> print_declaration .)
    empty           reduce using rule 12 (declaration -> print_declaration .)
    include         reduce using rule 12 (declaration -> print_declaration .)
    const           reduce using rule 12 (declaration -> print_declaration .)
    print           reduce using rule 12 (declaration -> print_declaration .)
    echo            reduce using rule 12 (declaration -> print_declaration .)
    while           reduce using rule 12 (declaration -> print_declaration .)
    if              reduce using rule 12 (declaration -> print_declaration .)
    function        reduce using rule 12 (declaration -> print_declaration .)
    ID              reduce using rule 12 (declaration -> print_declaration .)
    class           reduce using rule 12 (declaration -> print_declaration .)
    new             reduce using rule 12 (declaration -> print_declaration .)
    CLOSE_TAG       reduce using rule 12 (declaration -> print_declaration .)
    for             reduce using rule 12 (declaration -> print_declaration .)
    foreach         reduce using rule 12 (declaration -> print_declaration .)
    exit            reduce using rule 12 (declaration -> print_declaration .)
    VARIABLE        reduce using rule 12 (declaration -> print_declaration .)
    $end            reduce using rule 12 (declaration -> print_declaration .)
    RBLOCK          reduce using rule 12 (declaration -> print_declaration .)


state 13

    (13) declaration -> echo_declaration .

    COMMENT         reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_HASHTAG reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_MULTI   reduce using rule 13 (declaration -> echo_declaration .)
    empty           reduce using rule 13 (declaration -> echo_declaration .)
    include         reduce using rule 13 (declaration -> echo_declaration .)
    const           reduce using rule 13 (declaration -> echo_declaration .)
    print           reduce using rule 13 (declaration -> echo_declaration .)
    echo            reduce using rule 13 (declaration -> echo_declaration .)
    while           reduce using rule 13 (declaration -> echo_declaration .)
    if              reduce using rule 13 (declaration -> echo_declaration .)
    function        reduce using rule 13 (declaration -> echo_declaration .)
    ID              reduce using rule 13 (declaration -> echo_declaration .)
    class           reduce using rule 13 (declaration -> echo_declaration .)
    new             reduce using rule 13 (declaration -> echo_declaration .)
    CLOSE_TAG       reduce using rule 13 (declaration -> echo_declaration .)
    for             reduce using rule 13 (declaration -> echo_declaration .)
    foreach         reduce using rule 13 (declaration -> echo_declaration .)
    exit            reduce using rule 13 (declaration -> echo_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> echo_declaration .)
    $end            reduce using rule 13 (declaration -> echo_declaration .)
    RBLOCK          reduce using rule 13 (declaration -> echo_declaration .)


state 14

    (14) declaration -> iteration_stmt .

    COMMENT         reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_HASHTAG reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_MULTI   reduce using rule 14 (declaration -> iteration_stmt .)
    empty           reduce using rule 14 (declaration -> iteration_stmt .)
    include         reduce using rule 14 (declaration -> iteration_stmt .)
    const           reduce using rule 14 (declaration -> iteration_stmt .)
    print           reduce using rule 14 (declaration -> iteration_stmt .)
    echo            reduce using rule 14 (declaration -> iteration_stmt .)
    while           reduce using rule 14 (declaration -> iteration_stmt .)
    if              reduce using rule 14 (declaration -> iteration_stmt .)
    function        reduce using rule 14 (declaration -> iteration_stmt .)
    ID              reduce using rule 14 (declaration -> iteration_stmt .)
    class           reduce using rule 14 (declaration -> iteration_stmt .)
    new             reduce using rule 14 (declaration -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 14 (declaration -> iteration_stmt .)
    for             reduce using rule 14 (declaration -> iteration_stmt .)
    foreach         reduce using rule 14 (declaration -> iteration_stmt .)
    exit            reduce using rule 14 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 14 (declaration -> iteration_stmt .)
    $end            reduce using rule 14 (declaration -> iteration_stmt .)
    RBLOCK          reduce using rule 14 (declaration -> iteration_stmt .)


state 15

    (15) declaration -> if_statement .

    COMMENT         reduce using rule 15 (declaration -> if_statement .)
    COMMENT_HASHTAG reduce using rule 15 (declaration -> if_statement .)
    COMMENT_MULTI   reduce using rule 15 (declaration -> if_statement .)
    empty           reduce using rule 15 (declaration -> if_statement .)
    include         reduce using rule 15 (declaration -> if_statement .)
    const           reduce using rule 15 (declaration -> if_statement .)
    print           reduce using rule 15 (declaration -> if_statement .)
    echo            reduce using rule 15 (declaration -> if_statement .)
    while           reduce using rule 15 (declaration -> if_statement .)
    if              reduce using rule 15 (declaration -> if_statement .)
    function        reduce using rule 15 (declaration -> if_statement .)
    ID              reduce using rule 15 (declaration -> if_statement .)
    class           reduce using rule 15 (declaration -> if_statement .)
    new             reduce using rule 15 (declaration -> if_statement .)
    CLOSE_TAG       reduce using rule 15 (declaration -> if_statement .)
    for             reduce using rule 15 (declaration -> if_statement .)
    foreach         reduce using rule 15 (declaration -> if_statement .)
    exit            reduce using rule 15 (declaration -> if_statement .)
    VARIABLE        reduce using rule 15 (declaration -> if_statement .)
    $end            reduce using rule 15 (declaration -> if_statement .)
    RBLOCK          reduce using rule 15 (declaration -> if_statement .)


state 16

    (16) declaration -> fun_declaration .

    COMMENT         reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_HASHTAG reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_MULTI   reduce using rule 16 (declaration -> fun_declaration .)
    empty           reduce using rule 16 (declaration -> fun_declaration .)
    include         reduce using rule 16 (declaration -> fun_declaration .)
    const           reduce using rule 16 (declaration -> fun_declaration .)
    print           reduce using rule 16 (declaration -> fun_declaration .)
    echo            reduce using rule 16 (declaration -> fun_declaration .)
    while           reduce using rule 16 (declaration -> fun_declaration .)
    if              reduce using rule 16 (declaration -> fun_declaration .)
    function        reduce using rule 16 (declaration -> fun_declaration .)
    ID              reduce using rule 16 (declaration -> fun_declaration .)
    class           reduce using rule 16 (declaration -> fun_declaration .)
    new             reduce using rule 16 (declaration -> fun_declaration .)
    CLOSE_TAG       reduce using rule 16 (declaration -> fun_declaration .)
    for             reduce using rule 16 (declaration -> fun_declaration .)
    foreach         reduce using rule 16 (declaration -> fun_declaration .)
    exit            reduce using rule 16 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 16 (declaration -> fun_declaration .)
    $end            reduce using rule 16 (declaration -> fun_declaration .)
    RBLOCK          reduce using rule 16 (declaration -> fun_declaration .)


state 17

    (17) declaration -> fun_call .

    COMMENT         reduce using rule 17 (declaration -> fun_call .)
    COMMENT_HASHTAG reduce using rule 17 (declaration -> fun_call .)
    COMMENT_MULTI   reduce using rule 17 (declaration -> fun_call .)
    empty           reduce using rule 17 (declaration -> fun_call .)
    include         reduce using rule 17 (declaration -> fun_call .)
    const           reduce using rule 17 (declaration -> fun_call .)
    print           reduce using rule 17 (declaration -> fun_call .)
    echo            reduce using rule 17 (declaration -> fun_call .)
    while           reduce using rule 17 (declaration -> fun_call .)
    if              reduce using rule 17 (declaration -> fun_call .)
    function        reduce using rule 17 (declaration -> fun_call .)
    ID              reduce using rule 17 (declaration -> fun_call .)
    class           reduce using rule 17 (declaration -> fun_call .)
    new             reduce using rule 17 (declaration -> fun_call .)
    CLOSE_TAG       reduce using rule 17 (declaration -> fun_call .)
    for             reduce using rule 17 (declaration -> fun_call .)
    foreach         reduce using rule 17 (declaration -> fun_call .)
    exit            reduce using rule 17 (declaration -> fun_call .)
    VARIABLE        reduce using rule 17 (declaration -> fun_call .)
    $end            reduce using rule 17 (declaration -> fun_call .)
    RBLOCK          reduce using rule 17 (declaration -> fun_call .)


state 18

    (18) declaration -> obj_declaration .

    COMMENT         reduce using rule 18 (declaration -> obj_declaration .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> obj_declaration .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> obj_declaration .)
    empty           reduce using rule 18 (declaration -> obj_declaration .)
    include         reduce using rule 18 (declaration -> obj_declaration .)
    const           reduce using rule 18 (declaration -> obj_declaration .)
    print           reduce using rule 18 (declaration -> obj_declaration .)
    echo            reduce using rule 18 (declaration -> obj_declaration .)
    while           reduce using rule 18 (declaration -> obj_declaration .)
    if              reduce using rule 18 (declaration -> obj_declaration .)
    function        reduce using rule 18 (declaration -> obj_declaration .)
    ID              reduce using rule 18 (declaration -> obj_declaration .)
    class           reduce using rule 18 (declaration -> obj_declaration .)
    new             reduce using rule 18 (declaration -> obj_declaration .)
    CLOSE_TAG       reduce using rule 18 (declaration -> obj_declaration .)
    for             reduce using rule 18 (declaration -> obj_declaration .)
    foreach         reduce using rule 18 (declaration -> obj_declaration .)
    exit            reduce using rule 18 (declaration -> obj_declaration .)
    VARIABLE        reduce using rule 18 (declaration -> obj_declaration .)
    $end            reduce using rule 18 (declaration -> obj_declaration .)
    RBLOCK          reduce using rule 18 (declaration -> obj_declaration .)


state 19

    (19) declaration -> create_obj_declaration .

    COMMENT         reduce using rule 19 (declaration -> create_obj_declaration .)
    COMMENT_HASHTAG reduce using rule 19 (declaration -> create_obj_declaration .)
    COMMENT_MULTI   reduce using rule 19 (declaration -> create_obj_declaration .)
    empty           reduce using rule 19 (declaration -> create_obj_declaration .)
    include         reduce using rule 19 (declaration -> create_obj_declaration .)
    const           reduce using rule 19 (declaration -> create_obj_declaration .)
    print           reduce using rule 19 (declaration -> create_obj_declaration .)
    echo            reduce using rule 19 (declaration -> create_obj_declaration .)
    while           reduce using rule 19 (declaration -> create_obj_declaration .)
    if              reduce using rule 19 (declaration -> create_obj_declaration .)
    function        reduce using rule 19 (declaration -> create_obj_declaration .)
    ID              reduce using rule 19 (declaration -> create_obj_declaration .)
    class           reduce using rule 19 (declaration -> create_obj_declaration .)
    new             reduce using rule 19 (declaration -> create_obj_declaration .)
    CLOSE_TAG       reduce using rule 19 (declaration -> create_obj_declaration .)
    for             reduce using rule 19 (declaration -> create_obj_declaration .)
    foreach         reduce using rule 19 (declaration -> create_obj_declaration .)
    exit            reduce using rule 19 (declaration -> create_obj_declaration .)
    VARIABLE        reduce using rule 19 (declaration -> create_obj_declaration .)
    $end            reduce using rule 19 (declaration -> create_obj_declaration .)
    RBLOCK          reduce using rule 19 (declaration -> create_obj_declaration .)


state 20

    (20) declaration -> footer_declaration .

    COMMENT         reduce using rule 20 (declaration -> footer_declaration .)
    COMMENT_HASHTAG reduce using rule 20 (declaration -> footer_declaration .)
    COMMENT_MULTI   reduce using rule 20 (declaration -> footer_declaration .)
    empty           reduce using rule 20 (declaration -> footer_declaration .)
    include         reduce using rule 20 (declaration -> footer_declaration .)
    const           reduce using rule 20 (declaration -> footer_declaration .)
    print           reduce using rule 20 (declaration -> footer_declaration .)
    echo            reduce using rule 20 (declaration -> footer_declaration .)
    while           reduce using rule 20 (declaration -> footer_declaration .)
    if              reduce using rule 20 (declaration -> footer_declaration .)
    function        reduce using rule 20 (declaration -> footer_declaration .)
    ID              reduce using rule 20 (declaration -> footer_declaration .)
    class           reduce using rule 20 (declaration -> footer_declaration .)
    new             reduce using rule 20 (declaration -> footer_declaration .)
    CLOSE_TAG       reduce using rule 20 (declaration -> footer_declaration .)
    for             reduce using rule 20 (declaration -> footer_declaration .)
    foreach         reduce using rule 20 (declaration -> footer_declaration .)
    exit            reduce using rule 20 (declaration -> footer_declaration .)
    VARIABLE        reduce using rule 20 (declaration -> footer_declaration .)
    $end            reduce using rule 20 (declaration -> footer_declaration .)
    RBLOCK          reduce using rule 20 (declaration -> footer_declaration .)


state 21

    (21) declaration -> for_loop .

    COMMENT         reduce using rule 21 (declaration -> for_loop .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> for_loop .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> for_loop .)
    empty           reduce using rule 21 (declaration -> for_loop .)
    include         reduce using rule 21 (declaration -> for_loop .)
    const           reduce using rule 21 (declaration -> for_loop .)
    print           reduce using rule 21 (declaration -> for_loop .)
    echo            reduce using rule 21 (declaration -> for_loop .)
    while           reduce using rule 21 (declaration -> for_loop .)
    if              reduce using rule 21 (declaration -> for_loop .)
    function        reduce using rule 21 (declaration -> for_loop .)
    ID              reduce using rule 21 (declaration -> for_loop .)
    class           reduce using rule 21 (declaration -> for_loop .)
    new             reduce using rule 21 (declaration -> for_loop .)
    CLOSE_TAG       reduce using rule 21 (declaration -> for_loop .)
    for             reduce using rule 21 (declaration -> for_loop .)
    foreach         reduce using rule 21 (declaration -> for_loop .)
    exit            reduce using rule 21 (declaration -> for_loop .)
    VARIABLE        reduce using rule 21 (declaration -> for_loop .)
    $end            reduce using rule 21 (declaration -> for_loop .)
    RBLOCK          reduce using rule 21 (declaration -> for_loop .)


state 22

    (22) declaration -> foreach_loop .

    COMMENT         reduce using rule 22 (declaration -> foreach_loop .)
    COMMENT_HASHTAG reduce using rule 22 (declaration -> foreach_loop .)
    COMMENT_MULTI   reduce using rule 22 (declaration -> foreach_loop .)
    empty           reduce using rule 22 (declaration -> foreach_loop .)
    include         reduce using rule 22 (declaration -> foreach_loop .)
    const           reduce using rule 22 (declaration -> foreach_loop .)
    print           reduce using rule 22 (declaration -> foreach_loop .)
    echo            reduce using rule 22 (declaration -> foreach_loop .)
    while           reduce using rule 22 (declaration -> foreach_loop .)
    if              reduce using rule 22 (declaration -> foreach_loop .)
    function        reduce using rule 22 (declaration -> foreach_loop .)
    ID              reduce using rule 22 (declaration -> foreach_loop .)
    class           reduce using rule 22 (declaration -> foreach_loop .)
    new             reduce using rule 22 (declaration -> foreach_loop .)
    CLOSE_TAG       reduce using rule 22 (declaration -> foreach_loop .)
    for             reduce using rule 22 (declaration -> foreach_loop .)
    foreach         reduce using rule 22 (declaration -> foreach_loop .)
    exit            reduce using rule 22 (declaration -> foreach_loop .)
    VARIABLE        reduce using rule 22 (declaration -> foreach_loop .)
    $end            reduce using rule 22 (declaration -> foreach_loop .)
    RBLOCK          reduce using rule 22 (declaration -> foreach_loop .)


state 23

    (23) declaration -> exit_statement .

    COMMENT         reduce using rule 23 (declaration -> exit_statement .)
    COMMENT_HASHTAG reduce using rule 23 (declaration -> exit_statement .)
    COMMENT_MULTI   reduce using rule 23 (declaration -> exit_statement .)
    empty           reduce using rule 23 (declaration -> exit_statement .)
    include         reduce using rule 23 (declaration -> exit_statement .)
    const           reduce using rule 23 (declaration -> exit_statement .)
    print           reduce using rule 23 (declaration -> exit_statement .)
    echo            reduce using rule 23 (declaration -> exit_statement .)
    while           reduce using rule 23 (declaration -> exit_statement .)
    if              reduce using rule 23 (declaration -> exit_statement .)
    function        reduce using rule 23 (declaration -> exit_statement .)
    ID              reduce using rule 23 (declaration -> exit_statement .)
    class           reduce using rule 23 (declaration -> exit_statement .)
    new             reduce using rule 23 (declaration -> exit_statement .)
    CLOSE_TAG       reduce using rule 23 (declaration -> exit_statement .)
    for             reduce using rule 23 (declaration -> exit_statement .)
    foreach         reduce using rule 23 (declaration -> exit_statement .)
    exit            reduce using rule 23 (declaration -> exit_statement .)
    VARIABLE        reduce using rule 23 (declaration -> exit_statement .)
    $end            reduce using rule 23 (declaration -> exit_statement .)
    RBLOCK          reduce using rule 23 (declaration -> exit_statement .)


state 24

    (24) declaration -> empty .

    COMMENT         reduce using rule 24 (declaration -> empty .)
    COMMENT_HASHTAG reduce using rule 24 (declaration -> empty .)
    COMMENT_MULTI   reduce using rule 24 (declaration -> empty .)
    empty           reduce using rule 24 (declaration -> empty .)
    include         reduce using rule 24 (declaration -> empty .)
    const           reduce using rule 24 (declaration -> empty .)
    print           reduce using rule 24 (declaration -> empty .)
    echo            reduce using rule 24 (declaration -> empty .)
    while           reduce using rule 24 (declaration -> empty .)
    if              reduce using rule 24 (declaration -> empty .)
    function        reduce using rule 24 (declaration -> empty .)
    ID              reduce using rule 24 (declaration -> empty .)
    class           reduce using rule 24 (declaration -> empty .)
    new             reduce using rule 24 (declaration -> empty .)
    CLOSE_TAG       reduce using rule 24 (declaration -> empty .)
    for             reduce using rule 24 (declaration -> empty .)
    foreach         reduce using rule 24 (declaration -> empty .)
    exit            reduce using rule 24 (declaration -> empty .)
    VARIABLE        reduce using rule 24 (declaration -> empty .)
    $end            reduce using rule 24 (declaration -> empty .)
    RBLOCK          reduce using rule 24 (declaration -> empty .)


state 25

    (27) header_declaration -> include . CADENA SEMICOLON

    CADENA          shift and go to state 42


state 26

    (37) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 43


state 27

    (28) constant_declaration -> const . ID EQUAL data_type SEMICOLON

    ID              shift and go to state 44


state 28

    (84) fun_call -> ID . LPAREN params RPAREN

    LPAREN          shift and go to state 45


state 29

    (29) print_declaration -> print . var_declaration2 SEMICOLON
    (30) print_declaration -> print . LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> print . LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> print . data_type SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    LPAREN          shift and go to state 47
    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 46
    data_type                      shift and go to state 48

state 30

    (33) echo_declaration -> echo . var_declaration2 SEMICOLON
    (34) echo_declaration -> echo . LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> echo . LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> echo . data_type SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    LPAREN          shift and go to state 52
    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 51
    data_type                      shift and go to state 53

state 31

    (47) iteration_stmt -> while . LPAREN expression RPAREN LBLOCK declaration RBLOCK

    LPAREN          shift and go to state 54


state 32

    (78) if_statement -> if . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 55


state 33

    (83) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration RBLOCK

    ID              shift and go to state 56


state 34

    (85) obj_declaration -> class . ID LBLOCK declaration RBLOCK

    ID              shift and go to state 57


state 35

    (86) create_obj_declaration -> new . ID LPAREN params RPAREN

    ID              shift and go to state 58


state 36

    (3) footer_declaration -> CLOSE_TAG .

    COMMENT         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_HASHTAG reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_MULTI   reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    empty           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    const           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    print           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    echo            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    while           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    if              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    function        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    ID              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    class           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    new             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    for             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    foreach         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exit            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    VARIABLE        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    $end            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    RBLOCK          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)


state 37

    (91) for_loop -> for . LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK

    LPAREN          shift and go to state 59


state 38

    (96) foreach_loop -> foreach . LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK

    LPAREN          shift and go to state 60


state 39

    (95) exit_statement -> exit . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 61


state 40

    (38) var_declaration2 -> VARIABLE . assignment_tail
    (39) assignment_tail -> . EQUAL expression
    (40) assignment_tail -> . EQUAL NUMBER COMMA var_declaration2
    (41) assignment_tail -> . EQUAL VARIABLE COMMA var_declaration2
    (42) assignment_tail -> . EQUAL CADENA
    (43) assignment_tail -> . COMMA var_declaration2
    (44) assignment_tail -> . EQUAL LBRACKET expression COMMA var_declaration2
    (45) assignment_tail -> . EQUAL LBRACKET data_type COMMA var_declaration2
    (46) assignment_tail -> . RBRACKET

    EQUAL           shift and go to state 63
    COMMA           shift and go to state 64
    RBRACKET        shift and go to state 65

    assignment_tail                shift and go to state 62

state 41

    (5) declaration_list -> declaration_list declaration .

    COMMENT         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_HASHTAG reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_MULTI   reduce using rule 5 (declaration_list -> declaration_list declaration .)
    empty           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    const           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    print           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    echo            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    while           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    if              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    function        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    class           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    new             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    for             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    foreach         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exit            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    RBLOCK          reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 42

    (27) header_declaration -> include CADENA . SEMICOLON

    SEMICOLON       shift and go to state 66


state 43

    (37) var_declaration -> var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    empty           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    include         reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    const           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    print           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    echo            reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    while           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    if              reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    function        reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    class           reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    new             reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    for             reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    foreach         reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    exit            reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    $end            reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 37 (var_declaration -> var_declaration2 SEMICOLON .)


state 44

    (28) constant_declaration -> const ID . EQUAL data_type SEMICOLON

    EQUAL           shift and go to state 67


state 45

    (84) fun_call -> ID LPAREN . params RPAREN
    (87) params -> . single_param
    (88) params -> . params COMMA single_param
    (89) single_param -> . var_declaration2
    (90) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (97) empty_function -> .

    VARIABLE        shift and go to state 40
    RPAREN          reduce using rule 97 (empty_function -> .)
    COMMA           reduce using rule 97 (empty_function -> .)

    params                         shift and go to state 68
    single_param                   shift and go to state 69
    var_declaration2               shift and go to state 70
    empty_function                 shift and go to state 71

state 46

    (29) print_declaration -> print var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 72


state 47

    (30) print_declaration -> print LPAREN . var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> print LPAREN . data_type RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 73
    data_type                      shift and go to state 74

state 48

    (32) print_declaration -> print data_type . SEMICOLON

    SEMICOLON       shift and go to state 75


state 49

    (25) data_type -> NUMBER .

    SEMICOLON       reduce using rule 25 (data_type -> NUMBER .)
    RPAREN          reduce using rule 25 (data_type -> NUMBER .)


state 50

    (26) data_type -> CADENA .

    SEMICOLON       reduce using rule 26 (data_type -> CADENA .)
    RPAREN          reduce using rule 26 (data_type -> CADENA .)
    COMMA           reduce using rule 26 (data_type -> CADENA .)


state 51

    (33) echo_declaration -> echo var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 76


state 52

    (34) echo_declaration -> echo LPAREN . var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> echo LPAREN . data_type RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    VARIABLE        shift and go to state 40
    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    var_declaration2               shift and go to state 77
    data_type                      shift and go to state 78

state 53

    (36) echo_declaration -> echo data_type . SEMICOLON

    SEMICOLON       shift and go to state 79


state 54

    (47) iteration_stmt -> while LPAREN . expression RPAREN LBLOCK declaration RBLOCK
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 81
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 55

    (78) if_statement -> if LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 90
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 56

    (83) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration RBLOCK

    LPAREN          shift and go to state 91


state 57

    (85) obj_declaration -> class ID . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 92


state 58

    (86) create_obj_declaration -> new ID . LPAREN params RPAREN

    LPAREN          shift and go to state 93


state 59

    (91) for_loop -> for LPAREN . for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (92) for_init -> . var_declaration2 SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    VARIABLE        shift and go to state 40

    for_init                       shift and go to state 94
    var_declaration2               shift and go to state 95

state 60

    (96) foreach_loop -> foreach LPAREN . expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 96
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 61

    (95) exit_statement -> exit LPAREN . expression RPAREN SEMICOLON
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 97
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 62

    (38) var_declaration2 -> VARIABLE assignment_tail .

    SEMICOLON       reduce using rule 38 (var_declaration2 -> VARIABLE assignment_tail .)
    RPAREN          reduce using rule 38 (var_declaration2 -> VARIABLE assignment_tail .)
    COMMA           reduce using rule 38 (var_declaration2 -> VARIABLE assignment_tail .)


state 63

    (39) assignment_tail -> EQUAL . expression
    (40) assignment_tail -> EQUAL . NUMBER COMMA var_declaration2
    (41) assignment_tail -> EQUAL . VARIABLE COMMA var_declaration2
    (42) assignment_tail -> EQUAL . CADENA
    (44) assignment_tail -> EQUAL . LBRACKET expression COMMA var_declaration2
    (45) assignment_tail -> EQUAL . LBRACKET data_type COMMA var_declaration2
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 99
    VARIABLE        shift and go to state 100
    CADENA          shift and go to state 101
    LBRACKET        shift and go to state 102
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 98
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 64

    (43) assignment_tail -> COMMA . var_declaration2
    (38) var_declaration2 -> . VARIABLE assignment_tail

    VARIABLE        shift and go to state 40

    var_declaration2               shift and go to state 103

state 65

    (46) assignment_tail -> RBRACKET .

    SEMICOLON       reduce using rule 46 (assignment_tail -> RBRACKET .)
    RPAREN          reduce using rule 46 (assignment_tail -> RBRACKET .)
    COMMA           reduce using rule 46 (assignment_tail -> RBRACKET .)


state 66

    (27) header_declaration -> include CADENA SEMICOLON .

    COMMENT         reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    empty           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    include         reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    const           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    print           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    echo            reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    while           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    if              reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    function        reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    ID              reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    class           reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    new             reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    for             reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    foreach         reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    exit            reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    VARIABLE        reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    $end            reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)
    RBLOCK          reduce using rule 27 (header_declaration -> include CADENA SEMICOLON .)


state 67

    (28) constant_declaration -> const ID EQUAL . data_type SEMICOLON
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA

    NUMBER          shift and go to state 49
    CADENA          shift and go to state 50

    data_type                      shift and go to state 104

state 68

    (84) fun_call -> ID LPAREN params . RPAREN
    (88) params -> params . COMMA single_param

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 106


state 69

    (87) params -> single_param .

    RPAREN          reduce using rule 87 (params -> single_param .)
    COMMA           reduce using rule 87 (params -> single_param .)


state 70

    (89) single_param -> var_declaration2 .

    RPAREN          reduce using rule 89 (single_param -> var_declaration2 .)
    COMMA           reduce using rule 89 (single_param -> var_declaration2 .)


state 71

    (90) single_param -> empty_function .

    RPAREN          reduce using rule 90 (single_param -> empty_function .)
    COMMA           reduce using rule 90 (single_param -> empty_function .)


state 72

    (29) print_declaration -> print var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    empty           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    include         reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    const           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    print           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    echo            reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    while           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    if              reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    function        reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    ID              reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    class           reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    new             reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    for             reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    foreach         reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    exit            reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    $end            reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 29 (print_declaration -> print var_declaration2 SEMICOLON .)


state 73

    (30) print_declaration -> print LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 107


state 74

    (31) print_declaration -> print LPAREN data_type . RPAREN SEMICOLON

    RPAREN          shift and go to state 108


state 75

    (32) print_declaration -> print data_type SEMICOLON .

    COMMENT         reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    empty           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    include         reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    const           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    print           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    echo            reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    while           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    if              reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    function        reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    ID              reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    class           reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    new             reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    for             reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    foreach         reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    exit            reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    VARIABLE        reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    $end            reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)
    RBLOCK          reduce using rule 32 (print_declaration -> print data_type SEMICOLON .)


state 76

    (33) echo_declaration -> echo var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    empty           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include         reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    const           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    print           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    echo            reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    while           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    if              reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    function        reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    ID              reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    class           reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    new             reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    for             reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    foreach         reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exit            reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    $end            reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 33 (echo_declaration -> echo var_declaration2 SEMICOLON .)


state 77

    (34) echo_declaration -> echo LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 109


state 78

    (35) echo_declaration -> echo LPAREN data_type . RPAREN SEMICOLON

    RPAREN          shift and go to state 110


state 79

    (36) echo_declaration -> echo data_type SEMICOLON .

    COMMENT         reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    empty           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    include         reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    const           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    print           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    echo            reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    while           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    if              reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    function        reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    ID              reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    class           reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    new             reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    for             reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    foreach         reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    exit            reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    VARIABLE        reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    $end            reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)
    RBLOCK          reduce using rule 36 (echo_declaration -> echo data_type SEMICOLON .)


state 80

    (59) factor -> LPAREN . expression RPAREN
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 111
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 81

    (47) iteration_stmt -> while LPAREN expression . RPAREN LBLOCK declaration RBLOCK

    RPAREN          shift and go to state 112


state 82

    (48) expression -> additive_expression .
    (49) expression -> additive_expression . logical_op additive_expression
    (50) expression -> additive_expression . comp_op additive_expression
    (51) expression -> additive_expression . comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (73) logical_op -> . BOOL_OR
    (74) logical_op -> . BOOL_AND
    (75) logical_op -> . NOT
    (76) logical_op -> . or
    (77) logical_op -> . and
    (66) comp_op -> . LESS
    (67) comp_op -> . LESSEQUAL
    (68) comp_op -> . GREATER
    (69) comp_op -> . GREATEREQUAL
    (70) comp_op -> . DEQUAL
    (71) comp_op -> . DISTINT
    (72) comp_op -> . ISEQUAL

    RPAREN          reduce using rule 48 (expression -> additive_expression .)
    as              reduce using rule 48 (expression -> additive_expression .)
    SEMICOLON       reduce using rule 48 (expression -> additive_expression .)
    COMMA           reduce using rule 48 (expression -> additive_expression .)
    BOOL_OR         shift and go to state 115
    BOOL_AND        shift and go to state 116
    NOT             shift and go to state 117
    or              shift and go to state 118
    and             shift and go to state 119
    LESS            shift and go to state 120
    LESSEQUAL       shift and go to state 121
    GREATER         shift and go to state 122
    GREATEREQUAL    shift and go to state 123
    DEQUAL          shift and go to state 124
    DISTINT         shift and go to state 125
    ISEQUAL         shift and go to state 126

    logical_op                     shift and go to state 113
    comp_op                        shift and go to state 114

state 83

    (52) additive_expression -> term .
    (53) additive_expression -> term . math_op term
    (62) math_op -> . PLUS
    (63) math_op -> . MINUS
    (64) math_op -> . TIMES
    (65) math_op -> . DIVIDE

    BOOL_OR         reduce using rule 52 (additive_expression -> term .)
    BOOL_AND        reduce using rule 52 (additive_expression -> term .)
    NOT             reduce using rule 52 (additive_expression -> term .)
    or              reduce using rule 52 (additive_expression -> term .)
    and             reduce using rule 52 (additive_expression -> term .)
    LESS            reduce using rule 52 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 52 (additive_expression -> term .)
    GREATER         reduce using rule 52 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 52 (additive_expression -> term .)
    DEQUAL          reduce using rule 52 (additive_expression -> term .)
    DISTINT         reduce using rule 52 (additive_expression -> term .)
    ISEQUAL         reduce using rule 52 (additive_expression -> term .)
    RPAREN          reduce using rule 52 (additive_expression -> term .)
    as              reduce using rule 52 (additive_expression -> term .)
    SEMICOLON       reduce using rule 52 (additive_expression -> term .)
    COMMA           reduce using rule 52 (additive_expression -> term .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129
    TIMES           shift and go to state 130
    DIVIDE          shift and go to state 131

    math_op                        shift and go to state 127

state 84

    (54) term -> factor .
    (55) term -> factor . increment_decrement_op
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    PLUS            reduce using rule 54 (term -> factor .)
    MINUS           reduce using rule 54 (term -> factor .)
    TIMES           reduce using rule 54 (term -> factor .)
    DIVIDE          reduce using rule 54 (term -> factor .)
    BOOL_OR         reduce using rule 54 (term -> factor .)
    BOOL_AND        reduce using rule 54 (term -> factor .)
    NOT             reduce using rule 54 (term -> factor .)
    or              reduce using rule 54 (term -> factor .)
    and             reduce using rule 54 (term -> factor .)
    LESS            reduce using rule 54 (term -> factor .)
    LESSEQUAL       reduce using rule 54 (term -> factor .)
    GREATER         reduce using rule 54 (term -> factor .)
    GREATEREQUAL    reduce using rule 54 (term -> factor .)
    DEQUAL          reduce using rule 54 (term -> factor .)
    DISTINT         reduce using rule 54 (term -> factor .)
    ISEQUAL         reduce using rule 54 (term -> factor .)
    RPAREN          reduce using rule 54 (term -> factor .)
    as              reduce using rule 54 (term -> factor .)
    SEMICOLON       reduce using rule 54 (term -> factor .)
    COMMA           reduce using rule 54 (term -> factor .)
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    increment_decrement_op         shift and go to state 132

state 85

    (56) term -> increment_decrement_op . factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80

    factor                         shift and go to state 133

state 86

    (57) factor -> NUMBER .

    PLUSPLUS        reduce using rule 57 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 57 (factor -> NUMBER .)
    PLUS            reduce using rule 57 (factor -> NUMBER .)
    MINUS           reduce using rule 57 (factor -> NUMBER .)
    TIMES           reduce using rule 57 (factor -> NUMBER .)
    DIVIDE          reduce using rule 57 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 57 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 57 (factor -> NUMBER .)
    NOT             reduce using rule 57 (factor -> NUMBER .)
    or              reduce using rule 57 (factor -> NUMBER .)
    and             reduce using rule 57 (factor -> NUMBER .)
    LESS            reduce using rule 57 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 57 (factor -> NUMBER .)
    GREATER         reduce using rule 57 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 57 (factor -> NUMBER .)
    DEQUAL          reduce using rule 57 (factor -> NUMBER .)
    DISTINT         reduce using rule 57 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 57 (factor -> NUMBER .)
    RPAREN          reduce using rule 57 (factor -> NUMBER .)
    as              reduce using rule 57 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 57 (factor -> NUMBER .)
    COMMA           reduce using rule 57 (factor -> NUMBER .)


state 87

    (58) factor -> VARIABLE .

    PLUSPLUS        reduce using rule 58 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 58 (factor -> VARIABLE .)
    PLUS            reduce using rule 58 (factor -> VARIABLE .)
    MINUS           reduce using rule 58 (factor -> VARIABLE .)
    TIMES           reduce using rule 58 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 58 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 58 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 58 (factor -> VARIABLE .)
    NOT             reduce using rule 58 (factor -> VARIABLE .)
    or              reduce using rule 58 (factor -> VARIABLE .)
    and             reduce using rule 58 (factor -> VARIABLE .)
    LESS            reduce using rule 58 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 58 (factor -> VARIABLE .)
    GREATER         reduce using rule 58 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 58 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 58 (factor -> VARIABLE .)
    DISTINT         reduce using rule 58 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 58 (factor -> VARIABLE .)
    RPAREN          reduce using rule 58 (factor -> VARIABLE .)
    as              reduce using rule 58 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 58 (factor -> VARIABLE .)
    COMMA           reduce using rule 58 (factor -> VARIABLE .)


state 88

    (60) increment_decrement_op -> PLUSPLUS .

    NUMBER          reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    VARIABLE        reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    LPAREN          reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    PLUS            reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    MINUS           reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    TIMES           reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    DIVIDE          reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    BOOL_OR         reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    BOOL_AND        reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    NOT             reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    or              reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    and             reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    LESS            reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    LESSEQUAL       reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    GREATER         reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    GREATEREQUAL    reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    DEQUAL          reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    DISTINT         reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    ISEQUAL         reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    RPAREN          reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    as              reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    SEMICOLON       reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)
    COMMA           reduce using rule 60 (increment_decrement_op -> PLUSPLUS .)


state 89

    (61) increment_decrement_op -> MINUSMINUS .

    NUMBER          reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    VARIABLE        reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    LPAREN          reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    PLUS            reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    MINUS           reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    TIMES           reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    DIVIDE          reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    BOOL_OR         reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    BOOL_AND        reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    NOT             reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    or              reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    and             reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    LESS            reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    LESSEQUAL       reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    GREATER         reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    GREATEREQUAL    reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    DEQUAL          reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    DISTINT         reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    ISEQUAL         reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    RPAREN          reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    as              reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    SEMICOLON       reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)
    COMMA           reduce using rule 61 (increment_decrement_op -> MINUSMINUS .)


state 90

    (78) if_statement -> if LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 134


state 91

    (83) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration RBLOCK
    (87) params -> . single_param
    (88) params -> . params COMMA single_param
    (89) single_param -> . var_declaration2
    (90) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (97) empty_function -> .

    VARIABLE        shift and go to state 40
    RPAREN          reduce using rule 97 (empty_function -> .)
    COMMA           reduce using rule 97 (empty_function -> .)

    params                         shift and go to state 135
    single_param                   shift and go to state 69
    var_declaration2               shift and go to state 70
    empty_function                 shift and go to state 71

state 92

    (85) obj_declaration -> class ID LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 136
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 93

    (86) create_obj_declaration -> new ID LPAREN . params RPAREN
    (87) params -> . single_param
    (88) params -> . params COMMA single_param
    (89) single_param -> . var_declaration2
    (90) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (97) empty_function -> .

    VARIABLE        shift and go to state 40
    RPAREN          reduce using rule 97 (empty_function -> .)
    COMMA           reduce using rule 97 (empty_function -> .)

    params                         shift and go to state 137
    single_param                   shift and go to state 69
    var_declaration2               shift and go to state 70
    empty_function                 shift and go to state 71

state 94

    (91) for_loop -> for LPAREN for_init . for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (93) for_expr -> . expression SEMICOLON
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    for_expr                       shift and go to state 138
    expression                     shift and go to state 139
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 95

    (92) for_init -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 140


state 96

    (96) foreach_loop -> foreach LPAREN expression . as expression RPAREN LBLOCK declaration_list RBLOCK

    as              shift and go to state 141


state 97

    (95) exit_statement -> exit LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 142


state 98

    (39) assignment_tail -> EQUAL expression .

    SEMICOLON       reduce using rule 39 (assignment_tail -> EQUAL expression .)
    RPAREN          reduce using rule 39 (assignment_tail -> EQUAL expression .)
    COMMA           reduce using rule 39 (assignment_tail -> EQUAL expression .)


state 99

    (40) assignment_tail -> EQUAL NUMBER . COMMA var_declaration2
    (57) factor -> NUMBER .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 143
    PLUSPLUS        reduce using rule 57 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 57 (factor -> NUMBER .)
    PLUS            reduce using rule 57 (factor -> NUMBER .)
    MINUS           reduce using rule 57 (factor -> NUMBER .)
    TIMES           reduce using rule 57 (factor -> NUMBER .)
    DIVIDE          reduce using rule 57 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 57 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 57 (factor -> NUMBER .)
    NOT             reduce using rule 57 (factor -> NUMBER .)
    or              reduce using rule 57 (factor -> NUMBER .)
    and             reduce using rule 57 (factor -> NUMBER .)
    LESS            reduce using rule 57 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 57 (factor -> NUMBER .)
    GREATER         reduce using rule 57 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 57 (factor -> NUMBER .)
    DEQUAL          reduce using rule 57 (factor -> NUMBER .)
    DISTINT         reduce using rule 57 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 57 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 57 (factor -> NUMBER .)
    RPAREN          reduce using rule 57 (factor -> NUMBER .)

  ! COMMA           [ reduce using rule 57 (factor -> NUMBER .) ]


state 100

    (41) assignment_tail -> EQUAL VARIABLE . COMMA var_declaration2
    (58) factor -> VARIABLE .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 144
    PLUSPLUS        reduce using rule 58 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 58 (factor -> VARIABLE .)
    PLUS            reduce using rule 58 (factor -> VARIABLE .)
    MINUS           reduce using rule 58 (factor -> VARIABLE .)
    TIMES           reduce using rule 58 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 58 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 58 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 58 (factor -> VARIABLE .)
    NOT             reduce using rule 58 (factor -> VARIABLE .)
    or              reduce using rule 58 (factor -> VARIABLE .)
    and             reduce using rule 58 (factor -> VARIABLE .)
    LESS            reduce using rule 58 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 58 (factor -> VARIABLE .)
    GREATER         reduce using rule 58 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 58 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 58 (factor -> VARIABLE .)
    DISTINT         reduce using rule 58 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 58 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 58 (factor -> VARIABLE .)
    RPAREN          reduce using rule 58 (factor -> VARIABLE .)

  ! COMMA           [ reduce using rule 58 (factor -> VARIABLE .) ]


state 101

    (42) assignment_tail -> EQUAL CADENA .

    SEMICOLON       reduce using rule 42 (assignment_tail -> EQUAL CADENA .)
    RPAREN          reduce using rule 42 (assignment_tail -> EQUAL CADENA .)
    COMMA           reduce using rule 42 (assignment_tail -> EQUAL CADENA .)


state 102

    (44) assignment_tail -> EQUAL LBRACKET . expression COMMA var_declaration2
    (45) assignment_tail -> EQUAL LBRACKET . data_type COMMA var_declaration2
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (25) data_type -> . NUMBER
    (26) data_type -> . CADENA
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 147
    CADENA          shift and go to state 50
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 145
    data_type                      shift and go to state 146
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 103

    (43) assignment_tail -> COMMA var_declaration2 .

    SEMICOLON       reduce using rule 43 (assignment_tail -> COMMA var_declaration2 .)
    RPAREN          reduce using rule 43 (assignment_tail -> COMMA var_declaration2 .)
    COMMA           reduce using rule 43 (assignment_tail -> COMMA var_declaration2 .)


state 104

    (28) constant_declaration -> const ID EQUAL data_type . SEMICOLON

    SEMICOLON       shift and go to state 148


state 105

    (84) fun_call -> ID LPAREN params RPAREN .

    COMMENT         reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    empty           reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    include         reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    const           reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    print           reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    echo            reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    while           reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    if              reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    function        reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    class           reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    new             reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    for             reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    foreach         reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    exit            reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 84 (fun_call -> ID LPAREN params RPAREN .)


state 106

    (88) params -> params COMMA . single_param
    (89) single_param -> . var_declaration2
    (90) single_param -> . empty_function
    (38) var_declaration2 -> . VARIABLE assignment_tail
    (97) empty_function -> .

    VARIABLE        shift and go to state 40
    RPAREN          reduce using rule 97 (empty_function -> .)
    COMMA           reduce using rule 97 (empty_function -> .)

    single_param                   shift and go to state 149
    var_declaration2               shift and go to state 70
    empty_function                 shift and go to state 71

state 107

    (30) print_declaration -> print LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 150


state 108

    (31) print_declaration -> print LPAREN data_type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 151


state 109

    (34) echo_declaration -> echo LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 152


state 110

    (35) echo_declaration -> echo LPAREN data_type RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 111

    (59) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 154


state 112

    (47) iteration_stmt -> while LPAREN expression RPAREN . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 155


state 113

    (49) expression -> additive_expression logical_op . additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    additive_expression            shift and go to state 156
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 114

    (50) expression -> additive_expression comp_op . additive_expression
    (51) expression -> additive_expression comp_op . additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    additive_expression            shift and go to state 157
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 115

    (73) logical_op -> BOOL_OR .

    NUMBER          reduce using rule 73 (logical_op -> BOOL_OR .)
    VARIABLE        reduce using rule 73 (logical_op -> BOOL_OR .)
    LPAREN          reduce using rule 73 (logical_op -> BOOL_OR .)
    PLUSPLUS        reduce using rule 73 (logical_op -> BOOL_OR .)
    MINUSMINUS      reduce using rule 73 (logical_op -> BOOL_OR .)


state 116

    (74) logical_op -> BOOL_AND .

    NUMBER          reduce using rule 74 (logical_op -> BOOL_AND .)
    VARIABLE        reduce using rule 74 (logical_op -> BOOL_AND .)
    LPAREN          reduce using rule 74 (logical_op -> BOOL_AND .)
    PLUSPLUS        reduce using rule 74 (logical_op -> BOOL_AND .)
    MINUSMINUS      reduce using rule 74 (logical_op -> BOOL_AND .)


state 117

    (75) logical_op -> NOT .

    NUMBER          reduce using rule 75 (logical_op -> NOT .)
    VARIABLE        reduce using rule 75 (logical_op -> NOT .)
    LPAREN          reduce using rule 75 (logical_op -> NOT .)
    PLUSPLUS        reduce using rule 75 (logical_op -> NOT .)
    MINUSMINUS      reduce using rule 75 (logical_op -> NOT .)


state 118

    (76) logical_op -> or .

    NUMBER          reduce using rule 76 (logical_op -> or .)
    VARIABLE        reduce using rule 76 (logical_op -> or .)
    LPAREN          reduce using rule 76 (logical_op -> or .)
    PLUSPLUS        reduce using rule 76 (logical_op -> or .)
    MINUSMINUS      reduce using rule 76 (logical_op -> or .)


state 119

    (77) logical_op -> and .

    NUMBER          reduce using rule 77 (logical_op -> and .)
    VARIABLE        reduce using rule 77 (logical_op -> and .)
    LPAREN          reduce using rule 77 (logical_op -> and .)
    PLUSPLUS        reduce using rule 77 (logical_op -> and .)
    MINUSMINUS      reduce using rule 77 (logical_op -> and .)


state 120

    (66) comp_op -> LESS .

    NUMBER          reduce using rule 66 (comp_op -> LESS .)
    VARIABLE        reduce using rule 66 (comp_op -> LESS .)
    LPAREN          reduce using rule 66 (comp_op -> LESS .)
    PLUSPLUS        reduce using rule 66 (comp_op -> LESS .)
    MINUSMINUS      reduce using rule 66 (comp_op -> LESS .)


state 121

    (67) comp_op -> LESSEQUAL .

    NUMBER          reduce using rule 67 (comp_op -> LESSEQUAL .)
    VARIABLE        reduce using rule 67 (comp_op -> LESSEQUAL .)
    LPAREN          reduce using rule 67 (comp_op -> LESSEQUAL .)
    PLUSPLUS        reduce using rule 67 (comp_op -> LESSEQUAL .)
    MINUSMINUS      reduce using rule 67 (comp_op -> LESSEQUAL .)


state 122

    (68) comp_op -> GREATER .

    NUMBER          reduce using rule 68 (comp_op -> GREATER .)
    VARIABLE        reduce using rule 68 (comp_op -> GREATER .)
    LPAREN          reduce using rule 68 (comp_op -> GREATER .)
    PLUSPLUS        reduce using rule 68 (comp_op -> GREATER .)
    MINUSMINUS      reduce using rule 68 (comp_op -> GREATER .)


state 123

    (69) comp_op -> GREATEREQUAL .

    NUMBER          reduce using rule 69 (comp_op -> GREATEREQUAL .)
    VARIABLE        reduce using rule 69 (comp_op -> GREATEREQUAL .)
    LPAREN          reduce using rule 69 (comp_op -> GREATEREQUAL .)
    PLUSPLUS        reduce using rule 69 (comp_op -> GREATEREQUAL .)
    MINUSMINUS      reduce using rule 69 (comp_op -> GREATEREQUAL .)


state 124

    (70) comp_op -> DEQUAL .

    NUMBER          reduce using rule 70 (comp_op -> DEQUAL .)
    VARIABLE        reduce using rule 70 (comp_op -> DEQUAL .)
    LPAREN          reduce using rule 70 (comp_op -> DEQUAL .)
    PLUSPLUS        reduce using rule 70 (comp_op -> DEQUAL .)
    MINUSMINUS      reduce using rule 70 (comp_op -> DEQUAL .)


state 125

    (71) comp_op -> DISTINT .

    NUMBER          reduce using rule 71 (comp_op -> DISTINT .)
    VARIABLE        reduce using rule 71 (comp_op -> DISTINT .)
    LPAREN          reduce using rule 71 (comp_op -> DISTINT .)
    PLUSPLUS        reduce using rule 71 (comp_op -> DISTINT .)
    MINUSMINUS      reduce using rule 71 (comp_op -> DISTINT .)


state 126

    (72) comp_op -> ISEQUAL .

    NUMBER          reduce using rule 72 (comp_op -> ISEQUAL .)
    VARIABLE        reduce using rule 72 (comp_op -> ISEQUAL .)
    LPAREN          reduce using rule 72 (comp_op -> ISEQUAL .)
    PLUSPLUS        reduce using rule 72 (comp_op -> ISEQUAL .)
    MINUSMINUS      reduce using rule 72 (comp_op -> ISEQUAL .)


state 127

    (53) additive_expression -> term math_op . term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    term                           shift and go to state 158
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 128

    (62) math_op -> PLUS .

    NUMBER          reduce using rule 62 (math_op -> PLUS .)
    VARIABLE        reduce using rule 62 (math_op -> PLUS .)
    LPAREN          reduce using rule 62 (math_op -> PLUS .)
    PLUSPLUS        reduce using rule 62 (math_op -> PLUS .)
    MINUSMINUS      reduce using rule 62 (math_op -> PLUS .)


state 129

    (63) math_op -> MINUS .

    NUMBER          reduce using rule 63 (math_op -> MINUS .)
    VARIABLE        reduce using rule 63 (math_op -> MINUS .)
    LPAREN          reduce using rule 63 (math_op -> MINUS .)
    PLUSPLUS        reduce using rule 63 (math_op -> MINUS .)
    MINUSMINUS      reduce using rule 63 (math_op -> MINUS .)


state 130

    (64) math_op -> TIMES .

    NUMBER          reduce using rule 64 (math_op -> TIMES .)
    VARIABLE        reduce using rule 64 (math_op -> TIMES .)
    LPAREN          reduce using rule 64 (math_op -> TIMES .)
    PLUSPLUS        reduce using rule 64 (math_op -> TIMES .)
    MINUSMINUS      reduce using rule 64 (math_op -> TIMES .)


state 131

    (65) math_op -> DIVIDE .

    NUMBER          reduce using rule 65 (math_op -> DIVIDE .)
    VARIABLE        reduce using rule 65 (math_op -> DIVIDE .)
    LPAREN          reduce using rule 65 (math_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 65 (math_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 65 (math_op -> DIVIDE .)


state 132

    (55) term -> factor increment_decrement_op .

    PLUS            reduce using rule 55 (term -> factor increment_decrement_op .)
    MINUS           reduce using rule 55 (term -> factor increment_decrement_op .)
    TIMES           reduce using rule 55 (term -> factor increment_decrement_op .)
    DIVIDE          reduce using rule 55 (term -> factor increment_decrement_op .)
    BOOL_OR         reduce using rule 55 (term -> factor increment_decrement_op .)
    BOOL_AND        reduce using rule 55 (term -> factor increment_decrement_op .)
    NOT             reduce using rule 55 (term -> factor increment_decrement_op .)
    or              reduce using rule 55 (term -> factor increment_decrement_op .)
    and             reduce using rule 55 (term -> factor increment_decrement_op .)
    LESS            reduce using rule 55 (term -> factor increment_decrement_op .)
    LESSEQUAL       reduce using rule 55 (term -> factor increment_decrement_op .)
    GREATER         reduce using rule 55 (term -> factor increment_decrement_op .)
    GREATEREQUAL    reduce using rule 55 (term -> factor increment_decrement_op .)
    DEQUAL          reduce using rule 55 (term -> factor increment_decrement_op .)
    DISTINT         reduce using rule 55 (term -> factor increment_decrement_op .)
    ISEQUAL         reduce using rule 55 (term -> factor increment_decrement_op .)
    RPAREN          reduce using rule 55 (term -> factor increment_decrement_op .)
    as              reduce using rule 55 (term -> factor increment_decrement_op .)
    SEMICOLON       reduce using rule 55 (term -> factor increment_decrement_op .)
    COMMA           reduce using rule 55 (term -> factor increment_decrement_op .)


state 133

    (56) term -> increment_decrement_op factor .

    PLUS            reduce using rule 56 (term -> increment_decrement_op factor .)
    MINUS           reduce using rule 56 (term -> increment_decrement_op factor .)
    TIMES           reduce using rule 56 (term -> increment_decrement_op factor .)
    DIVIDE          reduce using rule 56 (term -> increment_decrement_op factor .)
    BOOL_OR         reduce using rule 56 (term -> increment_decrement_op factor .)
    BOOL_AND        reduce using rule 56 (term -> increment_decrement_op factor .)
    NOT             reduce using rule 56 (term -> increment_decrement_op factor .)
    or              reduce using rule 56 (term -> increment_decrement_op factor .)
    and             reduce using rule 56 (term -> increment_decrement_op factor .)
    LESS            reduce using rule 56 (term -> increment_decrement_op factor .)
    LESSEQUAL       reduce using rule 56 (term -> increment_decrement_op factor .)
    GREATER         reduce using rule 56 (term -> increment_decrement_op factor .)
    GREATEREQUAL    reduce using rule 56 (term -> increment_decrement_op factor .)
    DEQUAL          reduce using rule 56 (term -> increment_decrement_op factor .)
    DISTINT         reduce using rule 56 (term -> increment_decrement_op factor .)
    ISEQUAL         reduce using rule 56 (term -> increment_decrement_op factor .)
    RPAREN          reduce using rule 56 (term -> increment_decrement_op factor .)
    as              reduce using rule 56 (term -> increment_decrement_op factor .)
    SEMICOLON       reduce using rule 56 (term -> increment_decrement_op factor .)
    COMMA           reduce using rule 56 (term -> increment_decrement_op factor .)


state 134

    (78) if_statement -> if LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 159


state 135

    (83) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration RBLOCK
    (88) params -> params . COMMA single_param

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 106


state 136

    (85) obj_declaration -> class ID LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 161


state 137

    (86) create_obj_declaration -> new ID LPAREN params . RPAREN
    (88) params -> params . COMMA single_param

    RPAREN          shift and go to state 162
    COMMA           shift and go to state 106


state 138

    (91) for_loop -> for LPAREN for_init for_expr . for_update RPAREN LBLOCK declaration_list RBLOCK
    (94) for_update -> . expression
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    for_update                     shift and go to state 163
    expression                     shift and go to state 164
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 139

    (93) for_expr -> expression . SEMICOLON

    SEMICOLON       shift and go to state 165


state 140

    (92) for_init -> var_declaration2 SEMICOLON .

    NUMBER          reduce using rule 92 (for_init -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 92 (for_init -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 92 (for_init -> var_declaration2 SEMICOLON .)
    PLUSPLUS        reduce using rule 92 (for_init -> var_declaration2 SEMICOLON .)
    MINUSMINUS      reduce using rule 92 (for_init -> var_declaration2 SEMICOLON .)


state 141

    (96) foreach_loop -> foreach LPAREN expression as . expression RPAREN LBLOCK declaration_list RBLOCK
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 166
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 142

    (95) exit_statement -> exit LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 167


state 143

    (40) assignment_tail -> EQUAL NUMBER COMMA . var_declaration2
    (38) var_declaration2 -> . VARIABLE assignment_tail

    VARIABLE        shift and go to state 40

    var_declaration2               shift and go to state 168

state 144

    (41) assignment_tail -> EQUAL VARIABLE COMMA . var_declaration2
    (38) var_declaration2 -> . VARIABLE assignment_tail

    VARIABLE        shift and go to state 40

    var_declaration2               shift and go to state 169

state 145

    (44) assignment_tail -> EQUAL LBRACKET expression . COMMA var_declaration2

    COMMA           shift and go to state 170


state 146

    (45) assignment_tail -> EQUAL LBRACKET data_type . COMMA var_declaration2

    COMMA           shift and go to state 171


state 147

    (25) data_type -> NUMBER .
    (57) factor -> NUMBER .

  ! reduce/reduce conflict for COMMA resolved using rule 25 (data_type -> NUMBER .)
    COMMA           reduce using rule 25 (data_type -> NUMBER .)
    PLUSPLUS        reduce using rule 57 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 57 (factor -> NUMBER .)
    PLUS            reduce using rule 57 (factor -> NUMBER .)
    MINUS           reduce using rule 57 (factor -> NUMBER .)
    TIMES           reduce using rule 57 (factor -> NUMBER .)
    DIVIDE          reduce using rule 57 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 57 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 57 (factor -> NUMBER .)
    NOT             reduce using rule 57 (factor -> NUMBER .)
    or              reduce using rule 57 (factor -> NUMBER .)
    and             reduce using rule 57 (factor -> NUMBER .)
    LESS            reduce using rule 57 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 57 (factor -> NUMBER .)
    GREATER         reduce using rule 57 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 57 (factor -> NUMBER .)
    DEQUAL          reduce using rule 57 (factor -> NUMBER .)
    DISTINT         reduce using rule 57 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 57 (factor -> NUMBER .)

  ! COMMA           [ reduce using rule 57 (factor -> NUMBER .) ]


state 148

    (28) constant_declaration -> const ID EQUAL data_type SEMICOLON .

    COMMENT         reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    COMMENT_MULTI   reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    empty           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    include         reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    const           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    print           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    echo            reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    while           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    if              reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    function        reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    ID              reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    class           reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    new             reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    CLOSE_TAG       reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    for             reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    foreach         reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    exit            reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    VARIABLE        reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    $end            reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)
    RBLOCK          reduce using rule 28 (constant_declaration -> const ID EQUAL data_type SEMICOLON .)


state 149

    (88) params -> params COMMA single_param .

    RPAREN          reduce using rule 88 (params -> params COMMA single_param .)
    COMMA           reduce using rule 88 (params -> params COMMA single_param .)


state 150

    (30) print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 30 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)


state 151

    (31) print_declaration -> print LPAREN data_type RPAREN SEMICOLON .

    COMMENT         reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    empty           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    include         reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    const           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    print           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    echo            reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    while           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    if              reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    function        reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    ID              reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    class           reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    new             reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    for             reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    foreach         reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    exit            reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    $end            reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 31 (print_declaration -> print LPAREN data_type RPAREN SEMICOLON .)


state 152

    (34) echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 34 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)


state 153

    (35) echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .

    COMMENT         reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    empty           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    include         reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    const           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    print           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    echo            reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    while           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    if              reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    function        reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    ID              reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    class           reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    new             reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    for             reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    foreach         reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    exit            reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    $end            reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 35 (echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON .)


state 154

    (59) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    BOOL_OR         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    BOOL_AND        reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    or              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    and             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    as              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (factor -> LPAREN expression RPAREN .)


state 155

    (47) iteration_stmt -> while LPAREN expression RPAREN LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 172
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 156

    (49) expression -> additive_expression logical_op additive_expression .

    RPAREN          reduce using rule 49 (expression -> additive_expression logical_op additive_expression .)
    as              reduce using rule 49 (expression -> additive_expression logical_op additive_expression .)
    SEMICOLON       reduce using rule 49 (expression -> additive_expression logical_op additive_expression .)
    COMMA           reduce using rule 49 (expression -> additive_expression logical_op additive_expression .)


state 157

    (50) expression -> additive_expression comp_op additive_expression .
    (51) expression -> additive_expression comp_op additive_expression . logical_op additive_expression comp_op additive_expression
    (73) logical_op -> . BOOL_OR
    (74) logical_op -> . BOOL_AND
    (75) logical_op -> . NOT
    (76) logical_op -> . or
    (77) logical_op -> . and

    RPAREN          reduce using rule 50 (expression -> additive_expression comp_op additive_expression .)
    as              reduce using rule 50 (expression -> additive_expression comp_op additive_expression .)
    SEMICOLON       reduce using rule 50 (expression -> additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 50 (expression -> additive_expression comp_op additive_expression .)
    BOOL_OR         shift and go to state 115
    BOOL_AND        shift and go to state 116
    NOT             shift and go to state 117
    or              shift and go to state 118
    and             shift and go to state 119

    logical_op                     shift and go to state 173

state 158

    (53) additive_expression -> term math_op term .

    BOOL_OR         reduce using rule 53 (additive_expression -> term math_op term .)
    BOOL_AND        reduce using rule 53 (additive_expression -> term math_op term .)
    NOT             reduce using rule 53 (additive_expression -> term math_op term .)
    or              reduce using rule 53 (additive_expression -> term math_op term .)
    and             reduce using rule 53 (additive_expression -> term math_op term .)
    LESS            reduce using rule 53 (additive_expression -> term math_op term .)
    LESSEQUAL       reduce using rule 53 (additive_expression -> term math_op term .)
    GREATER         reduce using rule 53 (additive_expression -> term math_op term .)
    GREATEREQUAL    reduce using rule 53 (additive_expression -> term math_op term .)
    DEQUAL          reduce using rule 53 (additive_expression -> term math_op term .)
    DISTINT         reduce using rule 53 (additive_expression -> term math_op term .)
    ISEQUAL         reduce using rule 53 (additive_expression -> term math_op term .)
    RPAREN          reduce using rule 53 (additive_expression -> term math_op term .)
    as              reduce using rule 53 (additive_expression -> term math_op term .)
    SEMICOLON       reduce using rule 53 (additive_expression -> term math_op term .)
    COMMA           reduce using rule 53 (additive_expression -> term math_op term .)


state 159

    (78) if_statement -> if LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 174
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 160

    (83) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration RBLOCK

    LBLOCK          shift and go to state 175


state 161

    (85) obj_declaration -> class ID LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    empty           reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    include         reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    const           reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    print           reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    echo            reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    while           reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    if              reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    function        reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    ID              reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    class           reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    new             reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    for             reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    foreach         reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    exit            reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    $end            reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 85 (obj_declaration -> class ID LBLOCK declaration RBLOCK .)


state 162

    (86) create_obj_declaration -> new ID LPAREN params RPAREN .

    COMMENT         reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    empty           reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include         reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    const           reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    print           reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    echo            reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    while           reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    if              reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    function        reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ID              reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    class           reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    new             reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    for             reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    foreach         reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exit            reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    $end            reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 86 (create_obj_declaration -> new ID LPAREN params RPAREN .)


state 163

    (91) for_loop -> for LPAREN for_init for_expr for_update . RPAREN LBLOCK declaration_list RBLOCK

    RPAREN          shift and go to state 176


state 164

    (94) for_update -> expression .

    RPAREN          reduce using rule 94 (for_update -> expression .)


state 165

    (93) for_expr -> expression SEMICOLON .

    NUMBER          reduce using rule 93 (for_expr -> expression SEMICOLON .)
    VARIABLE        reduce using rule 93 (for_expr -> expression SEMICOLON .)
    LPAREN          reduce using rule 93 (for_expr -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 93 (for_expr -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 93 (for_expr -> expression SEMICOLON .)


state 166

    (96) foreach_loop -> foreach LPAREN expression as expression . RPAREN LBLOCK declaration_list RBLOCK

    RPAREN          shift and go to state 177


state 167

    (95) exit_statement -> exit LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 95 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)


state 168

    (40) assignment_tail -> EQUAL NUMBER COMMA var_declaration2 .

    SEMICOLON       reduce using rule 40 (assignment_tail -> EQUAL NUMBER COMMA var_declaration2 .)
    RPAREN          reduce using rule 40 (assignment_tail -> EQUAL NUMBER COMMA var_declaration2 .)
    COMMA           reduce using rule 40 (assignment_tail -> EQUAL NUMBER COMMA var_declaration2 .)


state 169

    (41) assignment_tail -> EQUAL VARIABLE COMMA var_declaration2 .

    SEMICOLON       reduce using rule 41 (assignment_tail -> EQUAL VARIABLE COMMA var_declaration2 .)
    RPAREN          reduce using rule 41 (assignment_tail -> EQUAL VARIABLE COMMA var_declaration2 .)
    COMMA           reduce using rule 41 (assignment_tail -> EQUAL VARIABLE COMMA var_declaration2 .)


state 170

    (44) assignment_tail -> EQUAL LBRACKET expression COMMA . var_declaration2
    (38) var_declaration2 -> . VARIABLE assignment_tail

    VARIABLE        shift and go to state 40

    var_declaration2               shift and go to state 178

state 171

    (45) assignment_tail -> EQUAL LBRACKET data_type COMMA . var_declaration2
    (38) var_declaration2 -> . VARIABLE assignment_tail

    VARIABLE        shift and go to state 40

    var_declaration2               shift and go to state 179

state 172

    (47) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 180


state 173

    (51) expression -> additive_expression comp_op additive_expression logical_op . additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    additive_expression            shift and go to state 181
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 174

    (78) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    RBLOCK          shift and go to state 182
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 175

    (83) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration RBLOCK
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 183
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 176

    (91) for_loop -> for LPAREN for_init for_expr for_update RPAREN . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 184


state 177

    (96) foreach_loop -> foreach LPAREN expression as expression RPAREN . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 185


state 178

    (44) assignment_tail -> EQUAL LBRACKET expression COMMA var_declaration2 .

    SEMICOLON       reduce using rule 44 (assignment_tail -> EQUAL LBRACKET expression COMMA var_declaration2 .)
    RPAREN          reduce using rule 44 (assignment_tail -> EQUAL LBRACKET expression COMMA var_declaration2 .)
    COMMA           reduce using rule 44 (assignment_tail -> EQUAL LBRACKET expression COMMA var_declaration2 .)


state 179

    (45) assignment_tail -> EQUAL LBRACKET data_type COMMA var_declaration2 .

    SEMICOLON       reduce using rule 45 (assignment_tail -> EQUAL LBRACKET data_type COMMA var_declaration2 .)
    RPAREN          reduce using rule 45 (assignment_tail -> EQUAL LBRACKET data_type COMMA var_declaration2 .)
    COMMA           reduce using rule 45 (assignment_tail -> EQUAL LBRACKET data_type COMMA var_declaration2 .)


state 180

    (47) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    empty           reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    include         reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    const           reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    print           reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    echo            reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    while           reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    if              reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    function        reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    ID              reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    class           reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    new             reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    for             reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    foreach         reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    exit            reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    $end            reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK .)


state 181

    (51) expression -> additive_expression comp_op additive_expression logical_op additive_expression . comp_op additive_expression
    (66) comp_op -> . LESS
    (67) comp_op -> . LESSEQUAL
    (68) comp_op -> . GREATER
    (69) comp_op -> . GREATEREQUAL
    (70) comp_op -> . DEQUAL
    (71) comp_op -> . DISTINT
    (72) comp_op -> . ISEQUAL

    LESS            shift and go to state 120
    LESSEQUAL       shift and go to state 121
    GREATER         shift and go to state 122
    GREATEREQUAL    shift and go to state 123
    DEQUAL          shift and go to state 124
    DISTINT         shift and go to state 125
    ISEQUAL         shift and go to state 126

    comp_op                        shift and go to state 186

state 182

    (78) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (79) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (80) else_part -> . else LBLOCK declaration_list RBLOCK
    (81) else_part -> . endif
    (82) else_part -> . empty

    elseif          shift and go to state 188
    else            shift and go to state 189
    endif           shift and go to state 190
    empty           shift and go to state 191

    else_part                      shift and go to state 187

state 183

    (83) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration . RBLOCK

    RBLOCK          shift and go to state 192


state 184

    (91) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 193
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 185

    (96) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 194
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 186

    (51) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op . additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    additive_expression            shift and go to state 195
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 187

    (78) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 78 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)


state 188

    (79) else_part -> elseif . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 196


state 189

    (80) else_part -> else . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 197


state 190

    (81) else_part -> endif .

    COMMENT         reduce using rule 81 (else_part -> endif .)
    COMMENT_HASHTAG reduce using rule 81 (else_part -> endif .)
    COMMENT_MULTI   reduce using rule 81 (else_part -> endif .)
    empty           reduce using rule 81 (else_part -> endif .)
    include         reduce using rule 81 (else_part -> endif .)
    const           reduce using rule 81 (else_part -> endif .)
    print           reduce using rule 81 (else_part -> endif .)
    echo            reduce using rule 81 (else_part -> endif .)
    while           reduce using rule 81 (else_part -> endif .)
    if              reduce using rule 81 (else_part -> endif .)
    function        reduce using rule 81 (else_part -> endif .)
    ID              reduce using rule 81 (else_part -> endif .)
    class           reduce using rule 81 (else_part -> endif .)
    new             reduce using rule 81 (else_part -> endif .)
    CLOSE_TAG       reduce using rule 81 (else_part -> endif .)
    for             reduce using rule 81 (else_part -> endif .)
    foreach         reduce using rule 81 (else_part -> endif .)
    exit            reduce using rule 81 (else_part -> endif .)
    VARIABLE        reduce using rule 81 (else_part -> endif .)
    $end            reduce using rule 81 (else_part -> endif .)
    RBLOCK          reduce using rule 81 (else_part -> endif .)


state 191

    (82) else_part -> empty .

    COMMENT         reduce using rule 82 (else_part -> empty .)
    COMMENT_HASHTAG reduce using rule 82 (else_part -> empty .)
    COMMENT_MULTI   reduce using rule 82 (else_part -> empty .)
    empty           reduce using rule 82 (else_part -> empty .)
    include         reduce using rule 82 (else_part -> empty .)
    const           reduce using rule 82 (else_part -> empty .)
    print           reduce using rule 82 (else_part -> empty .)
    echo            reduce using rule 82 (else_part -> empty .)
    while           reduce using rule 82 (else_part -> empty .)
    if              reduce using rule 82 (else_part -> empty .)
    function        reduce using rule 82 (else_part -> empty .)
    ID              reduce using rule 82 (else_part -> empty .)
    class           reduce using rule 82 (else_part -> empty .)
    new             reduce using rule 82 (else_part -> empty .)
    CLOSE_TAG       reduce using rule 82 (else_part -> empty .)
    for             reduce using rule 82 (else_part -> empty .)
    foreach         reduce using rule 82 (else_part -> empty .)
    exit            reduce using rule 82 (else_part -> empty .)
    VARIABLE        reduce using rule 82 (else_part -> empty .)
    $end            reduce using rule 82 (else_part -> empty .)
    RBLOCK          reduce using rule 82 (else_part -> empty .)


state 192

    (83) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .

    COMMENT         reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_HASHTAG reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    COMMENT_MULTI   reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    empty           reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    include         reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    const           reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    print           reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    echo            reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    while           reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    if              reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    function        reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    ID              reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    class           reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    new             reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    CLOSE_TAG       reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    for             reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    foreach         reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    exit            reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    VARIABLE        reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    $end            reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)
    RBLOCK          reduce using rule 83 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK .)


state 193

    (91) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    RBLOCK          shift and go to state 198
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 194

    (96) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    RBLOCK          shift and go to state 199
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 195

    (51) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .

    RPAREN          reduce using rule 51 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    as              reduce using rule 51 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    SEMICOLON       reduce using rule 51 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 51 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)


state 196

    (79) else_part -> elseif LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (48) expression -> . additive_expression
    (49) expression -> . additive_expression logical_op additive_expression
    (50) expression -> . additive_expression comp_op additive_expression
    (51) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (52) additive_expression -> . term
    (53) additive_expression -> . term math_op term
    (54) term -> . factor
    (55) term -> . factor increment_decrement_op
    (56) term -> . increment_decrement_op factor
    (57) factor -> . NUMBER
    (58) factor -> . VARIABLE
    (59) factor -> . LPAREN expression RPAREN
    (60) increment_decrement_op -> . PLUSPLUS
    (61) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 86
    VARIABLE        shift and go to state 87
    LPAREN          shift and go to state 80
    PLUSPLUS        shift and go to state 88
    MINUSMINUS      shift and go to state 89

    expression                     shift and go to state 200
    additive_expression            shift and go to state 82
    term                           shift and go to state 83
    factor                         shift and go to state 84
    increment_decrement_op         shift and go to state 85

state 197

    (80) else_part -> else LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 201
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 198

    (91) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 91 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)


state 199

    (96) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 96 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)


state 200

    (79) else_part -> elseif LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 202


state 201

    (80) else_part -> else LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    RBLOCK          shift and go to state 203
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 202

    (79) else_part -> elseif LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 204


state 203

    (80) else_part -> else LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 80 (else_part -> else LBLOCK declaration_list RBLOCK .)


state 204

    (79) else_part -> elseif LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration_list               shift and go to state 205
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 205

    (79) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . obj_declaration
    (19) declaration -> . create_obj_declaration
    (20) declaration -> . footer_declaration
    (21) declaration -> . for_loop
    (22) declaration -> . foreach_loop
    (23) declaration -> . exit_statement
    (24) declaration -> . empty
    (27) header_declaration -> . include CADENA SEMICOLON
    (37) var_declaration -> . var_declaration2 SEMICOLON
    (28) constant_declaration -> . const ID EQUAL data_type SEMICOLON
    (29) print_declaration -> . print var_declaration2 SEMICOLON
    (30) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (31) print_declaration -> . print LPAREN data_type RPAREN SEMICOLON
    (32) print_declaration -> . print data_type SEMICOLON
    (33) echo_declaration -> . echo var_declaration2 SEMICOLON
    (34) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (35) echo_declaration -> . echo LPAREN data_type RPAREN SEMICOLON
    (36) echo_declaration -> . echo data_type SEMICOLON
    (47) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration RBLOCK
    (78) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (83) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration RBLOCK
    (84) fun_call -> . ID LPAREN params RPAREN
    (85) obj_declaration -> . class ID LBLOCK declaration RBLOCK
    (86) create_obj_declaration -> . new ID LPAREN params RPAREN
    (3) footer_declaration -> . CLOSE_TAG
    (91) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (96) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (95) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (38) var_declaration2 -> . VARIABLE assignment_tail

    RBLOCK          shift and go to state 206
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 24
    include         shift and go to state 25
    const           shift and go to state 27
    print           shift and go to state 29
    echo            shift and go to state 30
    while           shift and go to state 31
    if              shift and go to state 32
    function        shift and go to state 33
    ID              shift and go to state 28
    class           shift and go to state 34
    new             shift and go to state 35
    CLOSE_TAG       shift and go to state 36
    for             shift and go to state 37
    foreach         shift and go to state 38
    exit            shift and go to state 39
    VARIABLE        shift and go to state 40

    declaration                    shift and go to state 41
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    obj_declaration                shift and go to state 18
    create_obj_declaration         shift and go to state 19
    footer_declaration             shift and go to state 20
    for_loop                       shift and go to state 21
    foreach_loop                   shift and go to state 22
    exit_statement                 shift and go to state 23
    var_declaration2               shift and go to state 26

state 206

    (79) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (79) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (80) else_part -> . else LBLOCK declaration_list RBLOCK
    (81) else_part -> . endif
    (82) else_part -> . empty

    elseif          shift and go to state 188
    else            shift and go to state 189
    endif           shift and go to state 190
    empty           shift and go to state 191

    else_part                      shift and go to state 207

state 207

    (79) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 79 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 99 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 100 resolved as shift
WARNING: reduce/reduce conflict in state 147 resolved using rule (data_type -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 147
