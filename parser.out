Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    HASHTAG
    INVALID_NUMBER_SEQUENCE
    INVALID_VARIABLE
    abstract
    readonly

Grammar

Rule 0     S' -> program
Rule 1     program -> header declaration_list
Rule 2     header -> OPEN_TAG
Rule 3     footer_declaration -> CLOSE_TAG
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> COMMENT
Rule 7     declaration -> COMMENT_HASHTAG
Rule 8     declaration -> COMMENT_MULTI
Rule 9     declaration -> header_declaration
Rule 10    declaration -> namespace_declaration
Rule 11    declaration -> data_type
Rule 12    declaration -> matrix_type
Rule 13    declaration -> var_declaration
Rule 14    declaration -> constant_declaration
Rule 15    declaration -> print_declaration
Rule 16    declaration -> echo_declaration
Rule 17    declaration -> iteration_stmt
Rule 18    declaration -> if_statement
Rule 19    declaration -> fun_declaration
Rule 20    declaration -> fun_call
Rule 21    declaration -> return_statement
Rule 22    declaration -> class_declaration
Rule 23    declaration -> class_extension
Rule 24    declaration -> create_obj_declaration
Rule 25    declaration -> interface_declaration
Rule 26    declaration -> trait_declaration
Rule 27    declaration -> use_declaration
Rule 28    declaration -> continue_declaration
Rule 29    declaration -> label_declaration
Rule 30    declaration -> goto_declaration
Rule 31    declaration -> declare_statement
Rule 32    declaration -> match_declaration
Rule 33    declaration -> footer_declaration
Rule 34    declaration -> for_loop
Rule 35    declaration -> foreach_loop
Rule 36    declaration -> switch_statement
Rule 37    declaration -> try_statement
Rule 38    declaration -> throw_statement
Rule 39    declaration -> exit_statement
Rule 40    declaration -> empty
Rule 41    data_type -> int
Rule 42    data_type -> float
Rule 43    data_type -> double
Rule 44    data_type -> empty_function
Rule 45    header_declaration -> include CADENA SEMICOLON
Rule 46    header_declaration -> include_once CADENA SEMICOLON
Rule 47    header_declaration -> require CADENA SEMICOLON
Rule 48    header_declaration -> require_once CADENA SEMICOLON
Rule 49    namespace_declaration -> namespace ID SEMICOLON
Rule 50    constant_declaration -> const ID EQUAL CADENA SEMICOLON
Rule 51    constant_declaration -> const ID EQUAL NUMBER SEMICOLON
Rule 52    print_declaration -> print var_declaration2 SEMICOLON
Rule 53    print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON
Rule 54    print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON
Rule 55    print_declaration -> print LPAREN CADENA RPAREN SEMICOLON
Rule 56    print_declaration -> print NUMBER SEMICOLON
Rule 57    print_declaration -> print CADENA SEMICOLON
Rule 58    echo_declaration -> echo var_declaration2 SEMICOLON
Rule 59    echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON
Rule 60    echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON
Rule 61    echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON
Rule 62    echo_declaration -> echo NUMBER SEMICOLON
Rule 63    echo_declaration -> echo ceil_expression SEMICOLON
Rule 64    echo_declaration -> echo CADENA SEMICOLON
Rule 65    var_declaration -> var_declaration2 SEMICOLON
Rule 66    var_declaration -> global var_declaration2 SEMICOLON
Rule 67    matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
Rule 68    var_declaration2 -> VARIABLE
Rule 69    var_declaration2 -> VARIABLE expression
Rule 70    var_declaration2 -> VARIABLE EQUAL NUMBER
Rule 71    var_declaration2 -> VARIABLE EQUAL VARIABLE
Rule 72    var_declaration2 -> VARIABLE EQUAL CADENA
Rule 73    var_declaration2 -> VARIABLE EQUAL Built_In_Declaration
Rule 74    var_declaration2 -> VARIABLE EQUAL expression
Rule 75    var_declaration2 -> VARIABLE assignation VARIABLE
Rule 76    var_declaration2 -> VARIABLE assignation NUMBER
Rule 77    var_declaration2 -> VARIABLE EQUAL ceil_expression
Rule 78    var_declaration2 -> VARIABLE EQUAL clone_declaration
Rule 79    var_declaration2 -> Built_In_Declaration
Rule 80    var_declaration2 -> Concatenar_Cadenas_declaration
Rule 81    var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN
Rule 82    var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
Rule 83    var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression
Rule 84    var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
Rule 85    var_declaration2 -> VARIABLE EQUAL create_obj_declaration
Rule 86    var_declaration2 -> VARIABLE EQUAL assignment_tail
Rule 87    assignment_tail -> COMMA var_declaration2
Rule 88    assignment_tail -> LBRACKET params RBRACKET
Rule 89    assignment_tail -> LBLOCK params RBLOCK
Rule 90    assignment_tail -> VARIABLE LBRACKET expression COMMA params
Rule 91    assignment_tail -> VARIABLE LBRACKET params RBRACKET
Rule 92    assignment_tail -> VARIABLE LBLOCK params RBLOCK
Rule 93    iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
Rule 94    iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
Rule 95    iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
Rule 96    iteration_stmt -> do COLON declaration_list endwhile SEMICOLON
Rule 97    expression -> additive_expression
Rule 98    expression -> additive_expression logical_op additive_expression
Rule 99    expression -> additive_expression comp_op additive_expression
Rule 100   expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
Rule 101   expression -> additive_expression bits_op additive_expression
Rule 102   expression -> VARIABLE instanceof ID
Rule 103   additive_expression -> term
Rule 104   additive_expression -> term math_op term
Rule 105   term -> MINUS term
Rule 106   term -> factor
Rule 107   term -> factor increment_decrement_op
Rule 108   term -> increment_decrement_op factor
Rule 109   factor -> NUMBER
Rule 110   factor -> VARIABLE
Rule 111   factor -> bool_type
Rule 112   factor -> LPAREN expression RPAREN
Rule 113   increment_decrement_op -> PLUSPLUS
Rule 114   increment_decrement_op -> MINUSMINUS
Rule 115   math_op -> PLUS
Rule 116   math_op -> MINUS
Rule 117   math_op -> TIMES
Rule 118   math_op -> DIVIDE
Rule 119   math_op -> MULEQUAL
Rule 120   math_op -> PLUSEQUAL
Rule 121   math_op -> MINUSEQUAL
Rule 122   math_op -> MOD
Rule 123   comp_op -> LESS
Rule 124   comp_op -> LESSEQUAL
Rule 125   comp_op -> GREATER
Rule 126   comp_op -> GREATEREQUAL
Rule 127   comp_op -> DEQUAL
Rule 128   comp_op -> DISTINT
Rule 129   comp_op -> DIVEQUAL
Rule 130   comp_op -> ISEQUAL
Rule 131   comp_op -> ISIDENTICAL
Rule 132   comp_op -> ISNOTIDENTICAL
Rule 133   logical_op -> BOOL_OR
Rule 134   logical_op -> BOOL_AND
Rule 135   logical_op -> NOT
Rule 136   logical_op -> or
Rule 137   logical_op -> and
Rule 138   logical_op -> xor
Rule 139   if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 140   else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 141   else_part -> else LBLOCK declaration_list RBLOCK
Rule 142   else_part -> endif
Rule 143   else_part -> empty_function
Rule 144   fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
Rule 145   fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
Rule 146   fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
Rule 147   fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
Rule 148   fun_call -> ID LPAREN params RPAREN
Rule 149   return_statement -> return expression SEMICOLON
Rule 150   return_statement -> return params SEMICOLON
Rule 151   return_statement -> return SEMICOLON
Rule 152   return_statement -> return ID LPAREN expression RPAREN SEMICOLON
Rule 153   class_declaration -> class ID LBLOCK class_body RBLOCK
Rule 154   class_declaration -> final class ID LBLOCK class_body RBLOCK
Rule 155   class_declaration -> class ID implements ID LBLOCK class_body RBLOCK
Rule 156   class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK
Rule 157   class_extension -> class ID extends ID LBLOCK RBLOCK
Rule 158   class_extension -> class ID extends Exception LBLOCK RBLOCK
Rule 159   class_extension -> class ID extends ErrorException LBLOCK RBLOCK
Rule 160   class_extension -> class ID extends Error LBLOCK RBLOCK
Rule 161   class_extension -> class ID extends ParseError LBLOCK RBLOCK
Rule 162   class_extension -> class ID extends TypeError LBLOCK RBLOCK
Rule 163   create_obj_declaration -> new ID LPAREN params RPAREN
Rule 164   class_body -> class_body_element
Rule 165   class_body -> class_body class_body_element
Rule 166   class_body -> empty_function
Rule 167   class_body_element -> visibility var_declaration2 SEMICOLON
Rule 168   class_body_element -> visibility fun_declaration
Rule 169   class_body_element -> declaration
Rule 170   interface_declaration -> interface ID LBLOCK interface_body RBLOCK
Rule 171   interface_body -> interface_method_declaration
Rule 172   interface_body -> interface_body interface_method_declaration
Rule 173   interface_body -> empty_function
Rule 174   interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON
Rule 175   trait_declaration -> trait ID LBLOCK trait_body RBLOCK
Rule 176   trait_body -> trait_element
Rule 177   trait_body -> trait_body trait_element
Rule 178   trait_body -> empty_function
Rule 179   trait_element -> visibility var_declaration SEMICOLON
Rule 180   trait_element -> visibility fun_declaration
Rule 181   use_declaration -> use ID SEMICOLON
Rule 182   use_declaration -> use id_list LBLOCK use_body RBLOCK
Rule 183   use_body -> use_body use_statement
Rule 184   use_body -> use_statement
Rule 185   use_body -> empty_function
Rule 186   use_statement -> ID COLON COLON ID insteadof ID SEMICOLON
Rule 187   id_list -> id_list COMMA id_declaration
Rule 188   id_list -> id_declaration
Rule 189   id_declaration -> ID
Rule 190   match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
Rule 191   match_body -> match_body match_statement COMMA
Rule 192   match_body -> match_statement COMMA
Rule 193   match_statement -> single_param ASSIGN single_param
Rule 194   match_statement -> expression ASSIGN single_param
Rule 195   visibility -> private
Rule 196   visibility -> protected
Rule 197   visibility -> public
Rule 198   visibility -> var
Rule 199   continue_declaration -> continue SEMICOLON
Rule 200   label_declaration -> ID COLON
Rule 201   goto_declaration -> goto ID SEMICOLON
Rule 202   callable_declaration -> callable VARIABLE
Rule 203   params -> single_param
Rule 204   params -> params COMMA single_param
Rule 205   single_param -> var_declaration2
Rule 206   single_param -> NUMBER
Rule 207   single_param -> CADENA
Rule 208   single_param -> bool_type
Rule 209   single_param -> callable_declaration
Rule 210   single_param -> empty_function
Rule 211   bool_type -> true
Rule 212   bool_type -> false
Rule 213   for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
Rule 214   for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
Rule 215   for_init -> var_declaration2 SEMICOLON
Rule 216   for_expr -> expression SEMICOLON
Rule 217   for_update -> expression
Rule 218   exit_statement -> exit LPAREN expression RPAREN SEMICOLON
Rule 219   foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
Rule 220   foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
Rule 221   switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
Rule 222   switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
Rule 223   case_blocks -> case_blocks case_block
Rule 224   case_blocks -> case_block
Rule 225   case_blocks -> empty_function
Rule 226   case_block -> case expression COLON statement_list
Rule 227   case_block -> case expression COLON statement_list break SEMICOLON
Rule 228   default_block -> default COLON statement_list
Rule 229   default_block -> default COLON statement_list break SEMICOLON
Rule 230   default_block -> empty_function
Rule 231   try_statement -> try LBLOCK statement_list RBLOCK catch_blocks
Rule 232   catch_blocks -> catch_blocks catch_block
Rule 233   catch_blocks -> catch_block
Rule 234   catch_blocks -> catch_blocks finally_block
Rule 235   catch_blocks -> finally_block
Rule 236   catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK
Rule 237   list_exception -> list_exception PIPE exception_statement
Rule 238   list_exception -> exception_statement
Rule 239   exception_statement -> Exception VARIABLE
Rule 240   exception_statement -> ID VARIABLE
Rule 241   throw_statement -> throw create_obj_declaration SEMICOLON
Rule 242   throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON
Rule 243   finally_block -> finally LBLOCK statement_list RBLOCK
Rule 244   statement_list -> declaration
Rule 245   statement_list -> statement_list declaration
Rule 246   statement_list -> empty_function
Rule 247   Built_In_Declaration -> array LPAREN params RPAREN
Rule 248   Built_In_Declaration -> pow LPAREN params RPAREN
Rule 249   Built_In_Declaration -> POW LPAREN params RPAREN
Rule 250   Built_In_Declaration -> abs LPAREN params RPAREN
Rule 251   Built_In_Declaration -> cos LPAREN params RPAREN
Rule 252   Built_In_Declaration -> deg2rad LPAREN params RPAREN
Rule 253   Built_In_Declaration -> rad2deg LPAREN params RPAREN
Rule 254   Built_In_Declaration -> die LPAREN params RPAREN
Rule 255   Built_In_Declaration -> exp LPAREN params RPAREN
Rule 256   Built_In_Declaration -> floor LPAREN params RPAREN
Rule 257   Built_In_Declaration -> isset LPAREN params RPAREN
Rule 258   Built_In_Declaration -> list LPAREN params RPAREN
Rule 259   Built_In_Declaration -> log LPAREN params RPAREN
Rule 260   Built_In_Declaration -> log10 LPAREN params RPAREN
Rule 261   Built_In_Declaration -> max LPAREN params RPAREN
Rule 262   Built_In_Declaration -> min LPAREN params RPAREN
Rule 263   Built_In_Declaration -> rand LPAREN params RPAREN
Rule 264   Built_In_Declaration -> round LPAREN params RPAREN
Rule 265   Built_In_Declaration -> sin LPAREN params RPAREN
Rule 266   Built_In_Declaration -> sqrt LPAREN params RPAREN
Rule 267   Built_In_Declaration -> unset LPAREN params RPAREN
Rule 268   Built_In_Declaration -> eval LPAREN params RPAREN
Rule 269   Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE
Rule 270   Concatenar_Cadenas_declaration -> CADENA DOT CADENA
Rule 271   Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE
Rule 272   Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA
Rule 273   bits_op -> AMPERSANT
Rule 274   bits_op -> SR
Rule 275   bits_op -> SL
Rule 276   assignation -> ASSIGN
Rule 277   assignation -> SREQUAL
Rule 278   assignation -> SLEQUAL
Rule 279   assignation -> XOREQUAL
Rule 280   assignation -> ANDEQUAL
Rule 281   ceil_expression -> ceil LPAREN expression RPAREN
Rule 282   clone_declaration -> clone expression
Rule 283   declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON
Rule 284   empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 273
ANDEQUAL             : 280
ASSIGN               : 193 194 276
BACKSLASH            : 
BOOL_AND             : 134
BOOL_OR              : 133
CADENA               : 45 46 47 48 50 55 57 61 64 72 207 270 270 271 272
CLOSE_TAG            : 3
COLON                : 82 94 96 186 186 200 214 220 222 226 227 228 229
COMMA                : 87 90 187 191 192 204
COMMENT              : 6
COMMENT_HASHTAG      : 7
COMMENT_MULTI        : 8
DEQUAL               : 127
DISTINT              : 128
DIVEQUAL             : 129
DIVIDE               : 118
DOT                  : 269 270 271 272
EQUAL                : 50 51 67 70 71 72 73 74 77 78 81 83 85 86 190 283
Error                : 160
ErrorException       : 159
Exception            : 158 239 242
GREATER              : 125
GREATEREQUAL         : 126
HASHTAG              : 
ID                   : 49 50 51 81 83 84 102 144 145 146 147 148 152 153 154 155 155 156 156 157 157 158 159 160 161 162 163 170 174 175 181 186 186 186 189 200 201 240 283
INVALID_NUMBER_SEQUENCE : 
INVALID_VARIABLE     : 
ISEQUAL              : 130
ISIDENTICAL          : 131
ISNOTIDENTICAL       : 132
LBLOCK               : 89 92 93 95 139 140 141 144 145 146 147 153 154 155 156 157 158 159 160 161 162 170 175 182 190 213 219 221 231 236 243
LBRACKET             : 67 67 88 90 91
LESS                 : 123
LESSEQUAL            : 124
LPAREN               : 53 54 55 59 60 61 81 84 93 94 95 112 139 140 144 145 146 147 148 152 163 174 190 213 214 218 219 220 221 222 236 242 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 281 283
MINUS                : 105 116
MINUSEQUAL           : 121
MINUSMINUS           : 114
MOD                  : 122
MULEQUAL             : 119
NOT                  : 135
NUMBER               : 51 54 56 60 62 67 67 70 76 109 206
OBJ_OPERATOR         : 83 84
OPEN_TAG             : 2
PIPE                 : 237
PLUS                 : 115
PLUSEQUAL            : 120
PLUSPLUS             : 113
POW                  : 249
ParseError           : 161
QUESTIONMARK         : 82
RBLOCK               : 89 92 93 95 139 140 141 144 145 146 147 153 154 155 156 157 158 159 160 161 162 170 175 182 190 213 219 221 231 236 243
RBRACKET             : 67 67 88 91
RPAREN               : 53 54 55 59 60 61 81 84 93 94 95 112 139 140 144 145 146 147 148 152 163 174 190 213 214 218 219 220 221 222 236 242 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 281 283
SEMICOLON            : 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 94 95 96 149 150 151 152 167 174 179 181 186 190 199 201 214 215 216 218 220 222 227 229 241 242 283
SL                   : 275
SLEQUAL              : 278
SR                   : 274
SREQUAL              : 277
TIMES                : 117
TypeError            : 162
VARIABLE             : 67 68 69 70 71 71 72 73 74 75 75 76 77 78 81 82 83 84 85 86 90 91 92 102 110 190 202 239 240 269 269 271 272
XOREQUAL             : 279
abs                  : 250
abstract             : 
and                  : 137
array                : 247
as                   : 219 220
break                : 227 229
callable             : 202
case                 : 226 227
catch                : 236
ceil                 : 281
class                : 153 154 155 156 157 158 159 160 161 162
clone                : 282
const                : 50 51
continue             : 199
cos                  : 251
declare              : 283
default              : 228 229
deg2rad              : 252
die                  : 254
do                   : 95 96
double               : 43
echo                 : 58 59 60 61 62 63 64
else                 : 141
elseif               : 140
empty                : 40
endfor               : 214
endforeach           : 220
endif                : 142
endswitch            : 222
endwhile             : 94 96
error                : 
eval                 : 268
exit                 : 218
exp                  : 255
extends              : 157 158 159 160 161 162
false                : 212
final                : 154 156
finally              : 243
float                : 42
floor                : 256
for                  : 213 214
foreach              : 219 220
function             : 144 145 146 147 174
global               : 66
goto                 : 201
if                   : 139
implements           : 155 156
include              : 45
include_once         : 46
instanceof           : 102
insteadof            : 186
int                  : 41
interface            : 170
isset                : 257
list                 : 258
log                  : 259
log10                : 260
match                : 190
max                  : 261
min                  : 262
namespace            : 49
new                  : 163 242
or                   : 136
pow                  : 248
print                : 52 53 54 55 56 57
private              : 195
protected            : 196
public               : 197
rad2deg              : 253
rand                 : 263
readonly             : 
require              : 47
require_once         : 48
return               : 149 150 151 152
round                : 264
sin                  : 265
sqrt                 : 266
static               : 146 147
switch               : 221 222
throw                : 241 242
trait                : 175
true                 : 211
try                  : 231
unset                : 267
use                  : 181 182
var                  : 198
while                : 93 94 95
xor                  : 138

Nonterminals, with rules where they appear

Built_In_Declaration : 73 79
Concatenar_Cadenas_declaration : 80
additive_expression  : 97 98 98 99 99 100 100 100 100 101 101
assignation          : 75 76
assignment_tail      : 86
bits_op              : 101
bool_type            : 111 208
callable_declaration : 209
case_block           : 223 224
case_blocks          : 221 222 223
catch_block          : 232 233
catch_blocks         : 231 232 234
ceil_expression      : 63 77
class_body           : 153 154 155 156 165
class_body_element   : 164 165
class_declaration    : 22
class_extension      : 23
clone_declaration    : 78
comp_op              : 99 100 100
constant_declaration : 14
continue_declaration : 28
create_obj_declaration : 24 85 241
data_type            : 11 67
declaration          : 4 5 169 244 245
declaration_list     : 1 5 93 94 95 96 139 140 141 144 145 146 147 213 214 219 220
declare_statement    : 31
default_block        : 221 222
echo_declaration     : 16
else_part            : 139 140
empty_function       : 44 143 166 173 178 185 210 225 230 246
exception_statement  : 237 238
exit_statement       : 39
expression           : 67 69 74 83 90 93 94 95 112 139 140 149 152 194 216 217 218 219 219 220 220 221 222 226 227 281 282 283
factor               : 106 107 108
finally_block        : 234 235
footer_declaration   : 33
for_expr             : 213 214
for_init             : 213 214
for_loop             : 34
for_update           : 213 214
foreach_loop         : 35
fun_call             : 20
fun_declaration      : 19 168 180
goto_declaration     : 30
header               : 1
header_declaration   : 9
id_declaration       : 187 188
id_list              : 182 187
if_statement         : 18
increment_decrement_op : 107 108
interface_body       : 170 172
interface_declaration : 25
interface_method_declaration : 171 172
iteration_stmt       : 17
label_declaration    : 29
list_exception       : 236 237
logical_op           : 98 100
match_body           : 190 191
match_declaration    : 32
match_statement      : 191 192
math_op              : 104
matrix_type          : 12
namespace_declaration : 10
params               : 81 84 88 89 90 91 92 144 145 146 147 148 150 163 174 204 242 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268
print_declaration    : 15
program              : 0
return_statement     : 21 145 147
single_param         : 190 193 193 194 203 204
statement_list       : 226 227 228 229 231 236 243 245
switch_statement     : 36
term                 : 103 104 104 105
throw_statement      : 38
trait_body           : 175 177
trait_declaration    : 26
trait_element        : 176 177
try_statement        : 37
use_body             : 182 183
use_declaration      : 27
use_statement        : 183 184
var_declaration      : 13 179
var_declaration2     : 52 53 58 59 65 66 82 82 87 167 205 215
visibility           : 146 147 167 168 174 179 180

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header declaration_list
    (2) header -> . OPEN_TAG

    OPEN_TAG        shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    $end            reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 3

    (2) header -> OPEN_TAG .

    COMMENT         reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_HASHTAG reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_MULTI   reduce using rule 2 (header -> OPEN_TAG .)
    empty           reduce using rule 2 (header -> OPEN_TAG .)
    include         reduce using rule 2 (header -> OPEN_TAG .)
    include_once    reduce using rule 2 (header -> OPEN_TAG .)
    require         reduce using rule 2 (header -> OPEN_TAG .)
    require_once    reduce using rule 2 (header -> OPEN_TAG .)
    namespace       reduce using rule 2 (header -> OPEN_TAG .)
    int             reduce using rule 2 (header -> OPEN_TAG .)
    float           reduce using rule 2 (header -> OPEN_TAG .)
    double          reduce using rule 2 (header -> OPEN_TAG .)
    global          reduce using rule 2 (header -> OPEN_TAG .)
    const           reduce using rule 2 (header -> OPEN_TAG .)
    print           reduce using rule 2 (header -> OPEN_TAG .)
    echo            reduce using rule 2 (header -> OPEN_TAG .)
    while           reduce using rule 2 (header -> OPEN_TAG .)
    do              reduce using rule 2 (header -> OPEN_TAG .)
    if              reduce using rule 2 (header -> OPEN_TAG .)
    function        reduce using rule 2 (header -> OPEN_TAG .)
    ID              reduce using rule 2 (header -> OPEN_TAG .)
    return          reduce using rule 2 (header -> OPEN_TAG .)
    class           reduce using rule 2 (header -> OPEN_TAG .)
    final           reduce using rule 2 (header -> OPEN_TAG .)
    new             reduce using rule 2 (header -> OPEN_TAG .)
    interface       reduce using rule 2 (header -> OPEN_TAG .)
    trait           reduce using rule 2 (header -> OPEN_TAG .)
    use             reduce using rule 2 (header -> OPEN_TAG .)
    continue        reduce using rule 2 (header -> OPEN_TAG .)
    goto            reduce using rule 2 (header -> OPEN_TAG .)
    declare         reduce using rule 2 (header -> OPEN_TAG .)
    VARIABLE        reduce using rule 2 (header -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 2 (header -> OPEN_TAG .)
    for             reduce using rule 2 (header -> OPEN_TAG .)
    foreach         reduce using rule 2 (header -> OPEN_TAG .)
    switch          reduce using rule 2 (header -> OPEN_TAG .)
    try             reduce using rule 2 (header -> OPEN_TAG .)
    throw           reduce using rule 2 (header -> OPEN_TAG .)
    exit            reduce using rule 2 (header -> OPEN_TAG .)
    private         reduce using rule 2 (header -> OPEN_TAG .)
    protected       reduce using rule 2 (header -> OPEN_TAG .)
    public          reduce using rule 2 (header -> OPEN_TAG .)
    var             reduce using rule 2 (header -> OPEN_TAG .)
    array           reduce using rule 2 (header -> OPEN_TAG .)
    pow             reduce using rule 2 (header -> OPEN_TAG .)
    POW             reduce using rule 2 (header -> OPEN_TAG .)
    abs             reduce using rule 2 (header -> OPEN_TAG .)
    cos             reduce using rule 2 (header -> OPEN_TAG .)
    deg2rad         reduce using rule 2 (header -> OPEN_TAG .)
    rad2deg         reduce using rule 2 (header -> OPEN_TAG .)
    die             reduce using rule 2 (header -> OPEN_TAG .)
    exp             reduce using rule 2 (header -> OPEN_TAG .)
    floor           reduce using rule 2 (header -> OPEN_TAG .)
    isset           reduce using rule 2 (header -> OPEN_TAG .)
    list            reduce using rule 2 (header -> OPEN_TAG .)
    log             reduce using rule 2 (header -> OPEN_TAG .)
    log10           reduce using rule 2 (header -> OPEN_TAG .)
    max             reduce using rule 2 (header -> OPEN_TAG .)
    min             reduce using rule 2 (header -> OPEN_TAG .)
    rand            reduce using rule 2 (header -> OPEN_TAG .)
    round           reduce using rule 2 (header -> OPEN_TAG .)
    sin             reduce using rule 2 (header -> OPEN_TAG .)
    sqrt            reduce using rule 2 (header -> OPEN_TAG .)
    unset           reduce using rule 2 (header -> OPEN_TAG .)
    eval            reduce using rule 2 (header -> OPEN_TAG .)
    CADENA          reduce using rule 2 (header -> OPEN_TAG .)
    $end            reduce using rule 2 (header -> OPEN_TAG .)


state 4

    (1) program -> header declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> header declaration_list .)
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    $end            reduce using rule 1 (program -> header declaration_list .)
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]
  ! $end            [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 5

    (4) declaration_list -> declaration .

    COMMENT         reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_MULTI   reduce using rule 4 (declaration_list -> declaration .)
    empty           reduce using rule 4 (declaration_list -> declaration .)
    include         reduce using rule 4 (declaration_list -> declaration .)
    include_once    reduce using rule 4 (declaration_list -> declaration .)
    require         reduce using rule 4 (declaration_list -> declaration .)
    require_once    reduce using rule 4 (declaration_list -> declaration .)
    namespace       reduce using rule 4 (declaration_list -> declaration .)
    int             reduce using rule 4 (declaration_list -> declaration .)
    float           reduce using rule 4 (declaration_list -> declaration .)
    double          reduce using rule 4 (declaration_list -> declaration .)
    global          reduce using rule 4 (declaration_list -> declaration .)
    const           reduce using rule 4 (declaration_list -> declaration .)
    print           reduce using rule 4 (declaration_list -> declaration .)
    echo            reduce using rule 4 (declaration_list -> declaration .)
    while           reduce using rule 4 (declaration_list -> declaration .)
    do              reduce using rule 4 (declaration_list -> declaration .)
    if              reduce using rule 4 (declaration_list -> declaration .)
    function        reduce using rule 4 (declaration_list -> declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration .)
    return          reduce using rule 4 (declaration_list -> declaration .)
    class           reduce using rule 4 (declaration_list -> declaration .)
    final           reduce using rule 4 (declaration_list -> declaration .)
    new             reduce using rule 4 (declaration_list -> declaration .)
    interface       reduce using rule 4 (declaration_list -> declaration .)
    trait           reduce using rule 4 (declaration_list -> declaration .)
    use             reduce using rule 4 (declaration_list -> declaration .)
    continue        reduce using rule 4 (declaration_list -> declaration .)
    goto            reduce using rule 4 (declaration_list -> declaration .)
    declare         reduce using rule 4 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 4 (declaration_list -> declaration .)
    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration .)
    for             reduce using rule 4 (declaration_list -> declaration .)
    foreach         reduce using rule 4 (declaration_list -> declaration .)
    switch          reduce using rule 4 (declaration_list -> declaration .)
    try             reduce using rule 4 (declaration_list -> declaration .)
    throw           reduce using rule 4 (declaration_list -> declaration .)
    exit            reduce using rule 4 (declaration_list -> declaration .)
    private         reduce using rule 4 (declaration_list -> declaration .)
    protected       reduce using rule 4 (declaration_list -> declaration .)
    public          reduce using rule 4 (declaration_list -> declaration .)
    var             reduce using rule 4 (declaration_list -> declaration .)
    array           reduce using rule 4 (declaration_list -> declaration .)
    pow             reduce using rule 4 (declaration_list -> declaration .)
    POW             reduce using rule 4 (declaration_list -> declaration .)
    abs             reduce using rule 4 (declaration_list -> declaration .)
    cos             reduce using rule 4 (declaration_list -> declaration .)
    deg2rad         reduce using rule 4 (declaration_list -> declaration .)
    rad2deg         reduce using rule 4 (declaration_list -> declaration .)
    die             reduce using rule 4 (declaration_list -> declaration .)
    exp             reduce using rule 4 (declaration_list -> declaration .)
    floor           reduce using rule 4 (declaration_list -> declaration .)
    isset           reduce using rule 4 (declaration_list -> declaration .)
    list            reduce using rule 4 (declaration_list -> declaration .)
    log             reduce using rule 4 (declaration_list -> declaration .)
    log10           reduce using rule 4 (declaration_list -> declaration .)
    max             reduce using rule 4 (declaration_list -> declaration .)
    min             reduce using rule 4 (declaration_list -> declaration .)
    rand            reduce using rule 4 (declaration_list -> declaration .)
    round           reduce using rule 4 (declaration_list -> declaration .)
    sin             reduce using rule 4 (declaration_list -> declaration .)
    sqrt            reduce using rule 4 (declaration_list -> declaration .)
    unset           reduce using rule 4 (declaration_list -> declaration .)
    eval            reduce using rule 4 (declaration_list -> declaration .)
    CADENA          reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)
    RBLOCK          reduce using rule 4 (declaration_list -> declaration .)
    endwhile        reduce using rule 4 (declaration_list -> declaration .)
    endfor          reduce using rule 4 (declaration_list -> declaration .)
    endforeach      reduce using rule 4 (declaration_list -> declaration .)


state 6

    (6) declaration -> COMMENT .

    COMMENT         reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_HASHTAG reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_MULTI   reduce using rule 6 (declaration -> COMMENT .)
    empty           reduce using rule 6 (declaration -> COMMENT .)
    include         reduce using rule 6 (declaration -> COMMENT .)
    include_once    reduce using rule 6 (declaration -> COMMENT .)
    require         reduce using rule 6 (declaration -> COMMENT .)
    require_once    reduce using rule 6 (declaration -> COMMENT .)
    namespace       reduce using rule 6 (declaration -> COMMENT .)
    int             reduce using rule 6 (declaration -> COMMENT .)
    float           reduce using rule 6 (declaration -> COMMENT .)
    double          reduce using rule 6 (declaration -> COMMENT .)
    global          reduce using rule 6 (declaration -> COMMENT .)
    const           reduce using rule 6 (declaration -> COMMENT .)
    print           reduce using rule 6 (declaration -> COMMENT .)
    echo            reduce using rule 6 (declaration -> COMMENT .)
    while           reduce using rule 6 (declaration -> COMMENT .)
    do              reduce using rule 6 (declaration -> COMMENT .)
    if              reduce using rule 6 (declaration -> COMMENT .)
    function        reduce using rule 6 (declaration -> COMMENT .)
    ID              reduce using rule 6 (declaration -> COMMENT .)
    return          reduce using rule 6 (declaration -> COMMENT .)
    class           reduce using rule 6 (declaration -> COMMENT .)
    final           reduce using rule 6 (declaration -> COMMENT .)
    new             reduce using rule 6 (declaration -> COMMENT .)
    interface       reduce using rule 6 (declaration -> COMMENT .)
    trait           reduce using rule 6 (declaration -> COMMENT .)
    use             reduce using rule 6 (declaration -> COMMENT .)
    continue        reduce using rule 6 (declaration -> COMMENT .)
    goto            reduce using rule 6 (declaration -> COMMENT .)
    declare         reduce using rule 6 (declaration -> COMMENT .)
    VARIABLE        reduce using rule 6 (declaration -> COMMENT .)
    CLOSE_TAG       reduce using rule 6 (declaration -> COMMENT .)
    for             reduce using rule 6 (declaration -> COMMENT .)
    foreach         reduce using rule 6 (declaration -> COMMENT .)
    switch          reduce using rule 6 (declaration -> COMMENT .)
    try             reduce using rule 6 (declaration -> COMMENT .)
    throw           reduce using rule 6 (declaration -> COMMENT .)
    exit            reduce using rule 6 (declaration -> COMMENT .)
    private         reduce using rule 6 (declaration -> COMMENT .)
    protected       reduce using rule 6 (declaration -> COMMENT .)
    public          reduce using rule 6 (declaration -> COMMENT .)
    var             reduce using rule 6 (declaration -> COMMENT .)
    array           reduce using rule 6 (declaration -> COMMENT .)
    pow             reduce using rule 6 (declaration -> COMMENT .)
    POW             reduce using rule 6 (declaration -> COMMENT .)
    abs             reduce using rule 6 (declaration -> COMMENT .)
    cos             reduce using rule 6 (declaration -> COMMENT .)
    deg2rad         reduce using rule 6 (declaration -> COMMENT .)
    rad2deg         reduce using rule 6 (declaration -> COMMENT .)
    die             reduce using rule 6 (declaration -> COMMENT .)
    exp             reduce using rule 6 (declaration -> COMMENT .)
    floor           reduce using rule 6 (declaration -> COMMENT .)
    isset           reduce using rule 6 (declaration -> COMMENT .)
    list            reduce using rule 6 (declaration -> COMMENT .)
    log             reduce using rule 6 (declaration -> COMMENT .)
    log10           reduce using rule 6 (declaration -> COMMENT .)
    max             reduce using rule 6 (declaration -> COMMENT .)
    min             reduce using rule 6 (declaration -> COMMENT .)
    rand            reduce using rule 6 (declaration -> COMMENT .)
    round           reduce using rule 6 (declaration -> COMMENT .)
    sin             reduce using rule 6 (declaration -> COMMENT .)
    sqrt            reduce using rule 6 (declaration -> COMMENT .)
    unset           reduce using rule 6 (declaration -> COMMENT .)
    eval            reduce using rule 6 (declaration -> COMMENT .)
    CADENA          reduce using rule 6 (declaration -> COMMENT .)
    $end            reduce using rule 6 (declaration -> COMMENT .)
    RBLOCK          reduce using rule 6 (declaration -> COMMENT .)
    endwhile        reduce using rule 6 (declaration -> COMMENT .)
    endfor          reduce using rule 6 (declaration -> COMMENT .)
    endforeach      reduce using rule 6 (declaration -> COMMENT .)
    break           reduce using rule 6 (declaration -> COMMENT .)
    endswitch       reduce using rule 6 (declaration -> COMMENT .)
    default         reduce using rule 6 (declaration -> COMMENT .)
    case            reduce using rule 6 (declaration -> COMMENT .)


state 7

    (7) declaration -> COMMENT_HASHTAG .

    COMMENT         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_HASHTAG reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_MULTI   reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    empty           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include_once    reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    require         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    require_once    reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    namespace       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    int             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    float           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    double          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    global          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    const           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    print           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    echo            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    while           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    do              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    if              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    function        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    ID              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    return          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    class           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    final           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    new             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    interface       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    trait           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    use             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    continue        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    goto            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    declare         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    VARIABLE        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CLOSE_TAG       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    for             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    foreach         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    switch          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    try             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    throw           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exit            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    private         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    protected       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    public          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    var             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    array           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    pow             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    POW             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    abs             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    cos             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    deg2rad         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    rad2deg         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    die             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exp             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    floor           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    isset           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    list            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    log             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    log10           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    max             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    min             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    rand            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    round           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    sin             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    sqrt            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    unset           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    eval            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CADENA          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    $end            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    RBLOCK          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endwhile        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endfor          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endforeach      reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    break           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endswitch       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    default         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    case            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)


state 8

    (8) declaration -> COMMENT_MULTI .

    COMMENT         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_HASHTAG reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_MULTI   reduce using rule 8 (declaration -> COMMENT_MULTI .)
    empty           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include_once    reduce using rule 8 (declaration -> COMMENT_MULTI .)
    require         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    require_once    reduce using rule 8 (declaration -> COMMENT_MULTI .)
    namespace       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    int             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    float           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    double          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    global          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    const           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    print           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    echo            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    while           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    do              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    if              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    function        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    ID              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    return          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    class           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    final           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    new             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    interface       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    trait           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    use             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    continue        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    goto            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    declare         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    VARIABLE        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CLOSE_TAG       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    for             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    foreach         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    switch          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    try             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    throw           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exit            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    private         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    protected       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    public          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    var             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    array           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    pow             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    POW             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    abs             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    cos             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    deg2rad         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    rad2deg         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    die             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exp             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    floor           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    isset           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    list            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    log             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    log10           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    max             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    min             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    rand            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    round           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    sin             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    sqrt            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    unset           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    eval            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CADENA          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    $end            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    RBLOCK          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endwhile        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endfor          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endforeach      reduce using rule 8 (declaration -> COMMENT_MULTI .)
    break           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endswitch       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    default         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    case            reduce using rule 8 (declaration -> COMMENT_MULTI .)


state 9

    (9) declaration -> header_declaration .

    COMMENT         reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_HASHTAG reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_MULTI   reduce using rule 9 (declaration -> header_declaration .)
    empty           reduce using rule 9 (declaration -> header_declaration .)
    include         reduce using rule 9 (declaration -> header_declaration .)
    include_once    reduce using rule 9 (declaration -> header_declaration .)
    require         reduce using rule 9 (declaration -> header_declaration .)
    require_once    reduce using rule 9 (declaration -> header_declaration .)
    namespace       reduce using rule 9 (declaration -> header_declaration .)
    int             reduce using rule 9 (declaration -> header_declaration .)
    float           reduce using rule 9 (declaration -> header_declaration .)
    double          reduce using rule 9 (declaration -> header_declaration .)
    global          reduce using rule 9 (declaration -> header_declaration .)
    const           reduce using rule 9 (declaration -> header_declaration .)
    print           reduce using rule 9 (declaration -> header_declaration .)
    echo            reduce using rule 9 (declaration -> header_declaration .)
    while           reduce using rule 9 (declaration -> header_declaration .)
    do              reduce using rule 9 (declaration -> header_declaration .)
    if              reduce using rule 9 (declaration -> header_declaration .)
    function        reduce using rule 9 (declaration -> header_declaration .)
    ID              reduce using rule 9 (declaration -> header_declaration .)
    return          reduce using rule 9 (declaration -> header_declaration .)
    class           reduce using rule 9 (declaration -> header_declaration .)
    final           reduce using rule 9 (declaration -> header_declaration .)
    new             reduce using rule 9 (declaration -> header_declaration .)
    interface       reduce using rule 9 (declaration -> header_declaration .)
    trait           reduce using rule 9 (declaration -> header_declaration .)
    use             reduce using rule 9 (declaration -> header_declaration .)
    continue        reduce using rule 9 (declaration -> header_declaration .)
    goto            reduce using rule 9 (declaration -> header_declaration .)
    declare         reduce using rule 9 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> header_declaration .)
    CLOSE_TAG       reduce using rule 9 (declaration -> header_declaration .)
    for             reduce using rule 9 (declaration -> header_declaration .)
    foreach         reduce using rule 9 (declaration -> header_declaration .)
    switch          reduce using rule 9 (declaration -> header_declaration .)
    try             reduce using rule 9 (declaration -> header_declaration .)
    throw           reduce using rule 9 (declaration -> header_declaration .)
    exit            reduce using rule 9 (declaration -> header_declaration .)
    private         reduce using rule 9 (declaration -> header_declaration .)
    protected       reduce using rule 9 (declaration -> header_declaration .)
    public          reduce using rule 9 (declaration -> header_declaration .)
    var             reduce using rule 9 (declaration -> header_declaration .)
    array           reduce using rule 9 (declaration -> header_declaration .)
    pow             reduce using rule 9 (declaration -> header_declaration .)
    POW             reduce using rule 9 (declaration -> header_declaration .)
    abs             reduce using rule 9 (declaration -> header_declaration .)
    cos             reduce using rule 9 (declaration -> header_declaration .)
    deg2rad         reduce using rule 9 (declaration -> header_declaration .)
    rad2deg         reduce using rule 9 (declaration -> header_declaration .)
    die             reduce using rule 9 (declaration -> header_declaration .)
    exp             reduce using rule 9 (declaration -> header_declaration .)
    floor           reduce using rule 9 (declaration -> header_declaration .)
    isset           reduce using rule 9 (declaration -> header_declaration .)
    list            reduce using rule 9 (declaration -> header_declaration .)
    log             reduce using rule 9 (declaration -> header_declaration .)
    log10           reduce using rule 9 (declaration -> header_declaration .)
    max             reduce using rule 9 (declaration -> header_declaration .)
    min             reduce using rule 9 (declaration -> header_declaration .)
    rand            reduce using rule 9 (declaration -> header_declaration .)
    round           reduce using rule 9 (declaration -> header_declaration .)
    sin             reduce using rule 9 (declaration -> header_declaration .)
    sqrt            reduce using rule 9 (declaration -> header_declaration .)
    unset           reduce using rule 9 (declaration -> header_declaration .)
    eval            reduce using rule 9 (declaration -> header_declaration .)
    CADENA          reduce using rule 9 (declaration -> header_declaration .)
    $end            reduce using rule 9 (declaration -> header_declaration .)
    RBLOCK          reduce using rule 9 (declaration -> header_declaration .)
    endwhile        reduce using rule 9 (declaration -> header_declaration .)
    endfor          reduce using rule 9 (declaration -> header_declaration .)
    endforeach      reduce using rule 9 (declaration -> header_declaration .)
    break           reduce using rule 9 (declaration -> header_declaration .)
    endswitch       reduce using rule 9 (declaration -> header_declaration .)
    default         reduce using rule 9 (declaration -> header_declaration .)
    case            reduce using rule 9 (declaration -> header_declaration .)


state 10

    (10) declaration -> namespace_declaration .

    COMMENT         reduce using rule 10 (declaration -> namespace_declaration .)
    COMMENT_HASHTAG reduce using rule 10 (declaration -> namespace_declaration .)
    COMMENT_MULTI   reduce using rule 10 (declaration -> namespace_declaration .)
    empty           reduce using rule 10 (declaration -> namespace_declaration .)
    include         reduce using rule 10 (declaration -> namespace_declaration .)
    include_once    reduce using rule 10 (declaration -> namespace_declaration .)
    require         reduce using rule 10 (declaration -> namespace_declaration .)
    require_once    reduce using rule 10 (declaration -> namespace_declaration .)
    namespace       reduce using rule 10 (declaration -> namespace_declaration .)
    int             reduce using rule 10 (declaration -> namespace_declaration .)
    float           reduce using rule 10 (declaration -> namespace_declaration .)
    double          reduce using rule 10 (declaration -> namespace_declaration .)
    global          reduce using rule 10 (declaration -> namespace_declaration .)
    const           reduce using rule 10 (declaration -> namespace_declaration .)
    print           reduce using rule 10 (declaration -> namespace_declaration .)
    echo            reduce using rule 10 (declaration -> namespace_declaration .)
    while           reduce using rule 10 (declaration -> namespace_declaration .)
    do              reduce using rule 10 (declaration -> namespace_declaration .)
    if              reduce using rule 10 (declaration -> namespace_declaration .)
    function        reduce using rule 10 (declaration -> namespace_declaration .)
    ID              reduce using rule 10 (declaration -> namespace_declaration .)
    return          reduce using rule 10 (declaration -> namespace_declaration .)
    class           reduce using rule 10 (declaration -> namespace_declaration .)
    final           reduce using rule 10 (declaration -> namespace_declaration .)
    new             reduce using rule 10 (declaration -> namespace_declaration .)
    interface       reduce using rule 10 (declaration -> namespace_declaration .)
    trait           reduce using rule 10 (declaration -> namespace_declaration .)
    use             reduce using rule 10 (declaration -> namespace_declaration .)
    continue        reduce using rule 10 (declaration -> namespace_declaration .)
    goto            reduce using rule 10 (declaration -> namespace_declaration .)
    declare         reduce using rule 10 (declaration -> namespace_declaration .)
    VARIABLE        reduce using rule 10 (declaration -> namespace_declaration .)
    CLOSE_TAG       reduce using rule 10 (declaration -> namespace_declaration .)
    for             reduce using rule 10 (declaration -> namespace_declaration .)
    foreach         reduce using rule 10 (declaration -> namespace_declaration .)
    switch          reduce using rule 10 (declaration -> namespace_declaration .)
    try             reduce using rule 10 (declaration -> namespace_declaration .)
    throw           reduce using rule 10 (declaration -> namespace_declaration .)
    exit            reduce using rule 10 (declaration -> namespace_declaration .)
    private         reduce using rule 10 (declaration -> namespace_declaration .)
    protected       reduce using rule 10 (declaration -> namespace_declaration .)
    public          reduce using rule 10 (declaration -> namespace_declaration .)
    var             reduce using rule 10 (declaration -> namespace_declaration .)
    array           reduce using rule 10 (declaration -> namespace_declaration .)
    pow             reduce using rule 10 (declaration -> namespace_declaration .)
    POW             reduce using rule 10 (declaration -> namespace_declaration .)
    abs             reduce using rule 10 (declaration -> namespace_declaration .)
    cos             reduce using rule 10 (declaration -> namespace_declaration .)
    deg2rad         reduce using rule 10 (declaration -> namespace_declaration .)
    rad2deg         reduce using rule 10 (declaration -> namespace_declaration .)
    die             reduce using rule 10 (declaration -> namespace_declaration .)
    exp             reduce using rule 10 (declaration -> namespace_declaration .)
    floor           reduce using rule 10 (declaration -> namespace_declaration .)
    isset           reduce using rule 10 (declaration -> namespace_declaration .)
    list            reduce using rule 10 (declaration -> namespace_declaration .)
    log             reduce using rule 10 (declaration -> namespace_declaration .)
    log10           reduce using rule 10 (declaration -> namespace_declaration .)
    max             reduce using rule 10 (declaration -> namespace_declaration .)
    min             reduce using rule 10 (declaration -> namespace_declaration .)
    rand            reduce using rule 10 (declaration -> namespace_declaration .)
    round           reduce using rule 10 (declaration -> namespace_declaration .)
    sin             reduce using rule 10 (declaration -> namespace_declaration .)
    sqrt            reduce using rule 10 (declaration -> namespace_declaration .)
    unset           reduce using rule 10 (declaration -> namespace_declaration .)
    eval            reduce using rule 10 (declaration -> namespace_declaration .)
    CADENA          reduce using rule 10 (declaration -> namespace_declaration .)
    $end            reduce using rule 10 (declaration -> namespace_declaration .)
    RBLOCK          reduce using rule 10 (declaration -> namespace_declaration .)
    endwhile        reduce using rule 10 (declaration -> namespace_declaration .)
    endfor          reduce using rule 10 (declaration -> namespace_declaration .)
    endforeach      reduce using rule 10 (declaration -> namespace_declaration .)
    break           reduce using rule 10 (declaration -> namespace_declaration .)
    endswitch       reduce using rule 10 (declaration -> namespace_declaration .)
    default         reduce using rule 10 (declaration -> namespace_declaration .)
    case            reduce using rule 10 (declaration -> namespace_declaration .)


state 11

    (11) declaration -> data_type .
    (67) matrix_type -> data_type . VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON

  ! shift/reduce conflict for VARIABLE resolved as shift
    COMMENT         reduce using rule 11 (declaration -> data_type .)
    COMMENT_HASHTAG reduce using rule 11 (declaration -> data_type .)
    COMMENT_MULTI   reduce using rule 11 (declaration -> data_type .)
    empty           reduce using rule 11 (declaration -> data_type .)
    include         reduce using rule 11 (declaration -> data_type .)
    include_once    reduce using rule 11 (declaration -> data_type .)
    require         reduce using rule 11 (declaration -> data_type .)
    require_once    reduce using rule 11 (declaration -> data_type .)
    namespace       reduce using rule 11 (declaration -> data_type .)
    int             reduce using rule 11 (declaration -> data_type .)
    float           reduce using rule 11 (declaration -> data_type .)
    double          reduce using rule 11 (declaration -> data_type .)
    global          reduce using rule 11 (declaration -> data_type .)
    const           reduce using rule 11 (declaration -> data_type .)
    print           reduce using rule 11 (declaration -> data_type .)
    echo            reduce using rule 11 (declaration -> data_type .)
    while           reduce using rule 11 (declaration -> data_type .)
    do              reduce using rule 11 (declaration -> data_type .)
    if              reduce using rule 11 (declaration -> data_type .)
    function        reduce using rule 11 (declaration -> data_type .)
    ID              reduce using rule 11 (declaration -> data_type .)
    return          reduce using rule 11 (declaration -> data_type .)
    class           reduce using rule 11 (declaration -> data_type .)
    final           reduce using rule 11 (declaration -> data_type .)
    new             reduce using rule 11 (declaration -> data_type .)
    interface       reduce using rule 11 (declaration -> data_type .)
    trait           reduce using rule 11 (declaration -> data_type .)
    use             reduce using rule 11 (declaration -> data_type .)
    continue        reduce using rule 11 (declaration -> data_type .)
    goto            reduce using rule 11 (declaration -> data_type .)
    declare         reduce using rule 11 (declaration -> data_type .)
    CLOSE_TAG       reduce using rule 11 (declaration -> data_type .)
    for             reduce using rule 11 (declaration -> data_type .)
    foreach         reduce using rule 11 (declaration -> data_type .)
    switch          reduce using rule 11 (declaration -> data_type .)
    try             reduce using rule 11 (declaration -> data_type .)
    throw           reduce using rule 11 (declaration -> data_type .)
    exit            reduce using rule 11 (declaration -> data_type .)
    private         reduce using rule 11 (declaration -> data_type .)
    protected       reduce using rule 11 (declaration -> data_type .)
    public          reduce using rule 11 (declaration -> data_type .)
    var             reduce using rule 11 (declaration -> data_type .)
    array           reduce using rule 11 (declaration -> data_type .)
    pow             reduce using rule 11 (declaration -> data_type .)
    POW             reduce using rule 11 (declaration -> data_type .)
    abs             reduce using rule 11 (declaration -> data_type .)
    cos             reduce using rule 11 (declaration -> data_type .)
    deg2rad         reduce using rule 11 (declaration -> data_type .)
    rad2deg         reduce using rule 11 (declaration -> data_type .)
    die             reduce using rule 11 (declaration -> data_type .)
    exp             reduce using rule 11 (declaration -> data_type .)
    floor           reduce using rule 11 (declaration -> data_type .)
    isset           reduce using rule 11 (declaration -> data_type .)
    list            reduce using rule 11 (declaration -> data_type .)
    log             reduce using rule 11 (declaration -> data_type .)
    log10           reduce using rule 11 (declaration -> data_type .)
    max             reduce using rule 11 (declaration -> data_type .)
    min             reduce using rule 11 (declaration -> data_type .)
    rand            reduce using rule 11 (declaration -> data_type .)
    round           reduce using rule 11 (declaration -> data_type .)
    sin             reduce using rule 11 (declaration -> data_type .)
    sqrt            reduce using rule 11 (declaration -> data_type .)
    unset           reduce using rule 11 (declaration -> data_type .)
    eval            reduce using rule 11 (declaration -> data_type .)
    CADENA          reduce using rule 11 (declaration -> data_type .)
    $end            reduce using rule 11 (declaration -> data_type .)
    RBLOCK          reduce using rule 11 (declaration -> data_type .)
    endwhile        reduce using rule 11 (declaration -> data_type .)
    endfor          reduce using rule 11 (declaration -> data_type .)
    endforeach      reduce using rule 11 (declaration -> data_type .)
    break           reduce using rule 11 (declaration -> data_type .)
    endswitch       reduce using rule 11 (declaration -> data_type .)
    default         reduce using rule 11 (declaration -> data_type .)
    case            reduce using rule 11 (declaration -> data_type .)
    VARIABLE        shift and go to state 109

  ! VARIABLE        [ reduce using rule 11 (declaration -> data_type .) ]


state 12

    (12) declaration -> matrix_type .

    COMMENT         reduce using rule 12 (declaration -> matrix_type .)
    COMMENT_HASHTAG reduce using rule 12 (declaration -> matrix_type .)
    COMMENT_MULTI   reduce using rule 12 (declaration -> matrix_type .)
    empty           reduce using rule 12 (declaration -> matrix_type .)
    include         reduce using rule 12 (declaration -> matrix_type .)
    include_once    reduce using rule 12 (declaration -> matrix_type .)
    require         reduce using rule 12 (declaration -> matrix_type .)
    require_once    reduce using rule 12 (declaration -> matrix_type .)
    namespace       reduce using rule 12 (declaration -> matrix_type .)
    int             reduce using rule 12 (declaration -> matrix_type .)
    float           reduce using rule 12 (declaration -> matrix_type .)
    double          reduce using rule 12 (declaration -> matrix_type .)
    global          reduce using rule 12 (declaration -> matrix_type .)
    const           reduce using rule 12 (declaration -> matrix_type .)
    print           reduce using rule 12 (declaration -> matrix_type .)
    echo            reduce using rule 12 (declaration -> matrix_type .)
    while           reduce using rule 12 (declaration -> matrix_type .)
    do              reduce using rule 12 (declaration -> matrix_type .)
    if              reduce using rule 12 (declaration -> matrix_type .)
    function        reduce using rule 12 (declaration -> matrix_type .)
    ID              reduce using rule 12 (declaration -> matrix_type .)
    return          reduce using rule 12 (declaration -> matrix_type .)
    class           reduce using rule 12 (declaration -> matrix_type .)
    final           reduce using rule 12 (declaration -> matrix_type .)
    new             reduce using rule 12 (declaration -> matrix_type .)
    interface       reduce using rule 12 (declaration -> matrix_type .)
    trait           reduce using rule 12 (declaration -> matrix_type .)
    use             reduce using rule 12 (declaration -> matrix_type .)
    continue        reduce using rule 12 (declaration -> matrix_type .)
    goto            reduce using rule 12 (declaration -> matrix_type .)
    declare         reduce using rule 12 (declaration -> matrix_type .)
    VARIABLE        reduce using rule 12 (declaration -> matrix_type .)
    CLOSE_TAG       reduce using rule 12 (declaration -> matrix_type .)
    for             reduce using rule 12 (declaration -> matrix_type .)
    foreach         reduce using rule 12 (declaration -> matrix_type .)
    switch          reduce using rule 12 (declaration -> matrix_type .)
    try             reduce using rule 12 (declaration -> matrix_type .)
    throw           reduce using rule 12 (declaration -> matrix_type .)
    exit            reduce using rule 12 (declaration -> matrix_type .)
    private         reduce using rule 12 (declaration -> matrix_type .)
    protected       reduce using rule 12 (declaration -> matrix_type .)
    public          reduce using rule 12 (declaration -> matrix_type .)
    var             reduce using rule 12 (declaration -> matrix_type .)
    array           reduce using rule 12 (declaration -> matrix_type .)
    pow             reduce using rule 12 (declaration -> matrix_type .)
    POW             reduce using rule 12 (declaration -> matrix_type .)
    abs             reduce using rule 12 (declaration -> matrix_type .)
    cos             reduce using rule 12 (declaration -> matrix_type .)
    deg2rad         reduce using rule 12 (declaration -> matrix_type .)
    rad2deg         reduce using rule 12 (declaration -> matrix_type .)
    die             reduce using rule 12 (declaration -> matrix_type .)
    exp             reduce using rule 12 (declaration -> matrix_type .)
    floor           reduce using rule 12 (declaration -> matrix_type .)
    isset           reduce using rule 12 (declaration -> matrix_type .)
    list            reduce using rule 12 (declaration -> matrix_type .)
    log             reduce using rule 12 (declaration -> matrix_type .)
    log10           reduce using rule 12 (declaration -> matrix_type .)
    max             reduce using rule 12 (declaration -> matrix_type .)
    min             reduce using rule 12 (declaration -> matrix_type .)
    rand            reduce using rule 12 (declaration -> matrix_type .)
    round           reduce using rule 12 (declaration -> matrix_type .)
    sin             reduce using rule 12 (declaration -> matrix_type .)
    sqrt            reduce using rule 12 (declaration -> matrix_type .)
    unset           reduce using rule 12 (declaration -> matrix_type .)
    eval            reduce using rule 12 (declaration -> matrix_type .)
    CADENA          reduce using rule 12 (declaration -> matrix_type .)
    $end            reduce using rule 12 (declaration -> matrix_type .)
    RBLOCK          reduce using rule 12 (declaration -> matrix_type .)
    endwhile        reduce using rule 12 (declaration -> matrix_type .)
    endfor          reduce using rule 12 (declaration -> matrix_type .)
    endforeach      reduce using rule 12 (declaration -> matrix_type .)
    break           reduce using rule 12 (declaration -> matrix_type .)
    endswitch       reduce using rule 12 (declaration -> matrix_type .)
    default         reduce using rule 12 (declaration -> matrix_type .)
    case            reduce using rule 12 (declaration -> matrix_type .)


state 13

    (13) declaration -> var_declaration .

    COMMENT         reduce using rule 13 (declaration -> var_declaration .)
    COMMENT_HASHTAG reduce using rule 13 (declaration -> var_declaration .)
    COMMENT_MULTI   reduce using rule 13 (declaration -> var_declaration .)
    empty           reduce using rule 13 (declaration -> var_declaration .)
    include         reduce using rule 13 (declaration -> var_declaration .)
    include_once    reduce using rule 13 (declaration -> var_declaration .)
    require         reduce using rule 13 (declaration -> var_declaration .)
    require_once    reduce using rule 13 (declaration -> var_declaration .)
    namespace       reduce using rule 13 (declaration -> var_declaration .)
    int             reduce using rule 13 (declaration -> var_declaration .)
    float           reduce using rule 13 (declaration -> var_declaration .)
    double          reduce using rule 13 (declaration -> var_declaration .)
    global          reduce using rule 13 (declaration -> var_declaration .)
    const           reduce using rule 13 (declaration -> var_declaration .)
    print           reduce using rule 13 (declaration -> var_declaration .)
    echo            reduce using rule 13 (declaration -> var_declaration .)
    while           reduce using rule 13 (declaration -> var_declaration .)
    do              reduce using rule 13 (declaration -> var_declaration .)
    if              reduce using rule 13 (declaration -> var_declaration .)
    function        reduce using rule 13 (declaration -> var_declaration .)
    ID              reduce using rule 13 (declaration -> var_declaration .)
    return          reduce using rule 13 (declaration -> var_declaration .)
    class           reduce using rule 13 (declaration -> var_declaration .)
    final           reduce using rule 13 (declaration -> var_declaration .)
    new             reduce using rule 13 (declaration -> var_declaration .)
    interface       reduce using rule 13 (declaration -> var_declaration .)
    trait           reduce using rule 13 (declaration -> var_declaration .)
    use             reduce using rule 13 (declaration -> var_declaration .)
    continue        reduce using rule 13 (declaration -> var_declaration .)
    goto            reduce using rule 13 (declaration -> var_declaration .)
    declare         reduce using rule 13 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> var_declaration .)
    CLOSE_TAG       reduce using rule 13 (declaration -> var_declaration .)
    for             reduce using rule 13 (declaration -> var_declaration .)
    foreach         reduce using rule 13 (declaration -> var_declaration .)
    switch          reduce using rule 13 (declaration -> var_declaration .)
    try             reduce using rule 13 (declaration -> var_declaration .)
    throw           reduce using rule 13 (declaration -> var_declaration .)
    exit            reduce using rule 13 (declaration -> var_declaration .)
    private         reduce using rule 13 (declaration -> var_declaration .)
    protected       reduce using rule 13 (declaration -> var_declaration .)
    public          reduce using rule 13 (declaration -> var_declaration .)
    var             reduce using rule 13 (declaration -> var_declaration .)
    array           reduce using rule 13 (declaration -> var_declaration .)
    pow             reduce using rule 13 (declaration -> var_declaration .)
    POW             reduce using rule 13 (declaration -> var_declaration .)
    abs             reduce using rule 13 (declaration -> var_declaration .)
    cos             reduce using rule 13 (declaration -> var_declaration .)
    deg2rad         reduce using rule 13 (declaration -> var_declaration .)
    rad2deg         reduce using rule 13 (declaration -> var_declaration .)
    die             reduce using rule 13 (declaration -> var_declaration .)
    exp             reduce using rule 13 (declaration -> var_declaration .)
    floor           reduce using rule 13 (declaration -> var_declaration .)
    isset           reduce using rule 13 (declaration -> var_declaration .)
    list            reduce using rule 13 (declaration -> var_declaration .)
    log             reduce using rule 13 (declaration -> var_declaration .)
    log10           reduce using rule 13 (declaration -> var_declaration .)
    max             reduce using rule 13 (declaration -> var_declaration .)
    min             reduce using rule 13 (declaration -> var_declaration .)
    rand            reduce using rule 13 (declaration -> var_declaration .)
    round           reduce using rule 13 (declaration -> var_declaration .)
    sin             reduce using rule 13 (declaration -> var_declaration .)
    sqrt            reduce using rule 13 (declaration -> var_declaration .)
    unset           reduce using rule 13 (declaration -> var_declaration .)
    eval            reduce using rule 13 (declaration -> var_declaration .)
    CADENA          reduce using rule 13 (declaration -> var_declaration .)
    $end            reduce using rule 13 (declaration -> var_declaration .)
    RBLOCK          reduce using rule 13 (declaration -> var_declaration .)
    endwhile        reduce using rule 13 (declaration -> var_declaration .)
    endfor          reduce using rule 13 (declaration -> var_declaration .)
    endforeach      reduce using rule 13 (declaration -> var_declaration .)
    break           reduce using rule 13 (declaration -> var_declaration .)
    endswitch       reduce using rule 13 (declaration -> var_declaration .)
    default         reduce using rule 13 (declaration -> var_declaration .)
    case            reduce using rule 13 (declaration -> var_declaration .)


state 14

    (14) declaration -> constant_declaration .

    COMMENT         reduce using rule 14 (declaration -> constant_declaration .)
    COMMENT_HASHTAG reduce using rule 14 (declaration -> constant_declaration .)
    COMMENT_MULTI   reduce using rule 14 (declaration -> constant_declaration .)
    empty           reduce using rule 14 (declaration -> constant_declaration .)
    include         reduce using rule 14 (declaration -> constant_declaration .)
    include_once    reduce using rule 14 (declaration -> constant_declaration .)
    require         reduce using rule 14 (declaration -> constant_declaration .)
    require_once    reduce using rule 14 (declaration -> constant_declaration .)
    namespace       reduce using rule 14 (declaration -> constant_declaration .)
    int             reduce using rule 14 (declaration -> constant_declaration .)
    float           reduce using rule 14 (declaration -> constant_declaration .)
    double          reduce using rule 14 (declaration -> constant_declaration .)
    global          reduce using rule 14 (declaration -> constant_declaration .)
    const           reduce using rule 14 (declaration -> constant_declaration .)
    print           reduce using rule 14 (declaration -> constant_declaration .)
    echo            reduce using rule 14 (declaration -> constant_declaration .)
    while           reduce using rule 14 (declaration -> constant_declaration .)
    do              reduce using rule 14 (declaration -> constant_declaration .)
    if              reduce using rule 14 (declaration -> constant_declaration .)
    function        reduce using rule 14 (declaration -> constant_declaration .)
    ID              reduce using rule 14 (declaration -> constant_declaration .)
    return          reduce using rule 14 (declaration -> constant_declaration .)
    class           reduce using rule 14 (declaration -> constant_declaration .)
    final           reduce using rule 14 (declaration -> constant_declaration .)
    new             reduce using rule 14 (declaration -> constant_declaration .)
    interface       reduce using rule 14 (declaration -> constant_declaration .)
    trait           reduce using rule 14 (declaration -> constant_declaration .)
    use             reduce using rule 14 (declaration -> constant_declaration .)
    continue        reduce using rule 14 (declaration -> constant_declaration .)
    goto            reduce using rule 14 (declaration -> constant_declaration .)
    declare         reduce using rule 14 (declaration -> constant_declaration .)
    VARIABLE        reduce using rule 14 (declaration -> constant_declaration .)
    CLOSE_TAG       reduce using rule 14 (declaration -> constant_declaration .)
    for             reduce using rule 14 (declaration -> constant_declaration .)
    foreach         reduce using rule 14 (declaration -> constant_declaration .)
    switch          reduce using rule 14 (declaration -> constant_declaration .)
    try             reduce using rule 14 (declaration -> constant_declaration .)
    throw           reduce using rule 14 (declaration -> constant_declaration .)
    exit            reduce using rule 14 (declaration -> constant_declaration .)
    private         reduce using rule 14 (declaration -> constant_declaration .)
    protected       reduce using rule 14 (declaration -> constant_declaration .)
    public          reduce using rule 14 (declaration -> constant_declaration .)
    var             reduce using rule 14 (declaration -> constant_declaration .)
    array           reduce using rule 14 (declaration -> constant_declaration .)
    pow             reduce using rule 14 (declaration -> constant_declaration .)
    POW             reduce using rule 14 (declaration -> constant_declaration .)
    abs             reduce using rule 14 (declaration -> constant_declaration .)
    cos             reduce using rule 14 (declaration -> constant_declaration .)
    deg2rad         reduce using rule 14 (declaration -> constant_declaration .)
    rad2deg         reduce using rule 14 (declaration -> constant_declaration .)
    die             reduce using rule 14 (declaration -> constant_declaration .)
    exp             reduce using rule 14 (declaration -> constant_declaration .)
    floor           reduce using rule 14 (declaration -> constant_declaration .)
    isset           reduce using rule 14 (declaration -> constant_declaration .)
    list            reduce using rule 14 (declaration -> constant_declaration .)
    log             reduce using rule 14 (declaration -> constant_declaration .)
    log10           reduce using rule 14 (declaration -> constant_declaration .)
    max             reduce using rule 14 (declaration -> constant_declaration .)
    min             reduce using rule 14 (declaration -> constant_declaration .)
    rand            reduce using rule 14 (declaration -> constant_declaration .)
    round           reduce using rule 14 (declaration -> constant_declaration .)
    sin             reduce using rule 14 (declaration -> constant_declaration .)
    sqrt            reduce using rule 14 (declaration -> constant_declaration .)
    unset           reduce using rule 14 (declaration -> constant_declaration .)
    eval            reduce using rule 14 (declaration -> constant_declaration .)
    CADENA          reduce using rule 14 (declaration -> constant_declaration .)
    $end            reduce using rule 14 (declaration -> constant_declaration .)
    RBLOCK          reduce using rule 14 (declaration -> constant_declaration .)
    endwhile        reduce using rule 14 (declaration -> constant_declaration .)
    endfor          reduce using rule 14 (declaration -> constant_declaration .)
    endforeach      reduce using rule 14 (declaration -> constant_declaration .)
    break           reduce using rule 14 (declaration -> constant_declaration .)
    endswitch       reduce using rule 14 (declaration -> constant_declaration .)
    default         reduce using rule 14 (declaration -> constant_declaration .)
    case            reduce using rule 14 (declaration -> constant_declaration .)


state 15

    (15) declaration -> print_declaration .

    COMMENT         reduce using rule 15 (declaration -> print_declaration .)
    COMMENT_HASHTAG reduce using rule 15 (declaration -> print_declaration .)
    COMMENT_MULTI   reduce using rule 15 (declaration -> print_declaration .)
    empty           reduce using rule 15 (declaration -> print_declaration .)
    include         reduce using rule 15 (declaration -> print_declaration .)
    include_once    reduce using rule 15 (declaration -> print_declaration .)
    require         reduce using rule 15 (declaration -> print_declaration .)
    require_once    reduce using rule 15 (declaration -> print_declaration .)
    namespace       reduce using rule 15 (declaration -> print_declaration .)
    int             reduce using rule 15 (declaration -> print_declaration .)
    float           reduce using rule 15 (declaration -> print_declaration .)
    double          reduce using rule 15 (declaration -> print_declaration .)
    global          reduce using rule 15 (declaration -> print_declaration .)
    const           reduce using rule 15 (declaration -> print_declaration .)
    print           reduce using rule 15 (declaration -> print_declaration .)
    echo            reduce using rule 15 (declaration -> print_declaration .)
    while           reduce using rule 15 (declaration -> print_declaration .)
    do              reduce using rule 15 (declaration -> print_declaration .)
    if              reduce using rule 15 (declaration -> print_declaration .)
    function        reduce using rule 15 (declaration -> print_declaration .)
    ID              reduce using rule 15 (declaration -> print_declaration .)
    return          reduce using rule 15 (declaration -> print_declaration .)
    class           reduce using rule 15 (declaration -> print_declaration .)
    final           reduce using rule 15 (declaration -> print_declaration .)
    new             reduce using rule 15 (declaration -> print_declaration .)
    interface       reduce using rule 15 (declaration -> print_declaration .)
    trait           reduce using rule 15 (declaration -> print_declaration .)
    use             reduce using rule 15 (declaration -> print_declaration .)
    continue        reduce using rule 15 (declaration -> print_declaration .)
    goto            reduce using rule 15 (declaration -> print_declaration .)
    declare         reduce using rule 15 (declaration -> print_declaration .)
    VARIABLE        reduce using rule 15 (declaration -> print_declaration .)
    CLOSE_TAG       reduce using rule 15 (declaration -> print_declaration .)
    for             reduce using rule 15 (declaration -> print_declaration .)
    foreach         reduce using rule 15 (declaration -> print_declaration .)
    switch          reduce using rule 15 (declaration -> print_declaration .)
    try             reduce using rule 15 (declaration -> print_declaration .)
    throw           reduce using rule 15 (declaration -> print_declaration .)
    exit            reduce using rule 15 (declaration -> print_declaration .)
    private         reduce using rule 15 (declaration -> print_declaration .)
    protected       reduce using rule 15 (declaration -> print_declaration .)
    public          reduce using rule 15 (declaration -> print_declaration .)
    var             reduce using rule 15 (declaration -> print_declaration .)
    array           reduce using rule 15 (declaration -> print_declaration .)
    pow             reduce using rule 15 (declaration -> print_declaration .)
    POW             reduce using rule 15 (declaration -> print_declaration .)
    abs             reduce using rule 15 (declaration -> print_declaration .)
    cos             reduce using rule 15 (declaration -> print_declaration .)
    deg2rad         reduce using rule 15 (declaration -> print_declaration .)
    rad2deg         reduce using rule 15 (declaration -> print_declaration .)
    die             reduce using rule 15 (declaration -> print_declaration .)
    exp             reduce using rule 15 (declaration -> print_declaration .)
    floor           reduce using rule 15 (declaration -> print_declaration .)
    isset           reduce using rule 15 (declaration -> print_declaration .)
    list            reduce using rule 15 (declaration -> print_declaration .)
    log             reduce using rule 15 (declaration -> print_declaration .)
    log10           reduce using rule 15 (declaration -> print_declaration .)
    max             reduce using rule 15 (declaration -> print_declaration .)
    min             reduce using rule 15 (declaration -> print_declaration .)
    rand            reduce using rule 15 (declaration -> print_declaration .)
    round           reduce using rule 15 (declaration -> print_declaration .)
    sin             reduce using rule 15 (declaration -> print_declaration .)
    sqrt            reduce using rule 15 (declaration -> print_declaration .)
    unset           reduce using rule 15 (declaration -> print_declaration .)
    eval            reduce using rule 15 (declaration -> print_declaration .)
    CADENA          reduce using rule 15 (declaration -> print_declaration .)
    $end            reduce using rule 15 (declaration -> print_declaration .)
    RBLOCK          reduce using rule 15 (declaration -> print_declaration .)
    endwhile        reduce using rule 15 (declaration -> print_declaration .)
    endfor          reduce using rule 15 (declaration -> print_declaration .)
    endforeach      reduce using rule 15 (declaration -> print_declaration .)
    break           reduce using rule 15 (declaration -> print_declaration .)
    endswitch       reduce using rule 15 (declaration -> print_declaration .)
    default         reduce using rule 15 (declaration -> print_declaration .)
    case            reduce using rule 15 (declaration -> print_declaration .)


state 16

    (16) declaration -> echo_declaration .

    COMMENT         reduce using rule 16 (declaration -> echo_declaration .)
    COMMENT_HASHTAG reduce using rule 16 (declaration -> echo_declaration .)
    COMMENT_MULTI   reduce using rule 16 (declaration -> echo_declaration .)
    empty           reduce using rule 16 (declaration -> echo_declaration .)
    include         reduce using rule 16 (declaration -> echo_declaration .)
    include_once    reduce using rule 16 (declaration -> echo_declaration .)
    require         reduce using rule 16 (declaration -> echo_declaration .)
    require_once    reduce using rule 16 (declaration -> echo_declaration .)
    namespace       reduce using rule 16 (declaration -> echo_declaration .)
    int             reduce using rule 16 (declaration -> echo_declaration .)
    float           reduce using rule 16 (declaration -> echo_declaration .)
    double          reduce using rule 16 (declaration -> echo_declaration .)
    global          reduce using rule 16 (declaration -> echo_declaration .)
    const           reduce using rule 16 (declaration -> echo_declaration .)
    print           reduce using rule 16 (declaration -> echo_declaration .)
    echo            reduce using rule 16 (declaration -> echo_declaration .)
    while           reduce using rule 16 (declaration -> echo_declaration .)
    do              reduce using rule 16 (declaration -> echo_declaration .)
    if              reduce using rule 16 (declaration -> echo_declaration .)
    function        reduce using rule 16 (declaration -> echo_declaration .)
    ID              reduce using rule 16 (declaration -> echo_declaration .)
    return          reduce using rule 16 (declaration -> echo_declaration .)
    class           reduce using rule 16 (declaration -> echo_declaration .)
    final           reduce using rule 16 (declaration -> echo_declaration .)
    new             reduce using rule 16 (declaration -> echo_declaration .)
    interface       reduce using rule 16 (declaration -> echo_declaration .)
    trait           reduce using rule 16 (declaration -> echo_declaration .)
    use             reduce using rule 16 (declaration -> echo_declaration .)
    continue        reduce using rule 16 (declaration -> echo_declaration .)
    goto            reduce using rule 16 (declaration -> echo_declaration .)
    declare         reduce using rule 16 (declaration -> echo_declaration .)
    VARIABLE        reduce using rule 16 (declaration -> echo_declaration .)
    CLOSE_TAG       reduce using rule 16 (declaration -> echo_declaration .)
    for             reduce using rule 16 (declaration -> echo_declaration .)
    foreach         reduce using rule 16 (declaration -> echo_declaration .)
    switch          reduce using rule 16 (declaration -> echo_declaration .)
    try             reduce using rule 16 (declaration -> echo_declaration .)
    throw           reduce using rule 16 (declaration -> echo_declaration .)
    exit            reduce using rule 16 (declaration -> echo_declaration .)
    private         reduce using rule 16 (declaration -> echo_declaration .)
    protected       reduce using rule 16 (declaration -> echo_declaration .)
    public          reduce using rule 16 (declaration -> echo_declaration .)
    var             reduce using rule 16 (declaration -> echo_declaration .)
    array           reduce using rule 16 (declaration -> echo_declaration .)
    pow             reduce using rule 16 (declaration -> echo_declaration .)
    POW             reduce using rule 16 (declaration -> echo_declaration .)
    abs             reduce using rule 16 (declaration -> echo_declaration .)
    cos             reduce using rule 16 (declaration -> echo_declaration .)
    deg2rad         reduce using rule 16 (declaration -> echo_declaration .)
    rad2deg         reduce using rule 16 (declaration -> echo_declaration .)
    die             reduce using rule 16 (declaration -> echo_declaration .)
    exp             reduce using rule 16 (declaration -> echo_declaration .)
    floor           reduce using rule 16 (declaration -> echo_declaration .)
    isset           reduce using rule 16 (declaration -> echo_declaration .)
    list            reduce using rule 16 (declaration -> echo_declaration .)
    log             reduce using rule 16 (declaration -> echo_declaration .)
    log10           reduce using rule 16 (declaration -> echo_declaration .)
    max             reduce using rule 16 (declaration -> echo_declaration .)
    min             reduce using rule 16 (declaration -> echo_declaration .)
    rand            reduce using rule 16 (declaration -> echo_declaration .)
    round           reduce using rule 16 (declaration -> echo_declaration .)
    sin             reduce using rule 16 (declaration -> echo_declaration .)
    sqrt            reduce using rule 16 (declaration -> echo_declaration .)
    unset           reduce using rule 16 (declaration -> echo_declaration .)
    eval            reduce using rule 16 (declaration -> echo_declaration .)
    CADENA          reduce using rule 16 (declaration -> echo_declaration .)
    $end            reduce using rule 16 (declaration -> echo_declaration .)
    RBLOCK          reduce using rule 16 (declaration -> echo_declaration .)
    endwhile        reduce using rule 16 (declaration -> echo_declaration .)
    endfor          reduce using rule 16 (declaration -> echo_declaration .)
    endforeach      reduce using rule 16 (declaration -> echo_declaration .)
    break           reduce using rule 16 (declaration -> echo_declaration .)
    endswitch       reduce using rule 16 (declaration -> echo_declaration .)
    default         reduce using rule 16 (declaration -> echo_declaration .)
    case            reduce using rule 16 (declaration -> echo_declaration .)


state 17

    (17) declaration -> iteration_stmt .

    COMMENT         reduce using rule 17 (declaration -> iteration_stmt .)
    COMMENT_HASHTAG reduce using rule 17 (declaration -> iteration_stmt .)
    COMMENT_MULTI   reduce using rule 17 (declaration -> iteration_stmt .)
    empty           reduce using rule 17 (declaration -> iteration_stmt .)
    include         reduce using rule 17 (declaration -> iteration_stmt .)
    include_once    reduce using rule 17 (declaration -> iteration_stmt .)
    require         reduce using rule 17 (declaration -> iteration_stmt .)
    require_once    reduce using rule 17 (declaration -> iteration_stmt .)
    namespace       reduce using rule 17 (declaration -> iteration_stmt .)
    int             reduce using rule 17 (declaration -> iteration_stmt .)
    float           reduce using rule 17 (declaration -> iteration_stmt .)
    double          reduce using rule 17 (declaration -> iteration_stmt .)
    global          reduce using rule 17 (declaration -> iteration_stmt .)
    const           reduce using rule 17 (declaration -> iteration_stmt .)
    print           reduce using rule 17 (declaration -> iteration_stmt .)
    echo            reduce using rule 17 (declaration -> iteration_stmt .)
    while           reduce using rule 17 (declaration -> iteration_stmt .)
    do              reduce using rule 17 (declaration -> iteration_stmt .)
    if              reduce using rule 17 (declaration -> iteration_stmt .)
    function        reduce using rule 17 (declaration -> iteration_stmt .)
    ID              reduce using rule 17 (declaration -> iteration_stmt .)
    return          reduce using rule 17 (declaration -> iteration_stmt .)
    class           reduce using rule 17 (declaration -> iteration_stmt .)
    final           reduce using rule 17 (declaration -> iteration_stmt .)
    new             reduce using rule 17 (declaration -> iteration_stmt .)
    interface       reduce using rule 17 (declaration -> iteration_stmt .)
    trait           reduce using rule 17 (declaration -> iteration_stmt .)
    use             reduce using rule 17 (declaration -> iteration_stmt .)
    continue        reduce using rule 17 (declaration -> iteration_stmt .)
    goto            reduce using rule 17 (declaration -> iteration_stmt .)
    declare         reduce using rule 17 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 17 (declaration -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 17 (declaration -> iteration_stmt .)
    for             reduce using rule 17 (declaration -> iteration_stmt .)
    foreach         reduce using rule 17 (declaration -> iteration_stmt .)
    switch          reduce using rule 17 (declaration -> iteration_stmt .)
    try             reduce using rule 17 (declaration -> iteration_stmt .)
    throw           reduce using rule 17 (declaration -> iteration_stmt .)
    exit            reduce using rule 17 (declaration -> iteration_stmt .)
    private         reduce using rule 17 (declaration -> iteration_stmt .)
    protected       reduce using rule 17 (declaration -> iteration_stmt .)
    public          reduce using rule 17 (declaration -> iteration_stmt .)
    var             reduce using rule 17 (declaration -> iteration_stmt .)
    array           reduce using rule 17 (declaration -> iteration_stmt .)
    pow             reduce using rule 17 (declaration -> iteration_stmt .)
    POW             reduce using rule 17 (declaration -> iteration_stmt .)
    abs             reduce using rule 17 (declaration -> iteration_stmt .)
    cos             reduce using rule 17 (declaration -> iteration_stmt .)
    deg2rad         reduce using rule 17 (declaration -> iteration_stmt .)
    rad2deg         reduce using rule 17 (declaration -> iteration_stmt .)
    die             reduce using rule 17 (declaration -> iteration_stmt .)
    exp             reduce using rule 17 (declaration -> iteration_stmt .)
    floor           reduce using rule 17 (declaration -> iteration_stmt .)
    isset           reduce using rule 17 (declaration -> iteration_stmt .)
    list            reduce using rule 17 (declaration -> iteration_stmt .)
    log             reduce using rule 17 (declaration -> iteration_stmt .)
    log10           reduce using rule 17 (declaration -> iteration_stmt .)
    max             reduce using rule 17 (declaration -> iteration_stmt .)
    min             reduce using rule 17 (declaration -> iteration_stmt .)
    rand            reduce using rule 17 (declaration -> iteration_stmt .)
    round           reduce using rule 17 (declaration -> iteration_stmt .)
    sin             reduce using rule 17 (declaration -> iteration_stmt .)
    sqrt            reduce using rule 17 (declaration -> iteration_stmt .)
    unset           reduce using rule 17 (declaration -> iteration_stmt .)
    eval            reduce using rule 17 (declaration -> iteration_stmt .)
    CADENA          reduce using rule 17 (declaration -> iteration_stmt .)
    $end            reduce using rule 17 (declaration -> iteration_stmt .)
    RBLOCK          reduce using rule 17 (declaration -> iteration_stmt .)
    endwhile        reduce using rule 17 (declaration -> iteration_stmt .)
    endfor          reduce using rule 17 (declaration -> iteration_stmt .)
    endforeach      reduce using rule 17 (declaration -> iteration_stmt .)
    break           reduce using rule 17 (declaration -> iteration_stmt .)
    endswitch       reduce using rule 17 (declaration -> iteration_stmt .)
    default         reduce using rule 17 (declaration -> iteration_stmt .)
    case            reduce using rule 17 (declaration -> iteration_stmt .)


state 18

    (18) declaration -> if_statement .

    COMMENT         reduce using rule 18 (declaration -> if_statement .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> if_statement .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> if_statement .)
    empty           reduce using rule 18 (declaration -> if_statement .)
    include         reduce using rule 18 (declaration -> if_statement .)
    include_once    reduce using rule 18 (declaration -> if_statement .)
    require         reduce using rule 18 (declaration -> if_statement .)
    require_once    reduce using rule 18 (declaration -> if_statement .)
    namespace       reduce using rule 18 (declaration -> if_statement .)
    int             reduce using rule 18 (declaration -> if_statement .)
    float           reduce using rule 18 (declaration -> if_statement .)
    double          reduce using rule 18 (declaration -> if_statement .)
    global          reduce using rule 18 (declaration -> if_statement .)
    const           reduce using rule 18 (declaration -> if_statement .)
    print           reduce using rule 18 (declaration -> if_statement .)
    echo            reduce using rule 18 (declaration -> if_statement .)
    while           reduce using rule 18 (declaration -> if_statement .)
    do              reduce using rule 18 (declaration -> if_statement .)
    if              reduce using rule 18 (declaration -> if_statement .)
    function        reduce using rule 18 (declaration -> if_statement .)
    ID              reduce using rule 18 (declaration -> if_statement .)
    return          reduce using rule 18 (declaration -> if_statement .)
    class           reduce using rule 18 (declaration -> if_statement .)
    final           reduce using rule 18 (declaration -> if_statement .)
    new             reduce using rule 18 (declaration -> if_statement .)
    interface       reduce using rule 18 (declaration -> if_statement .)
    trait           reduce using rule 18 (declaration -> if_statement .)
    use             reduce using rule 18 (declaration -> if_statement .)
    continue        reduce using rule 18 (declaration -> if_statement .)
    goto            reduce using rule 18 (declaration -> if_statement .)
    declare         reduce using rule 18 (declaration -> if_statement .)
    VARIABLE        reduce using rule 18 (declaration -> if_statement .)
    CLOSE_TAG       reduce using rule 18 (declaration -> if_statement .)
    for             reduce using rule 18 (declaration -> if_statement .)
    foreach         reduce using rule 18 (declaration -> if_statement .)
    switch          reduce using rule 18 (declaration -> if_statement .)
    try             reduce using rule 18 (declaration -> if_statement .)
    throw           reduce using rule 18 (declaration -> if_statement .)
    exit            reduce using rule 18 (declaration -> if_statement .)
    private         reduce using rule 18 (declaration -> if_statement .)
    protected       reduce using rule 18 (declaration -> if_statement .)
    public          reduce using rule 18 (declaration -> if_statement .)
    var             reduce using rule 18 (declaration -> if_statement .)
    array           reduce using rule 18 (declaration -> if_statement .)
    pow             reduce using rule 18 (declaration -> if_statement .)
    POW             reduce using rule 18 (declaration -> if_statement .)
    abs             reduce using rule 18 (declaration -> if_statement .)
    cos             reduce using rule 18 (declaration -> if_statement .)
    deg2rad         reduce using rule 18 (declaration -> if_statement .)
    rad2deg         reduce using rule 18 (declaration -> if_statement .)
    die             reduce using rule 18 (declaration -> if_statement .)
    exp             reduce using rule 18 (declaration -> if_statement .)
    floor           reduce using rule 18 (declaration -> if_statement .)
    isset           reduce using rule 18 (declaration -> if_statement .)
    list            reduce using rule 18 (declaration -> if_statement .)
    log             reduce using rule 18 (declaration -> if_statement .)
    log10           reduce using rule 18 (declaration -> if_statement .)
    max             reduce using rule 18 (declaration -> if_statement .)
    min             reduce using rule 18 (declaration -> if_statement .)
    rand            reduce using rule 18 (declaration -> if_statement .)
    round           reduce using rule 18 (declaration -> if_statement .)
    sin             reduce using rule 18 (declaration -> if_statement .)
    sqrt            reduce using rule 18 (declaration -> if_statement .)
    unset           reduce using rule 18 (declaration -> if_statement .)
    eval            reduce using rule 18 (declaration -> if_statement .)
    CADENA          reduce using rule 18 (declaration -> if_statement .)
    $end            reduce using rule 18 (declaration -> if_statement .)
    RBLOCK          reduce using rule 18 (declaration -> if_statement .)
    endwhile        reduce using rule 18 (declaration -> if_statement .)
    endfor          reduce using rule 18 (declaration -> if_statement .)
    endforeach      reduce using rule 18 (declaration -> if_statement .)
    break           reduce using rule 18 (declaration -> if_statement .)
    endswitch       reduce using rule 18 (declaration -> if_statement .)
    default         reduce using rule 18 (declaration -> if_statement .)
    case            reduce using rule 18 (declaration -> if_statement .)


state 19

    (19) declaration -> fun_declaration .

    COMMENT         reduce using rule 19 (declaration -> fun_declaration .)
    COMMENT_HASHTAG reduce using rule 19 (declaration -> fun_declaration .)
    COMMENT_MULTI   reduce using rule 19 (declaration -> fun_declaration .)
    empty           reduce using rule 19 (declaration -> fun_declaration .)
    include         reduce using rule 19 (declaration -> fun_declaration .)
    include_once    reduce using rule 19 (declaration -> fun_declaration .)
    require         reduce using rule 19 (declaration -> fun_declaration .)
    require_once    reduce using rule 19 (declaration -> fun_declaration .)
    namespace       reduce using rule 19 (declaration -> fun_declaration .)
    int             reduce using rule 19 (declaration -> fun_declaration .)
    float           reduce using rule 19 (declaration -> fun_declaration .)
    double          reduce using rule 19 (declaration -> fun_declaration .)
    global          reduce using rule 19 (declaration -> fun_declaration .)
    const           reduce using rule 19 (declaration -> fun_declaration .)
    print           reduce using rule 19 (declaration -> fun_declaration .)
    echo            reduce using rule 19 (declaration -> fun_declaration .)
    while           reduce using rule 19 (declaration -> fun_declaration .)
    do              reduce using rule 19 (declaration -> fun_declaration .)
    if              reduce using rule 19 (declaration -> fun_declaration .)
    function        reduce using rule 19 (declaration -> fun_declaration .)
    ID              reduce using rule 19 (declaration -> fun_declaration .)
    return          reduce using rule 19 (declaration -> fun_declaration .)
    class           reduce using rule 19 (declaration -> fun_declaration .)
    final           reduce using rule 19 (declaration -> fun_declaration .)
    new             reduce using rule 19 (declaration -> fun_declaration .)
    interface       reduce using rule 19 (declaration -> fun_declaration .)
    trait           reduce using rule 19 (declaration -> fun_declaration .)
    use             reduce using rule 19 (declaration -> fun_declaration .)
    continue        reduce using rule 19 (declaration -> fun_declaration .)
    goto            reduce using rule 19 (declaration -> fun_declaration .)
    declare         reduce using rule 19 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 19 (declaration -> fun_declaration .)
    CLOSE_TAG       reduce using rule 19 (declaration -> fun_declaration .)
    for             reduce using rule 19 (declaration -> fun_declaration .)
    foreach         reduce using rule 19 (declaration -> fun_declaration .)
    switch          reduce using rule 19 (declaration -> fun_declaration .)
    try             reduce using rule 19 (declaration -> fun_declaration .)
    throw           reduce using rule 19 (declaration -> fun_declaration .)
    exit            reduce using rule 19 (declaration -> fun_declaration .)
    private         reduce using rule 19 (declaration -> fun_declaration .)
    protected       reduce using rule 19 (declaration -> fun_declaration .)
    public          reduce using rule 19 (declaration -> fun_declaration .)
    var             reduce using rule 19 (declaration -> fun_declaration .)
    array           reduce using rule 19 (declaration -> fun_declaration .)
    pow             reduce using rule 19 (declaration -> fun_declaration .)
    POW             reduce using rule 19 (declaration -> fun_declaration .)
    abs             reduce using rule 19 (declaration -> fun_declaration .)
    cos             reduce using rule 19 (declaration -> fun_declaration .)
    deg2rad         reduce using rule 19 (declaration -> fun_declaration .)
    rad2deg         reduce using rule 19 (declaration -> fun_declaration .)
    die             reduce using rule 19 (declaration -> fun_declaration .)
    exp             reduce using rule 19 (declaration -> fun_declaration .)
    floor           reduce using rule 19 (declaration -> fun_declaration .)
    isset           reduce using rule 19 (declaration -> fun_declaration .)
    list            reduce using rule 19 (declaration -> fun_declaration .)
    log             reduce using rule 19 (declaration -> fun_declaration .)
    log10           reduce using rule 19 (declaration -> fun_declaration .)
    max             reduce using rule 19 (declaration -> fun_declaration .)
    min             reduce using rule 19 (declaration -> fun_declaration .)
    rand            reduce using rule 19 (declaration -> fun_declaration .)
    round           reduce using rule 19 (declaration -> fun_declaration .)
    sin             reduce using rule 19 (declaration -> fun_declaration .)
    sqrt            reduce using rule 19 (declaration -> fun_declaration .)
    unset           reduce using rule 19 (declaration -> fun_declaration .)
    eval            reduce using rule 19 (declaration -> fun_declaration .)
    CADENA          reduce using rule 19 (declaration -> fun_declaration .)
    $end            reduce using rule 19 (declaration -> fun_declaration .)
    RBLOCK          reduce using rule 19 (declaration -> fun_declaration .)
    endwhile        reduce using rule 19 (declaration -> fun_declaration .)
    endfor          reduce using rule 19 (declaration -> fun_declaration .)
    endforeach      reduce using rule 19 (declaration -> fun_declaration .)
    break           reduce using rule 19 (declaration -> fun_declaration .)
    endswitch       reduce using rule 19 (declaration -> fun_declaration .)
    default         reduce using rule 19 (declaration -> fun_declaration .)
    case            reduce using rule 19 (declaration -> fun_declaration .)


state 20

    (20) declaration -> fun_call .

    COMMENT         reduce using rule 20 (declaration -> fun_call .)
    COMMENT_HASHTAG reduce using rule 20 (declaration -> fun_call .)
    COMMENT_MULTI   reduce using rule 20 (declaration -> fun_call .)
    empty           reduce using rule 20 (declaration -> fun_call .)
    include         reduce using rule 20 (declaration -> fun_call .)
    include_once    reduce using rule 20 (declaration -> fun_call .)
    require         reduce using rule 20 (declaration -> fun_call .)
    require_once    reduce using rule 20 (declaration -> fun_call .)
    namespace       reduce using rule 20 (declaration -> fun_call .)
    int             reduce using rule 20 (declaration -> fun_call .)
    float           reduce using rule 20 (declaration -> fun_call .)
    double          reduce using rule 20 (declaration -> fun_call .)
    global          reduce using rule 20 (declaration -> fun_call .)
    const           reduce using rule 20 (declaration -> fun_call .)
    print           reduce using rule 20 (declaration -> fun_call .)
    echo            reduce using rule 20 (declaration -> fun_call .)
    while           reduce using rule 20 (declaration -> fun_call .)
    do              reduce using rule 20 (declaration -> fun_call .)
    if              reduce using rule 20 (declaration -> fun_call .)
    function        reduce using rule 20 (declaration -> fun_call .)
    ID              reduce using rule 20 (declaration -> fun_call .)
    return          reduce using rule 20 (declaration -> fun_call .)
    class           reduce using rule 20 (declaration -> fun_call .)
    final           reduce using rule 20 (declaration -> fun_call .)
    new             reduce using rule 20 (declaration -> fun_call .)
    interface       reduce using rule 20 (declaration -> fun_call .)
    trait           reduce using rule 20 (declaration -> fun_call .)
    use             reduce using rule 20 (declaration -> fun_call .)
    continue        reduce using rule 20 (declaration -> fun_call .)
    goto            reduce using rule 20 (declaration -> fun_call .)
    declare         reduce using rule 20 (declaration -> fun_call .)
    VARIABLE        reduce using rule 20 (declaration -> fun_call .)
    CLOSE_TAG       reduce using rule 20 (declaration -> fun_call .)
    for             reduce using rule 20 (declaration -> fun_call .)
    foreach         reduce using rule 20 (declaration -> fun_call .)
    switch          reduce using rule 20 (declaration -> fun_call .)
    try             reduce using rule 20 (declaration -> fun_call .)
    throw           reduce using rule 20 (declaration -> fun_call .)
    exit            reduce using rule 20 (declaration -> fun_call .)
    private         reduce using rule 20 (declaration -> fun_call .)
    protected       reduce using rule 20 (declaration -> fun_call .)
    public          reduce using rule 20 (declaration -> fun_call .)
    var             reduce using rule 20 (declaration -> fun_call .)
    array           reduce using rule 20 (declaration -> fun_call .)
    pow             reduce using rule 20 (declaration -> fun_call .)
    POW             reduce using rule 20 (declaration -> fun_call .)
    abs             reduce using rule 20 (declaration -> fun_call .)
    cos             reduce using rule 20 (declaration -> fun_call .)
    deg2rad         reduce using rule 20 (declaration -> fun_call .)
    rad2deg         reduce using rule 20 (declaration -> fun_call .)
    die             reduce using rule 20 (declaration -> fun_call .)
    exp             reduce using rule 20 (declaration -> fun_call .)
    floor           reduce using rule 20 (declaration -> fun_call .)
    isset           reduce using rule 20 (declaration -> fun_call .)
    list            reduce using rule 20 (declaration -> fun_call .)
    log             reduce using rule 20 (declaration -> fun_call .)
    log10           reduce using rule 20 (declaration -> fun_call .)
    max             reduce using rule 20 (declaration -> fun_call .)
    min             reduce using rule 20 (declaration -> fun_call .)
    rand            reduce using rule 20 (declaration -> fun_call .)
    round           reduce using rule 20 (declaration -> fun_call .)
    sin             reduce using rule 20 (declaration -> fun_call .)
    sqrt            reduce using rule 20 (declaration -> fun_call .)
    unset           reduce using rule 20 (declaration -> fun_call .)
    eval            reduce using rule 20 (declaration -> fun_call .)
    CADENA          reduce using rule 20 (declaration -> fun_call .)
    $end            reduce using rule 20 (declaration -> fun_call .)
    RBLOCK          reduce using rule 20 (declaration -> fun_call .)
    endwhile        reduce using rule 20 (declaration -> fun_call .)
    endfor          reduce using rule 20 (declaration -> fun_call .)
    endforeach      reduce using rule 20 (declaration -> fun_call .)
    break           reduce using rule 20 (declaration -> fun_call .)
    endswitch       reduce using rule 20 (declaration -> fun_call .)
    default         reduce using rule 20 (declaration -> fun_call .)
    case            reduce using rule 20 (declaration -> fun_call .)


state 21

    (21) declaration -> return_statement .

    COMMENT         reduce using rule 21 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> return_statement .)
    empty           reduce using rule 21 (declaration -> return_statement .)
    include         reduce using rule 21 (declaration -> return_statement .)
    include_once    reduce using rule 21 (declaration -> return_statement .)
    require         reduce using rule 21 (declaration -> return_statement .)
    require_once    reduce using rule 21 (declaration -> return_statement .)
    namespace       reduce using rule 21 (declaration -> return_statement .)
    int             reduce using rule 21 (declaration -> return_statement .)
    float           reduce using rule 21 (declaration -> return_statement .)
    double          reduce using rule 21 (declaration -> return_statement .)
    global          reduce using rule 21 (declaration -> return_statement .)
    const           reduce using rule 21 (declaration -> return_statement .)
    print           reduce using rule 21 (declaration -> return_statement .)
    echo            reduce using rule 21 (declaration -> return_statement .)
    while           reduce using rule 21 (declaration -> return_statement .)
    do              reduce using rule 21 (declaration -> return_statement .)
    if              reduce using rule 21 (declaration -> return_statement .)
    function        reduce using rule 21 (declaration -> return_statement .)
    ID              reduce using rule 21 (declaration -> return_statement .)
    return          reduce using rule 21 (declaration -> return_statement .)
    class           reduce using rule 21 (declaration -> return_statement .)
    final           reduce using rule 21 (declaration -> return_statement .)
    new             reduce using rule 21 (declaration -> return_statement .)
    interface       reduce using rule 21 (declaration -> return_statement .)
    trait           reduce using rule 21 (declaration -> return_statement .)
    use             reduce using rule 21 (declaration -> return_statement .)
    continue        reduce using rule 21 (declaration -> return_statement .)
    goto            reduce using rule 21 (declaration -> return_statement .)
    declare         reduce using rule 21 (declaration -> return_statement .)
    VARIABLE        reduce using rule 21 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 21 (declaration -> return_statement .)
    for             reduce using rule 21 (declaration -> return_statement .)
    foreach         reduce using rule 21 (declaration -> return_statement .)
    switch          reduce using rule 21 (declaration -> return_statement .)
    try             reduce using rule 21 (declaration -> return_statement .)
    throw           reduce using rule 21 (declaration -> return_statement .)
    exit            reduce using rule 21 (declaration -> return_statement .)
    private         reduce using rule 21 (declaration -> return_statement .)
    protected       reduce using rule 21 (declaration -> return_statement .)
    public          reduce using rule 21 (declaration -> return_statement .)
    var             reduce using rule 21 (declaration -> return_statement .)
    array           reduce using rule 21 (declaration -> return_statement .)
    pow             reduce using rule 21 (declaration -> return_statement .)
    POW             reduce using rule 21 (declaration -> return_statement .)
    abs             reduce using rule 21 (declaration -> return_statement .)
    cos             reduce using rule 21 (declaration -> return_statement .)
    deg2rad         reduce using rule 21 (declaration -> return_statement .)
    rad2deg         reduce using rule 21 (declaration -> return_statement .)
    die             reduce using rule 21 (declaration -> return_statement .)
    exp             reduce using rule 21 (declaration -> return_statement .)
    floor           reduce using rule 21 (declaration -> return_statement .)
    isset           reduce using rule 21 (declaration -> return_statement .)
    list            reduce using rule 21 (declaration -> return_statement .)
    log             reduce using rule 21 (declaration -> return_statement .)
    log10           reduce using rule 21 (declaration -> return_statement .)
    max             reduce using rule 21 (declaration -> return_statement .)
    min             reduce using rule 21 (declaration -> return_statement .)
    rand            reduce using rule 21 (declaration -> return_statement .)
    round           reduce using rule 21 (declaration -> return_statement .)
    sin             reduce using rule 21 (declaration -> return_statement .)
    sqrt            reduce using rule 21 (declaration -> return_statement .)
    unset           reduce using rule 21 (declaration -> return_statement .)
    eval            reduce using rule 21 (declaration -> return_statement .)
    CADENA          reduce using rule 21 (declaration -> return_statement .)
    $end            reduce using rule 21 (declaration -> return_statement .)
    RBLOCK          reduce using rule 21 (declaration -> return_statement .)
    endwhile        reduce using rule 21 (declaration -> return_statement .)
    endfor          reduce using rule 21 (declaration -> return_statement .)
    endforeach      reduce using rule 21 (declaration -> return_statement .)
    break           reduce using rule 21 (declaration -> return_statement .)
    endswitch       reduce using rule 21 (declaration -> return_statement .)
    default         reduce using rule 21 (declaration -> return_statement .)
    case            reduce using rule 21 (declaration -> return_statement .)


state 22

    (22) declaration -> class_declaration .

    COMMENT         reduce using rule 22 (declaration -> class_declaration .)
    COMMENT_HASHTAG reduce using rule 22 (declaration -> class_declaration .)
    COMMENT_MULTI   reduce using rule 22 (declaration -> class_declaration .)
    empty           reduce using rule 22 (declaration -> class_declaration .)
    include         reduce using rule 22 (declaration -> class_declaration .)
    include_once    reduce using rule 22 (declaration -> class_declaration .)
    require         reduce using rule 22 (declaration -> class_declaration .)
    require_once    reduce using rule 22 (declaration -> class_declaration .)
    namespace       reduce using rule 22 (declaration -> class_declaration .)
    int             reduce using rule 22 (declaration -> class_declaration .)
    float           reduce using rule 22 (declaration -> class_declaration .)
    double          reduce using rule 22 (declaration -> class_declaration .)
    global          reduce using rule 22 (declaration -> class_declaration .)
    const           reduce using rule 22 (declaration -> class_declaration .)
    print           reduce using rule 22 (declaration -> class_declaration .)
    echo            reduce using rule 22 (declaration -> class_declaration .)
    while           reduce using rule 22 (declaration -> class_declaration .)
    do              reduce using rule 22 (declaration -> class_declaration .)
    if              reduce using rule 22 (declaration -> class_declaration .)
    function        reduce using rule 22 (declaration -> class_declaration .)
    ID              reduce using rule 22 (declaration -> class_declaration .)
    return          reduce using rule 22 (declaration -> class_declaration .)
    class           reduce using rule 22 (declaration -> class_declaration .)
    final           reduce using rule 22 (declaration -> class_declaration .)
    new             reduce using rule 22 (declaration -> class_declaration .)
    interface       reduce using rule 22 (declaration -> class_declaration .)
    trait           reduce using rule 22 (declaration -> class_declaration .)
    use             reduce using rule 22 (declaration -> class_declaration .)
    continue        reduce using rule 22 (declaration -> class_declaration .)
    goto            reduce using rule 22 (declaration -> class_declaration .)
    declare         reduce using rule 22 (declaration -> class_declaration .)
    VARIABLE        reduce using rule 22 (declaration -> class_declaration .)
    CLOSE_TAG       reduce using rule 22 (declaration -> class_declaration .)
    for             reduce using rule 22 (declaration -> class_declaration .)
    foreach         reduce using rule 22 (declaration -> class_declaration .)
    switch          reduce using rule 22 (declaration -> class_declaration .)
    try             reduce using rule 22 (declaration -> class_declaration .)
    throw           reduce using rule 22 (declaration -> class_declaration .)
    exit            reduce using rule 22 (declaration -> class_declaration .)
    private         reduce using rule 22 (declaration -> class_declaration .)
    protected       reduce using rule 22 (declaration -> class_declaration .)
    public          reduce using rule 22 (declaration -> class_declaration .)
    var             reduce using rule 22 (declaration -> class_declaration .)
    array           reduce using rule 22 (declaration -> class_declaration .)
    pow             reduce using rule 22 (declaration -> class_declaration .)
    POW             reduce using rule 22 (declaration -> class_declaration .)
    abs             reduce using rule 22 (declaration -> class_declaration .)
    cos             reduce using rule 22 (declaration -> class_declaration .)
    deg2rad         reduce using rule 22 (declaration -> class_declaration .)
    rad2deg         reduce using rule 22 (declaration -> class_declaration .)
    die             reduce using rule 22 (declaration -> class_declaration .)
    exp             reduce using rule 22 (declaration -> class_declaration .)
    floor           reduce using rule 22 (declaration -> class_declaration .)
    isset           reduce using rule 22 (declaration -> class_declaration .)
    list            reduce using rule 22 (declaration -> class_declaration .)
    log             reduce using rule 22 (declaration -> class_declaration .)
    log10           reduce using rule 22 (declaration -> class_declaration .)
    max             reduce using rule 22 (declaration -> class_declaration .)
    min             reduce using rule 22 (declaration -> class_declaration .)
    rand            reduce using rule 22 (declaration -> class_declaration .)
    round           reduce using rule 22 (declaration -> class_declaration .)
    sin             reduce using rule 22 (declaration -> class_declaration .)
    sqrt            reduce using rule 22 (declaration -> class_declaration .)
    unset           reduce using rule 22 (declaration -> class_declaration .)
    eval            reduce using rule 22 (declaration -> class_declaration .)
    CADENA          reduce using rule 22 (declaration -> class_declaration .)
    $end            reduce using rule 22 (declaration -> class_declaration .)
    RBLOCK          reduce using rule 22 (declaration -> class_declaration .)
    endwhile        reduce using rule 22 (declaration -> class_declaration .)
    endfor          reduce using rule 22 (declaration -> class_declaration .)
    endforeach      reduce using rule 22 (declaration -> class_declaration .)
    break           reduce using rule 22 (declaration -> class_declaration .)
    endswitch       reduce using rule 22 (declaration -> class_declaration .)
    default         reduce using rule 22 (declaration -> class_declaration .)
    case            reduce using rule 22 (declaration -> class_declaration .)


state 23

    (23) declaration -> class_extension .

    COMMENT         reduce using rule 23 (declaration -> class_extension .)
    COMMENT_HASHTAG reduce using rule 23 (declaration -> class_extension .)
    COMMENT_MULTI   reduce using rule 23 (declaration -> class_extension .)
    empty           reduce using rule 23 (declaration -> class_extension .)
    include         reduce using rule 23 (declaration -> class_extension .)
    include_once    reduce using rule 23 (declaration -> class_extension .)
    require         reduce using rule 23 (declaration -> class_extension .)
    require_once    reduce using rule 23 (declaration -> class_extension .)
    namespace       reduce using rule 23 (declaration -> class_extension .)
    int             reduce using rule 23 (declaration -> class_extension .)
    float           reduce using rule 23 (declaration -> class_extension .)
    double          reduce using rule 23 (declaration -> class_extension .)
    global          reduce using rule 23 (declaration -> class_extension .)
    const           reduce using rule 23 (declaration -> class_extension .)
    print           reduce using rule 23 (declaration -> class_extension .)
    echo            reduce using rule 23 (declaration -> class_extension .)
    while           reduce using rule 23 (declaration -> class_extension .)
    do              reduce using rule 23 (declaration -> class_extension .)
    if              reduce using rule 23 (declaration -> class_extension .)
    function        reduce using rule 23 (declaration -> class_extension .)
    ID              reduce using rule 23 (declaration -> class_extension .)
    return          reduce using rule 23 (declaration -> class_extension .)
    class           reduce using rule 23 (declaration -> class_extension .)
    final           reduce using rule 23 (declaration -> class_extension .)
    new             reduce using rule 23 (declaration -> class_extension .)
    interface       reduce using rule 23 (declaration -> class_extension .)
    trait           reduce using rule 23 (declaration -> class_extension .)
    use             reduce using rule 23 (declaration -> class_extension .)
    continue        reduce using rule 23 (declaration -> class_extension .)
    goto            reduce using rule 23 (declaration -> class_extension .)
    declare         reduce using rule 23 (declaration -> class_extension .)
    VARIABLE        reduce using rule 23 (declaration -> class_extension .)
    CLOSE_TAG       reduce using rule 23 (declaration -> class_extension .)
    for             reduce using rule 23 (declaration -> class_extension .)
    foreach         reduce using rule 23 (declaration -> class_extension .)
    switch          reduce using rule 23 (declaration -> class_extension .)
    try             reduce using rule 23 (declaration -> class_extension .)
    throw           reduce using rule 23 (declaration -> class_extension .)
    exit            reduce using rule 23 (declaration -> class_extension .)
    private         reduce using rule 23 (declaration -> class_extension .)
    protected       reduce using rule 23 (declaration -> class_extension .)
    public          reduce using rule 23 (declaration -> class_extension .)
    var             reduce using rule 23 (declaration -> class_extension .)
    array           reduce using rule 23 (declaration -> class_extension .)
    pow             reduce using rule 23 (declaration -> class_extension .)
    POW             reduce using rule 23 (declaration -> class_extension .)
    abs             reduce using rule 23 (declaration -> class_extension .)
    cos             reduce using rule 23 (declaration -> class_extension .)
    deg2rad         reduce using rule 23 (declaration -> class_extension .)
    rad2deg         reduce using rule 23 (declaration -> class_extension .)
    die             reduce using rule 23 (declaration -> class_extension .)
    exp             reduce using rule 23 (declaration -> class_extension .)
    floor           reduce using rule 23 (declaration -> class_extension .)
    isset           reduce using rule 23 (declaration -> class_extension .)
    list            reduce using rule 23 (declaration -> class_extension .)
    log             reduce using rule 23 (declaration -> class_extension .)
    log10           reduce using rule 23 (declaration -> class_extension .)
    max             reduce using rule 23 (declaration -> class_extension .)
    min             reduce using rule 23 (declaration -> class_extension .)
    rand            reduce using rule 23 (declaration -> class_extension .)
    round           reduce using rule 23 (declaration -> class_extension .)
    sin             reduce using rule 23 (declaration -> class_extension .)
    sqrt            reduce using rule 23 (declaration -> class_extension .)
    unset           reduce using rule 23 (declaration -> class_extension .)
    eval            reduce using rule 23 (declaration -> class_extension .)
    CADENA          reduce using rule 23 (declaration -> class_extension .)
    $end            reduce using rule 23 (declaration -> class_extension .)
    RBLOCK          reduce using rule 23 (declaration -> class_extension .)
    endwhile        reduce using rule 23 (declaration -> class_extension .)
    endfor          reduce using rule 23 (declaration -> class_extension .)
    endforeach      reduce using rule 23 (declaration -> class_extension .)
    break           reduce using rule 23 (declaration -> class_extension .)
    endswitch       reduce using rule 23 (declaration -> class_extension .)
    default         reduce using rule 23 (declaration -> class_extension .)
    case            reduce using rule 23 (declaration -> class_extension .)


state 24

    (24) declaration -> create_obj_declaration .

    COMMENT         reduce using rule 24 (declaration -> create_obj_declaration .)
    COMMENT_HASHTAG reduce using rule 24 (declaration -> create_obj_declaration .)
    COMMENT_MULTI   reduce using rule 24 (declaration -> create_obj_declaration .)
    empty           reduce using rule 24 (declaration -> create_obj_declaration .)
    include         reduce using rule 24 (declaration -> create_obj_declaration .)
    include_once    reduce using rule 24 (declaration -> create_obj_declaration .)
    require         reduce using rule 24 (declaration -> create_obj_declaration .)
    require_once    reduce using rule 24 (declaration -> create_obj_declaration .)
    namespace       reduce using rule 24 (declaration -> create_obj_declaration .)
    int             reduce using rule 24 (declaration -> create_obj_declaration .)
    float           reduce using rule 24 (declaration -> create_obj_declaration .)
    double          reduce using rule 24 (declaration -> create_obj_declaration .)
    global          reduce using rule 24 (declaration -> create_obj_declaration .)
    const           reduce using rule 24 (declaration -> create_obj_declaration .)
    print           reduce using rule 24 (declaration -> create_obj_declaration .)
    echo            reduce using rule 24 (declaration -> create_obj_declaration .)
    while           reduce using rule 24 (declaration -> create_obj_declaration .)
    do              reduce using rule 24 (declaration -> create_obj_declaration .)
    if              reduce using rule 24 (declaration -> create_obj_declaration .)
    function        reduce using rule 24 (declaration -> create_obj_declaration .)
    ID              reduce using rule 24 (declaration -> create_obj_declaration .)
    return          reduce using rule 24 (declaration -> create_obj_declaration .)
    class           reduce using rule 24 (declaration -> create_obj_declaration .)
    final           reduce using rule 24 (declaration -> create_obj_declaration .)
    new             reduce using rule 24 (declaration -> create_obj_declaration .)
    interface       reduce using rule 24 (declaration -> create_obj_declaration .)
    trait           reduce using rule 24 (declaration -> create_obj_declaration .)
    use             reduce using rule 24 (declaration -> create_obj_declaration .)
    continue        reduce using rule 24 (declaration -> create_obj_declaration .)
    goto            reduce using rule 24 (declaration -> create_obj_declaration .)
    declare         reduce using rule 24 (declaration -> create_obj_declaration .)
    VARIABLE        reduce using rule 24 (declaration -> create_obj_declaration .)
    CLOSE_TAG       reduce using rule 24 (declaration -> create_obj_declaration .)
    for             reduce using rule 24 (declaration -> create_obj_declaration .)
    foreach         reduce using rule 24 (declaration -> create_obj_declaration .)
    switch          reduce using rule 24 (declaration -> create_obj_declaration .)
    try             reduce using rule 24 (declaration -> create_obj_declaration .)
    throw           reduce using rule 24 (declaration -> create_obj_declaration .)
    exit            reduce using rule 24 (declaration -> create_obj_declaration .)
    private         reduce using rule 24 (declaration -> create_obj_declaration .)
    protected       reduce using rule 24 (declaration -> create_obj_declaration .)
    public          reduce using rule 24 (declaration -> create_obj_declaration .)
    var             reduce using rule 24 (declaration -> create_obj_declaration .)
    array           reduce using rule 24 (declaration -> create_obj_declaration .)
    pow             reduce using rule 24 (declaration -> create_obj_declaration .)
    POW             reduce using rule 24 (declaration -> create_obj_declaration .)
    abs             reduce using rule 24 (declaration -> create_obj_declaration .)
    cos             reduce using rule 24 (declaration -> create_obj_declaration .)
    deg2rad         reduce using rule 24 (declaration -> create_obj_declaration .)
    rad2deg         reduce using rule 24 (declaration -> create_obj_declaration .)
    die             reduce using rule 24 (declaration -> create_obj_declaration .)
    exp             reduce using rule 24 (declaration -> create_obj_declaration .)
    floor           reduce using rule 24 (declaration -> create_obj_declaration .)
    isset           reduce using rule 24 (declaration -> create_obj_declaration .)
    list            reduce using rule 24 (declaration -> create_obj_declaration .)
    log             reduce using rule 24 (declaration -> create_obj_declaration .)
    log10           reduce using rule 24 (declaration -> create_obj_declaration .)
    max             reduce using rule 24 (declaration -> create_obj_declaration .)
    min             reduce using rule 24 (declaration -> create_obj_declaration .)
    rand            reduce using rule 24 (declaration -> create_obj_declaration .)
    round           reduce using rule 24 (declaration -> create_obj_declaration .)
    sin             reduce using rule 24 (declaration -> create_obj_declaration .)
    sqrt            reduce using rule 24 (declaration -> create_obj_declaration .)
    unset           reduce using rule 24 (declaration -> create_obj_declaration .)
    eval            reduce using rule 24 (declaration -> create_obj_declaration .)
    CADENA          reduce using rule 24 (declaration -> create_obj_declaration .)
    $end            reduce using rule 24 (declaration -> create_obj_declaration .)
    RBLOCK          reduce using rule 24 (declaration -> create_obj_declaration .)
    endwhile        reduce using rule 24 (declaration -> create_obj_declaration .)
    endfor          reduce using rule 24 (declaration -> create_obj_declaration .)
    endforeach      reduce using rule 24 (declaration -> create_obj_declaration .)
    break           reduce using rule 24 (declaration -> create_obj_declaration .)
    endswitch       reduce using rule 24 (declaration -> create_obj_declaration .)
    default         reduce using rule 24 (declaration -> create_obj_declaration .)
    case            reduce using rule 24 (declaration -> create_obj_declaration .)


state 25

    (25) declaration -> interface_declaration .

    COMMENT         reduce using rule 25 (declaration -> interface_declaration .)
    COMMENT_HASHTAG reduce using rule 25 (declaration -> interface_declaration .)
    COMMENT_MULTI   reduce using rule 25 (declaration -> interface_declaration .)
    empty           reduce using rule 25 (declaration -> interface_declaration .)
    include         reduce using rule 25 (declaration -> interface_declaration .)
    include_once    reduce using rule 25 (declaration -> interface_declaration .)
    require         reduce using rule 25 (declaration -> interface_declaration .)
    require_once    reduce using rule 25 (declaration -> interface_declaration .)
    namespace       reduce using rule 25 (declaration -> interface_declaration .)
    int             reduce using rule 25 (declaration -> interface_declaration .)
    float           reduce using rule 25 (declaration -> interface_declaration .)
    double          reduce using rule 25 (declaration -> interface_declaration .)
    global          reduce using rule 25 (declaration -> interface_declaration .)
    const           reduce using rule 25 (declaration -> interface_declaration .)
    print           reduce using rule 25 (declaration -> interface_declaration .)
    echo            reduce using rule 25 (declaration -> interface_declaration .)
    while           reduce using rule 25 (declaration -> interface_declaration .)
    do              reduce using rule 25 (declaration -> interface_declaration .)
    if              reduce using rule 25 (declaration -> interface_declaration .)
    function        reduce using rule 25 (declaration -> interface_declaration .)
    ID              reduce using rule 25 (declaration -> interface_declaration .)
    return          reduce using rule 25 (declaration -> interface_declaration .)
    class           reduce using rule 25 (declaration -> interface_declaration .)
    final           reduce using rule 25 (declaration -> interface_declaration .)
    new             reduce using rule 25 (declaration -> interface_declaration .)
    interface       reduce using rule 25 (declaration -> interface_declaration .)
    trait           reduce using rule 25 (declaration -> interface_declaration .)
    use             reduce using rule 25 (declaration -> interface_declaration .)
    continue        reduce using rule 25 (declaration -> interface_declaration .)
    goto            reduce using rule 25 (declaration -> interface_declaration .)
    declare         reduce using rule 25 (declaration -> interface_declaration .)
    VARIABLE        reduce using rule 25 (declaration -> interface_declaration .)
    CLOSE_TAG       reduce using rule 25 (declaration -> interface_declaration .)
    for             reduce using rule 25 (declaration -> interface_declaration .)
    foreach         reduce using rule 25 (declaration -> interface_declaration .)
    switch          reduce using rule 25 (declaration -> interface_declaration .)
    try             reduce using rule 25 (declaration -> interface_declaration .)
    throw           reduce using rule 25 (declaration -> interface_declaration .)
    exit            reduce using rule 25 (declaration -> interface_declaration .)
    private         reduce using rule 25 (declaration -> interface_declaration .)
    protected       reduce using rule 25 (declaration -> interface_declaration .)
    public          reduce using rule 25 (declaration -> interface_declaration .)
    var             reduce using rule 25 (declaration -> interface_declaration .)
    array           reduce using rule 25 (declaration -> interface_declaration .)
    pow             reduce using rule 25 (declaration -> interface_declaration .)
    POW             reduce using rule 25 (declaration -> interface_declaration .)
    abs             reduce using rule 25 (declaration -> interface_declaration .)
    cos             reduce using rule 25 (declaration -> interface_declaration .)
    deg2rad         reduce using rule 25 (declaration -> interface_declaration .)
    rad2deg         reduce using rule 25 (declaration -> interface_declaration .)
    die             reduce using rule 25 (declaration -> interface_declaration .)
    exp             reduce using rule 25 (declaration -> interface_declaration .)
    floor           reduce using rule 25 (declaration -> interface_declaration .)
    isset           reduce using rule 25 (declaration -> interface_declaration .)
    list            reduce using rule 25 (declaration -> interface_declaration .)
    log             reduce using rule 25 (declaration -> interface_declaration .)
    log10           reduce using rule 25 (declaration -> interface_declaration .)
    max             reduce using rule 25 (declaration -> interface_declaration .)
    min             reduce using rule 25 (declaration -> interface_declaration .)
    rand            reduce using rule 25 (declaration -> interface_declaration .)
    round           reduce using rule 25 (declaration -> interface_declaration .)
    sin             reduce using rule 25 (declaration -> interface_declaration .)
    sqrt            reduce using rule 25 (declaration -> interface_declaration .)
    unset           reduce using rule 25 (declaration -> interface_declaration .)
    eval            reduce using rule 25 (declaration -> interface_declaration .)
    CADENA          reduce using rule 25 (declaration -> interface_declaration .)
    $end            reduce using rule 25 (declaration -> interface_declaration .)
    RBLOCK          reduce using rule 25 (declaration -> interface_declaration .)
    endwhile        reduce using rule 25 (declaration -> interface_declaration .)
    endfor          reduce using rule 25 (declaration -> interface_declaration .)
    endforeach      reduce using rule 25 (declaration -> interface_declaration .)
    break           reduce using rule 25 (declaration -> interface_declaration .)
    endswitch       reduce using rule 25 (declaration -> interface_declaration .)
    default         reduce using rule 25 (declaration -> interface_declaration .)
    case            reduce using rule 25 (declaration -> interface_declaration .)


state 26

    (26) declaration -> trait_declaration .

    COMMENT         reduce using rule 26 (declaration -> trait_declaration .)
    COMMENT_HASHTAG reduce using rule 26 (declaration -> trait_declaration .)
    COMMENT_MULTI   reduce using rule 26 (declaration -> trait_declaration .)
    empty           reduce using rule 26 (declaration -> trait_declaration .)
    include         reduce using rule 26 (declaration -> trait_declaration .)
    include_once    reduce using rule 26 (declaration -> trait_declaration .)
    require         reduce using rule 26 (declaration -> trait_declaration .)
    require_once    reduce using rule 26 (declaration -> trait_declaration .)
    namespace       reduce using rule 26 (declaration -> trait_declaration .)
    int             reduce using rule 26 (declaration -> trait_declaration .)
    float           reduce using rule 26 (declaration -> trait_declaration .)
    double          reduce using rule 26 (declaration -> trait_declaration .)
    global          reduce using rule 26 (declaration -> trait_declaration .)
    const           reduce using rule 26 (declaration -> trait_declaration .)
    print           reduce using rule 26 (declaration -> trait_declaration .)
    echo            reduce using rule 26 (declaration -> trait_declaration .)
    while           reduce using rule 26 (declaration -> trait_declaration .)
    do              reduce using rule 26 (declaration -> trait_declaration .)
    if              reduce using rule 26 (declaration -> trait_declaration .)
    function        reduce using rule 26 (declaration -> trait_declaration .)
    ID              reduce using rule 26 (declaration -> trait_declaration .)
    return          reduce using rule 26 (declaration -> trait_declaration .)
    class           reduce using rule 26 (declaration -> trait_declaration .)
    final           reduce using rule 26 (declaration -> trait_declaration .)
    new             reduce using rule 26 (declaration -> trait_declaration .)
    interface       reduce using rule 26 (declaration -> trait_declaration .)
    trait           reduce using rule 26 (declaration -> trait_declaration .)
    use             reduce using rule 26 (declaration -> trait_declaration .)
    continue        reduce using rule 26 (declaration -> trait_declaration .)
    goto            reduce using rule 26 (declaration -> trait_declaration .)
    declare         reduce using rule 26 (declaration -> trait_declaration .)
    VARIABLE        reduce using rule 26 (declaration -> trait_declaration .)
    CLOSE_TAG       reduce using rule 26 (declaration -> trait_declaration .)
    for             reduce using rule 26 (declaration -> trait_declaration .)
    foreach         reduce using rule 26 (declaration -> trait_declaration .)
    switch          reduce using rule 26 (declaration -> trait_declaration .)
    try             reduce using rule 26 (declaration -> trait_declaration .)
    throw           reduce using rule 26 (declaration -> trait_declaration .)
    exit            reduce using rule 26 (declaration -> trait_declaration .)
    private         reduce using rule 26 (declaration -> trait_declaration .)
    protected       reduce using rule 26 (declaration -> trait_declaration .)
    public          reduce using rule 26 (declaration -> trait_declaration .)
    var             reduce using rule 26 (declaration -> trait_declaration .)
    array           reduce using rule 26 (declaration -> trait_declaration .)
    pow             reduce using rule 26 (declaration -> trait_declaration .)
    POW             reduce using rule 26 (declaration -> trait_declaration .)
    abs             reduce using rule 26 (declaration -> trait_declaration .)
    cos             reduce using rule 26 (declaration -> trait_declaration .)
    deg2rad         reduce using rule 26 (declaration -> trait_declaration .)
    rad2deg         reduce using rule 26 (declaration -> trait_declaration .)
    die             reduce using rule 26 (declaration -> trait_declaration .)
    exp             reduce using rule 26 (declaration -> trait_declaration .)
    floor           reduce using rule 26 (declaration -> trait_declaration .)
    isset           reduce using rule 26 (declaration -> trait_declaration .)
    list            reduce using rule 26 (declaration -> trait_declaration .)
    log             reduce using rule 26 (declaration -> trait_declaration .)
    log10           reduce using rule 26 (declaration -> trait_declaration .)
    max             reduce using rule 26 (declaration -> trait_declaration .)
    min             reduce using rule 26 (declaration -> trait_declaration .)
    rand            reduce using rule 26 (declaration -> trait_declaration .)
    round           reduce using rule 26 (declaration -> trait_declaration .)
    sin             reduce using rule 26 (declaration -> trait_declaration .)
    sqrt            reduce using rule 26 (declaration -> trait_declaration .)
    unset           reduce using rule 26 (declaration -> trait_declaration .)
    eval            reduce using rule 26 (declaration -> trait_declaration .)
    CADENA          reduce using rule 26 (declaration -> trait_declaration .)
    $end            reduce using rule 26 (declaration -> trait_declaration .)
    RBLOCK          reduce using rule 26 (declaration -> trait_declaration .)
    endwhile        reduce using rule 26 (declaration -> trait_declaration .)
    endfor          reduce using rule 26 (declaration -> trait_declaration .)
    endforeach      reduce using rule 26 (declaration -> trait_declaration .)
    break           reduce using rule 26 (declaration -> trait_declaration .)
    endswitch       reduce using rule 26 (declaration -> trait_declaration .)
    default         reduce using rule 26 (declaration -> trait_declaration .)
    case            reduce using rule 26 (declaration -> trait_declaration .)


state 27

    (27) declaration -> use_declaration .

    COMMENT         reduce using rule 27 (declaration -> use_declaration .)
    COMMENT_HASHTAG reduce using rule 27 (declaration -> use_declaration .)
    COMMENT_MULTI   reduce using rule 27 (declaration -> use_declaration .)
    empty           reduce using rule 27 (declaration -> use_declaration .)
    include         reduce using rule 27 (declaration -> use_declaration .)
    include_once    reduce using rule 27 (declaration -> use_declaration .)
    require         reduce using rule 27 (declaration -> use_declaration .)
    require_once    reduce using rule 27 (declaration -> use_declaration .)
    namespace       reduce using rule 27 (declaration -> use_declaration .)
    int             reduce using rule 27 (declaration -> use_declaration .)
    float           reduce using rule 27 (declaration -> use_declaration .)
    double          reduce using rule 27 (declaration -> use_declaration .)
    global          reduce using rule 27 (declaration -> use_declaration .)
    const           reduce using rule 27 (declaration -> use_declaration .)
    print           reduce using rule 27 (declaration -> use_declaration .)
    echo            reduce using rule 27 (declaration -> use_declaration .)
    while           reduce using rule 27 (declaration -> use_declaration .)
    do              reduce using rule 27 (declaration -> use_declaration .)
    if              reduce using rule 27 (declaration -> use_declaration .)
    function        reduce using rule 27 (declaration -> use_declaration .)
    ID              reduce using rule 27 (declaration -> use_declaration .)
    return          reduce using rule 27 (declaration -> use_declaration .)
    class           reduce using rule 27 (declaration -> use_declaration .)
    final           reduce using rule 27 (declaration -> use_declaration .)
    new             reduce using rule 27 (declaration -> use_declaration .)
    interface       reduce using rule 27 (declaration -> use_declaration .)
    trait           reduce using rule 27 (declaration -> use_declaration .)
    use             reduce using rule 27 (declaration -> use_declaration .)
    continue        reduce using rule 27 (declaration -> use_declaration .)
    goto            reduce using rule 27 (declaration -> use_declaration .)
    declare         reduce using rule 27 (declaration -> use_declaration .)
    VARIABLE        reduce using rule 27 (declaration -> use_declaration .)
    CLOSE_TAG       reduce using rule 27 (declaration -> use_declaration .)
    for             reduce using rule 27 (declaration -> use_declaration .)
    foreach         reduce using rule 27 (declaration -> use_declaration .)
    switch          reduce using rule 27 (declaration -> use_declaration .)
    try             reduce using rule 27 (declaration -> use_declaration .)
    throw           reduce using rule 27 (declaration -> use_declaration .)
    exit            reduce using rule 27 (declaration -> use_declaration .)
    private         reduce using rule 27 (declaration -> use_declaration .)
    protected       reduce using rule 27 (declaration -> use_declaration .)
    public          reduce using rule 27 (declaration -> use_declaration .)
    var             reduce using rule 27 (declaration -> use_declaration .)
    array           reduce using rule 27 (declaration -> use_declaration .)
    pow             reduce using rule 27 (declaration -> use_declaration .)
    POW             reduce using rule 27 (declaration -> use_declaration .)
    abs             reduce using rule 27 (declaration -> use_declaration .)
    cos             reduce using rule 27 (declaration -> use_declaration .)
    deg2rad         reduce using rule 27 (declaration -> use_declaration .)
    rad2deg         reduce using rule 27 (declaration -> use_declaration .)
    die             reduce using rule 27 (declaration -> use_declaration .)
    exp             reduce using rule 27 (declaration -> use_declaration .)
    floor           reduce using rule 27 (declaration -> use_declaration .)
    isset           reduce using rule 27 (declaration -> use_declaration .)
    list            reduce using rule 27 (declaration -> use_declaration .)
    log             reduce using rule 27 (declaration -> use_declaration .)
    log10           reduce using rule 27 (declaration -> use_declaration .)
    max             reduce using rule 27 (declaration -> use_declaration .)
    min             reduce using rule 27 (declaration -> use_declaration .)
    rand            reduce using rule 27 (declaration -> use_declaration .)
    round           reduce using rule 27 (declaration -> use_declaration .)
    sin             reduce using rule 27 (declaration -> use_declaration .)
    sqrt            reduce using rule 27 (declaration -> use_declaration .)
    unset           reduce using rule 27 (declaration -> use_declaration .)
    eval            reduce using rule 27 (declaration -> use_declaration .)
    CADENA          reduce using rule 27 (declaration -> use_declaration .)
    $end            reduce using rule 27 (declaration -> use_declaration .)
    RBLOCK          reduce using rule 27 (declaration -> use_declaration .)
    endwhile        reduce using rule 27 (declaration -> use_declaration .)
    endfor          reduce using rule 27 (declaration -> use_declaration .)
    endforeach      reduce using rule 27 (declaration -> use_declaration .)
    break           reduce using rule 27 (declaration -> use_declaration .)
    endswitch       reduce using rule 27 (declaration -> use_declaration .)
    default         reduce using rule 27 (declaration -> use_declaration .)
    case            reduce using rule 27 (declaration -> use_declaration .)


state 28

    (28) declaration -> continue_declaration .

    COMMENT         reduce using rule 28 (declaration -> continue_declaration .)
    COMMENT_HASHTAG reduce using rule 28 (declaration -> continue_declaration .)
    COMMENT_MULTI   reduce using rule 28 (declaration -> continue_declaration .)
    empty           reduce using rule 28 (declaration -> continue_declaration .)
    include         reduce using rule 28 (declaration -> continue_declaration .)
    include_once    reduce using rule 28 (declaration -> continue_declaration .)
    require         reduce using rule 28 (declaration -> continue_declaration .)
    require_once    reduce using rule 28 (declaration -> continue_declaration .)
    namespace       reduce using rule 28 (declaration -> continue_declaration .)
    int             reduce using rule 28 (declaration -> continue_declaration .)
    float           reduce using rule 28 (declaration -> continue_declaration .)
    double          reduce using rule 28 (declaration -> continue_declaration .)
    global          reduce using rule 28 (declaration -> continue_declaration .)
    const           reduce using rule 28 (declaration -> continue_declaration .)
    print           reduce using rule 28 (declaration -> continue_declaration .)
    echo            reduce using rule 28 (declaration -> continue_declaration .)
    while           reduce using rule 28 (declaration -> continue_declaration .)
    do              reduce using rule 28 (declaration -> continue_declaration .)
    if              reduce using rule 28 (declaration -> continue_declaration .)
    function        reduce using rule 28 (declaration -> continue_declaration .)
    ID              reduce using rule 28 (declaration -> continue_declaration .)
    return          reduce using rule 28 (declaration -> continue_declaration .)
    class           reduce using rule 28 (declaration -> continue_declaration .)
    final           reduce using rule 28 (declaration -> continue_declaration .)
    new             reduce using rule 28 (declaration -> continue_declaration .)
    interface       reduce using rule 28 (declaration -> continue_declaration .)
    trait           reduce using rule 28 (declaration -> continue_declaration .)
    use             reduce using rule 28 (declaration -> continue_declaration .)
    continue        reduce using rule 28 (declaration -> continue_declaration .)
    goto            reduce using rule 28 (declaration -> continue_declaration .)
    declare         reduce using rule 28 (declaration -> continue_declaration .)
    VARIABLE        reduce using rule 28 (declaration -> continue_declaration .)
    CLOSE_TAG       reduce using rule 28 (declaration -> continue_declaration .)
    for             reduce using rule 28 (declaration -> continue_declaration .)
    foreach         reduce using rule 28 (declaration -> continue_declaration .)
    switch          reduce using rule 28 (declaration -> continue_declaration .)
    try             reduce using rule 28 (declaration -> continue_declaration .)
    throw           reduce using rule 28 (declaration -> continue_declaration .)
    exit            reduce using rule 28 (declaration -> continue_declaration .)
    private         reduce using rule 28 (declaration -> continue_declaration .)
    protected       reduce using rule 28 (declaration -> continue_declaration .)
    public          reduce using rule 28 (declaration -> continue_declaration .)
    var             reduce using rule 28 (declaration -> continue_declaration .)
    array           reduce using rule 28 (declaration -> continue_declaration .)
    pow             reduce using rule 28 (declaration -> continue_declaration .)
    POW             reduce using rule 28 (declaration -> continue_declaration .)
    abs             reduce using rule 28 (declaration -> continue_declaration .)
    cos             reduce using rule 28 (declaration -> continue_declaration .)
    deg2rad         reduce using rule 28 (declaration -> continue_declaration .)
    rad2deg         reduce using rule 28 (declaration -> continue_declaration .)
    die             reduce using rule 28 (declaration -> continue_declaration .)
    exp             reduce using rule 28 (declaration -> continue_declaration .)
    floor           reduce using rule 28 (declaration -> continue_declaration .)
    isset           reduce using rule 28 (declaration -> continue_declaration .)
    list            reduce using rule 28 (declaration -> continue_declaration .)
    log             reduce using rule 28 (declaration -> continue_declaration .)
    log10           reduce using rule 28 (declaration -> continue_declaration .)
    max             reduce using rule 28 (declaration -> continue_declaration .)
    min             reduce using rule 28 (declaration -> continue_declaration .)
    rand            reduce using rule 28 (declaration -> continue_declaration .)
    round           reduce using rule 28 (declaration -> continue_declaration .)
    sin             reduce using rule 28 (declaration -> continue_declaration .)
    sqrt            reduce using rule 28 (declaration -> continue_declaration .)
    unset           reduce using rule 28 (declaration -> continue_declaration .)
    eval            reduce using rule 28 (declaration -> continue_declaration .)
    CADENA          reduce using rule 28 (declaration -> continue_declaration .)
    $end            reduce using rule 28 (declaration -> continue_declaration .)
    RBLOCK          reduce using rule 28 (declaration -> continue_declaration .)
    endwhile        reduce using rule 28 (declaration -> continue_declaration .)
    endfor          reduce using rule 28 (declaration -> continue_declaration .)
    endforeach      reduce using rule 28 (declaration -> continue_declaration .)
    break           reduce using rule 28 (declaration -> continue_declaration .)
    endswitch       reduce using rule 28 (declaration -> continue_declaration .)
    default         reduce using rule 28 (declaration -> continue_declaration .)
    case            reduce using rule 28 (declaration -> continue_declaration .)


state 29

    (29) declaration -> label_declaration .

    COMMENT         reduce using rule 29 (declaration -> label_declaration .)
    COMMENT_HASHTAG reduce using rule 29 (declaration -> label_declaration .)
    COMMENT_MULTI   reduce using rule 29 (declaration -> label_declaration .)
    empty           reduce using rule 29 (declaration -> label_declaration .)
    include         reduce using rule 29 (declaration -> label_declaration .)
    include_once    reduce using rule 29 (declaration -> label_declaration .)
    require         reduce using rule 29 (declaration -> label_declaration .)
    require_once    reduce using rule 29 (declaration -> label_declaration .)
    namespace       reduce using rule 29 (declaration -> label_declaration .)
    int             reduce using rule 29 (declaration -> label_declaration .)
    float           reduce using rule 29 (declaration -> label_declaration .)
    double          reduce using rule 29 (declaration -> label_declaration .)
    global          reduce using rule 29 (declaration -> label_declaration .)
    const           reduce using rule 29 (declaration -> label_declaration .)
    print           reduce using rule 29 (declaration -> label_declaration .)
    echo            reduce using rule 29 (declaration -> label_declaration .)
    while           reduce using rule 29 (declaration -> label_declaration .)
    do              reduce using rule 29 (declaration -> label_declaration .)
    if              reduce using rule 29 (declaration -> label_declaration .)
    function        reduce using rule 29 (declaration -> label_declaration .)
    ID              reduce using rule 29 (declaration -> label_declaration .)
    return          reduce using rule 29 (declaration -> label_declaration .)
    class           reduce using rule 29 (declaration -> label_declaration .)
    final           reduce using rule 29 (declaration -> label_declaration .)
    new             reduce using rule 29 (declaration -> label_declaration .)
    interface       reduce using rule 29 (declaration -> label_declaration .)
    trait           reduce using rule 29 (declaration -> label_declaration .)
    use             reduce using rule 29 (declaration -> label_declaration .)
    continue        reduce using rule 29 (declaration -> label_declaration .)
    goto            reduce using rule 29 (declaration -> label_declaration .)
    declare         reduce using rule 29 (declaration -> label_declaration .)
    VARIABLE        reduce using rule 29 (declaration -> label_declaration .)
    CLOSE_TAG       reduce using rule 29 (declaration -> label_declaration .)
    for             reduce using rule 29 (declaration -> label_declaration .)
    foreach         reduce using rule 29 (declaration -> label_declaration .)
    switch          reduce using rule 29 (declaration -> label_declaration .)
    try             reduce using rule 29 (declaration -> label_declaration .)
    throw           reduce using rule 29 (declaration -> label_declaration .)
    exit            reduce using rule 29 (declaration -> label_declaration .)
    private         reduce using rule 29 (declaration -> label_declaration .)
    protected       reduce using rule 29 (declaration -> label_declaration .)
    public          reduce using rule 29 (declaration -> label_declaration .)
    var             reduce using rule 29 (declaration -> label_declaration .)
    array           reduce using rule 29 (declaration -> label_declaration .)
    pow             reduce using rule 29 (declaration -> label_declaration .)
    POW             reduce using rule 29 (declaration -> label_declaration .)
    abs             reduce using rule 29 (declaration -> label_declaration .)
    cos             reduce using rule 29 (declaration -> label_declaration .)
    deg2rad         reduce using rule 29 (declaration -> label_declaration .)
    rad2deg         reduce using rule 29 (declaration -> label_declaration .)
    die             reduce using rule 29 (declaration -> label_declaration .)
    exp             reduce using rule 29 (declaration -> label_declaration .)
    floor           reduce using rule 29 (declaration -> label_declaration .)
    isset           reduce using rule 29 (declaration -> label_declaration .)
    list            reduce using rule 29 (declaration -> label_declaration .)
    log             reduce using rule 29 (declaration -> label_declaration .)
    log10           reduce using rule 29 (declaration -> label_declaration .)
    max             reduce using rule 29 (declaration -> label_declaration .)
    min             reduce using rule 29 (declaration -> label_declaration .)
    rand            reduce using rule 29 (declaration -> label_declaration .)
    round           reduce using rule 29 (declaration -> label_declaration .)
    sin             reduce using rule 29 (declaration -> label_declaration .)
    sqrt            reduce using rule 29 (declaration -> label_declaration .)
    unset           reduce using rule 29 (declaration -> label_declaration .)
    eval            reduce using rule 29 (declaration -> label_declaration .)
    CADENA          reduce using rule 29 (declaration -> label_declaration .)
    $end            reduce using rule 29 (declaration -> label_declaration .)
    RBLOCK          reduce using rule 29 (declaration -> label_declaration .)
    endwhile        reduce using rule 29 (declaration -> label_declaration .)
    endfor          reduce using rule 29 (declaration -> label_declaration .)
    endforeach      reduce using rule 29 (declaration -> label_declaration .)
    break           reduce using rule 29 (declaration -> label_declaration .)
    endswitch       reduce using rule 29 (declaration -> label_declaration .)
    default         reduce using rule 29 (declaration -> label_declaration .)
    case            reduce using rule 29 (declaration -> label_declaration .)


state 30

    (30) declaration -> goto_declaration .

    COMMENT         reduce using rule 30 (declaration -> goto_declaration .)
    COMMENT_HASHTAG reduce using rule 30 (declaration -> goto_declaration .)
    COMMENT_MULTI   reduce using rule 30 (declaration -> goto_declaration .)
    empty           reduce using rule 30 (declaration -> goto_declaration .)
    include         reduce using rule 30 (declaration -> goto_declaration .)
    include_once    reduce using rule 30 (declaration -> goto_declaration .)
    require         reduce using rule 30 (declaration -> goto_declaration .)
    require_once    reduce using rule 30 (declaration -> goto_declaration .)
    namespace       reduce using rule 30 (declaration -> goto_declaration .)
    int             reduce using rule 30 (declaration -> goto_declaration .)
    float           reduce using rule 30 (declaration -> goto_declaration .)
    double          reduce using rule 30 (declaration -> goto_declaration .)
    global          reduce using rule 30 (declaration -> goto_declaration .)
    const           reduce using rule 30 (declaration -> goto_declaration .)
    print           reduce using rule 30 (declaration -> goto_declaration .)
    echo            reduce using rule 30 (declaration -> goto_declaration .)
    while           reduce using rule 30 (declaration -> goto_declaration .)
    do              reduce using rule 30 (declaration -> goto_declaration .)
    if              reduce using rule 30 (declaration -> goto_declaration .)
    function        reduce using rule 30 (declaration -> goto_declaration .)
    ID              reduce using rule 30 (declaration -> goto_declaration .)
    return          reduce using rule 30 (declaration -> goto_declaration .)
    class           reduce using rule 30 (declaration -> goto_declaration .)
    final           reduce using rule 30 (declaration -> goto_declaration .)
    new             reduce using rule 30 (declaration -> goto_declaration .)
    interface       reduce using rule 30 (declaration -> goto_declaration .)
    trait           reduce using rule 30 (declaration -> goto_declaration .)
    use             reduce using rule 30 (declaration -> goto_declaration .)
    continue        reduce using rule 30 (declaration -> goto_declaration .)
    goto            reduce using rule 30 (declaration -> goto_declaration .)
    declare         reduce using rule 30 (declaration -> goto_declaration .)
    VARIABLE        reduce using rule 30 (declaration -> goto_declaration .)
    CLOSE_TAG       reduce using rule 30 (declaration -> goto_declaration .)
    for             reduce using rule 30 (declaration -> goto_declaration .)
    foreach         reduce using rule 30 (declaration -> goto_declaration .)
    switch          reduce using rule 30 (declaration -> goto_declaration .)
    try             reduce using rule 30 (declaration -> goto_declaration .)
    throw           reduce using rule 30 (declaration -> goto_declaration .)
    exit            reduce using rule 30 (declaration -> goto_declaration .)
    private         reduce using rule 30 (declaration -> goto_declaration .)
    protected       reduce using rule 30 (declaration -> goto_declaration .)
    public          reduce using rule 30 (declaration -> goto_declaration .)
    var             reduce using rule 30 (declaration -> goto_declaration .)
    array           reduce using rule 30 (declaration -> goto_declaration .)
    pow             reduce using rule 30 (declaration -> goto_declaration .)
    POW             reduce using rule 30 (declaration -> goto_declaration .)
    abs             reduce using rule 30 (declaration -> goto_declaration .)
    cos             reduce using rule 30 (declaration -> goto_declaration .)
    deg2rad         reduce using rule 30 (declaration -> goto_declaration .)
    rad2deg         reduce using rule 30 (declaration -> goto_declaration .)
    die             reduce using rule 30 (declaration -> goto_declaration .)
    exp             reduce using rule 30 (declaration -> goto_declaration .)
    floor           reduce using rule 30 (declaration -> goto_declaration .)
    isset           reduce using rule 30 (declaration -> goto_declaration .)
    list            reduce using rule 30 (declaration -> goto_declaration .)
    log             reduce using rule 30 (declaration -> goto_declaration .)
    log10           reduce using rule 30 (declaration -> goto_declaration .)
    max             reduce using rule 30 (declaration -> goto_declaration .)
    min             reduce using rule 30 (declaration -> goto_declaration .)
    rand            reduce using rule 30 (declaration -> goto_declaration .)
    round           reduce using rule 30 (declaration -> goto_declaration .)
    sin             reduce using rule 30 (declaration -> goto_declaration .)
    sqrt            reduce using rule 30 (declaration -> goto_declaration .)
    unset           reduce using rule 30 (declaration -> goto_declaration .)
    eval            reduce using rule 30 (declaration -> goto_declaration .)
    CADENA          reduce using rule 30 (declaration -> goto_declaration .)
    $end            reduce using rule 30 (declaration -> goto_declaration .)
    RBLOCK          reduce using rule 30 (declaration -> goto_declaration .)
    endwhile        reduce using rule 30 (declaration -> goto_declaration .)
    endfor          reduce using rule 30 (declaration -> goto_declaration .)
    endforeach      reduce using rule 30 (declaration -> goto_declaration .)
    break           reduce using rule 30 (declaration -> goto_declaration .)
    endswitch       reduce using rule 30 (declaration -> goto_declaration .)
    default         reduce using rule 30 (declaration -> goto_declaration .)
    case            reduce using rule 30 (declaration -> goto_declaration .)


state 31

    (31) declaration -> declare_statement .

    COMMENT         reduce using rule 31 (declaration -> declare_statement .)
    COMMENT_HASHTAG reduce using rule 31 (declaration -> declare_statement .)
    COMMENT_MULTI   reduce using rule 31 (declaration -> declare_statement .)
    empty           reduce using rule 31 (declaration -> declare_statement .)
    include         reduce using rule 31 (declaration -> declare_statement .)
    include_once    reduce using rule 31 (declaration -> declare_statement .)
    require         reduce using rule 31 (declaration -> declare_statement .)
    require_once    reduce using rule 31 (declaration -> declare_statement .)
    namespace       reduce using rule 31 (declaration -> declare_statement .)
    int             reduce using rule 31 (declaration -> declare_statement .)
    float           reduce using rule 31 (declaration -> declare_statement .)
    double          reduce using rule 31 (declaration -> declare_statement .)
    global          reduce using rule 31 (declaration -> declare_statement .)
    const           reduce using rule 31 (declaration -> declare_statement .)
    print           reduce using rule 31 (declaration -> declare_statement .)
    echo            reduce using rule 31 (declaration -> declare_statement .)
    while           reduce using rule 31 (declaration -> declare_statement .)
    do              reduce using rule 31 (declaration -> declare_statement .)
    if              reduce using rule 31 (declaration -> declare_statement .)
    function        reduce using rule 31 (declaration -> declare_statement .)
    ID              reduce using rule 31 (declaration -> declare_statement .)
    return          reduce using rule 31 (declaration -> declare_statement .)
    class           reduce using rule 31 (declaration -> declare_statement .)
    final           reduce using rule 31 (declaration -> declare_statement .)
    new             reduce using rule 31 (declaration -> declare_statement .)
    interface       reduce using rule 31 (declaration -> declare_statement .)
    trait           reduce using rule 31 (declaration -> declare_statement .)
    use             reduce using rule 31 (declaration -> declare_statement .)
    continue        reduce using rule 31 (declaration -> declare_statement .)
    goto            reduce using rule 31 (declaration -> declare_statement .)
    declare         reduce using rule 31 (declaration -> declare_statement .)
    VARIABLE        reduce using rule 31 (declaration -> declare_statement .)
    CLOSE_TAG       reduce using rule 31 (declaration -> declare_statement .)
    for             reduce using rule 31 (declaration -> declare_statement .)
    foreach         reduce using rule 31 (declaration -> declare_statement .)
    switch          reduce using rule 31 (declaration -> declare_statement .)
    try             reduce using rule 31 (declaration -> declare_statement .)
    throw           reduce using rule 31 (declaration -> declare_statement .)
    exit            reduce using rule 31 (declaration -> declare_statement .)
    private         reduce using rule 31 (declaration -> declare_statement .)
    protected       reduce using rule 31 (declaration -> declare_statement .)
    public          reduce using rule 31 (declaration -> declare_statement .)
    var             reduce using rule 31 (declaration -> declare_statement .)
    array           reduce using rule 31 (declaration -> declare_statement .)
    pow             reduce using rule 31 (declaration -> declare_statement .)
    POW             reduce using rule 31 (declaration -> declare_statement .)
    abs             reduce using rule 31 (declaration -> declare_statement .)
    cos             reduce using rule 31 (declaration -> declare_statement .)
    deg2rad         reduce using rule 31 (declaration -> declare_statement .)
    rad2deg         reduce using rule 31 (declaration -> declare_statement .)
    die             reduce using rule 31 (declaration -> declare_statement .)
    exp             reduce using rule 31 (declaration -> declare_statement .)
    floor           reduce using rule 31 (declaration -> declare_statement .)
    isset           reduce using rule 31 (declaration -> declare_statement .)
    list            reduce using rule 31 (declaration -> declare_statement .)
    log             reduce using rule 31 (declaration -> declare_statement .)
    log10           reduce using rule 31 (declaration -> declare_statement .)
    max             reduce using rule 31 (declaration -> declare_statement .)
    min             reduce using rule 31 (declaration -> declare_statement .)
    rand            reduce using rule 31 (declaration -> declare_statement .)
    round           reduce using rule 31 (declaration -> declare_statement .)
    sin             reduce using rule 31 (declaration -> declare_statement .)
    sqrt            reduce using rule 31 (declaration -> declare_statement .)
    unset           reduce using rule 31 (declaration -> declare_statement .)
    eval            reduce using rule 31 (declaration -> declare_statement .)
    CADENA          reduce using rule 31 (declaration -> declare_statement .)
    $end            reduce using rule 31 (declaration -> declare_statement .)
    RBLOCK          reduce using rule 31 (declaration -> declare_statement .)
    endwhile        reduce using rule 31 (declaration -> declare_statement .)
    endfor          reduce using rule 31 (declaration -> declare_statement .)
    endforeach      reduce using rule 31 (declaration -> declare_statement .)
    break           reduce using rule 31 (declaration -> declare_statement .)
    endswitch       reduce using rule 31 (declaration -> declare_statement .)
    default         reduce using rule 31 (declaration -> declare_statement .)
    case            reduce using rule 31 (declaration -> declare_statement .)


state 32

    (32) declaration -> match_declaration .

    COMMENT         reduce using rule 32 (declaration -> match_declaration .)
    COMMENT_HASHTAG reduce using rule 32 (declaration -> match_declaration .)
    COMMENT_MULTI   reduce using rule 32 (declaration -> match_declaration .)
    empty           reduce using rule 32 (declaration -> match_declaration .)
    include         reduce using rule 32 (declaration -> match_declaration .)
    include_once    reduce using rule 32 (declaration -> match_declaration .)
    require         reduce using rule 32 (declaration -> match_declaration .)
    require_once    reduce using rule 32 (declaration -> match_declaration .)
    namespace       reduce using rule 32 (declaration -> match_declaration .)
    int             reduce using rule 32 (declaration -> match_declaration .)
    float           reduce using rule 32 (declaration -> match_declaration .)
    double          reduce using rule 32 (declaration -> match_declaration .)
    global          reduce using rule 32 (declaration -> match_declaration .)
    const           reduce using rule 32 (declaration -> match_declaration .)
    print           reduce using rule 32 (declaration -> match_declaration .)
    echo            reduce using rule 32 (declaration -> match_declaration .)
    while           reduce using rule 32 (declaration -> match_declaration .)
    do              reduce using rule 32 (declaration -> match_declaration .)
    if              reduce using rule 32 (declaration -> match_declaration .)
    function        reduce using rule 32 (declaration -> match_declaration .)
    ID              reduce using rule 32 (declaration -> match_declaration .)
    return          reduce using rule 32 (declaration -> match_declaration .)
    class           reduce using rule 32 (declaration -> match_declaration .)
    final           reduce using rule 32 (declaration -> match_declaration .)
    new             reduce using rule 32 (declaration -> match_declaration .)
    interface       reduce using rule 32 (declaration -> match_declaration .)
    trait           reduce using rule 32 (declaration -> match_declaration .)
    use             reduce using rule 32 (declaration -> match_declaration .)
    continue        reduce using rule 32 (declaration -> match_declaration .)
    goto            reduce using rule 32 (declaration -> match_declaration .)
    declare         reduce using rule 32 (declaration -> match_declaration .)
    VARIABLE        reduce using rule 32 (declaration -> match_declaration .)
    CLOSE_TAG       reduce using rule 32 (declaration -> match_declaration .)
    for             reduce using rule 32 (declaration -> match_declaration .)
    foreach         reduce using rule 32 (declaration -> match_declaration .)
    switch          reduce using rule 32 (declaration -> match_declaration .)
    try             reduce using rule 32 (declaration -> match_declaration .)
    throw           reduce using rule 32 (declaration -> match_declaration .)
    exit            reduce using rule 32 (declaration -> match_declaration .)
    private         reduce using rule 32 (declaration -> match_declaration .)
    protected       reduce using rule 32 (declaration -> match_declaration .)
    public          reduce using rule 32 (declaration -> match_declaration .)
    var             reduce using rule 32 (declaration -> match_declaration .)
    array           reduce using rule 32 (declaration -> match_declaration .)
    pow             reduce using rule 32 (declaration -> match_declaration .)
    POW             reduce using rule 32 (declaration -> match_declaration .)
    abs             reduce using rule 32 (declaration -> match_declaration .)
    cos             reduce using rule 32 (declaration -> match_declaration .)
    deg2rad         reduce using rule 32 (declaration -> match_declaration .)
    rad2deg         reduce using rule 32 (declaration -> match_declaration .)
    die             reduce using rule 32 (declaration -> match_declaration .)
    exp             reduce using rule 32 (declaration -> match_declaration .)
    floor           reduce using rule 32 (declaration -> match_declaration .)
    isset           reduce using rule 32 (declaration -> match_declaration .)
    list            reduce using rule 32 (declaration -> match_declaration .)
    log             reduce using rule 32 (declaration -> match_declaration .)
    log10           reduce using rule 32 (declaration -> match_declaration .)
    max             reduce using rule 32 (declaration -> match_declaration .)
    min             reduce using rule 32 (declaration -> match_declaration .)
    rand            reduce using rule 32 (declaration -> match_declaration .)
    round           reduce using rule 32 (declaration -> match_declaration .)
    sin             reduce using rule 32 (declaration -> match_declaration .)
    sqrt            reduce using rule 32 (declaration -> match_declaration .)
    unset           reduce using rule 32 (declaration -> match_declaration .)
    eval            reduce using rule 32 (declaration -> match_declaration .)
    CADENA          reduce using rule 32 (declaration -> match_declaration .)
    $end            reduce using rule 32 (declaration -> match_declaration .)
    RBLOCK          reduce using rule 32 (declaration -> match_declaration .)
    endwhile        reduce using rule 32 (declaration -> match_declaration .)
    endfor          reduce using rule 32 (declaration -> match_declaration .)
    endforeach      reduce using rule 32 (declaration -> match_declaration .)
    break           reduce using rule 32 (declaration -> match_declaration .)
    endswitch       reduce using rule 32 (declaration -> match_declaration .)
    default         reduce using rule 32 (declaration -> match_declaration .)
    case            reduce using rule 32 (declaration -> match_declaration .)


state 33

    (33) declaration -> footer_declaration .

    COMMENT         reduce using rule 33 (declaration -> footer_declaration .)
    COMMENT_HASHTAG reduce using rule 33 (declaration -> footer_declaration .)
    COMMENT_MULTI   reduce using rule 33 (declaration -> footer_declaration .)
    empty           reduce using rule 33 (declaration -> footer_declaration .)
    include         reduce using rule 33 (declaration -> footer_declaration .)
    include_once    reduce using rule 33 (declaration -> footer_declaration .)
    require         reduce using rule 33 (declaration -> footer_declaration .)
    require_once    reduce using rule 33 (declaration -> footer_declaration .)
    namespace       reduce using rule 33 (declaration -> footer_declaration .)
    int             reduce using rule 33 (declaration -> footer_declaration .)
    float           reduce using rule 33 (declaration -> footer_declaration .)
    double          reduce using rule 33 (declaration -> footer_declaration .)
    global          reduce using rule 33 (declaration -> footer_declaration .)
    const           reduce using rule 33 (declaration -> footer_declaration .)
    print           reduce using rule 33 (declaration -> footer_declaration .)
    echo            reduce using rule 33 (declaration -> footer_declaration .)
    while           reduce using rule 33 (declaration -> footer_declaration .)
    do              reduce using rule 33 (declaration -> footer_declaration .)
    if              reduce using rule 33 (declaration -> footer_declaration .)
    function        reduce using rule 33 (declaration -> footer_declaration .)
    ID              reduce using rule 33 (declaration -> footer_declaration .)
    return          reduce using rule 33 (declaration -> footer_declaration .)
    class           reduce using rule 33 (declaration -> footer_declaration .)
    final           reduce using rule 33 (declaration -> footer_declaration .)
    new             reduce using rule 33 (declaration -> footer_declaration .)
    interface       reduce using rule 33 (declaration -> footer_declaration .)
    trait           reduce using rule 33 (declaration -> footer_declaration .)
    use             reduce using rule 33 (declaration -> footer_declaration .)
    continue        reduce using rule 33 (declaration -> footer_declaration .)
    goto            reduce using rule 33 (declaration -> footer_declaration .)
    declare         reduce using rule 33 (declaration -> footer_declaration .)
    VARIABLE        reduce using rule 33 (declaration -> footer_declaration .)
    CLOSE_TAG       reduce using rule 33 (declaration -> footer_declaration .)
    for             reduce using rule 33 (declaration -> footer_declaration .)
    foreach         reduce using rule 33 (declaration -> footer_declaration .)
    switch          reduce using rule 33 (declaration -> footer_declaration .)
    try             reduce using rule 33 (declaration -> footer_declaration .)
    throw           reduce using rule 33 (declaration -> footer_declaration .)
    exit            reduce using rule 33 (declaration -> footer_declaration .)
    private         reduce using rule 33 (declaration -> footer_declaration .)
    protected       reduce using rule 33 (declaration -> footer_declaration .)
    public          reduce using rule 33 (declaration -> footer_declaration .)
    var             reduce using rule 33 (declaration -> footer_declaration .)
    array           reduce using rule 33 (declaration -> footer_declaration .)
    pow             reduce using rule 33 (declaration -> footer_declaration .)
    POW             reduce using rule 33 (declaration -> footer_declaration .)
    abs             reduce using rule 33 (declaration -> footer_declaration .)
    cos             reduce using rule 33 (declaration -> footer_declaration .)
    deg2rad         reduce using rule 33 (declaration -> footer_declaration .)
    rad2deg         reduce using rule 33 (declaration -> footer_declaration .)
    die             reduce using rule 33 (declaration -> footer_declaration .)
    exp             reduce using rule 33 (declaration -> footer_declaration .)
    floor           reduce using rule 33 (declaration -> footer_declaration .)
    isset           reduce using rule 33 (declaration -> footer_declaration .)
    list            reduce using rule 33 (declaration -> footer_declaration .)
    log             reduce using rule 33 (declaration -> footer_declaration .)
    log10           reduce using rule 33 (declaration -> footer_declaration .)
    max             reduce using rule 33 (declaration -> footer_declaration .)
    min             reduce using rule 33 (declaration -> footer_declaration .)
    rand            reduce using rule 33 (declaration -> footer_declaration .)
    round           reduce using rule 33 (declaration -> footer_declaration .)
    sin             reduce using rule 33 (declaration -> footer_declaration .)
    sqrt            reduce using rule 33 (declaration -> footer_declaration .)
    unset           reduce using rule 33 (declaration -> footer_declaration .)
    eval            reduce using rule 33 (declaration -> footer_declaration .)
    CADENA          reduce using rule 33 (declaration -> footer_declaration .)
    $end            reduce using rule 33 (declaration -> footer_declaration .)
    RBLOCK          reduce using rule 33 (declaration -> footer_declaration .)
    endwhile        reduce using rule 33 (declaration -> footer_declaration .)
    endfor          reduce using rule 33 (declaration -> footer_declaration .)
    endforeach      reduce using rule 33 (declaration -> footer_declaration .)
    break           reduce using rule 33 (declaration -> footer_declaration .)
    endswitch       reduce using rule 33 (declaration -> footer_declaration .)
    default         reduce using rule 33 (declaration -> footer_declaration .)
    case            reduce using rule 33 (declaration -> footer_declaration .)


state 34

    (34) declaration -> for_loop .

    COMMENT         reduce using rule 34 (declaration -> for_loop .)
    COMMENT_HASHTAG reduce using rule 34 (declaration -> for_loop .)
    COMMENT_MULTI   reduce using rule 34 (declaration -> for_loop .)
    empty           reduce using rule 34 (declaration -> for_loop .)
    include         reduce using rule 34 (declaration -> for_loop .)
    include_once    reduce using rule 34 (declaration -> for_loop .)
    require         reduce using rule 34 (declaration -> for_loop .)
    require_once    reduce using rule 34 (declaration -> for_loop .)
    namespace       reduce using rule 34 (declaration -> for_loop .)
    int             reduce using rule 34 (declaration -> for_loop .)
    float           reduce using rule 34 (declaration -> for_loop .)
    double          reduce using rule 34 (declaration -> for_loop .)
    global          reduce using rule 34 (declaration -> for_loop .)
    const           reduce using rule 34 (declaration -> for_loop .)
    print           reduce using rule 34 (declaration -> for_loop .)
    echo            reduce using rule 34 (declaration -> for_loop .)
    while           reduce using rule 34 (declaration -> for_loop .)
    do              reduce using rule 34 (declaration -> for_loop .)
    if              reduce using rule 34 (declaration -> for_loop .)
    function        reduce using rule 34 (declaration -> for_loop .)
    ID              reduce using rule 34 (declaration -> for_loop .)
    return          reduce using rule 34 (declaration -> for_loop .)
    class           reduce using rule 34 (declaration -> for_loop .)
    final           reduce using rule 34 (declaration -> for_loop .)
    new             reduce using rule 34 (declaration -> for_loop .)
    interface       reduce using rule 34 (declaration -> for_loop .)
    trait           reduce using rule 34 (declaration -> for_loop .)
    use             reduce using rule 34 (declaration -> for_loop .)
    continue        reduce using rule 34 (declaration -> for_loop .)
    goto            reduce using rule 34 (declaration -> for_loop .)
    declare         reduce using rule 34 (declaration -> for_loop .)
    VARIABLE        reduce using rule 34 (declaration -> for_loop .)
    CLOSE_TAG       reduce using rule 34 (declaration -> for_loop .)
    for             reduce using rule 34 (declaration -> for_loop .)
    foreach         reduce using rule 34 (declaration -> for_loop .)
    switch          reduce using rule 34 (declaration -> for_loop .)
    try             reduce using rule 34 (declaration -> for_loop .)
    throw           reduce using rule 34 (declaration -> for_loop .)
    exit            reduce using rule 34 (declaration -> for_loop .)
    private         reduce using rule 34 (declaration -> for_loop .)
    protected       reduce using rule 34 (declaration -> for_loop .)
    public          reduce using rule 34 (declaration -> for_loop .)
    var             reduce using rule 34 (declaration -> for_loop .)
    array           reduce using rule 34 (declaration -> for_loop .)
    pow             reduce using rule 34 (declaration -> for_loop .)
    POW             reduce using rule 34 (declaration -> for_loop .)
    abs             reduce using rule 34 (declaration -> for_loop .)
    cos             reduce using rule 34 (declaration -> for_loop .)
    deg2rad         reduce using rule 34 (declaration -> for_loop .)
    rad2deg         reduce using rule 34 (declaration -> for_loop .)
    die             reduce using rule 34 (declaration -> for_loop .)
    exp             reduce using rule 34 (declaration -> for_loop .)
    floor           reduce using rule 34 (declaration -> for_loop .)
    isset           reduce using rule 34 (declaration -> for_loop .)
    list            reduce using rule 34 (declaration -> for_loop .)
    log             reduce using rule 34 (declaration -> for_loop .)
    log10           reduce using rule 34 (declaration -> for_loop .)
    max             reduce using rule 34 (declaration -> for_loop .)
    min             reduce using rule 34 (declaration -> for_loop .)
    rand            reduce using rule 34 (declaration -> for_loop .)
    round           reduce using rule 34 (declaration -> for_loop .)
    sin             reduce using rule 34 (declaration -> for_loop .)
    sqrt            reduce using rule 34 (declaration -> for_loop .)
    unset           reduce using rule 34 (declaration -> for_loop .)
    eval            reduce using rule 34 (declaration -> for_loop .)
    CADENA          reduce using rule 34 (declaration -> for_loop .)
    $end            reduce using rule 34 (declaration -> for_loop .)
    RBLOCK          reduce using rule 34 (declaration -> for_loop .)
    endwhile        reduce using rule 34 (declaration -> for_loop .)
    endfor          reduce using rule 34 (declaration -> for_loop .)
    endforeach      reduce using rule 34 (declaration -> for_loop .)
    break           reduce using rule 34 (declaration -> for_loop .)
    endswitch       reduce using rule 34 (declaration -> for_loop .)
    default         reduce using rule 34 (declaration -> for_loop .)
    case            reduce using rule 34 (declaration -> for_loop .)


state 35

    (35) declaration -> foreach_loop .

    COMMENT         reduce using rule 35 (declaration -> foreach_loop .)
    COMMENT_HASHTAG reduce using rule 35 (declaration -> foreach_loop .)
    COMMENT_MULTI   reduce using rule 35 (declaration -> foreach_loop .)
    empty           reduce using rule 35 (declaration -> foreach_loop .)
    include         reduce using rule 35 (declaration -> foreach_loop .)
    include_once    reduce using rule 35 (declaration -> foreach_loop .)
    require         reduce using rule 35 (declaration -> foreach_loop .)
    require_once    reduce using rule 35 (declaration -> foreach_loop .)
    namespace       reduce using rule 35 (declaration -> foreach_loop .)
    int             reduce using rule 35 (declaration -> foreach_loop .)
    float           reduce using rule 35 (declaration -> foreach_loop .)
    double          reduce using rule 35 (declaration -> foreach_loop .)
    global          reduce using rule 35 (declaration -> foreach_loop .)
    const           reduce using rule 35 (declaration -> foreach_loop .)
    print           reduce using rule 35 (declaration -> foreach_loop .)
    echo            reduce using rule 35 (declaration -> foreach_loop .)
    while           reduce using rule 35 (declaration -> foreach_loop .)
    do              reduce using rule 35 (declaration -> foreach_loop .)
    if              reduce using rule 35 (declaration -> foreach_loop .)
    function        reduce using rule 35 (declaration -> foreach_loop .)
    ID              reduce using rule 35 (declaration -> foreach_loop .)
    return          reduce using rule 35 (declaration -> foreach_loop .)
    class           reduce using rule 35 (declaration -> foreach_loop .)
    final           reduce using rule 35 (declaration -> foreach_loop .)
    new             reduce using rule 35 (declaration -> foreach_loop .)
    interface       reduce using rule 35 (declaration -> foreach_loop .)
    trait           reduce using rule 35 (declaration -> foreach_loop .)
    use             reduce using rule 35 (declaration -> foreach_loop .)
    continue        reduce using rule 35 (declaration -> foreach_loop .)
    goto            reduce using rule 35 (declaration -> foreach_loop .)
    declare         reduce using rule 35 (declaration -> foreach_loop .)
    VARIABLE        reduce using rule 35 (declaration -> foreach_loop .)
    CLOSE_TAG       reduce using rule 35 (declaration -> foreach_loop .)
    for             reduce using rule 35 (declaration -> foreach_loop .)
    foreach         reduce using rule 35 (declaration -> foreach_loop .)
    switch          reduce using rule 35 (declaration -> foreach_loop .)
    try             reduce using rule 35 (declaration -> foreach_loop .)
    throw           reduce using rule 35 (declaration -> foreach_loop .)
    exit            reduce using rule 35 (declaration -> foreach_loop .)
    private         reduce using rule 35 (declaration -> foreach_loop .)
    protected       reduce using rule 35 (declaration -> foreach_loop .)
    public          reduce using rule 35 (declaration -> foreach_loop .)
    var             reduce using rule 35 (declaration -> foreach_loop .)
    array           reduce using rule 35 (declaration -> foreach_loop .)
    pow             reduce using rule 35 (declaration -> foreach_loop .)
    POW             reduce using rule 35 (declaration -> foreach_loop .)
    abs             reduce using rule 35 (declaration -> foreach_loop .)
    cos             reduce using rule 35 (declaration -> foreach_loop .)
    deg2rad         reduce using rule 35 (declaration -> foreach_loop .)
    rad2deg         reduce using rule 35 (declaration -> foreach_loop .)
    die             reduce using rule 35 (declaration -> foreach_loop .)
    exp             reduce using rule 35 (declaration -> foreach_loop .)
    floor           reduce using rule 35 (declaration -> foreach_loop .)
    isset           reduce using rule 35 (declaration -> foreach_loop .)
    list            reduce using rule 35 (declaration -> foreach_loop .)
    log             reduce using rule 35 (declaration -> foreach_loop .)
    log10           reduce using rule 35 (declaration -> foreach_loop .)
    max             reduce using rule 35 (declaration -> foreach_loop .)
    min             reduce using rule 35 (declaration -> foreach_loop .)
    rand            reduce using rule 35 (declaration -> foreach_loop .)
    round           reduce using rule 35 (declaration -> foreach_loop .)
    sin             reduce using rule 35 (declaration -> foreach_loop .)
    sqrt            reduce using rule 35 (declaration -> foreach_loop .)
    unset           reduce using rule 35 (declaration -> foreach_loop .)
    eval            reduce using rule 35 (declaration -> foreach_loop .)
    CADENA          reduce using rule 35 (declaration -> foreach_loop .)
    $end            reduce using rule 35 (declaration -> foreach_loop .)
    RBLOCK          reduce using rule 35 (declaration -> foreach_loop .)
    endwhile        reduce using rule 35 (declaration -> foreach_loop .)
    endfor          reduce using rule 35 (declaration -> foreach_loop .)
    endforeach      reduce using rule 35 (declaration -> foreach_loop .)
    break           reduce using rule 35 (declaration -> foreach_loop .)
    endswitch       reduce using rule 35 (declaration -> foreach_loop .)
    default         reduce using rule 35 (declaration -> foreach_loop .)
    case            reduce using rule 35 (declaration -> foreach_loop .)


state 36

    (36) declaration -> switch_statement .

    COMMENT         reduce using rule 36 (declaration -> switch_statement .)
    COMMENT_HASHTAG reduce using rule 36 (declaration -> switch_statement .)
    COMMENT_MULTI   reduce using rule 36 (declaration -> switch_statement .)
    empty           reduce using rule 36 (declaration -> switch_statement .)
    include         reduce using rule 36 (declaration -> switch_statement .)
    include_once    reduce using rule 36 (declaration -> switch_statement .)
    require         reduce using rule 36 (declaration -> switch_statement .)
    require_once    reduce using rule 36 (declaration -> switch_statement .)
    namespace       reduce using rule 36 (declaration -> switch_statement .)
    int             reduce using rule 36 (declaration -> switch_statement .)
    float           reduce using rule 36 (declaration -> switch_statement .)
    double          reduce using rule 36 (declaration -> switch_statement .)
    global          reduce using rule 36 (declaration -> switch_statement .)
    const           reduce using rule 36 (declaration -> switch_statement .)
    print           reduce using rule 36 (declaration -> switch_statement .)
    echo            reduce using rule 36 (declaration -> switch_statement .)
    while           reduce using rule 36 (declaration -> switch_statement .)
    do              reduce using rule 36 (declaration -> switch_statement .)
    if              reduce using rule 36 (declaration -> switch_statement .)
    function        reduce using rule 36 (declaration -> switch_statement .)
    ID              reduce using rule 36 (declaration -> switch_statement .)
    return          reduce using rule 36 (declaration -> switch_statement .)
    class           reduce using rule 36 (declaration -> switch_statement .)
    final           reduce using rule 36 (declaration -> switch_statement .)
    new             reduce using rule 36 (declaration -> switch_statement .)
    interface       reduce using rule 36 (declaration -> switch_statement .)
    trait           reduce using rule 36 (declaration -> switch_statement .)
    use             reduce using rule 36 (declaration -> switch_statement .)
    continue        reduce using rule 36 (declaration -> switch_statement .)
    goto            reduce using rule 36 (declaration -> switch_statement .)
    declare         reduce using rule 36 (declaration -> switch_statement .)
    VARIABLE        reduce using rule 36 (declaration -> switch_statement .)
    CLOSE_TAG       reduce using rule 36 (declaration -> switch_statement .)
    for             reduce using rule 36 (declaration -> switch_statement .)
    foreach         reduce using rule 36 (declaration -> switch_statement .)
    switch          reduce using rule 36 (declaration -> switch_statement .)
    try             reduce using rule 36 (declaration -> switch_statement .)
    throw           reduce using rule 36 (declaration -> switch_statement .)
    exit            reduce using rule 36 (declaration -> switch_statement .)
    private         reduce using rule 36 (declaration -> switch_statement .)
    protected       reduce using rule 36 (declaration -> switch_statement .)
    public          reduce using rule 36 (declaration -> switch_statement .)
    var             reduce using rule 36 (declaration -> switch_statement .)
    array           reduce using rule 36 (declaration -> switch_statement .)
    pow             reduce using rule 36 (declaration -> switch_statement .)
    POW             reduce using rule 36 (declaration -> switch_statement .)
    abs             reduce using rule 36 (declaration -> switch_statement .)
    cos             reduce using rule 36 (declaration -> switch_statement .)
    deg2rad         reduce using rule 36 (declaration -> switch_statement .)
    rad2deg         reduce using rule 36 (declaration -> switch_statement .)
    die             reduce using rule 36 (declaration -> switch_statement .)
    exp             reduce using rule 36 (declaration -> switch_statement .)
    floor           reduce using rule 36 (declaration -> switch_statement .)
    isset           reduce using rule 36 (declaration -> switch_statement .)
    list            reduce using rule 36 (declaration -> switch_statement .)
    log             reduce using rule 36 (declaration -> switch_statement .)
    log10           reduce using rule 36 (declaration -> switch_statement .)
    max             reduce using rule 36 (declaration -> switch_statement .)
    min             reduce using rule 36 (declaration -> switch_statement .)
    rand            reduce using rule 36 (declaration -> switch_statement .)
    round           reduce using rule 36 (declaration -> switch_statement .)
    sin             reduce using rule 36 (declaration -> switch_statement .)
    sqrt            reduce using rule 36 (declaration -> switch_statement .)
    unset           reduce using rule 36 (declaration -> switch_statement .)
    eval            reduce using rule 36 (declaration -> switch_statement .)
    CADENA          reduce using rule 36 (declaration -> switch_statement .)
    $end            reduce using rule 36 (declaration -> switch_statement .)
    RBLOCK          reduce using rule 36 (declaration -> switch_statement .)
    endwhile        reduce using rule 36 (declaration -> switch_statement .)
    endfor          reduce using rule 36 (declaration -> switch_statement .)
    endforeach      reduce using rule 36 (declaration -> switch_statement .)
    break           reduce using rule 36 (declaration -> switch_statement .)
    endswitch       reduce using rule 36 (declaration -> switch_statement .)
    default         reduce using rule 36 (declaration -> switch_statement .)
    case            reduce using rule 36 (declaration -> switch_statement .)


state 37

    (37) declaration -> try_statement .

    COMMENT         reduce using rule 37 (declaration -> try_statement .)
    COMMENT_HASHTAG reduce using rule 37 (declaration -> try_statement .)
    COMMENT_MULTI   reduce using rule 37 (declaration -> try_statement .)
    empty           reduce using rule 37 (declaration -> try_statement .)
    include         reduce using rule 37 (declaration -> try_statement .)
    include_once    reduce using rule 37 (declaration -> try_statement .)
    require         reduce using rule 37 (declaration -> try_statement .)
    require_once    reduce using rule 37 (declaration -> try_statement .)
    namespace       reduce using rule 37 (declaration -> try_statement .)
    int             reduce using rule 37 (declaration -> try_statement .)
    float           reduce using rule 37 (declaration -> try_statement .)
    double          reduce using rule 37 (declaration -> try_statement .)
    global          reduce using rule 37 (declaration -> try_statement .)
    const           reduce using rule 37 (declaration -> try_statement .)
    print           reduce using rule 37 (declaration -> try_statement .)
    echo            reduce using rule 37 (declaration -> try_statement .)
    while           reduce using rule 37 (declaration -> try_statement .)
    do              reduce using rule 37 (declaration -> try_statement .)
    if              reduce using rule 37 (declaration -> try_statement .)
    function        reduce using rule 37 (declaration -> try_statement .)
    ID              reduce using rule 37 (declaration -> try_statement .)
    return          reduce using rule 37 (declaration -> try_statement .)
    class           reduce using rule 37 (declaration -> try_statement .)
    final           reduce using rule 37 (declaration -> try_statement .)
    new             reduce using rule 37 (declaration -> try_statement .)
    interface       reduce using rule 37 (declaration -> try_statement .)
    trait           reduce using rule 37 (declaration -> try_statement .)
    use             reduce using rule 37 (declaration -> try_statement .)
    continue        reduce using rule 37 (declaration -> try_statement .)
    goto            reduce using rule 37 (declaration -> try_statement .)
    declare         reduce using rule 37 (declaration -> try_statement .)
    VARIABLE        reduce using rule 37 (declaration -> try_statement .)
    CLOSE_TAG       reduce using rule 37 (declaration -> try_statement .)
    for             reduce using rule 37 (declaration -> try_statement .)
    foreach         reduce using rule 37 (declaration -> try_statement .)
    switch          reduce using rule 37 (declaration -> try_statement .)
    try             reduce using rule 37 (declaration -> try_statement .)
    throw           reduce using rule 37 (declaration -> try_statement .)
    exit            reduce using rule 37 (declaration -> try_statement .)
    private         reduce using rule 37 (declaration -> try_statement .)
    protected       reduce using rule 37 (declaration -> try_statement .)
    public          reduce using rule 37 (declaration -> try_statement .)
    var             reduce using rule 37 (declaration -> try_statement .)
    array           reduce using rule 37 (declaration -> try_statement .)
    pow             reduce using rule 37 (declaration -> try_statement .)
    POW             reduce using rule 37 (declaration -> try_statement .)
    abs             reduce using rule 37 (declaration -> try_statement .)
    cos             reduce using rule 37 (declaration -> try_statement .)
    deg2rad         reduce using rule 37 (declaration -> try_statement .)
    rad2deg         reduce using rule 37 (declaration -> try_statement .)
    die             reduce using rule 37 (declaration -> try_statement .)
    exp             reduce using rule 37 (declaration -> try_statement .)
    floor           reduce using rule 37 (declaration -> try_statement .)
    isset           reduce using rule 37 (declaration -> try_statement .)
    list            reduce using rule 37 (declaration -> try_statement .)
    log             reduce using rule 37 (declaration -> try_statement .)
    log10           reduce using rule 37 (declaration -> try_statement .)
    max             reduce using rule 37 (declaration -> try_statement .)
    min             reduce using rule 37 (declaration -> try_statement .)
    rand            reduce using rule 37 (declaration -> try_statement .)
    round           reduce using rule 37 (declaration -> try_statement .)
    sin             reduce using rule 37 (declaration -> try_statement .)
    sqrt            reduce using rule 37 (declaration -> try_statement .)
    unset           reduce using rule 37 (declaration -> try_statement .)
    eval            reduce using rule 37 (declaration -> try_statement .)
    CADENA          reduce using rule 37 (declaration -> try_statement .)
    $end            reduce using rule 37 (declaration -> try_statement .)
    RBLOCK          reduce using rule 37 (declaration -> try_statement .)
    endwhile        reduce using rule 37 (declaration -> try_statement .)
    endfor          reduce using rule 37 (declaration -> try_statement .)
    endforeach      reduce using rule 37 (declaration -> try_statement .)
    break           reduce using rule 37 (declaration -> try_statement .)
    endswitch       reduce using rule 37 (declaration -> try_statement .)
    default         reduce using rule 37 (declaration -> try_statement .)
    case            reduce using rule 37 (declaration -> try_statement .)


state 38

    (38) declaration -> throw_statement .

    COMMENT         reduce using rule 38 (declaration -> throw_statement .)
    COMMENT_HASHTAG reduce using rule 38 (declaration -> throw_statement .)
    COMMENT_MULTI   reduce using rule 38 (declaration -> throw_statement .)
    empty           reduce using rule 38 (declaration -> throw_statement .)
    include         reduce using rule 38 (declaration -> throw_statement .)
    include_once    reduce using rule 38 (declaration -> throw_statement .)
    require         reduce using rule 38 (declaration -> throw_statement .)
    require_once    reduce using rule 38 (declaration -> throw_statement .)
    namespace       reduce using rule 38 (declaration -> throw_statement .)
    int             reduce using rule 38 (declaration -> throw_statement .)
    float           reduce using rule 38 (declaration -> throw_statement .)
    double          reduce using rule 38 (declaration -> throw_statement .)
    global          reduce using rule 38 (declaration -> throw_statement .)
    const           reduce using rule 38 (declaration -> throw_statement .)
    print           reduce using rule 38 (declaration -> throw_statement .)
    echo            reduce using rule 38 (declaration -> throw_statement .)
    while           reduce using rule 38 (declaration -> throw_statement .)
    do              reduce using rule 38 (declaration -> throw_statement .)
    if              reduce using rule 38 (declaration -> throw_statement .)
    function        reduce using rule 38 (declaration -> throw_statement .)
    ID              reduce using rule 38 (declaration -> throw_statement .)
    return          reduce using rule 38 (declaration -> throw_statement .)
    class           reduce using rule 38 (declaration -> throw_statement .)
    final           reduce using rule 38 (declaration -> throw_statement .)
    new             reduce using rule 38 (declaration -> throw_statement .)
    interface       reduce using rule 38 (declaration -> throw_statement .)
    trait           reduce using rule 38 (declaration -> throw_statement .)
    use             reduce using rule 38 (declaration -> throw_statement .)
    continue        reduce using rule 38 (declaration -> throw_statement .)
    goto            reduce using rule 38 (declaration -> throw_statement .)
    declare         reduce using rule 38 (declaration -> throw_statement .)
    VARIABLE        reduce using rule 38 (declaration -> throw_statement .)
    CLOSE_TAG       reduce using rule 38 (declaration -> throw_statement .)
    for             reduce using rule 38 (declaration -> throw_statement .)
    foreach         reduce using rule 38 (declaration -> throw_statement .)
    switch          reduce using rule 38 (declaration -> throw_statement .)
    try             reduce using rule 38 (declaration -> throw_statement .)
    throw           reduce using rule 38 (declaration -> throw_statement .)
    exit            reduce using rule 38 (declaration -> throw_statement .)
    private         reduce using rule 38 (declaration -> throw_statement .)
    protected       reduce using rule 38 (declaration -> throw_statement .)
    public          reduce using rule 38 (declaration -> throw_statement .)
    var             reduce using rule 38 (declaration -> throw_statement .)
    array           reduce using rule 38 (declaration -> throw_statement .)
    pow             reduce using rule 38 (declaration -> throw_statement .)
    POW             reduce using rule 38 (declaration -> throw_statement .)
    abs             reduce using rule 38 (declaration -> throw_statement .)
    cos             reduce using rule 38 (declaration -> throw_statement .)
    deg2rad         reduce using rule 38 (declaration -> throw_statement .)
    rad2deg         reduce using rule 38 (declaration -> throw_statement .)
    die             reduce using rule 38 (declaration -> throw_statement .)
    exp             reduce using rule 38 (declaration -> throw_statement .)
    floor           reduce using rule 38 (declaration -> throw_statement .)
    isset           reduce using rule 38 (declaration -> throw_statement .)
    list            reduce using rule 38 (declaration -> throw_statement .)
    log             reduce using rule 38 (declaration -> throw_statement .)
    log10           reduce using rule 38 (declaration -> throw_statement .)
    max             reduce using rule 38 (declaration -> throw_statement .)
    min             reduce using rule 38 (declaration -> throw_statement .)
    rand            reduce using rule 38 (declaration -> throw_statement .)
    round           reduce using rule 38 (declaration -> throw_statement .)
    sin             reduce using rule 38 (declaration -> throw_statement .)
    sqrt            reduce using rule 38 (declaration -> throw_statement .)
    unset           reduce using rule 38 (declaration -> throw_statement .)
    eval            reduce using rule 38 (declaration -> throw_statement .)
    CADENA          reduce using rule 38 (declaration -> throw_statement .)
    $end            reduce using rule 38 (declaration -> throw_statement .)
    RBLOCK          reduce using rule 38 (declaration -> throw_statement .)
    endwhile        reduce using rule 38 (declaration -> throw_statement .)
    endfor          reduce using rule 38 (declaration -> throw_statement .)
    endforeach      reduce using rule 38 (declaration -> throw_statement .)
    break           reduce using rule 38 (declaration -> throw_statement .)
    endswitch       reduce using rule 38 (declaration -> throw_statement .)
    default         reduce using rule 38 (declaration -> throw_statement .)
    case            reduce using rule 38 (declaration -> throw_statement .)


state 39

    (39) declaration -> exit_statement .

    COMMENT         reduce using rule 39 (declaration -> exit_statement .)
    COMMENT_HASHTAG reduce using rule 39 (declaration -> exit_statement .)
    COMMENT_MULTI   reduce using rule 39 (declaration -> exit_statement .)
    empty           reduce using rule 39 (declaration -> exit_statement .)
    include         reduce using rule 39 (declaration -> exit_statement .)
    include_once    reduce using rule 39 (declaration -> exit_statement .)
    require         reduce using rule 39 (declaration -> exit_statement .)
    require_once    reduce using rule 39 (declaration -> exit_statement .)
    namespace       reduce using rule 39 (declaration -> exit_statement .)
    int             reduce using rule 39 (declaration -> exit_statement .)
    float           reduce using rule 39 (declaration -> exit_statement .)
    double          reduce using rule 39 (declaration -> exit_statement .)
    global          reduce using rule 39 (declaration -> exit_statement .)
    const           reduce using rule 39 (declaration -> exit_statement .)
    print           reduce using rule 39 (declaration -> exit_statement .)
    echo            reduce using rule 39 (declaration -> exit_statement .)
    while           reduce using rule 39 (declaration -> exit_statement .)
    do              reduce using rule 39 (declaration -> exit_statement .)
    if              reduce using rule 39 (declaration -> exit_statement .)
    function        reduce using rule 39 (declaration -> exit_statement .)
    ID              reduce using rule 39 (declaration -> exit_statement .)
    return          reduce using rule 39 (declaration -> exit_statement .)
    class           reduce using rule 39 (declaration -> exit_statement .)
    final           reduce using rule 39 (declaration -> exit_statement .)
    new             reduce using rule 39 (declaration -> exit_statement .)
    interface       reduce using rule 39 (declaration -> exit_statement .)
    trait           reduce using rule 39 (declaration -> exit_statement .)
    use             reduce using rule 39 (declaration -> exit_statement .)
    continue        reduce using rule 39 (declaration -> exit_statement .)
    goto            reduce using rule 39 (declaration -> exit_statement .)
    declare         reduce using rule 39 (declaration -> exit_statement .)
    VARIABLE        reduce using rule 39 (declaration -> exit_statement .)
    CLOSE_TAG       reduce using rule 39 (declaration -> exit_statement .)
    for             reduce using rule 39 (declaration -> exit_statement .)
    foreach         reduce using rule 39 (declaration -> exit_statement .)
    switch          reduce using rule 39 (declaration -> exit_statement .)
    try             reduce using rule 39 (declaration -> exit_statement .)
    throw           reduce using rule 39 (declaration -> exit_statement .)
    exit            reduce using rule 39 (declaration -> exit_statement .)
    private         reduce using rule 39 (declaration -> exit_statement .)
    protected       reduce using rule 39 (declaration -> exit_statement .)
    public          reduce using rule 39 (declaration -> exit_statement .)
    var             reduce using rule 39 (declaration -> exit_statement .)
    array           reduce using rule 39 (declaration -> exit_statement .)
    pow             reduce using rule 39 (declaration -> exit_statement .)
    POW             reduce using rule 39 (declaration -> exit_statement .)
    abs             reduce using rule 39 (declaration -> exit_statement .)
    cos             reduce using rule 39 (declaration -> exit_statement .)
    deg2rad         reduce using rule 39 (declaration -> exit_statement .)
    rad2deg         reduce using rule 39 (declaration -> exit_statement .)
    die             reduce using rule 39 (declaration -> exit_statement .)
    exp             reduce using rule 39 (declaration -> exit_statement .)
    floor           reduce using rule 39 (declaration -> exit_statement .)
    isset           reduce using rule 39 (declaration -> exit_statement .)
    list            reduce using rule 39 (declaration -> exit_statement .)
    log             reduce using rule 39 (declaration -> exit_statement .)
    log10           reduce using rule 39 (declaration -> exit_statement .)
    max             reduce using rule 39 (declaration -> exit_statement .)
    min             reduce using rule 39 (declaration -> exit_statement .)
    rand            reduce using rule 39 (declaration -> exit_statement .)
    round           reduce using rule 39 (declaration -> exit_statement .)
    sin             reduce using rule 39 (declaration -> exit_statement .)
    sqrt            reduce using rule 39 (declaration -> exit_statement .)
    unset           reduce using rule 39 (declaration -> exit_statement .)
    eval            reduce using rule 39 (declaration -> exit_statement .)
    CADENA          reduce using rule 39 (declaration -> exit_statement .)
    $end            reduce using rule 39 (declaration -> exit_statement .)
    RBLOCK          reduce using rule 39 (declaration -> exit_statement .)
    endwhile        reduce using rule 39 (declaration -> exit_statement .)
    endfor          reduce using rule 39 (declaration -> exit_statement .)
    endforeach      reduce using rule 39 (declaration -> exit_statement .)
    break           reduce using rule 39 (declaration -> exit_statement .)
    endswitch       reduce using rule 39 (declaration -> exit_statement .)
    default         reduce using rule 39 (declaration -> exit_statement .)
    case            reduce using rule 39 (declaration -> exit_statement .)


state 40

    (40) declaration -> empty .

    COMMENT         reduce using rule 40 (declaration -> empty .)
    COMMENT_HASHTAG reduce using rule 40 (declaration -> empty .)
    COMMENT_MULTI   reduce using rule 40 (declaration -> empty .)
    empty           reduce using rule 40 (declaration -> empty .)
    include         reduce using rule 40 (declaration -> empty .)
    include_once    reduce using rule 40 (declaration -> empty .)
    require         reduce using rule 40 (declaration -> empty .)
    require_once    reduce using rule 40 (declaration -> empty .)
    namespace       reduce using rule 40 (declaration -> empty .)
    int             reduce using rule 40 (declaration -> empty .)
    float           reduce using rule 40 (declaration -> empty .)
    double          reduce using rule 40 (declaration -> empty .)
    global          reduce using rule 40 (declaration -> empty .)
    const           reduce using rule 40 (declaration -> empty .)
    print           reduce using rule 40 (declaration -> empty .)
    echo            reduce using rule 40 (declaration -> empty .)
    while           reduce using rule 40 (declaration -> empty .)
    do              reduce using rule 40 (declaration -> empty .)
    if              reduce using rule 40 (declaration -> empty .)
    function        reduce using rule 40 (declaration -> empty .)
    ID              reduce using rule 40 (declaration -> empty .)
    return          reduce using rule 40 (declaration -> empty .)
    class           reduce using rule 40 (declaration -> empty .)
    final           reduce using rule 40 (declaration -> empty .)
    new             reduce using rule 40 (declaration -> empty .)
    interface       reduce using rule 40 (declaration -> empty .)
    trait           reduce using rule 40 (declaration -> empty .)
    use             reduce using rule 40 (declaration -> empty .)
    continue        reduce using rule 40 (declaration -> empty .)
    goto            reduce using rule 40 (declaration -> empty .)
    declare         reduce using rule 40 (declaration -> empty .)
    VARIABLE        reduce using rule 40 (declaration -> empty .)
    CLOSE_TAG       reduce using rule 40 (declaration -> empty .)
    for             reduce using rule 40 (declaration -> empty .)
    foreach         reduce using rule 40 (declaration -> empty .)
    switch          reduce using rule 40 (declaration -> empty .)
    try             reduce using rule 40 (declaration -> empty .)
    throw           reduce using rule 40 (declaration -> empty .)
    exit            reduce using rule 40 (declaration -> empty .)
    private         reduce using rule 40 (declaration -> empty .)
    protected       reduce using rule 40 (declaration -> empty .)
    public          reduce using rule 40 (declaration -> empty .)
    var             reduce using rule 40 (declaration -> empty .)
    array           reduce using rule 40 (declaration -> empty .)
    pow             reduce using rule 40 (declaration -> empty .)
    POW             reduce using rule 40 (declaration -> empty .)
    abs             reduce using rule 40 (declaration -> empty .)
    cos             reduce using rule 40 (declaration -> empty .)
    deg2rad         reduce using rule 40 (declaration -> empty .)
    rad2deg         reduce using rule 40 (declaration -> empty .)
    die             reduce using rule 40 (declaration -> empty .)
    exp             reduce using rule 40 (declaration -> empty .)
    floor           reduce using rule 40 (declaration -> empty .)
    isset           reduce using rule 40 (declaration -> empty .)
    list            reduce using rule 40 (declaration -> empty .)
    log             reduce using rule 40 (declaration -> empty .)
    log10           reduce using rule 40 (declaration -> empty .)
    max             reduce using rule 40 (declaration -> empty .)
    min             reduce using rule 40 (declaration -> empty .)
    rand            reduce using rule 40 (declaration -> empty .)
    round           reduce using rule 40 (declaration -> empty .)
    sin             reduce using rule 40 (declaration -> empty .)
    sqrt            reduce using rule 40 (declaration -> empty .)
    unset           reduce using rule 40 (declaration -> empty .)
    eval            reduce using rule 40 (declaration -> empty .)
    CADENA          reduce using rule 40 (declaration -> empty .)
    $end            reduce using rule 40 (declaration -> empty .)
    RBLOCK          reduce using rule 40 (declaration -> empty .)
    endwhile        reduce using rule 40 (declaration -> empty .)
    endfor          reduce using rule 40 (declaration -> empty .)
    endforeach      reduce using rule 40 (declaration -> empty .)
    break           reduce using rule 40 (declaration -> empty .)
    endswitch       reduce using rule 40 (declaration -> empty .)
    default         reduce using rule 40 (declaration -> empty .)
    case            reduce using rule 40 (declaration -> empty .)


state 41

    (45) header_declaration -> include . CADENA SEMICOLON

    CADENA          shift and go to state 110


state 42

    (270) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    DOT             shift and go to state 111


state 43

    (46) header_declaration -> include_once . CADENA SEMICOLON

    CADENA          shift and go to state 112


state 44

    (47) header_declaration -> require . CADENA SEMICOLON

    CADENA          shift and go to state 113


state 45

    (48) header_declaration -> require_once . CADENA SEMICOLON

    CADENA          shift and go to state 114


state 46

    (49) namespace_declaration -> namespace . ID SEMICOLON

    ID              shift and go to state 115


state 47

    (148) fun_call -> ID . LPAREN params RPAREN
    (200) label_declaration -> ID . COLON

    LPAREN          shift and go to state 116
    COLON           shift and go to state 117


state 48

    (41) data_type -> int .

    VARIABLE        reduce using rule 41 (data_type -> int .)
    COMMENT         reduce using rule 41 (data_type -> int .)
    COMMENT_HASHTAG reduce using rule 41 (data_type -> int .)
    COMMENT_MULTI   reduce using rule 41 (data_type -> int .)
    empty           reduce using rule 41 (data_type -> int .)
    include         reduce using rule 41 (data_type -> int .)
    include_once    reduce using rule 41 (data_type -> int .)
    require         reduce using rule 41 (data_type -> int .)
    require_once    reduce using rule 41 (data_type -> int .)
    namespace       reduce using rule 41 (data_type -> int .)
    int             reduce using rule 41 (data_type -> int .)
    float           reduce using rule 41 (data_type -> int .)
    double          reduce using rule 41 (data_type -> int .)
    global          reduce using rule 41 (data_type -> int .)
    const           reduce using rule 41 (data_type -> int .)
    print           reduce using rule 41 (data_type -> int .)
    echo            reduce using rule 41 (data_type -> int .)
    while           reduce using rule 41 (data_type -> int .)
    do              reduce using rule 41 (data_type -> int .)
    if              reduce using rule 41 (data_type -> int .)
    function        reduce using rule 41 (data_type -> int .)
    ID              reduce using rule 41 (data_type -> int .)
    return          reduce using rule 41 (data_type -> int .)
    class           reduce using rule 41 (data_type -> int .)
    final           reduce using rule 41 (data_type -> int .)
    new             reduce using rule 41 (data_type -> int .)
    interface       reduce using rule 41 (data_type -> int .)
    trait           reduce using rule 41 (data_type -> int .)
    use             reduce using rule 41 (data_type -> int .)
    continue        reduce using rule 41 (data_type -> int .)
    goto            reduce using rule 41 (data_type -> int .)
    declare         reduce using rule 41 (data_type -> int .)
    CLOSE_TAG       reduce using rule 41 (data_type -> int .)
    for             reduce using rule 41 (data_type -> int .)
    foreach         reduce using rule 41 (data_type -> int .)
    switch          reduce using rule 41 (data_type -> int .)
    try             reduce using rule 41 (data_type -> int .)
    throw           reduce using rule 41 (data_type -> int .)
    exit            reduce using rule 41 (data_type -> int .)
    private         reduce using rule 41 (data_type -> int .)
    protected       reduce using rule 41 (data_type -> int .)
    public          reduce using rule 41 (data_type -> int .)
    var             reduce using rule 41 (data_type -> int .)
    array           reduce using rule 41 (data_type -> int .)
    pow             reduce using rule 41 (data_type -> int .)
    POW             reduce using rule 41 (data_type -> int .)
    abs             reduce using rule 41 (data_type -> int .)
    cos             reduce using rule 41 (data_type -> int .)
    deg2rad         reduce using rule 41 (data_type -> int .)
    rad2deg         reduce using rule 41 (data_type -> int .)
    die             reduce using rule 41 (data_type -> int .)
    exp             reduce using rule 41 (data_type -> int .)
    floor           reduce using rule 41 (data_type -> int .)
    isset           reduce using rule 41 (data_type -> int .)
    list            reduce using rule 41 (data_type -> int .)
    log             reduce using rule 41 (data_type -> int .)
    log10           reduce using rule 41 (data_type -> int .)
    max             reduce using rule 41 (data_type -> int .)
    min             reduce using rule 41 (data_type -> int .)
    rand            reduce using rule 41 (data_type -> int .)
    round           reduce using rule 41 (data_type -> int .)
    sin             reduce using rule 41 (data_type -> int .)
    sqrt            reduce using rule 41 (data_type -> int .)
    unset           reduce using rule 41 (data_type -> int .)
    eval            reduce using rule 41 (data_type -> int .)
    CADENA          reduce using rule 41 (data_type -> int .)
    $end            reduce using rule 41 (data_type -> int .)
    RBLOCK          reduce using rule 41 (data_type -> int .)
    endwhile        reduce using rule 41 (data_type -> int .)
    endfor          reduce using rule 41 (data_type -> int .)
    endforeach      reduce using rule 41 (data_type -> int .)
    break           reduce using rule 41 (data_type -> int .)
    endswitch       reduce using rule 41 (data_type -> int .)
    default         reduce using rule 41 (data_type -> int .)
    case            reduce using rule 41 (data_type -> int .)


state 49

    (42) data_type -> float .

    VARIABLE        reduce using rule 42 (data_type -> float .)
    COMMENT         reduce using rule 42 (data_type -> float .)
    COMMENT_HASHTAG reduce using rule 42 (data_type -> float .)
    COMMENT_MULTI   reduce using rule 42 (data_type -> float .)
    empty           reduce using rule 42 (data_type -> float .)
    include         reduce using rule 42 (data_type -> float .)
    include_once    reduce using rule 42 (data_type -> float .)
    require         reduce using rule 42 (data_type -> float .)
    require_once    reduce using rule 42 (data_type -> float .)
    namespace       reduce using rule 42 (data_type -> float .)
    int             reduce using rule 42 (data_type -> float .)
    float           reduce using rule 42 (data_type -> float .)
    double          reduce using rule 42 (data_type -> float .)
    global          reduce using rule 42 (data_type -> float .)
    const           reduce using rule 42 (data_type -> float .)
    print           reduce using rule 42 (data_type -> float .)
    echo            reduce using rule 42 (data_type -> float .)
    while           reduce using rule 42 (data_type -> float .)
    do              reduce using rule 42 (data_type -> float .)
    if              reduce using rule 42 (data_type -> float .)
    function        reduce using rule 42 (data_type -> float .)
    ID              reduce using rule 42 (data_type -> float .)
    return          reduce using rule 42 (data_type -> float .)
    class           reduce using rule 42 (data_type -> float .)
    final           reduce using rule 42 (data_type -> float .)
    new             reduce using rule 42 (data_type -> float .)
    interface       reduce using rule 42 (data_type -> float .)
    trait           reduce using rule 42 (data_type -> float .)
    use             reduce using rule 42 (data_type -> float .)
    continue        reduce using rule 42 (data_type -> float .)
    goto            reduce using rule 42 (data_type -> float .)
    declare         reduce using rule 42 (data_type -> float .)
    CLOSE_TAG       reduce using rule 42 (data_type -> float .)
    for             reduce using rule 42 (data_type -> float .)
    foreach         reduce using rule 42 (data_type -> float .)
    switch          reduce using rule 42 (data_type -> float .)
    try             reduce using rule 42 (data_type -> float .)
    throw           reduce using rule 42 (data_type -> float .)
    exit            reduce using rule 42 (data_type -> float .)
    private         reduce using rule 42 (data_type -> float .)
    protected       reduce using rule 42 (data_type -> float .)
    public          reduce using rule 42 (data_type -> float .)
    var             reduce using rule 42 (data_type -> float .)
    array           reduce using rule 42 (data_type -> float .)
    pow             reduce using rule 42 (data_type -> float .)
    POW             reduce using rule 42 (data_type -> float .)
    abs             reduce using rule 42 (data_type -> float .)
    cos             reduce using rule 42 (data_type -> float .)
    deg2rad         reduce using rule 42 (data_type -> float .)
    rad2deg         reduce using rule 42 (data_type -> float .)
    die             reduce using rule 42 (data_type -> float .)
    exp             reduce using rule 42 (data_type -> float .)
    floor           reduce using rule 42 (data_type -> float .)
    isset           reduce using rule 42 (data_type -> float .)
    list            reduce using rule 42 (data_type -> float .)
    log             reduce using rule 42 (data_type -> float .)
    log10           reduce using rule 42 (data_type -> float .)
    max             reduce using rule 42 (data_type -> float .)
    min             reduce using rule 42 (data_type -> float .)
    rand            reduce using rule 42 (data_type -> float .)
    round           reduce using rule 42 (data_type -> float .)
    sin             reduce using rule 42 (data_type -> float .)
    sqrt            reduce using rule 42 (data_type -> float .)
    unset           reduce using rule 42 (data_type -> float .)
    eval            reduce using rule 42 (data_type -> float .)
    CADENA          reduce using rule 42 (data_type -> float .)
    $end            reduce using rule 42 (data_type -> float .)
    RBLOCK          reduce using rule 42 (data_type -> float .)
    endwhile        reduce using rule 42 (data_type -> float .)
    endfor          reduce using rule 42 (data_type -> float .)
    endforeach      reduce using rule 42 (data_type -> float .)
    break           reduce using rule 42 (data_type -> float .)
    endswitch       reduce using rule 42 (data_type -> float .)
    default         reduce using rule 42 (data_type -> float .)
    case            reduce using rule 42 (data_type -> float .)


state 50

    (43) data_type -> double .

    VARIABLE        reduce using rule 43 (data_type -> double .)
    COMMENT         reduce using rule 43 (data_type -> double .)
    COMMENT_HASHTAG reduce using rule 43 (data_type -> double .)
    COMMENT_MULTI   reduce using rule 43 (data_type -> double .)
    empty           reduce using rule 43 (data_type -> double .)
    include         reduce using rule 43 (data_type -> double .)
    include_once    reduce using rule 43 (data_type -> double .)
    require         reduce using rule 43 (data_type -> double .)
    require_once    reduce using rule 43 (data_type -> double .)
    namespace       reduce using rule 43 (data_type -> double .)
    int             reduce using rule 43 (data_type -> double .)
    float           reduce using rule 43 (data_type -> double .)
    double          reduce using rule 43 (data_type -> double .)
    global          reduce using rule 43 (data_type -> double .)
    const           reduce using rule 43 (data_type -> double .)
    print           reduce using rule 43 (data_type -> double .)
    echo            reduce using rule 43 (data_type -> double .)
    while           reduce using rule 43 (data_type -> double .)
    do              reduce using rule 43 (data_type -> double .)
    if              reduce using rule 43 (data_type -> double .)
    function        reduce using rule 43 (data_type -> double .)
    ID              reduce using rule 43 (data_type -> double .)
    return          reduce using rule 43 (data_type -> double .)
    class           reduce using rule 43 (data_type -> double .)
    final           reduce using rule 43 (data_type -> double .)
    new             reduce using rule 43 (data_type -> double .)
    interface       reduce using rule 43 (data_type -> double .)
    trait           reduce using rule 43 (data_type -> double .)
    use             reduce using rule 43 (data_type -> double .)
    continue        reduce using rule 43 (data_type -> double .)
    goto            reduce using rule 43 (data_type -> double .)
    declare         reduce using rule 43 (data_type -> double .)
    CLOSE_TAG       reduce using rule 43 (data_type -> double .)
    for             reduce using rule 43 (data_type -> double .)
    foreach         reduce using rule 43 (data_type -> double .)
    switch          reduce using rule 43 (data_type -> double .)
    try             reduce using rule 43 (data_type -> double .)
    throw           reduce using rule 43 (data_type -> double .)
    exit            reduce using rule 43 (data_type -> double .)
    private         reduce using rule 43 (data_type -> double .)
    protected       reduce using rule 43 (data_type -> double .)
    public          reduce using rule 43 (data_type -> double .)
    var             reduce using rule 43 (data_type -> double .)
    array           reduce using rule 43 (data_type -> double .)
    pow             reduce using rule 43 (data_type -> double .)
    POW             reduce using rule 43 (data_type -> double .)
    abs             reduce using rule 43 (data_type -> double .)
    cos             reduce using rule 43 (data_type -> double .)
    deg2rad         reduce using rule 43 (data_type -> double .)
    rad2deg         reduce using rule 43 (data_type -> double .)
    die             reduce using rule 43 (data_type -> double .)
    exp             reduce using rule 43 (data_type -> double .)
    floor           reduce using rule 43 (data_type -> double .)
    isset           reduce using rule 43 (data_type -> double .)
    list            reduce using rule 43 (data_type -> double .)
    log             reduce using rule 43 (data_type -> double .)
    log10           reduce using rule 43 (data_type -> double .)
    max             reduce using rule 43 (data_type -> double .)
    min             reduce using rule 43 (data_type -> double .)
    rand            reduce using rule 43 (data_type -> double .)
    round           reduce using rule 43 (data_type -> double .)
    sin             reduce using rule 43 (data_type -> double .)
    sqrt            reduce using rule 43 (data_type -> double .)
    unset           reduce using rule 43 (data_type -> double .)
    eval            reduce using rule 43 (data_type -> double .)
    CADENA          reduce using rule 43 (data_type -> double .)
    $end            reduce using rule 43 (data_type -> double .)
    RBLOCK          reduce using rule 43 (data_type -> double .)
    endwhile        reduce using rule 43 (data_type -> double .)
    endfor          reduce using rule 43 (data_type -> double .)
    endforeach      reduce using rule 43 (data_type -> double .)
    break           reduce using rule 43 (data_type -> double .)
    endswitch       reduce using rule 43 (data_type -> double .)
    default         reduce using rule 43 (data_type -> double .)
    case            reduce using rule 43 (data_type -> double .)


state 51

    (44) data_type -> empty_function .

    VARIABLE        reduce using rule 44 (data_type -> empty_function .)
    COMMENT         reduce using rule 44 (data_type -> empty_function .)
    COMMENT_HASHTAG reduce using rule 44 (data_type -> empty_function .)
    COMMENT_MULTI   reduce using rule 44 (data_type -> empty_function .)
    empty           reduce using rule 44 (data_type -> empty_function .)
    include         reduce using rule 44 (data_type -> empty_function .)
    include_once    reduce using rule 44 (data_type -> empty_function .)
    require         reduce using rule 44 (data_type -> empty_function .)
    require_once    reduce using rule 44 (data_type -> empty_function .)
    namespace       reduce using rule 44 (data_type -> empty_function .)
    int             reduce using rule 44 (data_type -> empty_function .)
    float           reduce using rule 44 (data_type -> empty_function .)
    double          reduce using rule 44 (data_type -> empty_function .)
    global          reduce using rule 44 (data_type -> empty_function .)
    const           reduce using rule 44 (data_type -> empty_function .)
    print           reduce using rule 44 (data_type -> empty_function .)
    echo            reduce using rule 44 (data_type -> empty_function .)
    while           reduce using rule 44 (data_type -> empty_function .)
    do              reduce using rule 44 (data_type -> empty_function .)
    if              reduce using rule 44 (data_type -> empty_function .)
    function        reduce using rule 44 (data_type -> empty_function .)
    ID              reduce using rule 44 (data_type -> empty_function .)
    return          reduce using rule 44 (data_type -> empty_function .)
    class           reduce using rule 44 (data_type -> empty_function .)
    final           reduce using rule 44 (data_type -> empty_function .)
    new             reduce using rule 44 (data_type -> empty_function .)
    interface       reduce using rule 44 (data_type -> empty_function .)
    trait           reduce using rule 44 (data_type -> empty_function .)
    use             reduce using rule 44 (data_type -> empty_function .)
    continue        reduce using rule 44 (data_type -> empty_function .)
    goto            reduce using rule 44 (data_type -> empty_function .)
    declare         reduce using rule 44 (data_type -> empty_function .)
    CLOSE_TAG       reduce using rule 44 (data_type -> empty_function .)
    for             reduce using rule 44 (data_type -> empty_function .)
    foreach         reduce using rule 44 (data_type -> empty_function .)
    switch          reduce using rule 44 (data_type -> empty_function .)
    try             reduce using rule 44 (data_type -> empty_function .)
    throw           reduce using rule 44 (data_type -> empty_function .)
    exit            reduce using rule 44 (data_type -> empty_function .)
    private         reduce using rule 44 (data_type -> empty_function .)
    protected       reduce using rule 44 (data_type -> empty_function .)
    public          reduce using rule 44 (data_type -> empty_function .)
    var             reduce using rule 44 (data_type -> empty_function .)
    array           reduce using rule 44 (data_type -> empty_function .)
    pow             reduce using rule 44 (data_type -> empty_function .)
    POW             reduce using rule 44 (data_type -> empty_function .)
    abs             reduce using rule 44 (data_type -> empty_function .)
    cos             reduce using rule 44 (data_type -> empty_function .)
    deg2rad         reduce using rule 44 (data_type -> empty_function .)
    rad2deg         reduce using rule 44 (data_type -> empty_function .)
    die             reduce using rule 44 (data_type -> empty_function .)
    exp             reduce using rule 44 (data_type -> empty_function .)
    floor           reduce using rule 44 (data_type -> empty_function .)
    isset           reduce using rule 44 (data_type -> empty_function .)
    list            reduce using rule 44 (data_type -> empty_function .)
    log             reduce using rule 44 (data_type -> empty_function .)
    log10           reduce using rule 44 (data_type -> empty_function .)
    max             reduce using rule 44 (data_type -> empty_function .)
    min             reduce using rule 44 (data_type -> empty_function .)
    rand            reduce using rule 44 (data_type -> empty_function .)
    round           reduce using rule 44 (data_type -> empty_function .)
    sin             reduce using rule 44 (data_type -> empty_function .)
    sqrt            reduce using rule 44 (data_type -> empty_function .)
    unset           reduce using rule 44 (data_type -> empty_function .)
    eval            reduce using rule 44 (data_type -> empty_function .)
    CADENA          reduce using rule 44 (data_type -> empty_function .)
    $end            reduce using rule 44 (data_type -> empty_function .)
    RBLOCK          reduce using rule 44 (data_type -> empty_function .)
    endwhile        reduce using rule 44 (data_type -> empty_function .)
    endfor          reduce using rule 44 (data_type -> empty_function .)
    endforeach      reduce using rule 44 (data_type -> empty_function .)
    break           reduce using rule 44 (data_type -> empty_function .)
    endswitch       reduce using rule 44 (data_type -> empty_function .)
    default         reduce using rule 44 (data_type -> empty_function .)
    case            reduce using rule 44 (data_type -> empty_function .)


state 52

    (190) match_declaration -> VARIABLE . EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (68) var_declaration2 -> VARIABLE .
    (69) var_declaration2 -> VARIABLE . expression
    (70) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (71) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (72) var_declaration2 -> VARIABLE . EQUAL CADENA
    (73) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (74) var_declaration2 -> VARIABLE . EQUAL expression
    (75) var_declaration2 -> VARIABLE . assignation VARIABLE
    (76) var_declaration2 -> VARIABLE . assignation NUMBER
    (77) var_declaration2 -> VARIABLE . EQUAL ceil_expression
    (78) var_declaration2 -> VARIABLE . EQUAL clone_declaration
    (81) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (86) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (269) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (276) assignation -> . ASSIGN
    (277) assignation -> . SREQUAL
    (278) assignation -> . SLEQUAL
    (279) assignation -> . XOREQUAL
    (280) assignation -> . ANDEQUAL
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    EQUAL           shift and go to state 119
    SEMICOLON       reduce using rule 68 (var_declaration2 -> VARIABLE .)
    QUESTIONMARK    shift and go to state 124
    OBJ_OPERATOR    shift and go to state 125
    DOT             shift and go to state 126
    VARIABLE        shift and go to state 118
    ASSIGN          shift and go to state 128
    SREQUAL         shift and go to state 129
    SLEQUAL         shift and go to state 130
    XOREQUAL        shift and go to state 131
    ANDEQUAL        shift and go to state 132
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 121
    assignation                    shift and go to state 123
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 53

    (65) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 142


state 54

    (66) var_declaration -> global . var_declaration2 SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

    var_declaration2               shift and go to state 143
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 55

    (50) constant_declaration -> const . ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> const . ID EQUAL NUMBER SEMICOLON

    ID              shift and go to state 145


state 56

    (52) print_declaration -> print . var_declaration2 SEMICOLON
    (53) print_declaration -> print . LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> print . LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> print . LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> print . NUMBER SEMICOLON
    (57) print_declaration -> print . CADENA SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    LPAREN          shift and go to state 147
    NUMBER          shift and go to state 148
    CADENA          shift and go to state 149
    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    var_declaration2               shift and go to state 146
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 57

    (58) echo_declaration -> echo . var_declaration2 SEMICOLON
    (59) echo_declaration -> echo . LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> echo . LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> echo . LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> echo . NUMBER SEMICOLON
    (63) echo_declaration -> echo . ceil_expression SEMICOLON
    (64) echo_declaration -> echo . CADENA SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (281) ceil_expression -> . ceil LPAREN expression RPAREN
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    LPAREN          shift and go to state 151
    NUMBER          shift and go to state 152
    CADENA          shift and go to state 153
    VARIABLE        shift and go to state 144
    ceil            shift and go to state 155
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    var_declaration2               shift and go to state 150
    ceil_expression                shift and go to state 154
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 58

    (93) iteration_stmt -> while . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> while . LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON

    LPAREN          shift and go to state 156


state 59

    (95) iteration_stmt -> do . LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> do . COLON declaration_list endwhile SEMICOLON

    LBLOCK          shift and go to state 157
    COLON           shift and go to state 158


state 60

    (139) if_statement -> if . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 159


state 61

    (144) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    ID              shift and go to state 160


state 62

    (146) fun_declaration -> visibility . static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility . static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    static          shift and go to state 161


state 63

    (149) return_statement -> return . expression SEMICOLON
    (150) return_statement -> return . params SEMICOLON
    (151) return_statement -> return . SEMICOLON
    (152) return_statement -> return . ID LPAREN expression RPAREN SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 163
    ID              shift and go to state 165
    VARIABLE        shift and go to state 166
    NUMBER          shift and go to state 169
    CADENA          shift and go to state 170
    MINUS           shift and go to state 134
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    COMMA           reduce using rule 284 (empty_function -> .)
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

  ! SEMICOLON       [ reduce using rule 284 (empty_function -> .) ]

    expression                     shift and go to state 162
    params                         shift and go to state 164
    additive_expression            shift and go to state 127
    single_param                   shift and go to state 167
    term                           shift and go to state 133
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 171
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 64

    (153) class_declaration -> class . ID LBLOCK class_body RBLOCK
    (155) class_declaration -> class . ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> class . ID extends ID LBLOCK RBLOCK
    (158) class_extension -> class . ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> class . ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> class . ID extends Error LBLOCK RBLOCK
    (161) class_extension -> class . ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> class . ID extends TypeError LBLOCK RBLOCK

    ID              shift and go to state 175


state 65

    (154) class_declaration -> final . class ID LBLOCK class_body RBLOCK
    (156) class_declaration -> final . class ID implements ID LBLOCK class_body RBLOCK

    class           shift and go to state 176


state 66

    (163) create_obj_declaration -> new . ID LPAREN params RPAREN

    ID              shift and go to state 177


state 67

    (170) interface_declaration -> interface . ID LBLOCK interface_body RBLOCK

    ID              shift and go to state 178


state 68

    (175) trait_declaration -> trait . ID LBLOCK trait_body RBLOCK

    ID              shift and go to state 179


state 69

    (181) use_declaration -> use . ID SEMICOLON
    (182) use_declaration -> use . id_list LBLOCK use_body RBLOCK
    (187) id_list -> . id_list COMMA id_declaration
    (188) id_list -> . id_declaration
    (189) id_declaration -> . ID

    ID              shift and go to state 180

    id_list                        shift and go to state 181
    id_declaration                 shift and go to state 182

state 70

    (199) continue_declaration -> continue . SEMICOLON

    SEMICOLON       shift and go to state 183


state 71

    (201) goto_declaration -> goto . ID SEMICOLON

    ID              shift and go to state 184


state 72

    (283) declare_statement -> declare . LPAREN ID EQUAL expression RPAREN SEMICOLON

    LPAREN          shift and go to state 185


state 73

    (3) footer_declaration -> CLOSE_TAG .

    COMMENT         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_HASHTAG reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_MULTI   reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    empty           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include_once    reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    require         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    require_once    reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    namespace       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    int             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    float           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    double          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    global          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    const           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    print           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    echo            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    while           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    do              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    if              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    function        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    ID              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    return          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    class           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    final           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    new             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    interface       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    trait           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    use             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    continue        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    goto            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    declare         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    VARIABLE        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    for             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    foreach         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    switch          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    try             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    throw           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exit            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    private         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    protected       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    public          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    var             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    array           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    pow             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    POW             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    abs             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    cos             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    deg2rad         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    rad2deg         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    die             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exp             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    floor           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    isset           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    list            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    log             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    log10           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    max             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    min             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    rand            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    round           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    sin             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    sqrt            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    unset           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    eval            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CADENA          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    $end            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    RBLOCK          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endwhile        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endfor          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endforeach      reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    break           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endswitch       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    default         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    case            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)


state 74

    (213) for_loop -> for . LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> for . LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON

    LPAREN          shift and go to state 186


state 75

    (219) foreach_loop -> foreach . LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> foreach . LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON

    LPAREN          shift and go to state 187


state 76

    (221) switch_statement -> switch . LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> switch . LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON

    LPAREN          shift and go to state 188


state 77

    (231) try_statement -> try . LBLOCK statement_list RBLOCK catch_blocks

    LBLOCK          shift and go to state 189


state 78

    (241) throw_statement -> throw . create_obj_declaration SEMICOLON
    (242) throw_statement -> throw . new Exception LPAREN params RPAREN SEMICOLON
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN

    new             shift and go to state 191

    create_obj_declaration         shift and go to state 190

state 79

    (218) exit_statement -> exit . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 192


state 80

    (79) var_declaration2 -> Built_In_Declaration .

    SEMICOLON       reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)
    COMMA           reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)
    RPAREN          reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)
    COLON           reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)
    RBLOCK          reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)
    RBRACKET        reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)
    ASSIGN          reduce using rule 79 (var_declaration2 -> Built_In_Declaration .)


state 81

    (80) var_declaration2 -> Concatenar_Cadenas_declaration .

    SEMICOLON       reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    COMMA           reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RPAREN          reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    COLON           reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RBLOCK          reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RBRACKET        reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    ASSIGN          reduce using rule 80 (var_declaration2 -> Concatenar_Cadenas_declaration .)


state 82

    (195) visibility -> private .

    static          reduce using rule 195 (visibility -> private .)
    VARIABLE        reduce using rule 195 (visibility -> private .)
    function        reduce using rule 195 (visibility -> private .)
    array           reduce using rule 195 (visibility -> private .)
    pow             reduce using rule 195 (visibility -> private .)
    POW             reduce using rule 195 (visibility -> private .)
    abs             reduce using rule 195 (visibility -> private .)
    cos             reduce using rule 195 (visibility -> private .)
    deg2rad         reduce using rule 195 (visibility -> private .)
    rad2deg         reduce using rule 195 (visibility -> private .)
    die             reduce using rule 195 (visibility -> private .)
    exp             reduce using rule 195 (visibility -> private .)
    floor           reduce using rule 195 (visibility -> private .)
    isset           reduce using rule 195 (visibility -> private .)
    list            reduce using rule 195 (visibility -> private .)
    log             reduce using rule 195 (visibility -> private .)
    log10           reduce using rule 195 (visibility -> private .)
    max             reduce using rule 195 (visibility -> private .)
    min             reduce using rule 195 (visibility -> private .)
    rand            reduce using rule 195 (visibility -> private .)
    round           reduce using rule 195 (visibility -> private .)
    sin             reduce using rule 195 (visibility -> private .)
    sqrt            reduce using rule 195 (visibility -> private .)
    unset           reduce using rule 195 (visibility -> private .)
    eval            reduce using rule 195 (visibility -> private .)
    CADENA          reduce using rule 195 (visibility -> private .)
    private         reduce using rule 195 (visibility -> private .)
    protected       reduce using rule 195 (visibility -> private .)
    public          reduce using rule 195 (visibility -> private .)
    var             reduce using rule 195 (visibility -> private .)
    global          reduce using rule 195 (visibility -> private .)


state 83

    (196) visibility -> protected .

    static          reduce using rule 196 (visibility -> protected .)
    VARIABLE        reduce using rule 196 (visibility -> protected .)
    function        reduce using rule 196 (visibility -> protected .)
    array           reduce using rule 196 (visibility -> protected .)
    pow             reduce using rule 196 (visibility -> protected .)
    POW             reduce using rule 196 (visibility -> protected .)
    abs             reduce using rule 196 (visibility -> protected .)
    cos             reduce using rule 196 (visibility -> protected .)
    deg2rad         reduce using rule 196 (visibility -> protected .)
    rad2deg         reduce using rule 196 (visibility -> protected .)
    die             reduce using rule 196 (visibility -> protected .)
    exp             reduce using rule 196 (visibility -> protected .)
    floor           reduce using rule 196 (visibility -> protected .)
    isset           reduce using rule 196 (visibility -> protected .)
    list            reduce using rule 196 (visibility -> protected .)
    log             reduce using rule 196 (visibility -> protected .)
    log10           reduce using rule 196 (visibility -> protected .)
    max             reduce using rule 196 (visibility -> protected .)
    min             reduce using rule 196 (visibility -> protected .)
    rand            reduce using rule 196 (visibility -> protected .)
    round           reduce using rule 196 (visibility -> protected .)
    sin             reduce using rule 196 (visibility -> protected .)
    sqrt            reduce using rule 196 (visibility -> protected .)
    unset           reduce using rule 196 (visibility -> protected .)
    eval            reduce using rule 196 (visibility -> protected .)
    CADENA          reduce using rule 196 (visibility -> protected .)
    private         reduce using rule 196 (visibility -> protected .)
    protected       reduce using rule 196 (visibility -> protected .)
    public          reduce using rule 196 (visibility -> protected .)
    var             reduce using rule 196 (visibility -> protected .)
    global          reduce using rule 196 (visibility -> protected .)


state 84

    (197) visibility -> public .

    static          reduce using rule 197 (visibility -> public .)
    VARIABLE        reduce using rule 197 (visibility -> public .)
    function        reduce using rule 197 (visibility -> public .)
    array           reduce using rule 197 (visibility -> public .)
    pow             reduce using rule 197 (visibility -> public .)
    POW             reduce using rule 197 (visibility -> public .)
    abs             reduce using rule 197 (visibility -> public .)
    cos             reduce using rule 197 (visibility -> public .)
    deg2rad         reduce using rule 197 (visibility -> public .)
    rad2deg         reduce using rule 197 (visibility -> public .)
    die             reduce using rule 197 (visibility -> public .)
    exp             reduce using rule 197 (visibility -> public .)
    floor           reduce using rule 197 (visibility -> public .)
    isset           reduce using rule 197 (visibility -> public .)
    list            reduce using rule 197 (visibility -> public .)
    log             reduce using rule 197 (visibility -> public .)
    log10           reduce using rule 197 (visibility -> public .)
    max             reduce using rule 197 (visibility -> public .)
    min             reduce using rule 197 (visibility -> public .)
    rand            reduce using rule 197 (visibility -> public .)
    round           reduce using rule 197 (visibility -> public .)
    sin             reduce using rule 197 (visibility -> public .)
    sqrt            reduce using rule 197 (visibility -> public .)
    unset           reduce using rule 197 (visibility -> public .)
    eval            reduce using rule 197 (visibility -> public .)
    CADENA          reduce using rule 197 (visibility -> public .)
    private         reduce using rule 197 (visibility -> public .)
    protected       reduce using rule 197 (visibility -> public .)
    public          reduce using rule 197 (visibility -> public .)
    var             reduce using rule 197 (visibility -> public .)
    global          reduce using rule 197 (visibility -> public .)


state 85

    (198) visibility -> var .

    static          reduce using rule 198 (visibility -> var .)
    VARIABLE        reduce using rule 198 (visibility -> var .)
    function        reduce using rule 198 (visibility -> var .)
    array           reduce using rule 198 (visibility -> var .)
    pow             reduce using rule 198 (visibility -> var .)
    POW             reduce using rule 198 (visibility -> var .)
    abs             reduce using rule 198 (visibility -> var .)
    cos             reduce using rule 198 (visibility -> var .)
    deg2rad         reduce using rule 198 (visibility -> var .)
    rad2deg         reduce using rule 198 (visibility -> var .)
    die             reduce using rule 198 (visibility -> var .)
    exp             reduce using rule 198 (visibility -> var .)
    floor           reduce using rule 198 (visibility -> var .)
    isset           reduce using rule 198 (visibility -> var .)
    list            reduce using rule 198 (visibility -> var .)
    log             reduce using rule 198 (visibility -> var .)
    log10           reduce using rule 198 (visibility -> var .)
    max             reduce using rule 198 (visibility -> var .)
    min             reduce using rule 198 (visibility -> var .)
    rand            reduce using rule 198 (visibility -> var .)
    round           reduce using rule 198 (visibility -> var .)
    sin             reduce using rule 198 (visibility -> var .)
    sqrt            reduce using rule 198 (visibility -> var .)
    unset           reduce using rule 198 (visibility -> var .)
    eval            reduce using rule 198 (visibility -> var .)
    CADENA          reduce using rule 198 (visibility -> var .)
    private         reduce using rule 198 (visibility -> var .)
    protected       reduce using rule 198 (visibility -> var .)
    public          reduce using rule 198 (visibility -> var .)
    var             reduce using rule 198 (visibility -> var .)
    global          reduce using rule 198 (visibility -> var .)


state 86

    (247) Built_In_Declaration -> array . LPAREN params RPAREN

    LPAREN          shift and go to state 193


state 87

    (248) Built_In_Declaration -> pow . LPAREN params RPAREN

    LPAREN          shift and go to state 194


state 88

    (249) Built_In_Declaration -> POW . LPAREN params RPAREN

    LPAREN          shift and go to state 195


state 89

    (250) Built_In_Declaration -> abs . LPAREN params RPAREN

    LPAREN          shift and go to state 196


state 90

    (251) Built_In_Declaration -> cos . LPAREN params RPAREN

    LPAREN          shift and go to state 197


state 91

    (252) Built_In_Declaration -> deg2rad . LPAREN params RPAREN

    LPAREN          shift and go to state 198


state 92

    (253) Built_In_Declaration -> rad2deg . LPAREN params RPAREN

    LPAREN          shift and go to state 199


state 93

    (254) Built_In_Declaration -> die . LPAREN params RPAREN

    LPAREN          shift and go to state 200


state 94

    (255) Built_In_Declaration -> exp . LPAREN params RPAREN

    LPAREN          shift and go to state 201


state 95

    (256) Built_In_Declaration -> floor . LPAREN params RPAREN

    LPAREN          shift and go to state 202


state 96

    (257) Built_In_Declaration -> isset . LPAREN params RPAREN

    LPAREN          shift and go to state 203


state 97

    (258) Built_In_Declaration -> list . LPAREN params RPAREN

    LPAREN          shift and go to state 204


state 98

    (259) Built_In_Declaration -> log . LPAREN params RPAREN

    LPAREN          shift and go to state 205


state 99

    (260) Built_In_Declaration -> log10 . LPAREN params RPAREN

    LPAREN          shift and go to state 206


state 100

    (261) Built_In_Declaration -> max . LPAREN params RPAREN

    LPAREN          shift and go to state 207


state 101

    (262) Built_In_Declaration -> min . LPAREN params RPAREN

    LPAREN          shift and go to state 208


state 102

    (263) Built_In_Declaration -> rand . LPAREN params RPAREN

    LPAREN          shift and go to state 209


state 103

    (264) Built_In_Declaration -> round . LPAREN params RPAREN

    LPAREN          shift and go to state 210


state 104

    (265) Built_In_Declaration -> sin . LPAREN params RPAREN

    LPAREN          shift and go to state 211


state 105

    (266) Built_In_Declaration -> sqrt . LPAREN params RPAREN

    LPAREN          shift and go to state 212


state 106

    (267) Built_In_Declaration -> unset . LPAREN params RPAREN

    LPAREN          shift and go to state 213


state 107

    (268) Built_In_Declaration -> eval . LPAREN params RPAREN

    LPAREN          shift and go to state 214


state 108

    (5) declaration_list -> declaration_list declaration .

    COMMENT         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_HASHTAG reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_MULTI   reduce using rule 5 (declaration_list -> declaration_list declaration .)
    empty           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include_once    reduce using rule 5 (declaration_list -> declaration_list declaration .)
    require         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    require_once    reduce using rule 5 (declaration_list -> declaration_list declaration .)
    namespace       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    int             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    float           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    double          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    global          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    const           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    print           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    echo            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    while           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    do              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    if              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    function        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    return          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    class           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    final           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    new             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    interface       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    trait           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    use             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    continue        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    goto            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    declare         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    for             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    foreach         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    switch          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    try             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    throw           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exit            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    private         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    protected       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    public          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    var             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    array           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    pow             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    POW             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    abs             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    cos             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    deg2rad         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    rad2deg         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    die             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exp             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    floor           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    isset           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    list            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    log             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    log10           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    max             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    min             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    rand            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    round           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    sin             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    sqrt            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    unset           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    eval            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CADENA          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    RBLOCK          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endwhile        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endfor          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endforeach      reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 109

    (67) matrix_type -> data_type VARIABLE . LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON

    LBRACKET        shift and go to state 215


state 110

    (45) header_declaration -> include CADENA . SEMICOLON

    SEMICOLON       shift and go to state 216


state 111

    (270) Concatenar_Cadenas_declaration -> CADENA DOT . CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA DOT . VARIABLE

    CADENA          shift and go to state 217
    VARIABLE        shift and go to state 218


state 112

    (46) header_declaration -> include_once CADENA . SEMICOLON

    SEMICOLON       shift and go to state 219


state 113

    (47) header_declaration -> require CADENA . SEMICOLON

    SEMICOLON       shift and go to state 220


state 114

    (48) header_declaration -> require_once CADENA . SEMICOLON

    SEMICOLON       shift and go to state 221


state 115

    (49) namespace_declaration -> namespace ID . SEMICOLON

    SEMICOLON       shift and go to state 222


state 116

    (148) fun_call -> ID LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 223
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 117

    (200) label_declaration -> ID COLON .

    COMMENT         reduce using rule 200 (label_declaration -> ID COLON .)
    COMMENT_HASHTAG reduce using rule 200 (label_declaration -> ID COLON .)
    COMMENT_MULTI   reduce using rule 200 (label_declaration -> ID COLON .)
    empty           reduce using rule 200 (label_declaration -> ID COLON .)
    include         reduce using rule 200 (label_declaration -> ID COLON .)
    include_once    reduce using rule 200 (label_declaration -> ID COLON .)
    require         reduce using rule 200 (label_declaration -> ID COLON .)
    require_once    reduce using rule 200 (label_declaration -> ID COLON .)
    namespace       reduce using rule 200 (label_declaration -> ID COLON .)
    int             reduce using rule 200 (label_declaration -> ID COLON .)
    float           reduce using rule 200 (label_declaration -> ID COLON .)
    double          reduce using rule 200 (label_declaration -> ID COLON .)
    global          reduce using rule 200 (label_declaration -> ID COLON .)
    const           reduce using rule 200 (label_declaration -> ID COLON .)
    print           reduce using rule 200 (label_declaration -> ID COLON .)
    echo            reduce using rule 200 (label_declaration -> ID COLON .)
    while           reduce using rule 200 (label_declaration -> ID COLON .)
    do              reduce using rule 200 (label_declaration -> ID COLON .)
    if              reduce using rule 200 (label_declaration -> ID COLON .)
    function        reduce using rule 200 (label_declaration -> ID COLON .)
    ID              reduce using rule 200 (label_declaration -> ID COLON .)
    return          reduce using rule 200 (label_declaration -> ID COLON .)
    class           reduce using rule 200 (label_declaration -> ID COLON .)
    final           reduce using rule 200 (label_declaration -> ID COLON .)
    new             reduce using rule 200 (label_declaration -> ID COLON .)
    interface       reduce using rule 200 (label_declaration -> ID COLON .)
    trait           reduce using rule 200 (label_declaration -> ID COLON .)
    use             reduce using rule 200 (label_declaration -> ID COLON .)
    continue        reduce using rule 200 (label_declaration -> ID COLON .)
    goto            reduce using rule 200 (label_declaration -> ID COLON .)
    declare         reduce using rule 200 (label_declaration -> ID COLON .)
    VARIABLE        reduce using rule 200 (label_declaration -> ID COLON .)
    CLOSE_TAG       reduce using rule 200 (label_declaration -> ID COLON .)
    for             reduce using rule 200 (label_declaration -> ID COLON .)
    foreach         reduce using rule 200 (label_declaration -> ID COLON .)
    switch          reduce using rule 200 (label_declaration -> ID COLON .)
    try             reduce using rule 200 (label_declaration -> ID COLON .)
    throw           reduce using rule 200 (label_declaration -> ID COLON .)
    exit            reduce using rule 200 (label_declaration -> ID COLON .)
    private         reduce using rule 200 (label_declaration -> ID COLON .)
    protected       reduce using rule 200 (label_declaration -> ID COLON .)
    public          reduce using rule 200 (label_declaration -> ID COLON .)
    var             reduce using rule 200 (label_declaration -> ID COLON .)
    array           reduce using rule 200 (label_declaration -> ID COLON .)
    pow             reduce using rule 200 (label_declaration -> ID COLON .)
    POW             reduce using rule 200 (label_declaration -> ID COLON .)
    abs             reduce using rule 200 (label_declaration -> ID COLON .)
    cos             reduce using rule 200 (label_declaration -> ID COLON .)
    deg2rad         reduce using rule 200 (label_declaration -> ID COLON .)
    rad2deg         reduce using rule 200 (label_declaration -> ID COLON .)
    die             reduce using rule 200 (label_declaration -> ID COLON .)
    exp             reduce using rule 200 (label_declaration -> ID COLON .)
    floor           reduce using rule 200 (label_declaration -> ID COLON .)
    isset           reduce using rule 200 (label_declaration -> ID COLON .)
    list            reduce using rule 200 (label_declaration -> ID COLON .)
    log             reduce using rule 200 (label_declaration -> ID COLON .)
    log10           reduce using rule 200 (label_declaration -> ID COLON .)
    max             reduce using rule 200 (label_declaration -> ID COLON .)
    min             reduce using rule 200 (label_declaration -> ID COLON .)
    rand            reduce using rule 200 (label_declaration -> ID COLON .)
    round           reduce using rule 200 (label_declaration -> ID COLON .)
    sin             reduce using rule 200 (label_declaration -> ID COLON .)
    sqrt            reduce using rule 200 (label_declaration -> ID COLON .)
    unset           reduce using rule 200 (label_declaration -> ID COLON .)
    eval            reduce using rule 200 (label_declaration -> ID COLON .)
    CADENA          reduce using rule 200 (label_declaration -> ID COLON .)
    $end            reduce using rule 200 (label_declaration -> ID COLON .)
    RBLOCK          reduce using rule 200 (label_declaration -> ID COLON .)
    endwhile        reduce using rule 200 (label_declaration -> ID COLON .)
    endfor          reduce using rule 200 (label_declaration -> ID COLON .)
    endforeach      reduce using rule 200 (label_declaration -> ID COLON .)
    break           reduce using rule 200 (label_declaration -> ID COLON .)
    endswitch       reduce using rule 200 (label_declaration -> ID COLON .)
    default         reduce using rule 200 (label_declaration -> ID COLON .)
    case            reduce using rule 200 (label_declaration -> ID COLON .)


state 118

    (102) expression -> VARIABLE . instanceof ID
    (110) factor -> VARIABLE .

    instanceof      shift and go to state 226
    PLUSPLUS        reduce using rule 110 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    TIMES           reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 110 (factor -> VARIABLE .)
    MOD             reduce using rule 110 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 110 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 110 (factor -> VARIABLE .)
    NOT             reduce using rule 110 (factor -> VARIABLE .)
    or              reduce using rule 110 (factor -> VARIABLE .)
    and             reduce using rule 110 (factor -> VARIABLE .)
    xor             reduce using rule 110 (factor -> VARIABLE .)
    LESS            reduce using rule 110 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    GREATER         reduce using rule 110 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 110 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 110 (factor -> VARIABLE .)
    DISTINT         reduce using rule 110 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 110 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 110 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 110 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 110 (factor -> VARIABLE .)
    SR              reduce using rule 110 (factor -> VARIABLE .)
    SL              reduce using rule 110 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 110 (factor -> VARIABLE .)
    RPAREN          reduce using rule 110 (factor -> VARIABLE .)
    COMMA           reduce using rule 110 (factor -> VARIABLE .)
    COLON           reduce using rule 110 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 110 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 110 (factor -> VARIABLE .)
    ASSIGN          reduce using rule 110 (factor -> VARIABLE .)
    as              reduce using rule 110 (factor -> VARIABLE .)


state 119

    (190) match_declaration -> VARIABLE EQUAL . match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (70) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (71) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (72) var_declaration2 -> VARIABLE EQUAL . CADENA
    (73) var_declaration2 -> VARIABLE EQUAL . Built_In_Declaration
    (74) var_declaration2 -> VARIABLE EQUAL . expression
    (77) var_declaration2 -> VARIABLE EQUAL . ceil_expression
    (78) var_declaration2 -> VARIABLE EQUAL . clone_declaration
    (81) var_declaration2 -> VARIABLE EQUAL . ID LPAREN params RPAREN
    (85) var_declaration2 -> VARIABLE EQUAL . create_obj_declaration
    (86) var_declaration2 -> VARIABLE EQUAL . assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (281) ceil_expression -> . ceil LPAREN expression RPAREN
    (282) clone_declaration -> . clone expression
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (87) assignment_tail -> . COMMA var_declaration2
    (88) assignment_tail -> . LBRACKET params RBRACKET
    (89) assignment_tail -> . LBLOCK params RBLOCK
    (90) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (91) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (92) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    match           shift and go to state 228
    NUMBER          shift and go to state 230
    VARIABLE        shift and go to state 227
    CADENA          shift and go to state 231
    ID              shift and go to state 236
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    ceil            shift and go to state 155
    clone           shift and go to state 239
    new             shift and go to state 66
    COMMA           shift and go to state 240
    LBRACKET        shift and go to state 241
    LBLOCK          shift and go to state 229
    MINUS           shift and go to state 134
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    Built_In_Declaration           shift and go to state 232
    expression                     shift and go to state 233
    ceil_expression                shift and go to state 234
    clone_declaration              shift and go to state 235
    create_obj_declaration         shift and go to state 237
    assignment_tail                shift and go to state 238
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 120

    (112) factor -> LPAREN . expression RPAREN
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 242
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 121

    (69) var_declaration2 -> VARIABLE expression .

    SEMICOLON       reduce using rule 69 (var_declaration2 -> VARIABLE expression .)
    COMMA           reduce using rule 69 (var_declaration2 -> VARIABLE expression .)
    RPAREN          reduce using rule 69 (var_declaration2 -> VARIABLE expression .)
    COLON           reduce using rule 69 (var_declaration2 -> VARIABLE expression .)
    RBLOCK          reduce using rule 69 (var_declaration2 -> VARIABLE expression .)
    RBRACKET        reduce using rule 69 (var_declaration2 -> VARIABLE expression .)
    ASSIGN          reduce using rule 69 (var_declaration2 -> VARIABLE expression .)


state 122

    (109) factor -> NUMBER .

    PLUSPLUS        reduce using rule 109 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 109 (factor -> NUMBER .)
    PLUS            reduce using rule 109 (factor -> NUMBER .)
    MINUS           reduce using rule 109 (factor -> NUMBER .)
    TIMES           reduce using rule 109 (factor -> NUMBER .)
    DIVIDE          reduce using rule 109 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 109 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 109 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 109 (factor -> NUMBER .)
    MOD             reduce using rule 109 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 109 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 109 (factor -> NUMBER .)
    NOT             reduce using rule 109 (factor -> NUMBER .)
    or              reduce using rule 109 (factor -> NUMBER .)
    and             reduce using rule 109 (factor -> NUMBER .)
    xor             reduce using rule 109 (factor -> NUMBER .)
    LESS            reduce using rule 109 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 109 (factor -> NUMBER .)
    GREATER         reduce using rule 109 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 109 (factor -> NUMBER .)
    DEQUAL          reduce using rule 109 (factor -> NUMBER .)
    DISTINT         reduce using rule 109 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 109 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 109 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 109 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 109 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 109 (factor -> NUMBER .)
    SR              reduce using rule 109 (factor -> NUMBER .)
    SL              reduce using rule 109 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 109 (factor -> NUMBER .)
    RPAREN          reduce using rule 109 (factor -> NUMBER .)
    COMMA           reduce using rule 109 (factor -> NUMBER .)
    COLON           reduce using rule 109 (factor -> NUMBER .)
    RBLOCK          reduce using rule 109 (factor -> NUMBER .)
    RBRACKET        reduce using rule 109 (factor -> NUMBER .)
    ASSIGN          reduce using rule 109 (factor -> NUMBER .)
    as              reduce using rule 109 (factor -> NUMBER .)


state 123

    (75) var_declaration2 -> VARIABLE assignation . VARIABLE
    (76) var_declaration2 -> VARIABLE assignation . NUMBER

    VARIABLE        shift and go to state 243
    NUMBER          shift and go to state 244


state 124

    (82) var_declaration2 -> VARIABLE QUESTIONMARK . var_declaration2 COLON var_declaration2
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

    var_declaration2               shift and go to state 245
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 125

    (83) var_declaration2 -> VARIABLE OBJ_OPERATOR . ID EQUAL expression
    (84) var_declaration2 -> VARIABLE OBJ_OPERATOR . ID LPAREN params RPAREN

    ID              shift and go to state 246


state 126

    (269) Concatenar_Cadenas_declaration -> VARIABLE DOT . VARIABLE
    (272) Concatenar_Cadenas_declaration -> VARIABLE DOT . CADENA

    VARIABLE        shift and go to state 247
    CADENA          shift and go to state 248


state 127

    (97) expression -> additive_expression .
    (98) expression -> additive_expression . logical_op additive_expression
    (99) expression -> additive_expression . comp_op additive_expression
    (100) expression -> additive_expression . comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> additive_expression . bits_op additive_expression
    (133) logical_op -> . BOOL_OR
    (134) logical_op -> . BOOL_AND
    (135) logical_op -> . NOT
    (136) logical_op -> . or
    (137) logical_op -> . and
    (138) logical_op -> . xor
    (123) comp_op -> . LESS
    (124) comp_op -> . LESSEQUAL
    (125) comp_op -> . GREATER
    (126) comp_op -> . GREATEREQUAL
    (127) comp_op -> . DEQUAL
    (128) comp_op -> . DISTINT
    (129) comp_op -> . DIVEQUAL
    (130) comp_op -> . ISEQUAL
    (131) comp_op -> . ISIDENTICAL
    (132) comp_op -> . ISNOTIDENTICAL
    (273) bits_op -> . AMPERSANT
    (274) bits_op -> . SR
    (275) bits_op -> . SL

    SEMICOLON       reduce using rule 97 (expression -> additive_expression .)
    RPAREN          reduce using rule 97 (expression -> additive_expression .)
    COMMA           reduce using rule 97 (expression -> additive_expression .)
    COLON           reduce using rule 97 (expression -> additive_expression .)
    RBLOCK          reduce using rule 97 (expression -> additive_expression .)
    RBRACKET        reduce using rule 97 (expression -> additive_expression .)
    ASSIGN          reduce using rule 97 (expression -> additive_expression .)
    as              reduce using rule 97 (expression -> additive_expression .)
    BOOL_OR         shift and go to state 252
    BOOL_AND        shift and go to state 253
    NOT             shift and go to state 254
    or              shift and go to state 255
    and             shift and go to state 256
    xor             shift and go to state 257
    LESS            shift and go to state 258
    LESSEQUAL       shift and go to state 259
    GREATER         shift and go to state 260
    GREATEREQUAL    shift and go to state 261
    DEQUAL          shift and go to state 262
    DISTINT         shift and go to state 263
    DIVEQUAL        shift and go to state 264
    ISEQUAL         shift and go to state 265
    ISIDENTICAL     shift and go to state 266
    ISNOTIDENTICAL  shift and go to state 267
    AMPERSANT       shift and go to state 268
    SR              shift and go to state 269
    SL              shift and go to state 270

    logical_op                     shift and go to state 249
    comp_op                        shift and go to state 250
    bits_op                        shift and go to state 251

state 128

    (276) assignation -> ASSIGN .

    VARIABLE        reduce using rule 276 (assignation -> ASSIGN .)
    NUMBER          reduce using rule 276 (assignation -> ASSIGN .)


state 129

    (277) assignation -> SREQUAL .

    VARIABLE        reduce using rule 277 (assignation -> SREQUAL .)
    NUMBER          reduce using rule 277 (assignation -> SREQUAL .)


state 130

    (278) assignation -> SLEQUAL .

    VARIABLE        reduce using rule 278 (assignation -> SLEQUAL .)
    NUMBER          reduce using rule 278 (assignation -> SLEQUAL .)


state 131

    (279) assignation -> XOREQUAL .

    VARIABLE        reduce using rule 279 (assignation -> XOREQUAL .)
    NUMBER          reduce using rule 279 (assignation -> XOREQUAL .)


state 132

    (280) assignation -> ANDEQUAL .

    VARIABLE        reduce using rule 280 (assignation -> ANDEQUAL .)
    NUMBER          reduce using rule 280 (assignation -> ANDEQUAL .)


state 133

    (103) additive_expression -> term .
    (104) additive_expression -> term . math_op term
    (115) math_op -> . PLUS
    (116) math_op -> . MINUS
    (117) math_op -> . TIMES
    (118) math_op -> . DIVIDE
    (119) math_op -> . MULEQUAL
    (120) math_op -> . PLUSEQUAL
    (121) math_op -> . MINUSEQUAL
    (122) math_op -> . MOD

    BOOL_OR         reduce using rule 103 (additive_expression -> term .)
    BOOL_AND        reduce using rule 103 (additive_expression -> term .)
    NOT             reduce using rule 103 (additive_expression -> term .)
    or              reduce using rule 103 (additive_expression -> term .)
    and             reduce using rule 103 (additive_expression -> term .)
    xor             reduce using rule 103 (additive_expression -> term .)
    LESS            reduce using rule 103 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 103 (additive_expression -> term .)
    GREATER         reduce using rule 103 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 103 (additive_expression -> term .)
    DEQUAL          reduce using rule 103 (additive_expression -> term .)
    DISTINT         reduce using rule 103 (additive_expression -> term .)
    DIVEQUAL        reduce using rule 103 (additive_expression -> term .)
    ISEQUAL         reduce using rule 103 (additive_expression -> term .)
    ISIDENTICAL     reduce using rule 103 (additive_expression -> term .)
    ISNOTIDENTICAL  reduce using rule 103 (additive_expression -> term .)
    AMPERSANT       reduce using rule 103 (additive_expression -> term .)
    SR              reduce using rule 103 (additive_expression -> term .)
    SL              reduce using rule 103 (additive_expression -> term .)
    SEMICOLON       reduce using rule 103 (additive_expression -> term .)
    RPAREN          reduce using rule 103 (additive_expression -> term .)
    COMMA           reduce using rule 103 (additive_expression -> term .)
    COLON           reduce using rule 103 (additive_expression -> term .)
    RBLOCK          reduce using rule 103 (additive_expression -> term .)
    RBRACKET        reduce using rule 103 (additive_expression -> term .)
    ASSIGN          reduce using rule 103 (additive_expression -> term .)
    as              reduce using rule 103 (additive_expression -> term .)
    PLUS            shift and go to state 272
    MINUS           shift and go to state 273
    TIMES           shift and go to state 274
    DIVIDE          shift and go to state 275
    MULEQUAL        shift and go to state 276
    PLUSEQUAL       shift and go to state 277
    MINUSEQUAL      shift and go to state 278
    MOD             shift and go to state 279

    math_op                        shift and go to state 271

state 134

    (105) term -> MINUS . term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    term                           shift and go to state 280
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 135

    (106) term -> factor .
    (107) term -> factor . increment_decrement_op
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS

    PLUS            reduce using rule 106 (term -> factor .)
    MINUS           reduce using rule 106 (term -> factor .)
    TIMES           reduce using rule 106 (term -> factor .)
    DIVIDE          reduce using rule 106 (term -> factor .)
    MULEQUAL        reduce using rule 106 (term -> factor .)
    PLUSEQUAL       reduce using rule 106 (term -> factor .)
    MINUSEQUAL      reduce using rule 106 (term -> factor .)
    MOD             reduce using rule 106 (term -> factor .)
    BOOL_OR         reduce using rule 106 (term -> factor .)
    BOOL_AND        reduce using rule 106 (term -> factor .)
    NOT             reduce using rule 106 (term -> factor .)
    or              reduce using rule 106 (term -> factor .)
    and             reduce using rule 106 (term -> factor .)
    xor             reduce using rule 106 (term -> factor .)
    LESS            reduce using rule 106 (term -> factor .)
    LESSEQUAL       reduce using rule 106 (term -> factor .)
    GREATER         reduce using rule 106 (term -> factor .)
    GREATEREQUAL    reduce using rule 106 (term -> factor .)
    DEQUAL          reduce using rule 106 (term -> factor .)
    DISTINT         reduce using rule 106 (term -> factor .)
    DIVEQUAL        reduce using rule 106 (term -> factor .)
    ISEQUAL         reduce using rule 106 (term -> factor .)
    ISIDENTICAL     reduce using rule 106 (term -> factor .)
    ISNOTIDENTICAL  reduce using rule 106 (term -> factor .)
    AMPERSANT       reduce using rule 106 (term -> factor .)
    SR              reduce using rule 106 (term -> factor .)
    SL              reduce using rule 106 (term -> factor .)
    SEMICOLON       reduce using rule 106 (term -> factor .)
    RPAREN          reduce using rule 106 (term -> factor .)
    COMMA           reduce using rule 106 (term -> factor .)
    COLON           reduce using rule 106 (term -> factor .)
    RBLOCK          reduce using rule 106 (term -> factor .)
    RBRACKET        reduce using rule 106 (term -> factor .)
    ASSIGN          reduce using rule 106 (term -> factor .)
    as              reduce using rule 106 (term -> factor .)
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139

    increment_decrement_op         shift and go to state 282

state 136

    (108) term -> increment_decrement_op . factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (211) bool_type -> . true
    (212) bool_type -> . false

    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    true            shift and go to state 140
    false           shift and go to state 141

    factor                         shift and go to state 283
    bool_type                      shift and go to state 137

state 137

    (111) factor -> bool_type .

    PLUSPLUS        reduce using rule 111 (factor -> bool_type .)
    MINUSMINUS      reduce using rule 111 (factor -> bool_type .)
    PLUS            reduce using rule 111 (factor -> bool_type .)
    MINUS           reduce using rule 111 (factor -> bool_type .)
    TIMES           reduce using rule 111 (factor -> bool_type .)
    DIVIDE          reduce using rule 111 (factor -> bool_type .)
    MULEQUAL        reduce using rule 111 (factor -> bool_type .)
    PLUSEQUAL       reduce using rule 111 (factor -> bool_type .)
    MINUSEQUAL      reduce using rule 111 (factor -> bool_type .)
    MOD             reduce using rule 111 (factor -> bool_type .)
    BOOL_OR         reduce using rule 111 (factor -> bool_type .)
    BOOL_AND        reduce using rule 111 (factor -> bool_type .)
    NOT             reduce using rule 111 (factor -> bool_type .)
    or              reduce using rule 111 (factor -> bool_type .)
    and             reduce using rule 111 (factor -> bool_type .)
    xor             reduce using rule 111 (factor -> bool_type .)
    LESS            reduce using rule 111 (factor -> bool_type .)
    LESSEQUAL       reduce using rule 111 (factor -> bool_type .)
    GREATER         reduce using rule 111 (factor -> bool_type .)
    GREATEREQUAL    reduce using rule 111 (factor -> bool_type .)
    DEQUAL          reduce using rule 111 (factor -> bool_type .)
    DISTINT         reduce using rule 111 (factor -> bool_type .)
    DIVEQUAL        reduce using rule 111 (factor -> bool_type .)
    ISEQUAL         reduce using rule 111 (factor -> bool_type .)
    ISIDENTICAL     reduce using rule 111 (factor -> bool_type .)
    ISNOTIDENTICAL  reduce using rule 111 (factor -> bool_type .)
    AMPERSANT       reduce using rule 111 (factor -> bool_type .)
    SR              reduce using rule 111 (factor -> bool_type .)
    SL              reduce using rule 111 (factor -> bool_type .)
    SEMICOLON       reduce using rule 111 (factor -> bool_type .)
    RPAREN          reduce using rule 111 (factor -> bool_type .)
    COMMA           reduce using rule 111 (factor -> bool_type .)
    COLON           reduce using rule 111 (factor -> bool_type .)
    RBLOCK          reduce using rule 111 (factor -> bool_type .)
    RBRACKET        reduce using rule 111 (factor -> bool_type .)
    ASSIGN          reduce using rule 111 (factor -> bool_type .)
    as              reduce using rule 111 (factor -> bool_type .)


state 138

    (113) increment_decrement_op -> PLUSPLUS .

    NUMBER          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    VARIABLE        reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    LPAREN          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    true            reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    false           reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    PLUS            reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    MINUS           reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    TIMES           reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    DIVIDE          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    MULEQUAL        reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    PLUSEQUAL       reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    MINUSEQUAL      reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    MOD             reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    BOOL_OR         reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    BOOL_AND        reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    NOT             reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    or              reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    and             reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    xor             reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    LESS            reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    LESSEQUAL       reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    GREATER         reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    GREATEREQUAL    reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    DEQUAL          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    DISTINT         reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    DIVEQUAL        reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    ISEQUAL         reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    ISIDENTICAL     reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    ISNOTIDENTICAL  reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    AMPERSANT       reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    SR              reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    SL              reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    SEMICOLON       reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    RPAREN          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    COMMA           reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    COLON           reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    RBLOCK          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    RBRACKET        reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    ASSIGN          reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)
    as              reduce using rule 113 (increment_decrement_op -> PLUSPLUS .)


state 139

    (114) increment_decrement_op -> MINUSMINUS .

    NUMBER          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    VARIABLE        reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    LPAREN          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    true            reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    false           reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    PLUS            reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    MINUS           reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    TIMES           reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    DIVIDE          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    MULEQUAL        reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    PLUSEQUAL       reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    MINUSEQUAL      reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    MOD             reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    BOOL_OR         reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    BOOL_AND        reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    NOT             reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    or              reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    and             reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    xor             reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    LESS            reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    LESSEQUAL       reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    GREATER         reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    GREATEREQUAL    reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    DEQUAL          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    DISTINT         reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    DIVEQUAL        reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    ISEQUAL         reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    ISIDENTICAL     reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    ISNOTIDENTICAL  reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    AMPERSANT       reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    SR              reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    SL              reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    SEMICOLON       reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    RPAREN          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    COMMA           reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    COLON           reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    RBLOCK          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    RBRACKET        reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    ASSIGN          reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)
    as              reduce using rule 114 (increment_decrement_op -> MINUSMINUS .)


state 140

    (211) bool_type -> true .

    PLUSPLUS        reduce using rule 211 (bool_type -> true .)
    MINUSMINUS      reduce using rule 211 (bool_type -> true .)
    PLUS            reduce using rule 211 (bool_type -> true .)
    MINUS           reduce using rule 211 (bool_type -> true .)
    TIMES           reduce using rule 211 (bool_type -> true .)
    DIVIDE          reduce using rule 211 (bool_type -> true .)
    MULEQUAL        reduce using rule 211 (bool_type -> true .)
    PLUSEQUAL       reduce using rule 211 (bool_type -> true .)
    MINUSEQUAL      reduce using rule 211 (bool_type -> true .)
    MOD             reduce using rule 211 (bool_type -> true .)
    BOOL_OR         reduce using rule 211 (bool_type -> true .)
    BOOL_AND        reduce using rule 211 (bool_type -> true .)
    NOT             reduce using rule 211 (bool_type -> true .)
    or              reduce using rule 211 (bool_type -> true .)
    and             reduce using rule 211 (bool_type -> true .)
    xor             reduce using rule 211 (bool_type -> true .)
    LESS            reduce using rule 211 (bool_type -> true .)
    LESSEQUAL       reduce using rule 211 (bool_type -> true .)
    GREATER         reduce using rule 211 (bool_type -> true .)
    GREATEREQUAL    reduce using rule 211 (bool_type -> true .)
    DEQUAL          reduce using rule 211 (bool_type -> true .)
    DISTINT         reduce using rule 211 (bool_type -> true .)
    DIVEQUAL        reduce using rule 211 (bool_type -> true .)
    ISEQUAL         reduce using rule 211 (bool_type -> true .)
    ISIDENTICAL     reduce using rule 211 (bool_type -> true .)
    ISNOTIDENTICAL  reduce using rule 211 (bool_type -> true .)
    AMPERSANT       reduce using rule 211 (bool_type -> true .)
    SR              reduce using rule 211 (bool_type -> true .)
    SL              reduce using rule 211 (bool_type -> true .)
    SEMICOLON       reduce using rule 211 (bool_type -> true .)
    COMMA           reduce using rule 211 (bool_type -> true .)
    RPAREN          reduce using rule 211 (bool_type -> true .)
    COLON           reduce using rule 211 (bool_type -> true .)
    RBLOCK          reduce using rule 211 (bool_type -> true .)
    RBRACKET        reduce using rule 211 (bool_type -> true .)
    ASSIGN          reduce using rule 211 (bool_type -> true .)
    as              reduce using rule 211 (bool_type -> true .)


state 141

    (212) bool_type -> false .

    PLUSPLUS        reduce using rule 212 (bool_type -> false .)
    MINUSMINUS      reduce using rule 212 (bool_type -> false .)
    PLUS            reduce using rule 212 (bool_type -> false .)
    MINUS           reduce using rule 212 (bool_type -> false .)
    TIMES           reduce using rule 212 (bool_type -> false .)
    DIVIDE          reduce using rule 212 (bool_type -> false .)
    MULEQUAL        reduce using rule 212 (bool_type -> false .)
    PLUSEQUAL       reduce using rule 212 (bool_type -> false .)
    MINUSEQUAL      reduce using rule 212 (bool_type -> false .)
    MOD             reduce using rule 212 (bool_type -> false .)
    BOOL_OR         reduce using rule 212 (bool_type -> false .)
    BOOL_AND        reduce using rule 212 (bool_type -> false .)
    NOT             reduce using rule 212 (bool_type -> false .)
    or              reduce using rule 212 (bool_type -> false .)
    and             reduce using rule 212 (bool_type -> false .)
    xor             reduce using rule 212 (bool_type -> false .)
    LESS            reduce using rule 212 (bool_type -> false .)
    LESSEQUAL       reduce using rule 212 (bool_type -> false .)
    GREATER         reduce using rule 212 (bool_type -> false .)
    GREATEREQUAL    reduce using rule 212 (bool_type -> false .)
    DEQUAL          reduce using rule 212 (bool_type -> false .)
    DISTINT         reduce using rule 212 (bool_type -> false .)
    DIVEQUAL        reduce using rule 212 (bool_type -> false .)
    ISEQUAL         reduce using rule 212 (bool_type -> false .)
    ISIDENTICAL     reduce using rule 212 (bool_type -> false .)
    ISNOTIDENTICAL  reduce using rule 212 (bool_type -> false .)
    AMPERSANT       reduce using rule 212 (bool_type -> false .)
    SR              reduce using rule 212 (bool_type -> false .)
    SL              reduce using rule 212 (bool_type -> false .)
    SEMICOLON       reduce using rule 212 (bool_type -> false .)
    COMMA           reduce using rule 212 (bool_type -> false .)
    RPAREN          reduce using rule 212 (bool_type -> false .)
    COLON           reduce using rule 212 (bool_type -> false .)
    RBLOCK          reduce using rule 212 (bool_type -> false .)
    RBRACKET        reduce using rule 212 (bool_type -> false .)
    ASSIGN          reduce using rule 212 (bool_type -> false .)
    as              reduce using rule 212 (bool_type -> false .)


state 142

    (65) var_declaration -> var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    empty           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    include         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    include_once    reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    require         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    require_once    reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    namespace       reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    int             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    float           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    double          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    global          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    const           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    print           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    echo            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    while           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    do              reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    if              reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    function        reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    return          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    class           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    final           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    new             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    interface       reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    trait           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    use             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    continue        reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    goto            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    declare         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    for             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    foreach         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    switch          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    try             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    throw           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    exit            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    private         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    protected       reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    public          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    var             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    array           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    pow             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    POW             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    abs             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    cos             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    die             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    exp             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    floor           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    isset           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    list            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    log             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    log10           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    max             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    min             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    rand            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    round           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    sin             reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    unset           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    eval            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    $end            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    endfor          reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    break           reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    default         reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)
    case            reduce using rule 65 (var_declaration -> var_declaration2 SEMICOLON .)


state 143

    (66) var_declaration -> global var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 284


state 144

    (68) var_declaration2 -> VARIABLE .
    (69) var_declaration2 -> VARIABLE . expression
    (70) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (71) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (72) var_declaration2 -> VARIABLE . EQUAL CADENA
    (73) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (74) var_declaration2 -> VARIABLE . EQUAL expression
    (75) var_declaration2 -> VARIABLE . assignation VARIABLE
    (76) var_declaration2 -> VARIABLE . assignation NUMBER
    (77) var_declaration2 -> VARIABLE . EQUAL ceil_expression
    (78) var_declaration2 -> VARIABLE . EQUAL clone_declaration
    (81) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (86) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (269) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (276) assignation -> . ASSIGN
    (277) assignation -> . SREQUAL
    (278) assignation -> . SLEQUAL
    (279) assignation -> . XOREQUAL
    (280) assignation -> . ANDEQUAL
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

  ! shift/reduce conflict for ASSIGN resolved as shift
    SEMICOLON       reduce using rule 68 (var_declaration2 -> VARIABLE .)
    RPAREN          reduce using rule 68 (var_declaration2 -> VARIABLE .)
    COMMA           reduce using rule 68 (var_declaration2 -> VARIABLE .)
    COLON           reduce using rule 68 (var_declaration2 -> VARIABLE .)
    RBLOCK          reduce using rule 68 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 68 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 285
    QUESTIONMARK    shift and go to state 124
    OBJ_OPERATOR    shift and go to state 125
    DOT             shift and go to state 126
    VARIABLE        shift and go to state 118
    ASSIGN          shift and go to state 128
    SREQUAL         shift and go to state 129
    SLEQUAL         shift and go to state 130
    XOREQUAL        shift and go to state 131
    ANDEQUAL        shift and go to state 132
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

  ! ASSIGN          [ reduce using rule 68 (var_declaration2 -> VARIABLE .) ]

    expression                     shift and go to state 121
    assignation                    shift and go to state 123
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 145

    (50) constant_declaration -> const ID . EQUAL CADENA SEMICOLON
    (51) constant_declaration -> const ID . EQUAL NUMBER SEMICOLON

    EQUAL           shift and go to state 286


state 146

    (52) print_declaration -> print var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 287


state 147

    (53) print_declaration -> print LPAREN . var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> print LPAREN . NUMBER RPAREN SEMICOLON
    (55) print_declaration -> print LPAREN . CADENA RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 289
    CADENA          shift and go to state 290
    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    var_declaration2               shift and go to state 288
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 148

    (56) print_declaration -> print NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 291


state 149

    (57) print_declaration -> print CADENA . SEMICOLON
    (270) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       shift and go to state 292
    DOT             shift and go to state 111


state 150

    (58) echo_declaration -> echo var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 293


state 151

    (59) echo_declaration -> echo LPAREN . var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> echo LPAREN . NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> echo LPAREN . CADENA RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 295
    CADENA          shift and go to state 296
    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    var_declaration2               shift and go to state 294
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 152

    (62) echo_declaration -> echo NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 297


state 153

    (64) echo_declaration -> echo CADENA . SEMICOLON
    (270) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       shift and go to state 298
    DOT             shift and go to state 111


state 154

    (63) echo_declaration -> echo ceil_expression . SEMICOLON

    SEMICOLON       shift and go to state 299


state 155

    (281) ceil_expression -> ceil . LPAREN expression RPAREN

    LPAREN          shift and go to state 300


state 156

    (93) iteration_stmt -> while LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> while LPAREN . expression RPAREN COLON declaration_list endwhile SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 301
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 157

    (95) iteration_stmt -> do LBLOCK . declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 302
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 158

    (96) iteration_stmt -> do COLON . declaration_list endwhile SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    endwhile        reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 303
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 159

    (139) if_statement -> if LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 304
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 160

    (144) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    LPAREN          shift and go to state 305


state 161

    (146) fun_declaration -> visibility static . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility static . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    function        shift and go to state 306


state 162

    (149) return_statement -> return expression . SEMICOLON

    SEMICOLON       shift and go to state 307


state 163

    (151) return_statement -> return SEMICOLON .

    COMMENT         reduce using rule 151 (return_statement -> return SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 151 (return_statement -> return SEMICOLON .)
    COMMENT_MULTI   reduce using rule 151 (return_statement -> return SEMICOLON .)
    empty           reduce using rule 151 (return_statement -> return SEMICOLON .)
    include         reduce using rule 151 (return_statement -> return SEMICOLON .)
    include_once    reduce using rule 151 (return_statement -> return SEMICOLON .)
    require         reduce using rule 151 (return_statement -> return SEMICOLON .)
    require_once    reduce using rule 151 (return_statement -> return SEMICOLON .)
    namespace       reduce using rule 151 (return_statement -> return SEMICOLON .)
    int             reduce using rule 151 (return_statement -> return SEMICOLON .)
    float           reduce using rule 151 (return_statement -> return SEMICOLON .)
    double          reduce using rule 151 (return_statement -> return SEMICOLON .)
    global          reduce using rule 151 (return_statement -> return SEMICOLON .)
    const           reduce using rule 151 (return_statement -> return SEMICOLON .)
    print           reduce using rule 151 (return_statement -> return SEMICOLON .)
    echo            reduce using rule 151 (return_statement -> return SEMICOLON .)
    while           reduce using rule 151 (return_statement -> return SEMICOLON .)
    do              reduce using rule 151 (return_statement -> return SEMICOLON .)
    if              reduce using rule 151 (return_statement -> return SEMICOLON .)
    function        reduce using rule 151 (return_statement -> return SEMICOLON .)
    ID              reduce using rule 151 (return_statement -> return SEMICOLON .)
    return          reduce using rule 151 (return_statement -> return SEMICOLON .)
    class           reduce using rule 151 (return_statement -> return SEMICOLON .)
    final           reduce using rule 151 (return_statement -> return SEMICOLON .)
    new             reduce using rule 151 (return_statement -> return SEMICOLON .)
    interface       reduce using rule 151 (return_statement -> return SEMICOLON .)
    trait           reduce using rule 151 (return_statement -> return SEMICOLON .)
    use             reduce using rule 151 (return_statement -> return SEMICOLON .)
    continue        reduce using rule 151 (return_statement -> return SEMICOLON .)
    goto            reduce using rule 151 (return_statement -> return SEMICOLON .)
    declare         reduce using rule 151 (return_statement -> return SEMICOLON .)
    VARIABLE        reduce using rule 151 (return_statement -> return SEMICOLON .)
    CLOSE_TAG       reduce using rule 151 (return_statement -> return SEMICOLON .)
    for             reduce using rule 151 (return_statement -> return SEMICOLON .)
    foreach         reduce using rule 151 (return_statement -> return SEMICOLON .)
    switch          reduce using rule 151 (return_statement -> return SEMICOLON .)
    try             reduce using rule 151 (return_statement -> return SEMICOLON .)
    throw           reduce using rule 151 (return_statement -> return SEMICOLON .)
    exit            reduce using rule 151 (return_statement -> return SEMICOLON .)
    private         reduce using rule 151 (return_statement -> return SEMICOLON .)
    protected       reduce using rule 151 (return_statement -> return SEMICOLON .)
    public          reduce using rule 151 (return_statement -> return SEMICOLON .)
    var             reduce using rule 151 (return_statement -> return SEMICOLON .)
    array           reduce using rule 151 (return_statement -> return SEMICOLON .)
    pow             reduce using rule 151 (return_statement -> return SEMICOLON .)
    POW             reduce using rule 151 (return_statement -> return SEMICOLON .)
    abs             reduce using rule 151 (return_statement -> return SEMICOLON .)
    cos             reduce using rule 151 (return_statement -> return SEMICOLON .)
    deg2rad         reduce using rule 151 (return_statement -> return SEMICOLON .)
    rad2deg         reduce using rule 151 (return_statement -> return SEMICOLON .)
    die             reduce using rule 151 (return_statement -> return SEMICOLON .)
    exp             reduce using rule 151 (return_statement -> return SEMICOLON .)
    floor           reduce using rule 151 (return_statement -> return SEMICOLON .)
    isset           reduce using rule 151 (return_statement -> return SEMICOLON .)
    list            reduce using rule 151 (return_statement -> return SEMICOLON .)
    log             reduce using rule 151 (return_statement -> return SEMICOLON .)
    log10           reduce using rule 151 (return_statement -> return SEMICOLON .)
    max             reduce using rule 151 (return_statement -> return SEMICOLON .)
    min             reduce using rule 151 (return_statement -> return SEMICOLON .)
    rand            reduce using rule 151 (return_statement -> return SEMICOLON .)
    round           reduce using rule 151 (return_statement -> return SEMICOLON .)
    sin             reduce using rule 151 (return_statement -> return SEMICOLON .)
    sqrt            reduce using rule 151 (return_statement -> return SEMICOLON .)
    unset           reduce using rule 151 (return_statement -> return SEMICOLON .)
    eval            reduce using rule 151 (return_statement -> return SEMICOLON .)
    CADENA          reduce using rule 151 (return_statement -> return SEMICOLON .)
    $end            reduce using rule 151 (return_statement -> return SEMICOLON .)
    RBLOCK          reduce using rule 151 (return_statement -> return SEMICOLON .)
    endwhile        reduce using rule 151 (return_statement -> return SEMICOLON .)
    endfor          reduce using rule 151 (return_statement -> return SEMICOLON .)
    endforeach      reduce using rule 151 (return_statement -> return SEMICOLON .)
    break           reduce using rule 151 (return_statement -> return SEMICOLON .)
    endswitch       reduce using rule 151 (return_statement -> return SEMICOLON .)
    default         reduce using rule 151 (return_statement -> return SEMICOLON .)
    case            reduce using rule 151 (return_statement -> return SEMICOLON .)


state 164

    (150) return_statement -> return params . SEMICOLON
    (204) params -> params . COMMA single_param

    SEMICOLON       shift and go to state 308
    COMMA           shift and go to state 309


state 165

    (152) return_statement -> return ID . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 310


state 166

    (102) expression -> VARIABLE . instanceof ID
    (68) var_declaration2 -> VARIABLE .
    (69) var_declaration2 -> VARIABLE . expression
    (70) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (71) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (72) var_declaration2 -> VARIABLE . EQUAL CADENA
    (73) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (74) var_declaration2 -> VARIABLE . EQUAL expression
    (75) var_declaration2 -> VARIABLE . assignation VARIABLE
    (76) var_declaration2 -> VARIABLE . assignation NUMBER
    (77) var_declaration2 -> VARIABLE . EQUAL ceil_expression
    (78) var_declaration2 -> VARIABLE . EQUAL clone_declaration
    (81) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (86) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (110) factor -> VARIABLE .
    (269) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (276) assignation -> . ASSIGN
    (277) assignation -> . SREQUAL
    (278) assignation -> . SLEQUAL
    (279) assignation -> . XOREQUAL
    (280) assignation -> . ANDEQUAL
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (var_declaration2 -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (var_declaration2 -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    instanceof      shift and go to state 226
    SEMICOLON       reduce using rule 68 (var_declaration2 -> VARIABLE .)
    COMMA           reduce using rule 68 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 68 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 285
    QUESTIONMARK    shift and go to state 124
    OBJ_OPERATOR    shift and go to state 125
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    TIMES           reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 110 (factor -> VARIABLE .)
    MOD             reduce using rule 110 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 110 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 110 (factor -> VARIABLE .)
    NOT             reduce using rule 110 (factor -> VARIABLE .)
    or              reduce using rule 110 (factor -> VARIABLE .)
    and             reduce using rule 110 (factor -> VARIABLE .)
    xor             reduce using rule 110 (factor -> VARIABLE .)
    LESS            reduce using rule 110 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    GREATER         reduce using rule 110 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 110 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 110 (factor -> VARIABLE .)
    DISTINT         reduce using rule 110 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 110 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 110 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 110 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 110 (factor -> VARIABLE .)
    SR              reduce using rule 110 (factor -> VARIABLE .)
    SL              reduce using rule 110 (factor -> VARIABLE .)
    DOT             shift and go to state 126
    VARIABLE        shift and go to state 118
    ASSIGN          shift and go to state 128
    SREQUAL         shift and go to state 129
    SLEQUAL         shift and go to state 130
    XOREQUAL        shift and go to state 131
    ANDEQUAL        shift and go to state 132
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

  ! PLUSPLUS        [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! MINUSMINUS      [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 110 (factor -> VARIABLE .) ]

    expression                     shift and go to state 121
    assignation                    shift and go to state 123
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 167

    (203) params -> single_param .

    SEMICOLON       reduce using rule 203 (params -> single_param .)
    COMMA           reduce using rule 203 (params -> single_param .)
    RPAREN          reduce using rule 203 (params -> single_param .)
    RBLOCK          reduce using rule 203 (params -> single_param .)
    RBRACKET        reduce using rule 203 (params -> single_param .)
    COLON           reduce using rule 203 (params -> single_param .)
    ASSIGN          reduce using rule 203 (params -> single_param .)


state 168

    (205) single_param -> var_declaration2 .

    SEMICOLON       reduce using rule 205 (single_param -> var_declaration2 .)
    COMMA           reduce using rule 205 (single_param -> var_declaration2 .)
    RPAREN          reduce using rule 205 (single_param -> var_declaration2 .)
    RBLOCK          reduce using rule 205 (single_param -> var_declaration2 .)
    RBRACKET        reduce using rule 205 (single_param -> var_declaration2 .)
    COLON           reduce using rule 205 (single_param -> var_declaration2 .)
    ASSIGN          reduce using rule 205 (single_param -> var_declaration2 .)


state 169

    (206) single_param -> NUMBER .
    (109) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 109 (factor -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 109 (factor -> NUMBER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 109 (factor -> NUMBER .)
    RBRACKET        reduce using rule 206 (single_param -> NUMBER .)
    PLUSPLUS        reduce using rule 109 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 109 (factor -> NUMBER .)
    PLUS            reduce using rule 109 (factor -> NUMBER .)
    MINUS           reduce using rule 109 (factor -> NUMBER .)
    TIMES           reduce using rule 109 (factor -> NUMBER .)
    DIVIDE          reduce using rule 109 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 109 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 109 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 109 (factor -> NUMBER .)
    MOD             reduce using rule 109 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 109 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 109 (factor -> NUMBER .)
    NOT             reduce using rule 109 (factor -> NUMBER .)
    or              reduce using rule 109 (factor -> NUMBER .)
    and             reduce using rule 109 (factor -> NUMBER .)
    xor             reduce using rule 109 (factor -> NUMBER .)
    LESS            reduce using rule 109 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 109 (factor -> NUMBER .)
    GREATER         reduce using rule 109 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 109 (factor -> NUMBER .)
    DEQUAL          reduce using rule 109 (factor -> NUMBER .)
    DISTINT         reduce using rule 109 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 109 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 109 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 109 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 109 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 109 (factor -> NUMBER .)
    SR              reduce using rule 109 (factor -> NUMBER .)
    SL              reduce using rule 109 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 109 (factor -> NUMBER .)
    COMMA           reduce using rule 109 (factor -> NUMBER .)
    ASSIGN          reduce using rule 109 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 206 (single_param -> NUMBER .) ]
  ! COMMA           [ reduce using rule 206 (single_param -> NUMBER .) ]
  ! ASSIGN          [ reduce using rule 206 (single_param -> NUMBER .) ]


state 170

    (207) single_param -> CADENA .
    (270) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       reduce using rule 207 (single_param -> CADENA .)
    COMMA           reduce using rule 207 (single_param -> CADENA .)
    RPAREN          reduce using rule 207 (single_param -> CADENA .)
    RBLOCK          reduce using rule 207 (single_param -> CADENA .)
    RBRACKET        reduce using rule 207 (single_param -> CADENA .)
    COLON           reduce using rule 207 (single_param -> CADENA .)
    ASSIGN          reduce using rule 207 (single_param -> CADENA .)
    DOT             shift and go to state 111


state 171

    (208) single_param -> bool_type .
    (111) factor -> bool_type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 111 (factor -> bool_type .)
  ! reduce/reduce conflict for COMMA resolved using rule 111 (factor -> bool_type .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 111 (factor -> bool_type .)
    RBRACKET        reduce using rule 208 (single_param -> bool_type .)
    PLUSPLUS        reduce using rule 111 (factor -> bool_type .)
    MINUSMINUS      reduce using rule 111 (factor -> bool_type .)
    PLUS            reduce using rule 111 (factor -> bool_type .)
    MINUS           reduce using rule 111 (factor -> bool_type .)
    TIMES           reduce using rule 111 (factor -> bool_type .)
    DIVIDE          reduce using rule 111 (factor -> bool_type .)
    MULEQUAL        reduce using rule 111 (factor -> bool_type .)
    PLUSEQUAL       reduce using rule 111 (factor -> bool_type .)
    MINUSEQUAL      reduce using rule 111 (factor -> bool_type .)
    MOD             reduce using rule 111 (factor -> bool_type .)
    BOOL_OR         reduce using rule 111 (factor -> bool_type .)
    BOOL_AND        reduce using rule 111 (factor -> bool_type .)
    NOT             reduce using rule 111 (factor -> bool_type .)
    or              reduce using rule 111 (factor -> bool_type .)
    and             reduce using rule 111 (factor -> bool_type .)
    xor             reduce using rule 111 (factor -> bool_type .)
    LESS            reduce using rule 111 (factor -> bool_type .)
    LESSEQUAL       reduce using rule 111 (factor -> bool_type .)
    GREATER         reduce using rule 111 (factor -> bool_type .)
    GREATEREQUAL    reduce using rule 111 (factor -> bool_type .)
    DEQUAL          reduce using rule 111 (factor -> bool_type .)
    DISTINT         reduce using rule 111 (factor -> bool_type .)
    DIVEQUAL        reduce using rule 111 (factor -> bool_type .)
    ISEQUAL         reduce using rule 111 (factor -> bool_type .)
    ISIDENTICAL     reduce using rule 111 (factor -> bool_type .)
    ISNOTIDENTICAL  reduce using rule 111 (factor -> bool_type .)
    AMPERSANT       reduce using rule 111 (factor -> bool_type .)
    SR              reduce using rule 111 (factor -> bool_type .)
    SL              reduce using rule 111 (factor -> bool_type .)
    SEMICOLON       reduce using rule 111 (factor -> bool_type .)
    COMMA           reduce using rule 111 (factor -> bool_type .)
    ASSIGN          reduce using rule 111 (factor -> bool_type .)

  ! SEMICOLON       [ reduce using rule 208 (single_param -> bool_type .) ]
  ! COMMA           [ reduce using rule 208 (single_param -> bool_type .) ]
  ! ASSIGN          [ reduce using rule 208 (single_param -> bool_type .) ]


state 172

    (209) single_param -> callable_declaration .

    SEMICOLON       reduce using rule 209 (single_param -> callable_declaration .)
    COMMA           reduce using rule 209 (single_param -> callable_declaration .)
    RPAREN          reduce using rule 209 (single_param -> callable_declaration .)
    RBLOCK          reduce using rule 209 (single_param -> callable_declaration .)
    RBRACKET        reduce using rule 209 (single_param -> callable_declaration .)
    COLON           reduce using rule 209 (single_param -> callable_declaration .)
    ASSIGN          reduce using rule 209 (single_param -> callable_declaration .)


state 173

    (210) single_param -> empty_function .

    SEMICOLON       reduce using rule 210 (single_param -> empty_function .)
    COMMA           reduce using rule 210 (single_param -> empty_function .)
    RPAREN          reduce using rule 210 (single_param -> empty_function .)
    RBLOCK          reduce using rule 210 (single_param -> empty_function .)
    RBRACKET        reduce using rule 210 (single_param -> empty_function .)
    COLON           reduce using rule 210 (single_param -> empty_function .)
    ASSIGN          reduce using rule 210 (single_param -> empty_function .)


state 174

    (202) callable_declaration -> callable . VARIABLE

    VARIABLE        shift and go to state 311


state 175

    (153) class_declaration -> class ID . LBLOCK class_body RBLOCK
    (155) class_declaration -> class ID . implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> class ID . extends ID LBLOCK RBLOCK
    (158) class_extension -> class ID . extends Exception LBLOCK RBLOCK
    (159) class_extension -> class ID . extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> class ID . extends Error LBLOCK RBLOCK
    (161) class_extension -> class ID . extends ParseError LBLOCK RBLOCK
    (162) class_extension -> class ID . extends TypeError LBLOCK RBLOCK

    LBLOCK          shift and go to state 312
    implements      shift and go to state 313
    extends         shift and go to state 314


state 176

    (154) class_declaration -> final class . ID LBLOCK class_body RBLOCK
    (156) class_declaration -> final class . ID implements ID LBLOCK class_body RBLOCK

    ID              shift and go to state 315


state 177

    (163) create_obj_declaration -> new ID . LPAREN params RPAREN

    LPAREN          shift and go to state 316


state 178

    (170) interface_declaration -> interface ID . LBLOCK interface_body RBLOCK

    LBLOCK          shift and go to state 317


state 179

    (175) trait_declaration -> trait ID . LBLOCK trait_body RBLOCK

    LBLOCK          shift and go to state 318


state 180

    (181) use_declaration -> use ID . SEMICOLON
    (189) id_declaration -> ID .

    SEMICOLON       shift and go to state 319
    LBLOCK          reduce using rule 189 (id_declaration -> ID .)
    COMMA           reduce using rule 189 (id_declaration -> ID .)


state 181

    (182) use_declaration -> use id_list . LBLOCK use_body RBLOCK
    (187) id_list -> id_list . COMMA id_declaration

    LBLOCK          shift and go to state 320
    COMMA           shift and go to state 321


state 182

    (188) id_list -> id_declaration .

    LBLOCK          reduce using rule 188 (id_list -> id_declaration .)
    COMMA           reduce using rule 188 (id_list -> id_declaration .)


state 183

    (199) continue_declaration -> continue SEMICOLON .

    COMMENT         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    COMMENT_MULTI   reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    empty           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    include         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    include_once    reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    require         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    require_once    reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    namespace       reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    int             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    float           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    double          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    global          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    const           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    print           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    echo            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    while           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    do              reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    if              reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    function        reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    ID              reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    return          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    class           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    final           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    new             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    interface       reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    trait           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    use             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    continue        reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    goto            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    declare         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    VARIABLE        reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    CLOSE_TAG       reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    for             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    foreach         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    switch          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    try             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    throw           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    exit            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    private         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    protected       reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    public          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    var             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    array           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    pow             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    POW             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    abs             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    cos             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    deg2rad         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    rad2deg         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    die             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    exp             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    floor           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    isset           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    list            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    log             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    log10           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    max             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    min             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    rand            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    round           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    sin             reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    sqrt            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    unset           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    eval            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    CADENA          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    $end            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    RBLOCK          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    endwhile        reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    endfor          reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    endforeach      reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    break           reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    endswitch       reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    default         reduce using rule 199 (continue_declaration -> continue SEMICOLON .)
    case            reduce using rule 199 (continue_declaration -> continue SEMICOLON .)


state 184

    (201) goto_declaration -> goto ID . SEMICOLON

    SEMICOLON       shift and go to state 322


state 185

    (283) declare_statement -> declare LPAREN . ID EQUAL expression RPAREN SEMICOLON

    ID              shift and go to state 323


state 186

    (213) for_loop -> for LPAREN . for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> for LPAREN . for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (215) for_init -> . var_declaration2 SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

    for_init                       shift and go to state 324
    var_declaration2               shift and go to state 325
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 187

    (219) foreach_loop -> foreach LPAREN . expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> foreach LPAREN . expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 326
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 188

    (221) switch_statement -> switch LPAREN . expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> switch LPAREN . expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 327
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 189

    (231) try_statement -> try LBLOCK . statement_list RBLOCK catch_blocks
    (244) statement_list -> . declaration
    (245) statement_list -> . statement_list declaration
    (246) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (284) empty_function -> .
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    RBLOCK          reduce using rule 284 (empty_function -> .)
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    statement_list                 shift and go to state 328
    declaration                    shift and go to state 329
    empty_function                 shift and go to state 330
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 190

    (241) throw_statement -> throw create_obj_declaration . SEMICOLON

    SEMICOLON       shift and go to state 331


state 191

    (242) throw_statement -> throw new . Exception LPAREN params RPAREN SEMICOLON
    (163) create_obj_declaration -> new . ID LPAREN params RPAREN

    Exception       shift and go to state 332
    ID              shift and go to state 177


state 192

    (218) exit_statement -> exit LPAREN . expression RPAREN SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 333
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 193

    (247) Built_In_Declaration -> array LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 334
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 194

    (248) Built_In_Declaration -> pow LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 335
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 195

    (249) Built_In_Declaration -> POW LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 336
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 196

    (250) Built_In_Declaration -> abs LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 337
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 197

    (251) Built_In_Declaration -> cos LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 338
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 198

    (252) Built_In_Declaration -> deg2rad LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 339
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 199

    (253) Built_In_Declaration -> rad2deg LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 340
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 200

    (254) Built_In_Declaration -> die LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 341
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 201

    (255) Built_In_Declaration -> exp LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 342
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 202

    (256) Built_In_Declaration -> floor LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 343
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 203

    (257) Built_In_Declaration -> isset LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 344
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 204

    (258) Built_In_Declaration -> list LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 345
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 205

    (259) Built_In_Declaration -> log LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 346
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 206

    (260) Built_In_Declaration -> log10 LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 347
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 207

    (261) Built_In_Declaration -> max LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 348
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 208

    (262) Built_In_Declaration -> min LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 349
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 209

    (263) Built_In_Declaration -> rand LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 350
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 210

    (264) Built_In_Declaration -> round LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 351
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 211

    (265) Built_In_Declaration -> sin LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 352
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 212

    (266) Built_In_Declaration -> sqrt LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 353
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 213

    (267) Built_In_Declaration -> unset LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 354
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 214

    (268) Built_In_Declaration -> eval LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 355
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 215

    (67) matrix_type -> data_type VARIABLE LBRACKET . NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON

    NUMBER          shift and go to state 356


state 216

    (45) header_declaration -> include CADENA SEMICOLON .

    COMMENT         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    empty           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    include         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    include_once    reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    require         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    require_once    reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    namespace       reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    int             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    float           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    double          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    global          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    const           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    print           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    echo            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    while           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    do              reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    if              reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    function        reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    ID              reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    return          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    class           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    final           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    new             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    interface       reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    trait           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    use             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    continue        reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    goto            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    declare         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    VARIABLE        reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    for             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    foreach         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    switch          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    try             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    throw           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    exit            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    private         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    protected       reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    public          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    var             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    array           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    pow             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    POW             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    abs             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    cos             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    deg2rad         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    rad2deg         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    die             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    exp             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    floor           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    isset           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    list            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    log             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    log10           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    max             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    min             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    rand            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    round           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    sin             reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    sqrt            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    unset           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    eval            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    CADENA          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    $end            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    RBLOCK          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    endwhile        reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    endfor          reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    endforeach      reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    break           reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    endswitch       reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    default         reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)
    case            reduce using rule 45 (header_declaration -> include CADENA SEMICOLON .)


state 217

    (270) Concatenar_Cadenas_declaration -> CADENA DOT CADENA .

    SEMICOLON       reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    COMMA           reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RPAREN          reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    COLON           reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RBLOCK          reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RBRACKET        reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    ASSIGN          reduce using rule 270 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)


state 218

    (271) Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .

    SEMICOLON       reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    COMMA           reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RPAREN          reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    COLON           reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RBLOCK          reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RBRACKET        reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    ASSIGN          reduce using rule 271 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)


state 219

    (46) header_declaration -> include_once CADENA SEMICOLON .

    COMMENT         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    empty           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    include         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    include_once    reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    require         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    require_once    reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    namespace       reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    int             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    float           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    double          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    global          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    const           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    print           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    echo            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    while           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    do              reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    if              reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    function        reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    ID              reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    return          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    class           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    final           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    new             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    interface       reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    trait           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    use             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    continue        reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    goto            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    declare         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    VARIABLE        reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    for             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    foreach         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    switch          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    try             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    throw           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    exit            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    private         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    protected       reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    public          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    var             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    array           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    pow             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    POW             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    abs             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    cos             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    deg2rad         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    rad2deg         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    die             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    exp             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    floor           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    isset           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    list            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    log             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    log10           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    max             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    min             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    rand            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    round           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    sin             reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    sqrt            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    unset           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    eval            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    CADENA          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    $end            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    RBLOCK          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    endwhile        reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    endfor          reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    endforeach      reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    break           reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    endswitch       reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    default         reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)
    case            reduce using rule 46 (header_declaration -> include_once CADENA SEMICOLON .)


state 220

    (47) header_declaration -> require CADENA SEMICOLON .

    COMMENT         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    empty           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    include         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    include_once    reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    require         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    require_once    reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    namespace       reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    int             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    float           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    double          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    global          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    const           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    print           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    echo            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    while           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    do              reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    if              reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    function        reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    ID              reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    return          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    class           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    final           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    new             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    interface       reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    trait           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    use             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    continue        reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    goto            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    declare         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    VARIABLE        reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    for             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    foreach         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    switch          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    try             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    throw           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    exit            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    private         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    protected       reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    public          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    var             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    array           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    pow             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    POW             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    abs             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    cos             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    deg2rad         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    rad2deg         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    die             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    exp             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    floor           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    isset           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    list            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    log             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    log10           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    max             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    min             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    rand            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    round           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    sin             reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    sqrt            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    unset           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    eval            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    CADENA          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    $end            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    RBLOCK          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    endwhile        reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    endfor          reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    endforeach      reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    break           reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    endswitch       reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    default         reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)
    case            reduce using rule 47 (header_declaration -> require CADENA SEMICOLON .)


state 221

    (48) header_declaration -> require_once CADENA SEMICOLON .

    COMMENT         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    empty           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    include         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    include_once    reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    require         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    require_once    reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    namespace       reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    int             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    float           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    double          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    global          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    const           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    print           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    echo            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    while           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    do              reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    if              reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    function        reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    ID              reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    return          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    class           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    final           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    new             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    interface       reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    trait           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    use             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    continue        reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    goto            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    declare         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    VARIABLE        reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    for             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    foreach         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    switch          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    try             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    throw           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    exit            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    private         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    protected       reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    public          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    var             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    array           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    pow             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    POW             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    abs             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    cos             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    deg2rad         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    rad2deg         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    die             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    exp             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    floor           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    isset           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    list            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    log             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    log10           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    max             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    min             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    rand            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    round           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    sin             reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    sqrt            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    unset           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    eval            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    CADENA          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    $end            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    RBLOCK          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    endwhile        reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    endfor          reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    endforeach      reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    break           reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    endswitch       reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    default         reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)
    case            reduce using rule 48 (header_declaration -> require_once CADENA SEMICOLON .)


state 222

    (49) namespace_declaration -> namespace ID SEMICOLON .

    COMMENT         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    COMMENT_MULTI   reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    empty           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    include         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    include_once    reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    require         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    require_once    reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    namespace       reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    int             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    float           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    double          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    global          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    const           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    print           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    echo            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    while           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    do              reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    if              reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    function        reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    ID              reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    return          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    class           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    final           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    new             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    interface       reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    trait           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    use             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    continue        reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    goto            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    declare         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    VARIABLE        reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    for             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    foreach         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    switch          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    try             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    throw           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    exit            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    private         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    protected       reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    public          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    var             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    array           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    pow             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    POW             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    abs             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    cos             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    deg2rad         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    rad2deg         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    die             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    exp             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    floor           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    isset           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    list            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    log             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    log10           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    max             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    min             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    rand            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    round           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    sin             reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    sqrt            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    unset           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    eval            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    CADENA          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    $end            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    RBLOCK          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    endwhile        reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    endfor          reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    endforeach      reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    break           reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    endswitch       reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    default         reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)
    case            reduce using rule 49 (namespace_declaration -> namespace ID SEMICOLON .)


state 223

    (148) fun_call -> ID LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 357
    COMMA           shift and go to state 309


state 224

    (206) single_param -> NUMBER .

    RPAREN          reduce using rule 206 (single_param -> NUMBER .)
    COMMA           reduce using rule 206 (single_param -> NUMBER .)
    RBLOCK          reduce using rule 206 (single_param -> NUMBER .)
    RBRACKET        reduce using rule 206 (single_param -> NUMBER .)
    SEMICOLON       reduce using rule 206 (single_param -> NUMBER .)
    COLON           reduce using rule 206 (single_param -> NUMBER .)
    ASSIGN          reduce using rule 206 (single_param -> NUMBER .)


state 225

    (208) single_param -> bool_type .

    RPAREN          reduce using rule 208 (single_param -> bool_type .)
    COMMA           reduce using rule 208 (single_param -> bool_type .)
    RBLOCK          reduce using rule 208 (single_param -> bool_type .)
    RBRACKET        reduce using rule 208 (single_param -> bool_type .)
    SEMICOLON       reduce using rule 208 (single_param -> bool_type .)
    COLON           reduce using rule 208 (single_param -> bool_type .)
    ASSIGN          reduce using rule 208 (single_param -> bool_type .)


state 226

    (102) expression -> VARIABLE instanceof . ID

    ID              shift and go to state 358


state 227

    (71) var_declaration2 -> VARIABLE EQUAL VARIABLE .
    (102) expression -> VARIABLE . instanceof ID
    (90) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (91) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (92) assignment_tail -> VARIABLE . LBLOCK params RBLOCK
    (110) factor -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    SEMICOLON       reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COMMA           reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RPAREN          reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COLON           reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBLOCK          reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBRACKET        reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    ASSIGN          reduce using rule 71 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    instanceof      shift and go to state 226
    LBRACKET        shift and go to state 359
    LBLOCK          shift and go to state 360
    PLUSPLUS        reduce using rule 110 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    TIMES           reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 110 (factor -> VARIABLE .)
    MOD             reduce using rule 110 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 110 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 110 (factor -> VARIABLE .)
    NOT             reduce using rule 110 (factor -> VARIABLE .)
    or              reduce using rule 110 (factor -> VARIABLE .)
    and             reduce using rule 110 (factor -> VARIABLE .)
    xor             reduce using rule 110 (factor -> VARIABLE .)
    LESS            reduce using rule 110 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    GREATER         reduce using rule 110 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 110 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 110 (factor -> VARIABLE .)
    DISTINT         reduce using rule 110 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 110 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 110 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 110 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 110 (factor -> VARIABLE .)
    SR              reduce using rule 110 (factor -> VARIABLE .)
    SL              reduce using rule 110 (factor -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! RBLOCK          [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! ASSIGN          [ reduce using rule 110 (factor -> VARIABLE .) ]


state 228

    (190) match_declaration -> VARIABLE EQUAL match . LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON

    LPAREN          shift and go to state 361


state 229

    (89) assignment_tail -> LBLOCK . params RBLOCK
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RBLOCK          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 362
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 230

    (70) var_declaration2 -> VARIABLE EQUAL NUMBER .
    (109) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for ASSIGN resolved using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    SEMICOLON       reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COMMA           reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RPAREN          reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COLON           reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBLOCK          reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBRACKET        reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    ASSIGN          reduce using rule 70 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    PLUSPLUS        reduce using rule 109 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 109 (factor -> NUMBER .)
    PLUS            reduce using rule 109 (factor -> NUMBER .)
    MINUS           reduce using rule 109 (factor -> NUMBER .)
    TIMES           reduce using rule 109 (factor -> NUMBER .)
    DIVIDE          reduce using rule 109 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 109 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 109 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 109 (factor -> NUMBER .)
    MOD             reduce using rule 109 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 109 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 109 (factor -> NUMBER .)
    NOT             reduce using rule 109 (factor -> NUMBER .)
    or              reduce using rule 109 (factor -> NUMBER .)
    and             reduce using rule 109 (factor -> NUMBER .)
    xor             reduce using rule 109 (factor -> NUMBER .)
    LESS            reduce using rule 109 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 109 (factor -> NUMBER .)
    GREATER         reduce using rule 109 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 109 (factor -> NUMBER .)
    DEQUAL          reduce using rule 109 (factor -> NUMBER .)
    DISTINT         reduce using rule 109 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 109 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 109 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 109 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 109 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 109 (factor -> NUMBER .)
    SR              reduce using rule 109 (factor -> NUMBER .)
    SL              reduce using rule 109 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 109 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 109 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 109 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 109 (factor -> NUMBER .) ]
  ! RBLOCK          [ reduce using rule 109 (factor -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 109 (factor -> NUMBER .) ]
  ! ASSIGN          [ reduce using rule 109 (factor -> NUMBER .) ]


state 231

    (72) var_declaration2 -> VARIABLE EQUAL CADENA .

    SEMICOLON       reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COMMA           reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RPAREN          reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COLON           reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBLOCK          reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBRACKET        reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    ASSIGN          reduce using rule 72 (var_declaration2 -> VARIABLE EQUAL CADENA .)


state 232

    (73) var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .

    SEMICOLON       reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    COMMA           reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RPAREN          reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    COLON           reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RBLOCK          reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RBRACKET        reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    ASSIGN          reduce using rule 73 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)


state 233

    (74) var_declaration2 -> VARIABLE EQUAL expression .

    SEMICOLON       reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)
    COMMA           reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)
    RPAREN          reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)
    COLON           reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBLOCK          reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBRACKET        reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)
    ASSIGN          reduce using rule 74 (var_declaration2 -> VARIABLE EQUAL expression .)


state 234

    (77) var_declaration2 -> VARIABLE EQUAL ceil_expression .

    SEMICOLON       reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)
    COMMA           reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)
    RPAREN          reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)
    COLON           reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)
    RBLOCK          reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)
    RBRACKET        reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)
    ASSIGN          reduce using rule 77 (var_declaration2 -> VARIABLE EQUAL ceil_expression .)


state 235

    (78) var_declaration2 -> VARIABLE EQUAL clone_declaration .

    SEMICOLON       reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)
    COMMA           reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)
    RPAREN          reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)
    COLON           reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)
    RBLOCK          reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)
    RBRACKET        reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)
    ASSIGN          reduce using rule 78 (var_declaration2 -> VARIABLE EQUAL clone_declaration .)


state 236

    (81) var_declaration2 -> VARIABLE EQUAL ID . LPAREN params RPAREN

    LPAREN          shift and go to state 363


state 237

    (85) var_declaration2 -> VARIABLE EQUAL create_obj_declaration .

    SEMICOLON       reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    COMMA           reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RPAREN          reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    COLON           reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RBLOCK          reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RBRACKET        reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    ASSIGN          reduce using rule 85 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)


state 238

    (86) var_declaration2 -> VARIABLE EQUAL assignment_tail .

    SEMICOLON       reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COMMA           reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RPAREN          reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COLON           reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBLOCK          reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBRACKET        reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    ASSIGN          reduce using rule 86 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)


state 239

    (282) clone_declaration -> clone . expression
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 364
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 240

    (87) assignment_tail -> COMMA . var_declaration2
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

    var_declaration2               shift and go to state 365
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 241

    (88) assignment_tail -> LBRACKET . params RBRACKET
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RBRACKET        reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 366
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 242

    (112) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 367


state 243

    (75) var_declaration2 -> VARIABLE assignation VARIABLE .

    SEMICOLON       reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    COMMA           reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RPAREN          reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    COLON           reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RBLOCK          reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RBRACKET        reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    ASSIGN          reduce using rule 75 (var_declaration2 -> VARIABLE assignation VARIABLE .)


state 244

    (76) var_declaration2 -> VARIABLE assignation NUMBER .

    SEMICOLON       reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)
    COMMA           reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RPAREN          reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)
    COLON           reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RBLOCK          reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RBRACKET        reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)
    ASSIGN          reduce using rule 76 (var_declaration2 -> VARIABLE assignation NUMBER .)


state 245

    (82) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 . COLON var_declaration2

    COLON           shift and go to state 368


state 246

    (83) var_declaration2 -> VARIABLE OBJ_OPERATOR ID . EQUAL expression
    (84) var_declaration2 -> VARIABLE OBJ_OPERATOR ID . LPAREN params RPAREN

    EQUAL           shift and go to state 369
    LPAREN          shift and go to state 370


state 247

    (269) Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .

    SEMICOLON       reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    COMMA           reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RPAREN          reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    COLON           reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RBLOCK          reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RBRACKET        reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    ASSIGN          reduce using rule 269 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)


state 248

    (272) Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .

    SEMICOLON       reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    COMMA           reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RPAREN          reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    COLON           reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RBLOCK          reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RBRACKET        reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    ASSIGN          reduce using rule 272 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)


state 249

    (98) expression -> additive_expression logical_op . additive_expression
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    additive_expression            shift and go to state 371
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 250

    (99) expression -> additive_expression comp_op . additive_expression
    (100) expression -> additive_expression comp_op . additive_expression logical_op additive_expression comp_op additive_expression
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    additive_expression            shift and go to state 372
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 251

    (101) expression -> additive_expression bits_op . additive_expression
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    additive_expression            shift and go to state 373
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 252

    (133) logical_op -> BOOL_OR .

    MINUS           reduce using rule 133 (logical_op -> BOOL_OR .)
    NUMBER          reduce using rule 133 (logical_op -> BOOL_OR .)
    VARIABLE        reduce using rule 133 (logical_op -> BOOL_OR .)
    LPAREN          reduce using rule 133 (logical_op -> BOOL_OR .)
    PLUSPLUS        reduce using rule 133 (logical_op -> BOOL_OR .)
    MINUSMINUS      reduce using rule 133 (logical_op -> BOOL_OR .)
    true            reduce using rule 133 (logical_op -> BOOL_OR .)
    false           reduce using rule 133 (logical_op -> BOOL_OR .)


state 253

    (134) logical_op -> BOOL_AND .

    MINUS           reduce using rule 134 (logical_op -> BOOL_AND .)
    NUMBER          reduce using rule 134 (logical_op -> BOOL_AND .)
    VARIABLE        reduce using rule 134 (logical_op -> BOOL_AND .)
    LPAREN          reduce using rule 134 (logical_op -> BOOL_AND .)
    PLUSPLUS        reduce using rule 134 (logical_op -> BOOL_AND .)
    MINUSMINUS      reduce using rule 134 (logical_op -> BOOL_AND .)
    true            reduce using rule 134 (logical_op -> BOOL_AND .)
    false           reduce using rule 134 (logical_op -> BOOL_AND .)


state 254

    (135) logical_op -> NOT .

    MINUS           reduce using rule 135 (logical_op -> NOT .)
    NUMBER          reduce using rule 135 (logical_op -> NOT .)
    VARIABLE        reduce using rule 135 (logical_op -> NOT .)
    LPAREN          reduce using rule 135 (logical_op -> NOT .)
    PLUSPLUS        reduce using rule 135 (logical_op -> NOT .)
    MINUSMINUS      reduce using rule 135 (logical_op -> NOT .)
    true            reduce using rule 135 (logical_op -> NOT .)
    false           reduce using rule 135 (logical_op -> NOT .)


state 255

    (136) logical_op -> or .

    MINUS           reduce using rule 136 (logical_op -> or .)
    NUMBER          reduce using rule 136 (logical_op -> or .)
    VARIABLE        reduce using rule 136 (logical_op -> or .)
    LPAREN          reduce using rule 136 (logical_op -> or .)
    PLUSPLUS        reduce using rule 136 (logical_op -> or .)
    MINUSMINUS      reduce using rule 136 (logical_op -> or .)
    true            reduce using rule 136 (logical_op -> or .)
    false           reduce using rule 136 (logical_op -> or .)


state 256

    (137) logical_op -> and .

    MINUS           reduce using rule 137 (logical_op -> and .)
    NUMBER          reduce using rule 137 (logical_op -> and .)
    VARIABLE        reduce using rule 137 (logical_op -> and .)
    LPAREN          reduce using rule 137 (logical_op -> and .)
    PLUSPLUS        reduce using rule 137 (logical_op -> and .)
    MINUSMINUS      reduce using rule 137 (logical_op -> and .)
    true            reduce using rule 137 (logical_op -> and .)
    false           reduce using rule 137 (logical_op -> and .)


state 257

    (138) logical_op -> xor .

    MINUS           reduce using rule 138 (logical_op -> xor .)
    NUMBER          reduce using rule 138 (logical_op -> xor .)
    VARIABLE        reduce using rule 138 (logical_op -> xor .)
    LPAREN          reduce using rule 138 (logical_op -> xor .)
    PLUSPLUS        reduce using rule 138 (logical_op -> xor .)
    MINUSMINUS      reduce using rule 138 (logical_op -> xor .)
    true            reduce using rule 138 (logical_op -> xor .)
    false           reduce using rule 138 (logical_op -> xor .)


state 258

    (123) comp_op -> LESS .

    MINUS           reduce using rule 123 (comp_op -> LESS .)
    NUMBER          reduce using rule 123 (comp_op -> LESS .)
    VARIABLE        reduce using rule 123 (comp_op -> LESS .)
    LPAREN          reduce using rule 123 (comp_op -> LESS .)
    PLUSPLUS        reduce using rule 123 (comp_op -> LESS .)
    MINUSMINUS      reduce using rule 123 (comp_op -> LESS .)
    true            reduce using rule 123 (comp_op -> LESS .)
    false           reduce using rule 123 (comp_op -> LESS .)


state 259

    (124) comp_op -> LESSEQUAL .

    MINUS           reduce using rule 124 (comp_op -> LESSEQUAL .)
    NUMBER          reduce using rule 124 (comp_op -> LESSEQUAL .)
    VARIABLE        reduce using rule 124 (comp_op -> LESSEQUAL .)
    LPAREN          reduce using rule 124 (comp_op -> LESSEQUAL .)
    PLUSPLUS        reduce using rule 124 (comp_op -> LESSEQUAL .)
    MINUSMINUS      reduce using rule 124 (comp_op -> LESSEQUAL .)
    true            reduce using rule 124 (comp_op -> LESSEQUAL .)
    false           reduce using rule 124 (comp_op -> LESSEQUAL .)


state 260

    (125) comp_op -> GREATER .

    MINUS           reduce using rule 125 (comp_op -> GREATER .)
    NUMBER          reduce using rule 125 (comp_op -> GREATER .)
    VARIABLE        reduce using rule 125 (comp_op -> GREATER .)
    LPAREN          reduce using rule 125 (comp_op -> GREATER .)
    PLUSPLUS        reduce using rule 125 (comp_op -> GREATER .)
    MINUSMINUS      reduce using rule 125 (comp_op -> GREATER .)
    true            reduce using rule 125 (comp_op -> GREATER .)
    false           reduce using rule 125 (comp_op -> GREATER .)


state 261

    (126) comp_op -> GREATEREQUAL .

    MINUS           reduce using rule 126 (comp_op -> GREATEREQUAL .)
    NUMBER          reduce using rule 126 (comp_op -> GREATEREQUAL .)
    VARIABLE        reduce using rule 126 (comp_op -> GREATEREQUAL .)
    LPAREN          reduce using rule 126 (comp_op -> GREATEREQUAL .)
    PLUSPLUS        reduce using rule 126 (comp_op -> GREATEREQUAL .)
    MINUSMINUS      reduce using rule 126 (comp_op -> GREATEREQUAL .)
    true            reduce using rule 126 (comp_op -> GREATEREQUAL .)
    false           reduce using rule 126 (comp_op -> GREATEREQUAL .)


state 262

    (127) comp_op -> DEQUAL .

    MINUS           reduce using rule 127 (comp_op -> DEQUAL .)
    NUMBER          reduce using rule 127 (comp_op -> DEQUAL .)
    VARIABLE        reduce using rule 127 (comp_op -> DEQUAL .)
    LPAREN          reduce using rule 127 (comp_op -> DEQUAL .)
    PLUSPLUS        reduce using rule 127 (comp_op -> DEQUAL .)
    MINUSMINUS      reduce using rule 127 (comp_op -> DEQUAL .)
    true            reduce using rule 127 (comp_op -> DEQUAL .)
    false           reduce using rule 127 (comp_op -> DEQUAL .)


state 263

    (128) comp_op -> DISTINT .

    MINUS           reduce using rule 128 (comp_op -> DISTINT .)
    NUMBER          reduce using rule 128 (comp_op -> DISTINT .)
    VARIABLE        reduce using rule 128 (comp_op -> DISTINT .)
    LPAREN          reduce using rule 128 (comp_op -> DISTINT .)
    PLUSPLUS        reduce using rule 128 (comp_op -> DISTINT .)
    MINUSMINUS      reduce using rule 128 (comp_op -> DISTINT .)
    true            reduce using rule 128 (comp_op -> DISTINT .)
    false           reduce using rule 128 (comp_op -> DISTINT .)


state 264

    (129) comp_op -> DIVEQUAL .

    MINUS           reduce using rule 129 (comp_op -> DIVEQUAL .)
    NUMBER          reduce using rule 129 (comp_op -> DIVEQUAL .)
    VARIABLE        reduce using rule 129 (comp_op -> DIVEQUAL .)
    LPAREN          reduce using rule 129 (comp_op -> DIVEQUAL .)
    PLUSPLUS        reduce using rule 129 (comp_op -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 129 (comp_op -> DIVEQUAL .)
    true            reduce using rule 129 (comp_op -> DIVEQUAL .)
    false           reduce using rule 129 (comp_op -> DIVEQUAL .)


state 265

    (130) comp_op -> ISEQUAL .

    MINUS           reduce using rule 130 (comp_op -> ISEQUAL .)
    NUMBER          reduce using rule 130 (comp_op -> ISEQUAL .)
    VARIABLE        reduce using rule 130 (comp_op -> ISEQUAL .)
    LPAREN          reduce using rule 130 (comp_op -> ISEQUAL .)
    PLUSPLUS        reduce using rule 130 (comp_op -> ISEQUAL .)
    MINUSMINUS      reduce using rule 130 (comp_op -> ISEQUAL .)
    true            reduce using rule 130 (comp_op -> ISEQUAL .)
    false           reduce using rule 130 (comp_op -> ISEQUAL .)


state 266

    (131) comp_op -> ISIDENTICAL .

    MINUS           reduce using rule 131 (comp_op -> ISIDENTICAL .)
    NUMBER          reduce using rule 131 (comp_op -> ISIDENTICAL .)
    VARIABLE        reduce using rule 131 (comp_op -> ISIDENTICAL .)
    LPAREN          reduce using rule 131 (comp_op -> ISIDENTICAL .)
    PLUSPLUS        reduce using rule 131 (comp_op -> ISIDENTICAL .)
    MINUSMINUS      reduce using rule 131 (comp_op -> ISIDENTICAL .)
    true            reduce using rule 131 (comp_op -> ISIDENTICAL .)
    false           reduce using rule 131 (comp_op -> ISIDENTICAL .)


state 267

    (132) comp_op -> ISNOTIDENTICAL .

    MINUS           reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    NUMBER          reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    VARIABLE        reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    LPAREN          reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    PLUSPLUS        reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    MINUSMINUS      reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    true            reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)
    false           reduce using rule 132 (comp_op -> ISNOTIDENTICAL .)


state 268

    (273) bits_op -> AMPERSANT .

    MINUS           reduce using rule 273 (bits_op -> AMPERSANT .)
    NUMBER          reduce using rule 273 (bits_op -> AMPERSANT .)
    VARIABLE        reduce using rule 273 (bits_op -> AMPERSANT .)
    LPAREN          reduce using rule 273 (bits_op -> AMPERSANT .)
    PLUSPLUS        reduce using rule 273 (bits_op -> AMPERSANT .)
    MINUSMINUS      reduce using rule 273 (bits_op -> AMPERSANT .)
    true            reduce using rule 273 (bits_op -> AMPERSANT .)
    false           reduce using rule 273 (bits_op -> AMPERSANT .)


state 269

    (274) bits_op -> SR .

    MINUS           reduce using rule 274 (bits_op -> SR .)
    NUMBER          reduce using rule 274 (bits_op -> SR .)
    VARIABLE        reduce using rule 274 (bits_op -> SR .)
    LPAREN          reduce using rule 274 (bits_op -> SR .)
    PLUSPLUS        reduce using rule 274 (bits_op -> SR .)
    MINUSMINUS      reduce using rule 274 (bits_op -> SR .)
    true            reduce using rule 274 (bits_op -> SR .)
    false           reduce using rule 274 (bits_op -> SR .)


state 270

    (275) bits_op -> SL .

    MINUS           reduce using rule 275 (bits_op -> SL .)
    NUMBER          reduce using rule 275 (bits_op -> SL .)
    VARIABLE        reduce using rule 275 (bits_op -> SL .)
    LPAREN          reduce using rule 275 (bits_op -> SL .)
    PLUSPLUS        reduce using rule 275 (bits_op -> SL .)
    MINUSMINUS      reduce using rule 275 (bits_op -> SL .)
    true            reduce using rule 275 (bits_op -> SL .)
    false           reduce using rule 275 (bits_op -> SL .)


state 271

    (104) additive_expression -> term math_op . term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    term                           shift and go to state 374
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 272

    (115) math_op -> PLUS .

    MINUS           reduce using rule 115 (math_op -> PLUS .)
    NUMBER          reduce using rule 115 (math_op -> PLUS .)
    VARIABLE        reduce using rule 115 (math_op -> PLUS .)
    LPAREN          reduce using rule 115 (math_op -> PLUS .)
    PLUSPLUS        reduce using rule 115 (math_op -> PLUS .)
    MINUSMINUS      reduce using rule 115 (math_op -> PLUS .)
    true            reduce using rule 115 (math_op -> PLUS .)
    false           reduce using rule 115 (math_op -> PLUS .)


state 273

    (116) math_op -> MINUS .

    MINUS           reduce using rule 116 (math_op -> MINUS .)
    NUMBER          reduce using rule 116 (math_op -> MINUS .)
    VARIABLE        reduce using rule 116 (math_op -> MINUS .)
    LPAREN          reduce using rule 116 (math_op -> MINUS .)
    PLUSPLUS        reduce using rule 116 (math_op -> MINUS .)
    MINUSMINUS      reduce using rule 116 (math_op -> MINUS .)
    true            reduce using rule 116 (math_op -> MINUS .)
    false           reduce using rule 116 (math_op -> MINUS .)


state 274

    (117) math_op -> TIMES .

    MINUS           reduce using rule 117 (math_op -> TIMES .)
    NUMBER          reduce using rule 117 (math_op -> TIMES .)
    VARIABLE        reduce using rule 117 (math_op -> TIMES .)
    LPAREN          reduce using rule 117 (math_op -> TIMES .)
    PLUSPLUS        reduce using rule 117 (math_op -> TIMES .)
    MINUSMINUS      reduce using rule 117 (math_op -> TIMES .)
    true            reduce using rule 117 (math_op -> TIMES .)
    false           reduce using rule 117 (math_op -> TIMES .)


state 275

    (118) math_op -> DIVIDE .

    MINUS           reduce using rule 118 (math_op -> DIVIDE .)
    NUMBER          reduce using rule 118 (math_op -> DIVIDE .)
    VARIABLE        reduce using rule 118 (math_op -> DIVIDE .)
    LPAREN          reduce using rule 118 (math_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 118 (math_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 118 (math_op -> DIVIDE .)
    true            reduce using rule 118 (math_op -> DIVIDE .)
    false           reduce using rule 118 (math_op -> DIVIDE .)


state 276

    (119) math_op -> MULEQUAL .

    MINUS           reduce using rule 119 (math_op -> MULEQUAL .)
    NUMBER          reduce using rule 119 (math_op -> MULEQUAL .)
    VARIABLE        reduce using rule 119 (math_op -> MULEQUAL .)
    LPAREN          reduce using rule 119 (math_op -> MULEQUAL .)
    PLUSPLUS        reduce using rule 119 (math_op -> MULEQUAL .)
    MINUSMINUS      reduce using rule 119 (math_op -> MULEQUAL .)
    true            reduce using rule 119 (math_op -> MULEQUAL .)
    false           reduce using rule 119 (math_op -> MULEQUAL .)


state 277

    (120) math_op -> PLUSEQUAL .

    MINUS           reduce using rule 120 (math_op -> PLUSEQUAL .)
    NUMBER          reduce using rule 120 (math_op -> PLUSEQUAL .)
    VARIABLE        reduce using rule 120 (math_op -> PLUSEQUAL .)
    LPAREN          reduce using rule 120 (math_op -> PLUSEQUAL .)
    PLUSPLUS        reduce using rule 120 (math_op -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 120 (math_op -> PLUSEQUAL .)
    true            reduce using rule 120 (math_op -> PLUSEQUAL .)
    false           reduce using rule 120 (math_op -> PLUSEQUAL .)


state 278

    (121) math_op -> MINUSEQUAL .

    MINUS           reduce using rule 121 (math_op -> MINUSEQUAL .)
    NUMBER          reduce using rule 121 (math_op -> MINUSEQUAL .)
    VARIABLE        reduce using rule 121 (math_op -> MINUSEQUAL .)
    LPAREN          reduce using rule 121 (math_op -> MINUSEQUAL .)
    PLUSPLUS        reduce using rule 121 (math_op -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 121 (math_op -> MINUSEQUAL .)
    true            reduce using rule 121 (math_op -> MINUSEQUAL .)
    false           reduce using rule 121 (math_op -> MINUSEQUAL .)


state 279

    (122) math_op -> MOD .

    MINUS           reduce using rule 122 (math_op -> MOD .)
    NUMBER          reduce using rule 122 (math_op -> MOD .)
    VARIABLE        reduce using rule 122 (math_op -> MOD .)
    LPAREN          reduce using rule 122 (math_op -> MOD .)
    PLUSPLUS        reduce using rule 122 (math_op -> MOD .)
    MINUSMINUS      reduce using rule 122 (math_op -> MOD .)
    true            reduce using rule 122 (math_op -> MOD .)
    false           reduce using rule 122 (math_op -> MOD .)


state 280

    (105) term -> MINUS term .

    PLUS            reduce using rule 105 (term -> MINUS term .)
    MINUS           reduce using rule 105 (term -> MINUS term .)
    TIMES           reduce using rule 105 (term -> MINUS term .)
    DIVIDE          reduce using rule 105 (term -> MINUS term .)
    MULEQUAL        reduce using rule 105 (term -> MINUS term .)
    PLUSEQUAL       reduce using rule 105 (term -> MINUS term .)
    MINUSEQUAL      reduce using rule 105 (term -> MINUS term .)
    MOD             reduce using rule 105 (term -> MINUS term .)
    BOOL_OR         reduce using rule 105 (term -> MINUS term .)
    BOOL_AND        reduce using rule 105 (term -> MINUS term .)
    NOT             reduce using rule 105 (term -> MINUS term .)
    or              reduce using rule 105 (term -> MINUS term .)
    and             reduce using rule 105 (term -> MINUS term .)
    xor             reduce using rule 105 (term -> MINUS term .)
    LESS            reduce using rule 105 (term -> MINUS term .)
    LESSEQUAL       reduce using rule 105 (term -> MINUS term .)
    GREATER         reduce using rule 105 (term -> MINUS term .)
    GREATEREQUAL    reduce using rule 105 (term -> MINUS term .)
    DEQUAL          reduce using rule 105 (term -> MINUS term .)
    DISTINT         reduce using rule 105 (term -> MINUS term .)
    DIVEQUAL        reduce using rule 105 (term -> MINUS term .)
    ISEQUAL         reduce using rule 105 (term -> MINUS term .)
    ISIDENTICAL     reduce using rule 105 (term -> MINUS term .)
    ISNOTIDENTICAL  reduce using rule 105 (term -> MINUS term .)
    AMPERSANT       reduce using rule 105 (term -> MINUS term .)
    SR              reduce using rule 105 (term -> MINUS term .)
    SL              reduce using rule 105 (term -> MINUS term .)
    SEMICOLON       reduce using rule 105 (term -> MINUS term .)
    RPAREN          reduce using rule 105 (term -> MINUS term .)
    COMMA           reduce using rule 105 (term -> MINUS term .)
    COLON           reduce using rule 105 (term -> MINUS term .)
    RBLOCK          reduce using rule 105 (term -> MINUS term .)
    RBRACKET        reduce using rule 105 (term -> MINUS term .)
    ASSIGN          reduce using rule 105 (term -> MINUS term .)
    as              reduce using rule 105 (term -> MINUS term .)


state 281

    (110) factor -> VARIABLE .

    PLUSPLUS        reduce using rule 110 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    TIMES           reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 110 (factor -> VARIABLE .)
    MOD             reduce using rule 110 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 110 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 110 (factor -> VARIABLE .)
    NOT             reduce using rule 110 (factor -> VARIABLE .)
    or              reduce using rule 110 (factor -> VARIABLE .)
    and             reduce using rule 110 (factor -> VARIABLE .)
    xor             reduce using rule 110 (factor -> VARIABLE .)
    LESS            reduce using rule 110 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    GREATER         reduce using rule 110 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 110 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 110 (factor -> VARIABLE .)
    DISTINT         reduce using rule 110 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 110 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 110 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 110 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 110 (factor -> VARIABLE .)
    SR              reduce using rule 110 (factor -> VARIABLE .)
    SL              reduce using rule 110 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 110 (factor -> VARIABLE .)
    RPAREN          reduce using rule 110 (factor -> VARIABLE .)
    COMMA           reduce using rule 110 (factor -> VARIABLE .)
    COLON           reduce using rule 110 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 110 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 110 (factor -> VARIABLE .)
    ASSIGN          reduce using rule 110 (factor -> VARIABLE .)
    as              reduce using rule 110 (factor -> VARIABLE .)


state 282

    (107) term -> factor increment_decrement_op .

    PLUS            reduce using rule 107 (term -> factor increment_decrement_op .)
    MINUS           reduce using rule 107 (term -> factor increment_decrement_op .)
    TIMES           reduce using rule 107 (term -> factor increment_decrement_op .)
    DIVIDE          reduce using rule 107 (term -> factor increment_decrement_op .)
    MULEQUAL        reduce using rule 107 (term -> factor increment_decrement_op .)
    PLUSEQUAL       reduce using rule 107 (term -> factor increment_decrement_op .)
    MINUSEQUAL      reduce using rule 107 (term -> factor increment_decrement_op .)
    MOD             reduce using rule 107 (term -> factor increment_decrement_op .)
    BOOL_OR         reduce using rule 107 (term -> factor increment_decrement_op .)
    BOOL_AND        reduce using rule 107 (term -> factor increment_decrement_op .)
    NOT             reduce using rule 107 (term -> factor increment_decrement_op .)
    or              reduce using rule 107 (term -> factor increment_decrement_op .)
    and             reduce using rule 107 (term -> factor increment_decrement_op .)
    xor             reduce using rule 107 (term -> factor increment_decrement_op .)
    LESS            reduce using rule 107 (term -> factor increment_decrement_op .)
    LESSEQUAL       reduce using rule 107 (term -> factor increment_decrement_op .)
    GREATER         reduce using rule 107 (term -> factor increment_decrement_op .)
    GREATEREQUAL    reduce using rule 107 (term -> factor increment_decrement_op .)
    DEQUAL          reduce using rule 107 (term -> factor increment_decrement_op .)
    DISTINT         reduce using rule 107 (term -> factor increment_decrement_op .)
    DIVEQUAL        reduce using rule 107 (term -> factor increment_decrement_op .)
    ISEQUAL         reduce using rule 107 (term -> factor increment_decrement_op .)
    ISIDENTICAL     reduce using rule 107 (term -> factor increment_decrement_op .)
    ISNOTIDENTICAL  reduce using rule 107 (term -> factor increment_decrement_op .)
    AMPERSANT       reduce using rule 107 (term -> factor increment_decrement_op .)
    SR              reduce using rule 107 (term -> factor increment_decrement_op .)
    SL              reduce using rule 107 (term -> factor increment_decrement_op .)
    SEMICOLON       reduce using rule 107 (term -> factor increment_decrement_op .)
    RPAREN          reduce using rule 107 (term -> factor increment_decrement_op .)
    COMMA           reduce using rule 107 (term -> factor increment_decrement_op .)
    COLON           reduce using rule 107 (term -> factor increment_decrement_op .)
    RBLOCK          reduce using rule 107 (term -> factor increment_decrement_op .)
    RBRACKET        reduce using rule 107 (term -> factor increment_decrement_op .)
    ASSIGN          reduce using rule 107 (term -> factor increment_decrement_op .)
    as              reduce using rule 107 (term -> factor increment_decrement_op .)


state 283

    (108) term -> increment_decrement_op factor .

    PLUS            reduce using rule 108 (term -> increment_decrement_op factor .)
    MINUS           reduce using rule 108 (term -> increment_decrement_op factor .)
    TIMES           reduce using rule 108 (term -> increment_decrement_op factor .)
    DIVIDE          reduce using rule 108 (term -> increment_decrement_op factor .)
    MULEQUAL        reduce using rule 108 (term -> increment_decrement_op factor .)
    PLUSEQUAL       reduce using rule 108 (term -> increment_decrement_op factor .)
    MINUSEQUAL      reduce using rule 108 (term -> increment_decrement_op factor .)
    MOD             reduce using rule 108 (term -> increment_decrement_op factor .)
    BOOL_OR         reduce using rule 108 (term -> increment_decrement_op factor .)
    BOOL_AND        reduce using rule 108 (term -> increment_decrement_op factor .)
    NOT             reduce using rule 108 (term -> increment_decrement_op factor .)
    or              reduce using rule 108 (term -> increment_decrement_op factor .)
    and             reduce using rule 108 (term -> increment_decrement_op factor .)
    xor             reduce using rule 108 (term -> increment_decrement_op factor .)
    LESS            reduce using rule 108 (term -> increment_decrement_op factor .)
    LESSEQUAL       reduce using rule 108 (term -> increment_decrement_op factor .)
    GREATER         reduce using rule 108 (term -> increment_decrement_op factor .)
    GREATEREQUAL    reduce using rule 108 (term -> increment_decrement_op factor .)
    DEQUAL          reduce using rule 108 (term -> increment_decrement_op factor .)
    DISTINT         reduce using rule 108 (term -> increment_decrement_op factor .)
    DIVEQUAL        reduce using rule 108 (term -> increment_decrement_op factor .)
    ISEQUAL         reduce using rule 108 (term -> increment_decrement_op factor .)
    ISIDENTICAL     reduce using rule 108 (term -> increment_decrement_op factor .)
    ISNOTIDENTICAL  reduce using rule 108 (term -> increment_decrement_op factor .)
    AMPERSANT       reduce using rule 108 (term -> increment_decrement_op factor .)
    SR              reduce using rule 108 (term -> increment_decrement_op factor .)
    SL              reduce using rule 108 (term -> increment_decrement_op factor .)
    SEMICOLON       reduce using rule 108 (term -> increment_decrement_op factor .)
    RPAREN          reduce using rule 108 (term -> increment_decrement_op factor .)
    COMMA           reduce using rule 108 (term -> increment_decrement_op factor .)
    COLON           reduce using rule 108 (term -> increment_decrement_op factor .)
    RBLOCK          reduce using rule 108 (term -> increment_decrement_op factor .)
    RBRACKET        reduce using rule 108 (term -> increment_decrement_op factor .)
    ASSIGN          reduce using rule 108 (term -> increment_decrement_op factor .)
    as              reduce using rule 108 (term -> increment_decrement_op factor .)


state 284

    (66) var_declaration -> global var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    empty           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    include         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    include_once    reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    require         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    require_once    reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    namespace       reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    int             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    float           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    double          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    global          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    const           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    print           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    echo            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    while           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    do              reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    if              reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    function        reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    ID              reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    return          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    class           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    final           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    new             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    interface       reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    trait           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    use             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    continue        reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    goto            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    declare         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    for             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    foreach         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    switch          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    try             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    throw           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    exit            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    private         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    protected       reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    public          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    var             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    array           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    pow             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    POW             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    abs             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    cos             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    die             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    exp             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    floor           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    isset           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    list            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    log             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    log10           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    max             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    min             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    rand            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    round           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    sin             reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    unset           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    eval            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    $end            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    endfor          reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    break           reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    default         reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)
    case            reduce using rule 66 (var_declaration -> global var_declaration2 SEMICOLON .)


state 285

    (70) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (71) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (72) var_declaration2 -> VARIABLE EQUAL . CADENA
    (73) var_declaration2 -> VARIABLE EQUAL . Built_In_Declaration
    (74) var_declaration2 -> VARIABLE EQUAL . expression
    (77) var_declaration2 -> VARIABLE EQUAL . ceil_expression
    (78) var_declaration2 -> VARIABLE EQUAL . clone_declaration
    (81) var_declaration2 -> VARIABLE EQUAL . ID LPAREN params RPAREN
    (85) var_declaration2 -> VARIABLE EQUAL . create_obj_declaration
    (86) var_declaration2 -> VARIABLE EQUAL . assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (281) ceil_expression -> . ceil LPAREN expression RPAREN
    (282) clone_declaration -> . clone expression
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (87) assignment_tail -> . COMMA var_declaration2
    (88) assignment_tail -> . LBRACKET params RBRACKET
    (89) assignment_tail -> . LBLOCK params RBLOCK
    (90) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (91) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (92) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    NUMBER          shift and go to state 230
    VARIABLE        shift and go to state 227
    CADENA          shift and go to state 231
    ID              shift and go to state 236
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    ceil            shift and go to state 155
    clone           shift and go to state 239
    new             shift and go to state 66
    COMMA           shift and go to state 240
    LBRACKET        shift and go to state 241
    LBLOCK          shift and go to state 229
    MINUS           shift and go to state 134
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    Built_In_Declaration           shift and go to state 232
    expression                     shift and go to state 233
    ceil_expression                shift and go to state 234
    clone_declaration              shift and go to state 235
    create_obj_declaration         shift and go to state 237
    assignment_tail                shift and go to state 238
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 286

    (50) constant_declaration -> const ID EQUAL . CADENA SEMICOLON
    (51) constant_declaration -> const ID EQUAL . NUMBER SEMICOLON

    CADENA          shift and go to state 375
    NUMBER          shift and go to state 376


state 287

    (52) print_declaration -> print var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    empty           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    include         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    include_once    reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    require         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    require_once    reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    namespace       reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    int             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    float           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    double          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    global          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    const           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    print           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    echo            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    while           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    do              reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    if              reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    function        reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    ID              reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    return          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    class           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    final           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    new             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    interface       reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    trait           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    use             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    continue        reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    goto            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    declare         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    for             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    foreach         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    switch          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    try             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    throw           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    exit            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    private         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    protected       reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    public          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    var             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    array           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    pow             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    POW             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    abs             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    cos             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    die             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    exp             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    floor           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    isset           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    list            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    log             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    log10           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    max             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    min             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    rand            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    round           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    sin             reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    unset           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    eval            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    $end            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    endfor          reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    break           reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    default         reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)
    case            reduce using rule 52 (print_declaration -> print var_declaration2 SEMICOLON .)


state 288

    (53) print_declaration -> print LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 377


state 289

    (54) print_declaration -> print LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 378


state 290

    (55) print_declaration -> print LPAREN CADENA . RPAREN SEMICOLON
    (270) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    RPAREN          shift and go to state 379
    DOT             shift and go to state 111


state 291

    (56) print_declaration -> print NUMBER SEMICOLON .

    COMMENT         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    empty           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    include         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    include_once    reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    require         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    require_once    reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    namespace       reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    int             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    float           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    double          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    global          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    const           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    print           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    echo            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    while           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    do              reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    if              reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    function        reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    ID              reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    return          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    class           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    final           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    new             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    interface       reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    trait           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    use             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    continue        reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    goto            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    declare         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    for             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    foreach         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    switch          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    try             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    throw           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    exit            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    private         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    protected       reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    public          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    var             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    array           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    pow             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    POW             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    abs             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    cos             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    deg2rad         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    rad2deg         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    die             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    exp             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    floor           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    isset           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    list            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    log             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    log10           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    max             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    min             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    rand            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    round           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    sin             reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    sqrt            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    unset           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    eval            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    CADENA          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    $end            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    endwhile        reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    endfor          reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    endforeach      reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    break           reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    endswitch       reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    default         reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)
    case            reduce using rule 56 (print_declaration -> print NUMBER SEMICOLON .)


state 292

    (57) print_declaration -> print CADENA SEMICOLON .

    COMMENT         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    empty           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    include         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    include_once    reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    require         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    require_once    reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    namespace       reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    int             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    float           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    double          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    global          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    const           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    print           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    echo            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    while           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    do              reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    if              reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    function        reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    ID              reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    return          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    class           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    final           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    new             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    interface       reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    trait           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    use             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    continue        reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    goto            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    declare         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    VARIABLE        reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    for             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    foreach         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    switch          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    try             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    throw           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    exit            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    private         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    protected       reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    public          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    var             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    array           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    pow             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    POW             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    abs             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    cos             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    deg2rad         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    rad2deg         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    die             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    exp             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    floor           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    isset           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    list            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    log             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    log10           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    max             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    min             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    rand            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    round           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    sin             reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    sqrt            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    unset           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    eval            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    CADENA          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    $end            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    RBLOCK          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    endwhile        reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    endfor          reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    endforeach      reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    break           reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    endswitch       reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    default         reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)
    case            reduce using rule 57 (print_declaration -> print CADENA SEMICOLON .)


state 293

    (58) echo_declaration -> echo var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    empty           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include_once    reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    require         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    require_once    reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    namespace       reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    int             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    float           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    double          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    global          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    const           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    print           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    echo            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    while           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    do              reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    if              reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    function        reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    ID              reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    return          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    class           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    final           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    new             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    interface       reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    trait           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    use             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    continue        reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    goto            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    declare         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    for             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    foreach         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    switch          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    try             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    throw           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exit            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    private         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    protected       reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    public          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    var             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    array           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    pow             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    POW             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    abs             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    cos             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    die             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exp             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    floor           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    isset           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    list            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    log             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    log10           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    max             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    min             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    rand            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    round           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    sin             reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    unset           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    eval            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    $end            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endfor          reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    break           reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    default         reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    case            reduce using rule 58 (echo_declaration -> echo var_declaration2 SEMICOLON .)


state 294

    (59) echo_declaration -> echo LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 380


state 295

    (60) echo_declaration -> echo LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 381


state 296

    (61) echo_declaration -> echo LPAREN CADENA . RPAREN SEMICOLON
    (270) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (271) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    RPAREN          shift and go to state 382
    DOT             shift and go to state 111


state 297

    (62) echo_declaration -> echo NUMBER SEMICOLON .

    COMMENT         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    empty           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    include         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    include_once    reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    require         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    require_once    reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    namespace       reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    int             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    float           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    double          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    global          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    const           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    print           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    echo            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    while           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    do              reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    if              reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    function        reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    ID              reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    return          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    class           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    final           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    new             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    interface       reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    trait           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    use             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    continue        reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    goto            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    declare         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    for             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    foreach         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    switch          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    try             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    throw           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    exit            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    private         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    protected       reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    public          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    var             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    array           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    pow             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    POW             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    abs             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    cos             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    deg2rad         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    rad2deg         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    die             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    exp             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    floor           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    isset           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    list            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    log             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    log10           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    max             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    min             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    rand            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    round           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    sin             reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    sqrt            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    unset           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    eval            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    CADENA          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    $end            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    endwhile        reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    endfor          reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    endforeach      reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    break           reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    endswitch       reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    default         reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)
    case            reduce using rule 62 (echo_declaration -> echo NUMBER SEMICOLON .)


state 298

    (64) echo_declaration -> echo CADENA SEMICOLON .

    COMMENT         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    empty           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    include         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    include_once    reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    require         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    require_once    reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    namespace       reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    int             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    float           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    double          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    global          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    const           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    print           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    echo            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    while           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    do              reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    if              reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    function        reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    ID              reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    return          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    class           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    final           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    new             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    interface       reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    trait           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    use             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    continue        reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    goto            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    declare         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    VARIABLE        reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    for             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    foreach         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    switch          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    try             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    throw           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    exit            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    private         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    protected       reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    public          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    var             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    array           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    pow             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    POW             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    abs             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    cos             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    deg2rad         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    rad2deg         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    die             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    exp             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    floor           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    isset           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    list            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    log             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    log10           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    max             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    min             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    rand            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    round           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    sin             reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    sqrt            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    unset           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    eval            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    CADENA          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    $end            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    RBLOCK          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    endwhile        reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    endfor          reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    endforeach      reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    break           reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    endswitch       reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    default         reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)
    case            reduce using rule 64 (echo_declaration -> echo CADENA SEMICOLON .)


state 299

    (63) echo_declaration -> echo ceil_expression SEMICOLON .

    COMMENT         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    COMMENT_MULTI   reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    empty           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    include         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    include_once    reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    require         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    require_once    reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    namespace       reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    int             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    float           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    double          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    global          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    const           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    print           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    echo            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    while           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    do              reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    if              reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    function        reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    ID              reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    return          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    class           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    final           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    new             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    interface       reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    trait           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    use             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    continue        reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    goto            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    declare         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    VARIABLE        reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    for             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    foreach         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    switch          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    try             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    throw           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    exit            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    private         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    protected       reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    public          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    var             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    array           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    pow             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    POW             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    abs             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    cos             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    deg2rad         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    rad2deg         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    die             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    exp             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    floor           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    isset           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    list            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    log             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    log10           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    max             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    min             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    rand            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    round           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    sin             reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    sqrt            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    unset           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    eval            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    CADENA          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    $end            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    RBLOCK          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    endwhile        reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    endfor          reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    endforeach      reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    break           reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    endswitch       reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    default         reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)
    case            reduce using rule 63 (echo_declaration -> echo ceil_expression SEMICOLON .)


state 300

    (281) ceil_expression -> ceil LPAREN . expression RPAREN
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 383
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 301

    (93) iteration_stmt -> while LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> while LPAREN expression . RPAREN COLON declaration_list endwhile SEMICOLON

    RPAREN          shift and go to state 384


state 302

    (95) iteration_stmt -> do LBLOCK declaration_list . RBLOCK while LPAREN expression RPAREN SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 385
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 303

    (96) iteration_stmt -> do COLON declaration_list . endwhile SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for endwhile resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    endwhile        shift and go to state 386
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! endwhile        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 304

    (139) if_statement -> if LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 387


state 305

    (144) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 388
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 306

    (146) fun_declaration -> visibility static function . ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility static function . ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    ID              shift and go to state 389


state 307

    (149) return_statement -> return expression SEMICOLON .

    COMMENT         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    COMMENT_MULTI   reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    empty           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    include         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    include_once    reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    require         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    require_once    reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    namespace       reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    int             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    float           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    double          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    global          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    const           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    print           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    echo            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    while           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    do              reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    if              reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    function        reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    ID              reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    return          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    class           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    final           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    new             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    interface       reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    trait           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    use             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    continue        reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    goto            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    declare         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    VARIABLE        reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    for             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    foreach         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    switch          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    try             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    throw           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    exit            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    private         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    protected       reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    public          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    var             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    array           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    pow             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    POW             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    abs             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    cos             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    deg2rad         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    rad2deg         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    die             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    exp             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    floor           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    isset           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    list            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    log             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    log10           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    max             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    min             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    rand            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    round           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    sin             reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    sqrt            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    unset           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    eval            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    CADENA          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    $end            reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    RBLOCK          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    endwhile        reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    endfor          reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    endforeach      reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    break           reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    endswitch       reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    default         reduce using rule 149 (return_statement -> return expression SEMICOLON .)
    case            reduce using rule 149 (return_statement -> return expression SEMICOLON .)


state 308

    (150) return_statement -> return params SEMICOLON .

    COMMENT         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 150 (return_statement -> return params SEMICOLON .)
    COMMENT_MULTI   reduce using rule 150 (return_statement -> return params SEMICOLON .)
    empty           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    include         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    include_once    reduce using rule 150 (return_statement -> return params SEMICOLON .)
    require         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    require_once    reduce using rule 150 (return_statement -> return params SEMICOLON .)
    namespace       reduce using rule 150 (return_statement -> return params SEMICOLON .)
    int             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    float           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    double          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    global          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    const           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    print           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    echo            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    while           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    do              reduce using rule 150 (return_statement -> return params SEMICOLON .)
    if              reduce using rule 150 (return_statement -> return params SEMICOLON .)
    function        reduce using rule 150 (return_statement -> return params SEMICOLON .)
    ID              reduce using rule 150 (return_statement -> return params SEMICOLON .)
    return          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    class           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    final           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    new             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    interface       reduce using rule 150 (return_statement -> return params SEMICOLON .)
    trait           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    use             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    continue        reduce using rule 150 (return_statement -> return params SEMICOLON .)
    goto            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    declare         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    VARIABLE        reduce using rule 150 (return_statement -> return params SEMICOLON .)
    CLOSE_TAG       reduce using rule 150 (return_statement -> return params SEMICOLON .)
    for             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    foreach         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    switch          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    try             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    throw           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    exit            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    private         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    protected       reduce using rule 150 (return_statement -> return params SEMICOLON .)
    public          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    var             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    array           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    pow             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    POW             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    abs             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    cos             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    deg2rad         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    rad2deg         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    die             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    exp             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    floor           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    isset           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    list            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    log             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    log10           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    max             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    min             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    rand            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    round           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    sin             reduce using rule 150 (return_statement -> return params SEMICOLON .)
    sqrt            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    unset           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    eval            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    CADENA          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    $end            reduce using rule 150 (return_statement -> return params SEMICOLON .)
    RBLOCK          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    endwhile        reduce using rule 150 (return_statement -> return params SEMICOLON .)
    endfor          reduce using rule 150 (return_statement -> return params SEMICOLON .)
    endforeach      reduce using rule 150 (return_statement -> return params SEMICOLON .)
    break           reduce using rule 150 (return_statement -> return params SEMICOLON .)
    endswitch       reduce using rule 150 (return_statement -> return params SEMICOLON .)
    default         reduce using rule 150 (return_statement -> return params SEMICOLON .)
    case            reduce using rule 150 (return_statement -> return params SEMICOLON .)


state 309

    (204) params -> params COMMA . single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    SEMICOLON       reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    RPAREN          reduce using rule 284 (empty_function -> .)
    COLON           reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)
    RBRACKET        reduce using rule 284 (empty_function -> .)
    ASSIGN          reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    single_param                   shift and go to state 390
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 310

    (152) return_statement -> return ID LPAREN . expression RPAREN SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 391
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 311

    (202) callable_declaration -> callable VARIABLE .

    SEMICOLON       reduce using rule 202 (callable_declaration -> callable VARIABLE .)
    COMMA           reduce using rule 202 (callable_declaration -> callable VARIABLE .)
    RPAREN          reduce using rule 202 (callable_declaration -> callable VARIABLE .)
    RBLOCK          reduce using rule 202 (callable_declaration -> callable VARIABLE .)
    RBRACKET        reduce using rule 202 (callable_declaration -> callable VARIABLE .)
    COLON           reduce using rule 202 (callable_declaration -> callable VARIABLE .)
    ASSIGN          reduce using rule 202 (callable_declaration -> callable VARIABLE .)


state 312

    (153) class_declaration -> class ID LBLOCK . class_body RBLOCK
    (164) class_body -> . class_body_element
    (165) class_body -> . class_body class_body_element
    (166) class_body -> . empty_function
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (284) empty_function -> .
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body                     shift and go to state 392
    class_body_element             shift and go to state 393
    empty_function                 shift and go to state 394
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 313

    (155) class_declaration -> class ID implements . ID LBLOCK class_body RBLOCK

    ID              shift and go to state 397


state 314

    (157) class_extension -> class ID extends . ID LBLOCK RBLOCK
    (158) class_extension -> class ID extends . Exception LBLOCK RBLOCK
    (159) class_extension -> class ID extends . ErrorException LBLOCK RBLOCK
    (160) class_extension -> class ID extends . Error LBLOCK RBLOCK
    (161) class_extension -> class ID extends . ParseError LBLOCK RBLOCK
    (162) class_extension -> class ID extends . TypeError LBLOCK RBLOCK

    ID              shift and go to state 398
    Exception       shift and go to state 399
    ErrorException  shift and go to state 400
    Error           shift and go to state 401
    ParseError      shift and go to state 402
    TypeError       shift and go to state 403


state 315

    (154) class_declaration -> final class ID . LBLOCK class_body RBLOCK
    (156) class_declaration -> final class ID . implements ID LBLOCK class_body RBLOCK

    LBLOCK          shift and go to state 404
    implements      shift and go to state 405


state 316

    (163) create_obj_declaration -> new ID LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 406
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 317

    (170) interface_declaration -> interface ID LBLOCK . interface_body RBLOCK
    (171) interface_body -> . interface_method_declaration
    (172) interface_body -> . interface_body interface_method_declaration
    (173) interface_body -> . empty_function
    (174) interface_method_declaration -> . visibility function ID LPAREN params RPAREN SEMICOLON
    (284) empty_function -> .
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85

  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]

    interface_body                 shift and go to state 407
    interface_method_declaration   shift and go to state 408
    empty_function                 shift and go to state 409
    visibility                     shift and go to state 410

state 318

    (175) trait_declaration -> trait ID LBLOCK . trait_body RBLOCK
    (176) trait_body -> . trait_element
    (177) trait_body -> . trait_body trait_element
    (178) trait_body -> . empty_function
    (179) trait_element -> . visibility var_declaration SEMICOLON
    (180) trait_element -> . visibility fun_declaration
    (284) empty_function -> .
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85

  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]

    trait_body                     shift and go to state 411
    trait_element                  shift and go to state 412
    empty_function                 shift and go to state 413
    visibility                     shift and go to state 414

state 319

    (181) use_declaration -> use ID SEMICOLON .

    COMMENT         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    COMMENT_MULTI   reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    empty           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    include         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    include_once    reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    require         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    require_once    reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    namespace       reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    int             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    float           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    double          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    global          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    const           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    print           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    echo            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    while           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    do              reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    if              reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    function        reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    ID              reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    return          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    class           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    final           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    new             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    interface       reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    trait           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    use             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    continue        reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    goto            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    declare         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    VARIABLE        reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    for             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    foreach         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    switch          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    try             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    throw           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    exit            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    private         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    protected       reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    public          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    var             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    array           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    pow             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    POW             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    abs             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    cos             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    deg2rad         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    rad2deg         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    die             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    exp             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    floor           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    isset           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    list            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    log             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    log10           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    max             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    min             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    rand            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    round           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    sin             reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    sqrt            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    unset           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    eval            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    CADENA          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    $end            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    RBLOCK          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    endwhile        reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    endfor          reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    endforeach      reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    break           reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    endswitch       reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    default         reduce using rule 181 (use_declaration -> use ID SEMICOLON .)
    case            reduce using rule 181 (use_declaration -> use ID SEMICOLON .)


state 320

    (182) use_declaration -> use id_list LBLOCK . use_body RBLOCK
    (183) use_body -> . use_body use_statement
    (184) use_body -> . use_statement
    (185) use_body -> . empty_function
    (186) use_statement -> . ID COLON COLON ID insteadof ID SEMICOLON
    (284) empty_function -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 418
    RBLOCK          reduce using rule 284 (empty_function -> .)

  ! ID              [ reduce using rule 284 (empty_function -> .) ]

    use_body                       shift and go to state 415
    use_statement                  shift and go to state 416
    empty_function                 shift and go to state 417

state 321

    (187) id_list -> id_list COMMA . id_declaration
    (189) id_declaration -> . ID

    ID              shift and go to state 420

    id_declaration                 shift and go to state 419

state 322

    (201) goto_declaration -> goto ID SEMICOLON .

    COMMENT         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    COMMENT_MULTI   reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    empty           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    include         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    include_once    reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    require         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    require_once    reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    namespace       reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    int             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    float           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    double          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    global          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    const           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    print           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    echo            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    while           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    do              reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    if              reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    function        reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    ID              reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    return          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    class           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    final           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    new             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    interface       reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    trait           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    use             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    continue        reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    goto            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    declare         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    VARIABLE        reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    for             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    foreach         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    switch          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    try             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    throw           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    exit            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    private         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    protected       reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    public          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    var             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    array           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    pow             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    POW             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    abs             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    cos             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    deg2rad         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    rad2deg         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    die             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    exp             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    floor           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    isset           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    list            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    log             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    log10           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    max             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    min             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    rand            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    round           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    sin             reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    sqrt            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    unset           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    eval            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    CADENA          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    $end            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    RBLOCK          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    endwhile        reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    endfor          reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    endforeach      reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    break           reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    endswitch       reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    default         reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)
    case            reduce using rule 201 (goto_declaration -> goto ID SEMICOLON .)


state 323

    (283) declare_statement -> declare LPAREN ID . EQUAL expression RPAREN SEMICOLON

    EQUAL           shift and go to state 421


state 324

    (213) for_loop -> for LPAREN for_init . for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> for LPAREN for_init . for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (216) for_expr -> . expression SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    for_expr                       shift and go to state 422
    expression                     shift and go to state 423
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 325

    (215) for_init -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 424


state 326

    (219) foreach_loop -> foreach LPAREN expression . as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> foreach LPAREN expression . as expression RPAREN COLON declaration_list endforeach SEMICOLON

    as              shift and go to state 425


state 327

    (221) switch_statement -> switch LPAREN expression . RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> switch LPAREN expression . RPAREN COLON case_blocks default_block endswitch SEMICOLON

    RPAREN          shift and go to state 426


state 328

    (231) try_statement -> try LBLOCK statement_list . RBLOCK catch_blocks
    (245) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 427
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 428
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 329

    (244) statement_list -> declaration .

    RBLOCK          reduce using rule 244 (statement_list -> declaration .)
    COMMENT         reduce using rule 244 (statement_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 244 (statement_list -> declaration .)
    COMMENT_MULTI   reduce using rule 244 (statement_list -> declaration .)
    empty           reduce using rule 244 (statement_list -> declaration .)
    include         reduce using rule 244 (statement_list -> declaration .)
    include_once    reduce using rule 244 (statement_list -> declaration .)
    require         reduce using rule 244 (statement_list -> declaration .)
    require_once    reduce using rule 244 (statement_list -> declaration .)
    namespace       reduce using rule 244 (statement_list -> declaration .)
    int             reduce using rule 244 (statement_list -> declaration .)
    float           reduce using rule 244 (statement_list -> declaration .)
    double          reduce using rule 244 (statement_list -> declaration .)
    global          reduce using rule 244 (statement_list -> declaration .)
    const           reduce using rule 244 (statement_list -> declaration .)
    print           reduce using rule 244 (statement_list -> declaration .)
    echo            reduce using rule 244 (statement_list -> declaration .)
    while           reduce using rule 244 (statement_list -> declaration .)
    do              reduce using rule 244 (statement_list -> declaration .)
    if              reduce using rule 244 (statement_list -> declaration .)
    function        reduce using rule 244 (statement_list -> declaration .)
    ID              reduce using rule 244 (statement_list -> declaration .)
    return          reduce using rule 244 (statement_list -> declaration .)
    class           reduce using rule 244 (statement_list -> declaration .)
    final           reduce using rule 244 (statement_list -> declaration .)
    new             reduce using rule 244 (statement_list -> declaration .)
    interface       reduce using rule 244 (statement_list -> declaration .)
    trait           reduce using rule 244 (statement_list -> declaration .)
    use             reduce using rule 244 (statement_list -> declaration .)
    continue        reduce using rule 244 (statement_list -> declaration .)
    goto            reduce using rule 244 (statement_list -> declaration .)
    declare         reduce using rule 244 (statement_list -> declaration .)
    VARIABLE        reduce using rule 244 (statement_list -> declaration .)
    CLOSE_TAG       reduce using rule 244 (statement_list -> declaration .)
    for             reduce using rule 244 (statement_list -> declaration .)
    foreach         reduce using rule 244 (statement_list -> declaration .)
    switch          reduce using rule 244 (statement_list -> declaration .)
    try             reduce using rule 244 (statement_list -> declaration .)
    throw           reduce using rule 244 (statement_list -> declaration .)
    exit            reduce using rule 244 (statement_list -> declaration .)
    private         reduce using rule 244 (statement_list -> declaration .)
    protected       reduce using rule 244 (statement_list -> declaration .)
    public          reduce using rule 244 (statement_list -> declaration .)
    var             reduce using rule 244 (statement_list -> declaration .)
    array           reduce using rule 244 (statement_list -> declaration .)
    pow             reduce using rule 244 (statement_list -> declaration .)
    POW             reduce using rule 244 (statement_list -> declaration .)
    abs             reduce using rule 244 (statement_list -> declaration .)
    cos             reduce using rule 244 (statement_list -> declaration .)
    deg2rad         reduce using rule 244 (statement_list -> declaration .)
    rad2deg         reduce using rule 244 (statement_list -> declaration .)
    die             reduce using rule 244 (statement_list -> declaration .)
    exp             reduce using rule 244 (statement_list -> declaration .)
    floor           reduce using rule 244 (statement_list -> declaration .)
    isset           reduce using rule 244 (statement_list -> declaration .)
    list            reduce using rule 244 (statement_list -> declaration .)
    log             reduce using rule 244 (statement_list -> declaration .)
    log10           reduce using rule 244 (statement_list -> declaration .)
    max             reduce using rule 244 (statement_list -> declaration .)
    min             reduce using rule 244 (statement_list -> declaration .)
    rand            reduce using rule 244 (statement_list -> declaration .)
    round           reduce using rule 244 (statement_list -> declaration .)
    sin             reduce using rule 244 (statement_list -> declaration .)
    sqrt            reduce using rule 244 (statement_list -> declaration .)
    unset           reduce using rule 244 (statement_list -> declaration .)
    eval            reduce using rule 244 (statement_list -> declaration .)
    CADENA          reduce using rule 244 (statement_list -> declaration .)
    break           reduce using rule 244 (statement_list -> declaration .)
    endswitch       reduce using rule 244 (statement_list -> declaration .)
    default         reduce using rule 244 (statement_list -> declaration .)
    case            reduce using rule 244 (statement_list -> declaration .)


state 330

    (246) statement_list -> empty_function .
    (44) data_type -> empty_function .

  ! reduce/reduce conflict for VARIABLE resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for COMMENT resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for COMMENT_HASHTAG resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for COMMENT_MULTI resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for empty resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for include resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for include_once resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for require resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for require_once resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for namespace resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for int resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for float resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for double resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for global resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for const resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for print resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for echo resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for while resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for do resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for if resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for function resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for ID resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for return resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for class resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for final resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for new resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for interface resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for trait resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for use resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for continue resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for goto resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for declare resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for for resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for foreach resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for switch resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for try resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for throw resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for exit resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for private resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for protected resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for public resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for var resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for array resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for pow resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for POW resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for abs resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for cos resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for deg2rad resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for rad2deg resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for die resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for exp resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for floor resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for isset resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for list resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for log resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for log10 resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for max resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for min resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for rand resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for round resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for sin resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for sqrt resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for unset resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for eval resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for CADENA resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for break resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for endswitch resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for default resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for case resolved using rule 44 (data_type -> empty_function .)
    VARIABLE        reduce using rule 44 (data_type -> empty_function .)
    RBLOCK          reduce using rule 44 (data_type -> empty_function .)
    COMMENT         reduce using rule 44 (data_type -> empty_function .)
    COMMENT_HASHTAG reduce using rule 44 (data_type -> empty_function .)
    COMMENT_MULTI   reduce using rule 44 (data_type -> empty_function .)
    empty           reduce using rule 44 (data_type -> empty_function .)
    include         reduce using rule 44 (data_type -> empty_function .)
    include_once    reduce using rule 44 (data_type -> empty_function .)
    require         reduce using rule 44 (data_type -> empty_function .)
    require_once    reduce using rule 44 (data_type -> empty_function .)
    namespace       reduce using rule 44 (data_type -> empty_function .)
    int             reduce using rule 44 (data_type -> empty_function .)
    float           reduce using rule 44 (data_type -> empty_function .)
    double          reduce using rule 44 (data_type -> empty_function .)
    global          reduce using rule 44 (data_type -> empty_function .)
    const           reduce using rule 44 (data_type -> empty_function .)
    print           reduce using rule 44 (data_type -> empty_function .)
    echo            reduce using rule 44 (data_type -> empty_function .)
    while           reduce using rule 44 (data_type -> empty_function .)
    do              reduce using rule 44 (data_type -> empty_function .)
    if              reduce using rule 44 (data_type -> empty_function .)
    function        reduce using rule 44 (data_type -> empty_function .)
    ID              reduce using rule 44 (data_type -> empty_function .)
    return          reduce using rule 44 (data_type -> empty_function .)
    class           reduce using rule 44 (data_type -> empty_function .)
    final           reduce using rule 44 (data_type -> empty_function .)
    new             reduce using rule 44 (data_type -> empty_function .)
    interface       reduce using rule 44 (data_type -> empty_function .)
    trait           reduce using rule 44 (data_type -> empty_function .)
    use             reduce using rule 44 (data_type -> empty_function .)
    continue        reduce using rule 44 (data_type -> empty_function .)
    goto            reduce using rule 44 (data_type -> empty_function .)
    declare         reduce using rule 44 (data_type -> empty_function .)
    CLOSE_TAG       reduce using rule 44 (data_type -> empty_function .)
    for             reduce using rule 44 (data_type -> empty_function .)
    foreach         reduce using rule 44 (data_type -> empty_function .)
    switch          reduce using rule 44 (data_type -> empty_function .)
    try             reduce using rule 44 (data_type -> empty_function .)
    throw           reduce using rule 44 (data_type -> empty_function .)
    exit            reduce using rule 44 (data_type -> empty_function .)
    private         reduce using rule 44 (data_type -> empty_function .)
    protected       reduce using rule 44 (data_type -> empty_function .)
    public          reduce using rule 44 (data_type -> empty_function .)
    var             reduce using rule 44 (data_type -> empty_function .)
    array           reduce using rule 44 (data_type -> empty_function .)
    pow             reduce using rule 44 (data_type -> empty_function .)
    POW             reduce using rule 44 (data_type -> empty_function .)
    abs             reduce using rule 44 (data_type -> empty_function .)
    cos             reduce using rule 44 (data_type -> empty_function .)
    deg2rad         reduce using rule 44 (data_type -> empty_function .)
    rad2deg         reduce using rule 44 (data_type -> empty_function .)
    die             reduce using rule 44 (data_type -> empty_function .)
    exp             reduce using rule 44 (data_type -> empty_function .)
    floor           reduce using rule 44 (data_type -> empty_function .)
    isset           reduce using rule 44 (data_type -> empty_function .)
    list            reduce using rule 44 (data_type -> empty_function .)
    log             reduce using rule 44 (data_type -> empty_function .)
    log10           reduce using rule 44 (data_type -> empty_function .)
    max             reduce using rule 44 (data_type -> empty_function .)
    min             reduce using rule 44 (data_type -> empty_function .)
    rand            reduce using rule 44 (data_type -> empty_function .)
    round           reduce using rule 44 (data_type -> empty_function .)
    sin             reduce using rule 44 (data_type -> empty_function .)
    sqrt            reduce using rule 44 (data_type -> empty_function .)
    unset           reduce using rule 44 (data_type -> empty_function .)
    eval            reduce using rule 44 (data_type -> empty_function .)
    CADENA          reduce using rule 44 (data_type -> empty_function .)
    break           reduce using rule 44 (data_type -> empty_function .)
    endswitch       reduce using rule 44 (data_type -> empty_function .)
    default         reduce using rule 44 (data_type -> empty_function .)
    case            reduce using rule 44 (data_type -> empty_function .)

  ! RBLOCK          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! COMMENT         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! COMMENT_HASHTAG [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! COMMENT_MULTI   [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! empty           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! include         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! include_once    [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! require         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! require_once    [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! namespace       [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! int             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! float           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! double          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! global          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! const           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! print           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! echo            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! while           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! do              [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! if              [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! function        [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! ID              [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! return          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! class           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! final           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! new             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! interface       [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! trait           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! use             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! continue        [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! goto            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! declare         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! VARIABLE        [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! CLOSE_TAG       [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! for             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! foreach         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! switch          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! try             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! throw           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! exit            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! private         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! protected       [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! public          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! var             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! array           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! pow             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! POW             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! abs             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! cos             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! deg2rad         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! rad2deg         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! die             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! exp             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! floor           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! isset           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! list            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! log             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! log10           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! max             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! min             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! rand            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! round           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! sin             [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! sqrt            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! unset           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! eval            [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! CADENA          [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! break           [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! endswitch       [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! default         [ reduce using rule 246 (statement_list -> empty_function .) ]
  ! case            [ reduce using rule 246 (statement_list -> empty_function .) ]


state 331

    (241) throw_statement -> throw create_obj_declaration SEMICOLON .

    COMMENT         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    COMMENT_MULTI   reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    empty           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    include         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    include_once    reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    require         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    require_once    reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    namespace       reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    int             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    float           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    double          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    global          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    const           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    print           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    echo            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    while           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    do              reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    if              reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    function        reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    ID              reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    return          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    class           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    final           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    new             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    interface       reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    trait           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    use             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    continue        reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    goto            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    declare         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    VARIABLE        reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    CLOSE_TAG       reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    for             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    foreach         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    switch          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    try             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    throw           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    exit            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    private         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    protected       reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    public          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    var             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    array           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    pow             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    POW             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    abs             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    cos             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    deg2rad         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    rad2deg         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    die             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    exp             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    floor           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    isset           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    list            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    log             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    log10           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    max             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    min             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    rand            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    round           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    sin             reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    sqrt            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    unset           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    eval            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    CADENA          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    $end            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    RBLOCK          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endwhile        reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endfor          reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endforeach      reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    break           reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endswitch       reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    default         reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    case            reduce using rule 241 (throw_statement -> throw create_obj_declaration SEMICOLON .)


state 332

    (242) throw_statement -> throw new Exception . LPAREN params RPAREN SEMICOLON

    LPAREN          shift and go to state 429


state 333

    (218) exit_statement -> exit LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 430


state 334

    (247) Built_In_Declaration -> array LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 431
    COMMA           shift and go to state 309


state 335

    (248) Built_In_Declaration -> pow LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 432
    COMMA           shift and go to state 309


state 336

    (249) Built_In_Declaration -> POW LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 433
    COMMA           shift and go to state 309


state 337

    (250) Built_In_Declaration -> abs LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 434
    COMMA           shift and go to state 309


state 338

    (251) Built_In_Declaration -> cos LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 435
    COMMA           shift and go to state 309


state 339

    (252) Built_In_Declaration -> deg2rad LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 436
    COMMA           shift and go to state 309


state 340

    (253) Built_In_Declaration -> rad2deg LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 437
    COMMA           shift and go to state 309


state 341

    (254) Built_In_Declaration -> die LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 438
    COMMA           shift and go to state 309


state 342

    (255) Built_In_Declaration -> exp LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 439
    COMMA           shift and go to state 309


state 343

    (256) Built_In_Declaration -> floor LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 440
    COMMA           shift and go to state 309


state 344

    (257) Built_In_Declaration -> isset LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 441
    COMMA           shift and go to state 309


state 345

    (258) Built_In_Declaration -> list LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 442
    COMMA           shift and go to state 309


state 346

    (259) Built_In_Declaration -> log LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 443
    COMMA           shift and go to state 309


state 347

    (260) Built_In_Declaration -> log10 LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 444
    COMMA           shift and go to state 309


state 348

    (261) Built_In_Declaration -> max LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 445
    COMMA           shift and go to state 309


state 349

    (262) Built_In_Declaration -> min LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 446
    COMMA           shift and go to state 309


state 350

    (263) Built_In_Declaration -> rand LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 447
    COMMA           shift and go to state 309


state 351

    (264) Built_In_Declaration -> round LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 448
    COMMA           shift and go to state 309


state 352

    (265) Built_In_Declaration -> sin LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 449
    COMMA           shift and go to state 309


state 353

    (266) Built_In_Declaration -> sqrt LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 450
    COMMA           shift and go to state 309


state 354

    (267) Built_In_Declaration -> unset LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 451
    COMMA           shift and go to state 309


state 355

    (268) Built_In_Declaration -> eval LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 452
    COMMA           shift and go to state 309


state 356

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER . RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON

    RBRACKET        shift and go to state 453


state 357

    (148) fun_call -> ID LPAREN params RPAREN .

    COMMENT         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    empty           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    include         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    include_once    reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    require         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    require_once    reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    namespace       reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    int             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    float           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    double          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    global          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    const           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    print           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    echo            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    while           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    do              reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    if              reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    function        reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    return          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    class           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    final           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    new             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    interface       reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    trait           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    use             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    continue        reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    goto            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    declare         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    for             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    foreach         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    switch          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    try             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    throw           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    exit            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    private         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    protected       reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    public          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    var             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    array           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    pow             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    POW             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    abs             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    cos             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    deg2rad         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    rad2deg         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    die             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    exp             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    floor           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    isset           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    list            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    log             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    log10           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    max             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    min             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    rand            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    round           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    sin             reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    sqrt            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    unset           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    eval            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    CADENA          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    endwhile        reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    endfor          reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    endforeach      reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    break           reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    endswitch       reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    default         reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)
    case            reduce using rule 148 (fun_call -> ID LPAREN params RPAREN .)


state 358

    (102) expression -> VARIABLE instanceof ID .

    SEMICOLON       reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    RPAREN          reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    COMMA           reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    COLON           reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    RBLOCK          reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    RBRACKET        reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    ASSIGN          reduce using rule 102 (expression -> VARIABLE instanceof ID .)
    as              reduce using rule 102 (expression -> VARIABLE instanceof ID .)


state 359

    (90) assignment_tail -> VARIABLE LBRACKET . expression COMMA params
    (91) assignment_tail -> VARIABLE LBRACKET . params RBRACKET
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 166
    NUMBER          shift and go to state 169
    CADENA          shift and go to state 170
    MINUS           shift and go to state 134
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RBRACKET        reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    expression                     shift and go to state 454
    params                         shift and go to state 455
    additive_expression            shift and go to state 127
    single_param                   shift and go to state 167
    term                           shift and go to state 133
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 171
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 360

    (92) assignment_tail -> VARIABLE LBLOCK . params RBLOCK
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RBLOCK          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 456
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 361

    (190) match_declaration -> VARIABLE EQUAL match LPAREN . single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    single_param                   shift and go to state 457
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 362

    (89) assignment_tail -> LBLOCK params . RBLOCK
    (204) params -> params . COMMA single_param

    RBLOCK          shift and go to state 458
    COMMA           shift and go to state 309


state 363

    (81) var_declaration2 -> VARIABLE EQUAL ID LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 459
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 364

    (282) clone_declaration -> clone expression .

    SEMICOLON       reduce using rule 282 (clone_declaration -> clone expression .)
    COMMA           reduce using rule 282 (clone_declaration -> clone expression .)
    RPAREN          reduce using rule 282 (clone_declaration -> clone expression .)
    COLON           reduce using rule 282 (clone_declaration -> clone expression .)
    RBLOCK          reduce using rule 282 (clone_declaration -> clone expression .)
    RBRACKET        reduce using rule 282 (clone_declaration -> clone expression .)
    ASSIGN          reduce using rule 282 (clone_declaration -> clone expression .)


state 365

    (87) assignment_tail -> COMMA var_declaration2 .

    SEMICOLON       reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)
    COMMA           reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)
    RPAREN          reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)
    COLON           reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)
    RBLOCK          reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)
    RBRACKET        reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)
    ASSIGN          reduce using rule 87 (assignment_tail -> COMMA var_declaration2 .)


state 366

    (88) assignment_tail -> LBRACKET params . RBRACKET
    (204) params -> params . COMMA single_param

    RBRACKET        shift and go to state 460
    COMMA           shift and go to state 309


state 367

    (112) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    MULEQUAL        reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    BOOL_OR         reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    BOOL_AND        reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    or              reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    and             reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    xor             reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    ISIDENTICAL     reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    ISNOTIDENTICAL  reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    SR              reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    SL              reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 112 (factor -> LPAREN expression RPAREN .)
    as              reduce using rule 112 (factor -> LPAREN expression RPAREN .)


state 368

    (82) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON . var_declaration2
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 144
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

    var_declaration2               shift and go to state 461
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 369

    (83) var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL . expression
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 462
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 370

    (84) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN . params RPAREN
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 463
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 371

    (98) expression -> additive_expression logical_op additive_expression .

    SEMICOLON       reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    RPAREN          reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    COMMA           reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    COLON           reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    RBLOCK          reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    RBRACKET        reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    ASSIGN          reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)
    as              reduce using rule 98 (expression -> additive_expression logical_op additive_expression .)


state 372

    (99) expression -> additive_expression comp_op additive_expression .
    (100) expression -> additive_expression comp_op additive_expression . logical_op additive_expression comp_op additive_expression
    (133) logical_op -> . BOOL_OR
    (134) logical_op -> . BOOL_AND
    (135) logical_op -> . NOT
    (136) logical_op -> . or
    (137) logical_op -> . and
    (138) logical_op -> . xor

    SEMICOLON       reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    COLON           reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    ASSIGN          reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    as              reduce using rule 99 (expression -> additive_expression comp_op additive_expression .)
    BOOL_OR         shift and go to state 252
    BOOL_AND        shift and go to state 253
    NOT             shift and go to state 254
    or              shift and go to state 255
    and             shift and go to state 256
    xor             shift and go to state 257

    logical_op                     shift and go to state 464

state 373

    (101) expression -> additive_expression bits_op additive_expression .

    SEMICOLON       reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    RPAREN          reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    COMMA           reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    COLON           reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    RBLOCK          reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    RBRACKET        reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    ASSIGN          reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)
    as              reduce using rule 101 (expression -> additive_expression bits_op additive_expression .)


state 374

    (104) additive_expression -> term math_op term .

    BOOL_OR         reduce using rule 104 (additive_expression -> term math_op term .)
    BOOL_AND        reduce using rule 104 (additive_expression -> term math_op term .)
    NOT             reduce using rule 104 (additive_expression -> term math_op term .)
    or              reduce using rule 104 (additive_expression -> term math_op term .)
    and             reduce using rule 104 (additive_expression -> term math_op term .)
    xor             reduce using rule 104 (additive_expression -> term math_op term .)
    LESS            reduce using rule 104 (additive_expression -> term math_op term .)
    LESSEQUAL       reduce using rule 104 (additive_expression -> term math_op term .)
    GREATER         reduce using rule 104 (additive_expression -> term math_op term .)
    GREATEREQUAL    reduce using rule 104 (additive_expression -> term math_op term .)
    DEQUAL          reduce using rule 104 (additive_expression -> term math_op term .)
    DISTINT         reduce using rule 104 (additive_expression -> term math_op term .)
    DIVEQUAL        reduce using rule 104 (additive_expression -> term math_op term .)
    ISEQUAL         reduce using rule 104 (additive_expression -> term math_op term .)
    ISIDENTICAL     reduce using rule 104 (additive_expression -> term math_op term .)
    ISNOTIDENTICAL  reduce using rule 104 (additive_expression -> term math_op term .)
    AMPERSANT       reduce using rule 104 (additive_expression -> term math_op term .)
    SR              reduce using rule 104 (additive_expression -> term math_op term .)
    SL              reduce using rule 104 (additive_expression -> term math_op term .)
    SEMICOLON       reduce using rule 104 (additive_expression -> term math_op term .)
    RPAREN          reduce using rule 104 (additive_expression -> term math_op term .)
    COMMA           reduce using rule 104 (additive_expression -> term math_op term .)
    COLON           reduce using rule 104 (additive_expression -> term math_op term .)
    RBLOCK          reduce using rule 104 (additive_expression -> term math_op term .)
    RBRACKET        reduce using rule 104 (additive_expression -> term math_op term .)
    ASSIGN          reduce using rule 104 (additive_expression -> term math_op term .)
    as              reduce using rule 104 (additive_expression -> term math_op term .)


state 375

    (50) constant_declaration -> const ID EQUAL CADENA . SEMICOLON

    SEMICOLON       shift and go to state 465


state 376

    (51) constant_declaration -> const ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 466


state 377

    (53) print_declaration -> print LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 467


state 378

    (54) print_declaration -> print LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 468


state 379

    (55) print_declaration -> print LPAREN CADENA RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 469


state 380

    (59) echo_declaration -> echo LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 470


state 381

    (60) echo_declaration -> echo LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 471


state 382

    (61) echo_declaration -> echo LPAREN CADENA RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 472


state 383

    (281) ceil_expression -> ceil LPAREN expression . RPAREN

    RPAREN          shift and go to state 473


state 384

    (93) iteration_stmt -> while LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> while LPAREN expression RPAREN . COLON declaration_list endwhile SEMICOLON

    LBLOCK          shift and go to state 474
    COLON           shift and go to state 475


state 385

    (95) iteration_stmt -> do LBLOCK declaration_list RBLOCK . while LPAREN expression RPAREN SEMICOLON

    while           shift and go to state 476


state 386

    (96) iteration_stmt -> do COLON declaration_list endwhile . SEMICOLON

    SEMICOLON       shift and go to state 477


state 387

    (139) if_statement -> if LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 478


state 388

    (144) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration_list return_statement RBLOCK
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 479
    COMMA           shift and go to state 309


state 389

    (146) fun_declaration -> visibility static function ID . LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility static function ID . LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    LPAREN          shift and go to state 480


state 390

    (204) params -> params COMMA single_param .

    SEMICOLON       reduce using rule 204 (params -> params COMMA single_param .)
    COMMA           reduce using rule 204 (params -> params COMMA single_param .)
    RPAREN          reduce using rule 204 (params -> params COMMA single_param .)
    RBLOCK          reduce using rule 204 (params -> params COMMA single_param .)
    RBRACKET        reduce using rule 204 (params -> params COMMA single_param .)
    COLON           reduce using rule 204 (params -> params COMMA single_param .)
    ASSIGN          reduce using rule 204 (params -> params COMMA single_param .)


state 391

    (152) return_statement -> return ID LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 481


state 392

    (153) class_declaration -> class ID LBLOCK class_body . RBLOCK
    (165) class_body -> class_body . class_body_element
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 482
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body_element             shift and go to state 483
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 393

    (164) class_body -> class_body_element .

    RBLOCK          reduce using rule 164 (class_body -> class_body_element .)
    private         reduce using rule 164 (class_body -> class_body_element .)
    protected       reduce using rule 164 (class_body -> class_body_element .)
    public          reduce using rule 164 (class_body -> class_body_element .)
    var             reduce using rule 164 (class_body -> class_body_element .)
    COMMENT         reduce using rule 164 (class_body -> class_body_element .)
    COMMENT_HASHTAG reduce using rule 164 (class_body -> class_body_element .)
    COMMENT_MULTI   reduce using rule 164 (class_body -> class_body_element .)
    empty           reduce using rule 164 (class_body -> class_body_element .)
    include         reduce using rule 164 (class_body -> class_body_element .)
    include_once    reduce using rule 164 (class_body -> class_body_element .)
    require         reduce using rule 164 (class_body -> class_body_element .)
    require_once    reduce using rule 164 (class_body -> class_body_element .)
    namespace       reduce using rule 164 (class_body -> class_body_element .)
    int             reduce using rule 164 (class_body -> class_body_element .)
    float           reduce using rule 164 (class_body -> class_body_element .)
    double          reduce using rule 164 (class_body -> class_body_element .)
    global          reduce using rule 164 (class_body -> class_body_element .)
    const           reduce using rule 164 (class_body -> class_body_element .)
    print           reduce using rule 164 (class_body -> class_body_element .)
    echo            reduce using rule 164 (class_body -> class_body_element .)
    while           reduce using rule 164 (class_body -> class_body_element .)
    do              reduce using rule 164 (class_body -> class_body_element .)
    if              reduce using rule 164 (class_body -> class_body_element .)
    function        reduce using rule 164 (class_body -> class_body_element .)
    ID              reduce using rule 164 (class_body -> class_body_element .)
    return          reduce using rule 164 (class_body -> class_body_element .)
    class           reduce using rule 164 (class_body -> class_body_element .)
    final           reduce using rule 164 (class_body -> class_body_element .)
    new             reduce using rule 164 (class_body -> class_body_element .)
    interface       reduce using rule 164 (class_body -> class_body_element .)
    trait           reduce using rule 164 (class_body -> class_body_element .)
    use             reduce using rule 164 (class_body -> class_body_element .)
    continue        reduce using rule 164 (class_body -> class_body_element .)
    goto            reduce using rule 164 (class_body -> class_body_element .)
    declare         reduce using rule 164 (class_body -> class_body_element .)
    VARIABLE        reduce using rule 164 (class_body -> class_body_element .)
    CLOSE_TAG       reduce using rule 164 (class_body -> class_body_element .)
    for             reduce using rule 164 (class_body -> class_body_element .)
    foreach         reduce using rule 164 (class_body -> class_body_element .)
    switch          reduce using rule 164 (class_body -> class_body_element .)
    try             reduce using rule 164 (class_body -> class_body_element .)
    throw           reduce using rule 164 (class_body -> class_body_element .)
    exit            reduce using rule 164 (class_body -> class_body_element .)
    array           reduce using rule 164 (class_body -> class_body_element .)
    pow             reduce using rule 164 (class_body -> class_body_element .)
    POW             reduce using rule 164 (class_body -> class_body_element .)
    abs             reduce using rule 164 (class_body -> class_body_element .)
    cos             reduce using rule 164 (class_body -> class_body_element .)
    deg2rad         reduce using rule 164 (class_body -> class_body_element .)
    rad2deg         reduce using rule 164 (class_body -> class_body_element .)
    die             reduce using rule 164 (class_body -> class_body_element .)
    exp             reduce using rule 164 (class_body -> class_body_element .)
    floor           reduce using rule 164 (class_body -> class_body_element .)
    isset           reduce using rule 164 (class_body -> class_body_element .)
    list            reduce using rule 164 (class_body -> class_body_element .)
    log             reduce using rule 164 (class_body -> class_body_element .)
    log10           reduce using rule 164 (class_body -> class_body_element .)
    max             reduce using rule 164 (class_body -> class_body_element .)
    min             reduce using rule 164 (class_body -> class_body_element .)
    rand            reduce using rule 164 (class_body -> class_body_element .)
    round           reduce using rule 164 (class_body -> class_body_element .)
    sin             reduce using rule 164 (class_body -> class_body_element .)
    sqrt            reduce using rule 164 (class_body -> class_body_element .)
    unset           reduce using rule 164 (class_body -> class_body_element .)
    eval            reduce using rule 164 (class_body -> class_body_element .)
    CADENA          reduce using rule 164 (class_body -> class_body_element .)


state 394

    (166) class_body -> empty_function .
    (44) data_type -> empty_function .

  ! reduce/reduce conflict for VARIABLE resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for private resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for protected resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for public resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for var resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for COMMENT resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for COMMENT_HASHTAG resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for COMMENT_MULTI resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for empty resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for include resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for include_once resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for require resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for require_once resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for namespace resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for int resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for float resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for double resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for global resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for const resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for print resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for echo resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for while resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for do resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for if resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for function resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for ID resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for return resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for class resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for final resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for new resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for interface resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for trait resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for use resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for continue resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for goto resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for declare resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for for resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for foreach resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for switch resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for try resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for throw resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for exit resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for array resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for pow resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for POW resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for abs resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for cos resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for deg2rad resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for rad2deg resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for die resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for exp resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for floor resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for isset resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for list resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for log resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for log10 resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for max resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for min resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for rand resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for round resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for sin resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for sqrt resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for unset resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for eval resolved using rule 44 (data_type -> empty_function .)
  ! reduce/reduce conflict for CADENA resolved using rule 44 (data_type -> empty_function .)
    VARIABLE        reduce using rule 44 (data_type -> empty_function .)
    RBLOCK          reduce using rule 44 (data_type -> empty_function .)
    private         reduce using rule 44 (data_type -> empty_function .)
    protected       reduce using rule 44 (data_type -> empty_function .)
    public          reduce using rule 44 (data_type -> empty_function .)
    var             reduce using rule 44 (data_type -> empty_function .)
    COMMENT         reduce using rule 44 (data_type -> empty_function .)
    COMMENT_HASHTAG reduce using rule 44 (data_type -> empty_function .)
    COMMENT_MULTI   reduce using rule 44 (data_type -> empty_function .)
    empty           reduce using rule 44 (data_type -> empty_function .)
    include         reduce using rule 44 (data_type -> empty_function .)
    include_once    reduce using rule 44 (data_type -> empty_function .)
    require         reduce using rule 44 (data_type -> empty_function .)
    require_once    reduce using rule 44 (data_type -> empty_function .)
    namespace       reduce using rule 44 (data_type -> empty_function .)
    int             reduce using rule 44 (data_type -> empty_function .)
    float           reduce using rule 44 (data_type -> empty_function .)
    double          reduce using rule 44 (data_type -> empty_function .)
    global          reduce using rule 44 (data_type -> empty_function .)
    const           reduce using rule 44 (data_type -> empty_function .)
    print           reduce using rule 44 (data_type -> empty_function .)
    echo            reduce using rule 44 (data_type -> empty_function .)
    while           reduce using rule 44 (data_type -> empty_function .)
    do              reduce using rule 44 (data_type -> empty_function .)
    if              reduce using rule 44 (data_type -> empty_function .)
    function        reduce using rule 44 (data_type -> empty_function .)
    ID              reduce using rule 44 (data_type -> empty_function .)
    return          reduce using rule 44 (data_type -> empty_function .)
    class           reduce using rule 44 (data_type -> empty_function .)
    final           reduce using rule 44 (data_type -> empty_function .)
    new             reduce using rule 44 (data_type -> empty_function .)
    interface       reduce using rule 44 (data_type -> empty_function .)
    trait           reduce using rule 44 (data_type -> empty_function .)
    use             reduce using rule 44 (data_type -> empty_function .)
    continue        reduce using rule 44 (data_type -> empty_function .)
    goto            reduce using rule 44 (data_type -> empty_function .)
    declare         reduce using rule 44 (data_type -> empty_function .)
    CLOSE_TAG       reduce using rule 44 (data_type -> empty_function .)
    for             reduce using rule 44 (data_type -> empty_function .)
    foreach         reduce using rule 44 (data_type -> empty_function .)
    switch          reduce using rule 44 (data_type -> empty_function .)
    try             reduce using rule 44 (data_type -> empty_function .)
    throw           reduce using rule 44 (data_type -> empty_function .)
    exit            reduce using rule 44 (data_type -> empty_function .)
    array           reduce using rule 44 (data_type -> empty_function .)
    pow             reduce using rule 44 (data_type -> empty_function .)
    POW             reduce using rule 44 (data_type -> empty_function .)
    abs             reduce using rule 44 (data_type -> empty_function .)
    cos             reduce using rule 44 (data_type -> empty_function .)
    deg2rad         reduce using rule 44 (data_type -> empty_function .)
    rad2deg         reduce using rule 44 (data_type -> empty_function .)
    die             reduce using rule 44 (data_type -> empty_function .)
    exp             reduce using rule 44 (data_type -> empty_function .)
    floor           reduce using rule 44 (data_type -> empty_function .)
    isset           reduce using rule 44 (data_type -> empty_function .)
    list            reduce using rule 44 (data_type -> empty_function .)
    log             reduce using rule 44 (data_type -> empty_function .)
    log10           reduce using rule 44 (data_type -> empty_function .)
    max             reduce using rule 44 (data_type -> empty_function .)
    min             reduce using rule 44 (data_type -> empty_function .)
    rand            reduce using rule 44 (data_type -> empty_function .)
    round           reduce using rule 44 (data_type -> empty_function .)
    sin             reduce using rule 44 (data_type -> empty_function .)
    sqrt            reduce using rule 44 (data_type -> empty_function .)
    unset           reduce using rule 44 (data_type -> empty_function .)
    eval            reduce using rule 44 (data_type -> empty_function .)
    CADENA          reduce using rule 44 (data_type -> empty_function .)

  ! RBLOCK          [ reduce using rule 166 (class_body -> empty_function .) ]
  ! private         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! protected       [ reduce using rule 166 (class_body -> empty_function .) ]
  ! public          [ reduce using rule 166 (class_body -> empty_function .) ]
  ! var             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! COMMENT         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! COMMENT_HASHTAG [ reduce using rule 166 (class_body -> empty_function .) ]
  ! COMMENT_MULTI   [ reduce using rule 166 (class_body -> empty_function .) ]
  ! empty           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! include         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! include_once    [ reduce using rule 166 (class_body -> empty_function .) ]
  ! require         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! require_once    [ reduce using rule 166 (class_body -> empty_function .) ]
  ! namespace       [ reduce using rule 166 (class_body -> empty_function .) ]
  ! int             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! float           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! double          [ reduce using rule 166 (class_body -> empty_function .) ]
  ! global          [ reduce using rule 166 (class_body -> empty_function .) ]
  ! const           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! print           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! echo            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! while           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! do              [ reduce using rule 166 (class_body -> empty_function .) ]
  ! if              [ reduce using rule 166 (class_body -> empty_function .) ]
  ! function        [ reduce using rule 166 (class_body -> empty_function .) ]
  ! ID              [ reduce using rule 166 (class_body -> empty_function .) ]
  ! return          [ reduce using rule 166 (class_body -> empty_function .) ]
  ! class           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! final           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! new             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! interface       [ reduce using rule 166 (class_body -> empty_function .) ]
  ! trait           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! use             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! continue        [ reduce using rule 166 (class_body -> empty_function .) ]
  ! goto            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! declare         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! VARIABLE        [ reduce using rule 166 (class_body -> empty_function .) ]
  ! CLOSE_TAG       [ reduce using rule 166 (class_body -> empty_function .) ]
  ! for             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! foreach         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! switch          [ reduce using rule 166 (class_body -> empty_function .) ]
  ! try             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! throw           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! exit            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! array           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! pow             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! POW             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! abs             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! cos             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! deg2rad         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! rad2deg         [ reduce using rule 166 (class_body -> empty_function .) ]
  ! die             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! exp             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! floor           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! isset           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! list            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! log             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! log10           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! max             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! min             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! rand            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! round           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! sin             [ reduce using rule 166 (class_body -> empty_function .) ]
  ! sqrt            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! unset           [ reduce using rule 166 (class_body -> empty_function .) ]
  ! eval            [ reduce using rule 166 (class_body -> empty_function .) ]
  ! CADENA          [ reduce using rule 166 (class_body -> empty_function .) ]


state 395

    (167) class_body_element -> visibility . var_declaration2 SEMICOLON
    (168) class_body_element -> visibility . fun_declaration
    (146) fun_declaration -> visibility . static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility . static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var

    static          shift and go to state 161
    VARIABLE        shift and go to state 144
    function        shift and go to state 61
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85

    visibility                     shift and go to state 62
    var_declaration2               shift and go to state 484
    fun_declaration                shift and go to state 485
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 396

    (169) class_body_element -> declaration .

    RBLOCK          reduce using rule 169 (class_body_element -> declaration .)
    private         reduce using rule 169 (class_body_element -> declaration .)
    protected       reduce using rule 169 (class_body_element -> declaration .)
    public          reduce using rule 169 (class_body_element -> declaration .)
    var             reduce using rule 169 (class_body_element -> declaration .)
    COMMENT         reduce using rule 169 (class_body_element -> declaration .)
    COMMENT_HASHTAG reduce using rule 169 (class_body_element -> declaration .)
    COMMENT_MULTI   reduce using rule 169 (class_body_element -> declaration .)
    empty           reduce using rule 169 (class_body_element -> declaration .)
    include         reduce using rule 169 (class_body_element -> declaration .)
    include_once    reduce using rule 169 (class_body_element -> declaration .)
    require         reduce using rule 169 (class_body_element -> declaration .)
    require_once    reduce using rule 169 (class_body_element -> declaration .)
    namespace       reduce using rule 169 (class_body_element -> declaration .)
    int             reduce using rule 169 (class_body_element -> declaration .)
    float           reduce using rule 169 (class_body_element -> declaration .)
    double          reduce using rule 169 (class_body_element -> declaration .)
    global          reduce using rule 169 (class_body_element -> declaration .)
    const           reduce using rule 169 (class_body_element -> declaration .)
    print           reduce using rule 169 (class_body_element -> declaration .)
    echo            reduce using rule 169 (class_body_element -> declaration .)
    while           reduce using rule 169 (class_body_element -> declaration .)
    do              reduce using rule 169 (class_body_element -> declaration .)
    if              reduce using rule 169 (class_body_element -> declaration .)
    function        reduce using rule 169 (class_body_element -> declaration .)
    ID              reduce using rule 169 (class_body_element -> declaration .)
    return          reduce using rule 169 (class_body_element -> declaration .)
    class           reduce using rule 169 (class_body_element -> declaration .)
    final           reduce using rule 169 (class_body_element -> declaration .)
    new             reduce using rule 169 (class_body_element -> declaration .)
    interface       reduce using rule 169 (class_body_element -> declaration .)
    trait           reduce using rule 169 (class_body_element -> declaration .)
    use             reduce using rule 169 (class_body_element -> declaration .)
    continue        reduce using rule 169 (class_body_element -> declaration .)
    goto            reduce using rule 169 (class_body_element -> declaration .)
    declare         reduce using rule 169 (class_body_element -> declaration .)
    VARIABLE        reduce using rule 169 (class_body_element -> declaration .)
    CLOSE_TAG       reduce using rule 169 (class_body_element -> declaration .)
    for             reduce using rule 169 (class_body_element -> declaration .)
    foreach         reduce using rule 169 (class_body_element -> declaration .)
    switch          reduce using rule 169 (class_body_element -> declaration .)
    try             reduce using rule 169 (class_body_element -> declaration .)
    throw           reduce using rule 169 (class_body_element -> declaration .)
    exit            reduce using rule 169 (class_body_element -> declaration .)
    array           reduce using rule 169 (class_body_element -> declaration .)
    pow             reduce using rule 169 (class_body_element -> declaration .)
    POW             reduce using rule 169 (class_body_element -> declaration .)
    abs             reduce using rule 169 (class_body_element -> declaration .)
    cos             reduce using rule 169 (class_body_element -> declaration .)
    deg2rad         reduce using rule 169 (class_body_element -> declaration .)
    rad2deg         reduce using rule 169 (class_body_element -> declaration .)
    die             reduce using rule 169 (class_body_element -> declaration .)
    exp             reduce using rule 169 (class_body_element -> declaration .)
    floor           reduce using rule 169 (class_body_element -> declaration .)
    isset           reduce using rule 169 (class_body_element -> declaration .)
    list            reduce using rule 169 (class_body_element -> declaration .)
    log             reduce using rule 169 (class_body_element -> declaration .)
    log10           reduce using rule 169 (class_body_element -> declaration .)
    max             reduce using rule 169 (class_body_element -> declaration .)
    min             reduce using rule 169 (class_body_element -> declaration .)
    rand            reduce using rule 169 (class_body_element -> declaration .)
    round           reduce using rule 169 (class_body_element -> declaration .)
    sin             reduce using rule 169 (class_body_element -> declaration .)
    sqrt            reduce using rule 169 (class_body_element -> declaration .)
    unset           reduce using rule 169 (class_body_element -> declaration .)
    eval            reduce using rule 169 (class_body_element -> declaration .)
    CADENA          reduce using rule 169 (class_body_element -> declaration .)


state 397

    (155) class_declaration -> class ID implements ID . LBLOCK class_body RBLOCK

    LBLOCK          shift and go to state 486


state 398

    (157) class_extension -> class ID extends ID . LBLOCK RBLOCK

    LBLOCK          shift and go to state 487


state 399

    (158) class_extension -> class ID extends Exception . LBLOCK RBLOCK

    LBLOCK          shift and go to state 488


state 400

    (159) class_extension -> class ID extends ErrorException . LBLOCK RBLOCK

    LBLOCK          shift and go to state 489


state 401

    (160) class_extension -> class ID extends Error . LBLOCK RBLOCK

    LBLOCK          shift and go to state 490


state 402

    (161) class_extension -> class ID extends ParseError . LBLOCK RBLOCK

    LBLOCK          shift and go to state 491


state 403

    (162) class_extension -> class ID extends TypeError . LBLOCK RBLOCK

    LBLOCK          shift and go to state 492


state 404

    (154) class_declaration -> final class ID LBLOCK . class_body RBLOCK
    (164) class_body -> . class_body_element
    (165) class_body -> . class_body class_body_element
    (166) class_body -> . empty_function
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (284) empty_function -> .
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body                     shift and go to state 493
    class_body_element             shift and go to state 393
    empty_function                 shift and go to state 394
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 405

    (156) class_declaration -> final class ID implements . ID LBLOCK class_body RBLOCK

    ID              shift and go to state 494


state 406

    (163) create_obj_declaration -> new ID LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 495
    COMMA           shift and go to state 309


state 407

    (170) interface_declaration -> interface ID LBLOCK interface_body . RBLOCK
    (172) interface_body -> interface_body . interface_method_declaration
    (174) interface_method_declaration -> . visibility function ID LPAREN params RPAREN SEMICOLON
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var

    RBLOCK          shift and go to state 496
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85

    interface_method_declaration   shift and go to state 497
    visibility                     shift and go to state 410

state 408

    (171) interface_body -> interface_method_declaration .

    RBLOCK          reduce using rule 171 (interface_body -> interface_method_declaration .)
    private         reduce using rule 171 (interface_body -> interface_method_declaration .)
    protected       reduce using rule 171 (interface_body -> interface_method_declaration .)
    public          reduce using rule 171 (interface_body -> interface_method_declaration .)
    var             reduce using rule 171 (interface_body -> interface_method_declaration .)


state 409

    (173) interface_body -> empty_function .

    RBLOCK          reduce using rule 173 (interface_body -> empty_function .)
    private         reduce using rule 173 (interface_body -> empty_function .)
    protected       reduce using rule 173 (interface_body -> empty_function .)
    public          reduce using rule 173 (interface_body -> empty_function .)
    var             reduce using rule 173 (interface_body -> empty_function .)


state 410

    (174) interface_method_declaration -> visibility . function ID LPAREN params RPAREN SEMICOLON

    function        shift and go to state 498


state 411

    (175) trait_declaration -> trait ID LBLOCK trait_body . RBLOCK
    (177) trait_body -> trait_body . trait_element
    (179) trait_element -> . visibility var_declaration SEMICOLON
    (180) trait_element -> . visibility fun_declaration
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var

    RBLOCK          shift and go to state 499
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85

    trait_element                  shift and go to state 500
    visibility                     shift and go to state 414

state 412

    (176) trait_body -> trait_element .

    RBLOCK          reduce using rule 176 (trait_body -> trait_element .)
    private         reduce using rule 176 (trait_body -> trait_element .)
    protected       reduce using rule 176 (trait_body -> trait_element .)
    public          reduce using rule 176 (trait_body -> trait_element .)
    var             reduce using rule 176 (trait_body -> trait_element .)


state 413

    (178) trait_body -> empty_function .

    RBLOCK          reduce using rule 178 (trait_body -> empty_function .)
    private         reduce using rule 178 (trait_body -> empty_function .)
    protected       reduce using rule 178 (trait_body -> empty_function .)
    public          reduce using rule 178 (trait_body -> empty_function .)
    var             reduce using rule 178 (trait_body -> empty_function .)


state 414

    (179) trait_element -> visibility . var_declaration SEMICOLON
    (180) trait_element -> visibility . fun_declaration
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    global          shift and go to state 54
    function        shift and go to state 61
    VARIABLE        shift and go to state 144
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

    visibility                     shift and go to state 62
    var_declaration                shift and go to state 501
    fun_declaration                shift and go to state 502
    var_declaration2               shift and go to state 53
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 415

    (182) use_declaration -> use id_list LBLOCK use_body . RBLOCK
    (183) use_body -> use_body . use_statement
    (186) use_statement -> . ID COLON COLON ID insteadof ID SEMICOLON

    RBLOCK          shift and go to state 503
    ID              shift and go to state 418

    use_statement                  shift and go to state 504

state 416

    (184) use_body -> use_statement .

    RBLOCK          reduce using rule 184 (use_body -> use_statement .)
    ID              reduce using rule 184 (use_body -> use_statement .)


state 417

    (185) use_body -> empty_function .

    RBLOCK          reduce using rule 185 (use_body -> empty_function .)
    ID              reduce using rule 185 (use_body -> empty_function .)


state 418

    (186) use_statement -> ID . COLON COLON ID insteadof ID SEMICOLON

    COLON           shift and go to state 505


state 419

    (187) id_list -> id_list COMMA id_declaration .

    LBLOCK          reduce using rule 187 (id_list -> id_list COMMA id_declaration .)
    COMMA           reduce using rule 187 (id_list -> id_list COMMA id_declaration .)


state 420

    (189) id_declaration -> ID .

    LBLOCK          reduce using rule 189 (id_declaration -> ID .)
    COMMA           reduce using rule 189 (id_declaration -> ID .)


state 421

    (283) declare_statement -> declare LPAREN ID EQUAL . expression RPAREN SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 506
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 422

    (213) for_loop -> for LPAREN for_init for_expr . for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> for LPAREN for_init for_expr . for_update RPAREN COLON declaration_list endfor SEMICOLON
    (217) for_update -> . expression
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    for_update                     shift and go to state 507
    expression                     shift and go to state 508
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 423

    (216) for_expr -> expression . SEMICOLON

    SEMICOLON       shift and go to state 509


state 424

    (215) for_init -> var_declaration2 SEMICOLON .

    VARIABLE        reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    MINUS           reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    PLUSPLUS        reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    MINUSMINUS      reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    true            reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)
    false           reduce using rule 215 (for_init -> var_declaration2 SEMICOLON .)


state 425

    (219) foreach_loop -> foreach LPAREN expression as . expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> foreach LPAREN expression as . expression RPAREN COLON declaration_list endforeach SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 510
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 426

    (221) switch_statement -> switch LPAREN expression RPAREN . LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> switch LPAREN expression RPAREN . COLON case_blocks default_block endswitch SEMICOLON

    LBLOCK          shift and go to state 511
    COLON           shift and go to state 512


state 427

    (231) try_statement -> try LBLOCK statement_list RBLOCK . catch_blocks
    (232) catch_blocks -> . catch_blocks catch_block
    (233) catch_blocks -> . catch_block
    (234) catch_blocks -> . catch_blocks finally_block
    (235) catch_blocks -> . finally_block
    (236) catch_block -> . catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK
    (243) finally_block -> . finally LBLOCK statement_list RBLOCK

    catch           shift and go to state 516
    finally         shift and go to state 517

    catch_blocks                   shift and go to state 513
    catch_block                    shift and go to state 514
    finally_block                  shift and go to state 515

state 428

    (245) statement_list -> statement_list declaration .

    RBLOCK          reduce using rule 245 (statement_list -> statement_list declaration .)
    COMMENT         reduce using rule 245 (statement_list -> statement_list declaration .)
    COMMENT_HASHTAG reduce using rule 245 (statement_list -> statement_list declaration .)
    COMMENT_MULTI   reduce using rule 245 (statement_list -> statement_list declaration .)
    empty           reduce using rule 245 (statement_list -> statement_list declaration .)
    include         reduce using rule 245 (statement_list -> statement_list declaration .)
    include_once    reduce using rule 245 (statement_list -> statement_list declaration .)
    require         reduce using rule 245 (statement_list -> statement_list declaration .)
    require_once    reduce using rule 245 (statement_list -> statement_list declaration .)
    namespace       reduce using rule 245 (statement_list -> statement_list declaration .)
    int             reduce using rule 245 (statement_list -> statement_list declaration .)
    float           reduce using rule 245 (statement_list -> statement_list declaration .)
    double          reduce using rule 245 (statement_list -> statement_list declaration .)
    global          reduce using rule 245 (statement_list -> statement_list declaration .)
    const           reduce using rule 245 (statement_list -> statement_list declaration .)
    print           reduce using rule 245 (statement_list -> statement_list declaration .)
    echo            reduce using rule 245 (statement_list -> statement_list declaration .)
    while           reduce using rule 245 (statement_list -> statement_list declaration .)
    do              reduce using rule 245 (statement_list -> statement_list declaration .)
    if              reduce using rule 245 (statement_list -> statement_list declaration .)
    function        reduce using rule 245 (statement_list -> statement_list declaration .)
    ID              reduce using rule 245 (statement_list -> statement_list declaration .)
    return          reduce using rule 245 (statement_list -> statement_list declaration .)
    class           reduce using rule 245 (statement_list -> statement_list declaration .)
    final           reduce using rule 245 (statement_list -> statement_list declaration .)
    new             reduce using rule 245 (statement_list -> statement_list declaration .)
    interface       reduce using rule 245 (statement_list -> statement_list declaration .)
    trait           reduce using rule 245 (statement_list -> statement_list declaration .)
    use             reduce using rule 245 (statement_list -> statement_list declaration .)
    continue        reduce using rule 245 (statement_list -> statement_list declaration .)
    goto            reduce using rule 245 (statement_list -> statement_list declaration .)
    declare         reduce using rule 245 (statement_list -> statement_list declaration .)
    VARIABLE        reduce using rule 245 (statement_list -> statement_list declaration .)
    CLOSE_TAG       reduce using rule 245 (statement_list -> statement_list declaration .)
    for             reduce using rule 245 (statement_list -> statement_list declaration .)
    foreach         reduce using rule 245 (statement_list -> statement_list declaration .)
    switch          reduce using rule 245 (statement_list -> statement_list declaration .)
    try             reduce using rule 245 (statement_list -> statement_list declaration .)
    throw           reduce using rule 245 (statement_list -> statement_list declaration .)
    exit            reduce using rule 245 (statement_list -> statement_list declaration .)
    private         reduce using rule 245 (statement_list -> statement_list declaration .)
    protected       reduce using rule 245 (statement_list -> statement_list declaration .)
    public          reduce using rule 245 (statement_list -> statement_list declaration .)
    var             reduce using rule 245 (statement_list -> statement_list declaration .)
    array           reduce using rule 245 (statement_list -> statement_list declaration .)
    pow             reduce using rule 245 (statement_list -> statement_list declaration .)
    POW             reduce using rule 245 (statement_list -> statement_list declaration .)
    abs             reduce using rule 245 (statement_list -> statement_list declaration .)
    cos             reduce using rule 245 (statement_list -> statement_list declaration .)
    deg2rad         reduce using rule 245 (statement_list -> statement_list declaration .)
    rad2deg         reduce using rule 245 (statement_list -> statement_list declaration .)
    die             reduce using rule 245 (statement_list -> statement_list declaration .)
    exp             reduce using rule 245 (statement_list -> statement_list declaration .)
    floor           reduce using rule 245 (statement_list -> statement_list declaration .)
    isset           reduce using rule 245 (statement_list -> statement_list declaration .)
    list            reduce using rule 245 (statement_list -> statement_list declaration .)
    log             reduce using rule 245 (statement_list -> statement_list declaration .)
    log10           reduce using rule 245 (statement_list -> statement_list declaration .)
    max             reduce using rule 245 (statement_list -> statement_list declaration .)
    min             reduce using rule 245 (statement_list -> statement_list declaration .)
    rand            reduce using rule 245 (statement_list -> statement_list declaration .)
    round           reduce using rule 245 (statement_list -> statement_list declaration .)
    sin             reduce using rule 245 (statement_list -> statement_list declaration .)
    sqrt            reduce using rule 245 (statement_list -> statement_list declaration .)
    unset           reduce using rule 245 (statement_list -> statement_list declaration .)
    eval            reduce using rule 245 (statement_list -> statement_list declaration .)
    CADENA          reduce using rule 245 (statement_list -> statement_list declaration .)
    break           reduce using rule 245 (statement_list -> statement_list declaration .)
    endswitch       reduce using rule 245 (statement_list -> statement_list declaration .)
    default         reduce using rule 245 (statement_list -> statement_list declaration .)
    case            reduce using rule 245 (statement_list -> statement_list declaration .)


state 429

    (242) throw_statement -> throw new Exception LPAREN . params RPAREN SEMICOLON
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 518
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 430

    (218) exit_statement -> exit LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 519


state 431

    (247) Built_In_Declaration -> array LPAREN params RPAREN .

    SEMICOLON       reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)
    COMMA           reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RPAREN          reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)
    COLON           reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RBLOCK          reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RBRACKET        reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)
    ASSIGN          reduce using rule 247 (Built_In_Declaration -> array LPAREN params RPAREN .)


state 432

    (248) Built_In_Declaration -> pow LPAREN params RPAREN .

    SEMICOLON       reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    COMMA           reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RPAREN          reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    COLON           reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RBLOCK          reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RBRACKET        reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    ASSIGN          reduce using rule 248 (Built_In_Declaration -> pow LPAREN params RPAREN .)


state 433

    (249) Built_In_Declaration -> POW LPAREN params RPAREN .

    SEMICOLON       reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    COMMA           reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RPAREN          reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    COLON           reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RBLOCK          reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RBRACKET        reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    ASSIGN          reduce using rule 249 (Built_In_Declaration -> POW LPAREN params RPAREN .)


state 434

    (250) Built_In_Declaration -> abs LPAREN params RPAREN .

    SEMICOLON       reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    COMMA           reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RPAREN          reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    COLON           reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RBLOCK          reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RBRACKET        reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    ASSIGN          reduce using rule 250 (Built_In_Declaration -> abs LPAREN params RPAREN .)


state 435

    (251) Built_In_Declaration -> cos LPAREN params RPAREN .

    SEMICOLON       reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    COMMA           reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RPAREN          reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    COLON           reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RBLOCK          reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RBRACKET        reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    ASSIGN          reduce using rule 251 (Built_In_Declaration -> cos LPAREN params RPAREN .)


state 436

    (252) Built_In_Declaration -> deg2rad LPAREN params RPAREN .

    SEMICOLON       reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    COMMA           reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RPAREN          reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    COLON           reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RBLOCK          reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RBRACKET        reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    ASSIGN          reduce using rule 252 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)


state 437

    (253) Built_In_Declaration -> rad2deg LPAREN params RPAREN .

    SEMICOLON       reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    COMMA           reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RPAREN          reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    COLON           reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RBLOCK          reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RBRACKET        reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    ASSIGN          reduce using rule 253 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)


state 438

    (254) Built_In_Declaration -> die LPAREN params RPAREN .

    SEMICOLON       reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)
    COMMA           reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RPAREN          reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)
    COLON           reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RBLOCK          reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RBRACKET        reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)
    ASSIGN          reduce using rule 254 (Built_In_Declaration -> die LPAREN params RPAREN .)


state 439

    (255) Built_In_Declaration -> exp LPAREN params RPAREN .

    SEMICOLON       reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    COMMA           reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RPAREN          reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    COLON           reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RBLOCK          reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RBRACKET        reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    ASSIGN          reduce using rule 255 (Built_In_Declaration -> exp LPAREN params RPAREN .)


state 440

    (256) Built_In_Declaration -> floor LPAREN params RPAREN .

    SEMICOLON       reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    COMMA           reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RPAREN          reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    COLON           reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RBLOCK          reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RBRACKET        reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    ASSIGN          reduce using rule 256 (Built_In_Declaration -> floor LPAREN params RPAREN .)


state 441

    (257) Built_In_Declaration -> isset LPAREN params RPAREN .

    SEMICOLON       reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    COMMA           reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RPAREN          reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    COLON           reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RBLOCK          reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RBRACKET        reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    ASSIGN          reduce using rule 257 (Built_In_Declaration -> isset LPAREN params RPAREN .)


state 442

    (258) Built_In_Declaration -> list LPAREN params RPAREN .

    SEMICOLON       reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)
    COMMA           reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RPAREN          reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)
    COLON           reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RBLOCK          reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RBRACKET        reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)
    ASSIGN          reduce using rule 258 (Built_In_Declaration -> list LPAREN params RPAREN .)


state 443

    (259) Built_In_Declaration -> log LPAREN params RPAREN .

    SEMICOLON       reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)
    COMMA           reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RPAREN          reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)
    COLON           reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RBLOCK          reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RBRACKET        reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)
    ASSIGN          reduce using rule 259 (Built_In_Declaration -> log LPAREN params RPAREN .)


state 444

    (260) Built_In_Declaration -> log10 LPAREN params RPAREN .

    SEMICOLON       reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    COMMA           reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RPAREN          reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    COLON           reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RBLOCK          reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RBRACKET        reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    ASSIGN          reduce using rule 260 (Built_In_Declaration -> log10 LPAREN params RPAREN .)


state 445

    (261) Built_In_Declaration -> max LPAREN params RPAREN .

    SEMICOLON       reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)
    COMMA           reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RPAREN          reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)
    COLON           reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RBLOCK          reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RBRACKET        reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)
    ASSIGN          reduce using rule 261 (Built_In_Declaration -> max LPAREN params RPAREN .)


state 446

    (262) Built_In_Declaration -> min LPAREN params RPAREN .

    SEMICOLON       reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)
    COMMA           reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RPAREN          reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)
    COLON           reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RBLOCK          reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RBRACKET        reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)
    ASSIGN          reduce using rule 262 (Built_In_Declaration -> min LPAREN params RPAREN .)


state 447

    (263) Built_In_Declaration -> rand LPAREN params RPAREN .

    SEMICOLON       reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    COMMA           reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RPAREN          reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    COLON           reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RBLOCK          reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RBRACKET        reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    ASSIGN          reduce using rule 263 (Built_In_Declaration -> rand LPAREN params RPAREN .)


state 448

    (264) Built_In_Declaration -> round LPAREN params RPAREN .

    SEMICOLON       reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)
    COMMA           reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RPAREN          reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)
    COLON           reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RBLOCK          reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RBRACKET        reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)
    ASSIGN          reduce using rule 264 (Built_In_Declaration -> round LPAREN params RPAREN .)


state 449

    (265) Built_In_Declaration -> sin LPAREN params RPAREN .

    SEMICOLON       reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    COMMA           reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RPAREN          reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    COLON           reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RBLOCK          reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RBRACKET        reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    ASSIGN          reduce using rule 265 (Built_In_Declaration -> sin LPAREN params RPAREN .)


state 450

    (266) Built_In_Declaration -> sqrt LPAREN params RPAREN .

    SEMICOLON       reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    COMMA           reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RPAREN          reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    COLON           reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RBLOCK          reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RBRACKET        reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    ASSIGN          reduce using rule 266 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)


state 451

    (267) Built_In_Declaration -> unset LPAREN params RPAREN .

    SEMICOLON       reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    COMMA           reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RPAREN          reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    COLON           reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RBLOCK          reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RBRACKET        reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    ASSIGN          reduce using rule 267 (Built_In_Declaration -> unset LPAREN params RPAREN .)


state 452

    (268) Built_In_Declaration -> eval LPAREN params RPAREN .

    SEMICOLON       reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)
    COMMA           reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)
    RPAREN          reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)
    COLON           reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)
    RBLOCK          reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)
    RBRACKET        reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)
    ASSIGN          reduce using rule 268 (Built_In_Declaration -> eval LPAREN params RPAREN .)


state 453

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET . LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON

    LBRACKET        shift and go to state 520


state 454

    (90) assignment_tail -> VARIABLE LBRACKET expression . COMMA params

    COMMA           shift and go to state 521


state 455

    (91) assignment_tail -> VARIABLE LBRACKET params . RBRACKET
    (204) params -> params . COMMA single_param

    RBRACKET        shift and go to state 522
    COMMA           shift and go to state 309


state 456

    (92) assignment_tail -> VARIABLE LBLOCK params . RBLOCK
    (204) params -> params . COMMA single_param

    RBLOCK          shift and go to state 523
    COMMA           shift and go to state 309


state 457

    (190) match_declaration -> VARIABLE EQUAL match LPAREN single_param . RPAREN LBLOCK match_body RBLOCK SEMICOLON

    RPAREN          shift and go to state 524


state 458

    (89) assignment_tail -> LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)
    COMMA           reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)
    COLON           reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)
    ASSIGN          reduce using rule 89 (assignment_tail -> LBLOCK params RBLOCK .)


state 459

    (81) var_declaration2 -> VARIABLE EQUAL ID LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 525
    COMMA           shift and go to state 309


state 460

    (88) assignment_tail -> LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)
    COMMA           reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)
    COLON           reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)
    ASSIGN          reduce using rule 88 (assignment_tail -> LBRACKET params RBRACKET .)


state 461

    (82) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .

    SEMICOLON       reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    COMMA           reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RPAREN          reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    COLON           reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RBLOCK          reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RBRACKET        reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    ASSIGN          reduce using rule 82 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)


state 462

    (83) var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .

    SEMICOLON       reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    COMMA           reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RPAREN          reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    COLON           reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RBLOCK          reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RBRACKET        reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    ASSIGN          reduce using rule 83 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)


state 463

    (84) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params . RPAREN
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 526
    COMMA           shift and go to state 309


state 464

    (100) expression -> additive_expression comp_op additive_expression logical_op . additive_expression comp_op additive_expression
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    additive_expression            shift and go to state 527
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 465

    (50) constant_declaration -> const ID EQUAL CADENA SEMICOLON .

    COMMENT         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    empty           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    include         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    include_once    reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    require         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    require_once    reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    namespace       reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    int             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    float           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    double          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    global          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    const           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    print           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    echo            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    while           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    do              reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    if              reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    function        reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    ID              reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    return          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    class           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    final           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    new             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    interface       reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    trait           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    use             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    continue        reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    goto            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    declare         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    VARIABLE        reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    for             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    foreach         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    switch          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    try             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    throw           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    exit            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    private         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    protected       reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    public          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    var             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    array           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    pow             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    POW             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    abs             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    cos             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    deg2rad         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    rad2deg         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    die             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    exp             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    floor           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    isset           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    list            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    log             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    log10           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    max             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    min             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    rand            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    round           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    sin             reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    sqrt            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    unset           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    eval            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    CADENA          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    $end            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    RBLOCK          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endwhile        reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endfor          reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endforeach      reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    break           reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endswitch       reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    default         reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    case            reduce using rule 50 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)


state 466

    (51) constant_declaration -> const ID EQUAL NUMBER SEMICOLON .

    COMMENT         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    empty           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    include         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    include_once    reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    require         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    require_once    reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    namespace       reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    int             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    float           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    double          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    global          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    const           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    print           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    echo            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    while           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    do              reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    if              reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    function        reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    return          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    class           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    final           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    new             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    interface       reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    trait           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    use             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    continue        reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    goto            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    declare         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    for             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    foreach         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    switch          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    try             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    throw           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    exit            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    private         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    protected       reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    public          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    var             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    array           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    pow             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    POW             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    abs             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    cos             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    deg2rad         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    rad2deg         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    die             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    exp             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    floor           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    isset           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    list            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    log             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    log10           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    max             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    min             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    rand            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    round           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    sin             reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    sqrt            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    unset           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    eval            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    CADENA          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    $end            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endwhile        reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endfor          reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endforeach      reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    break           reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endswitch       reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    default         reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    case            reduce using rule 51 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)


state 467

    (53) print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include_once    reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    require         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    require_once    reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    namespace       reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    int             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    float           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    double          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    global          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    do              reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    return          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    final           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    interface       reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    trait           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    use             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    continue        reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    goto            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    declare         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    switch          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    try             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    throw           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    private         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    protected       reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    public          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    var             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    array           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    pow             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    POW             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    abs             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    cos             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    deg2rad         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    rad2deg         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    die             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exp             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    floor           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    isset           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    list            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    log             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    log10           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    max             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    min             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    rand            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    round           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    sin             reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    sqrt            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    unset           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    eval            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endwhile        reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endfor          reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endforeach      reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    break           reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endswitch       reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    default         reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    case            reduce using rule 53 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)


state 468

    (54) print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .

    COMMENT         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    empty           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    include         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    include_once    reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    require         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    require_once    reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    namespace       reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    int             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    float           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    double          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    global          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    const           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    print           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    echo            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    while           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    do              reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    if              reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    function        reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    return          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    class           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    final           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    new             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    interface       reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    trait           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    use             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    continue        reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    goto            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    declare         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    for             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    foreach         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    switch          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    try             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    throw           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    exit            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    private         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    protected       reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    public          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    var             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    array           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    pow             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    POW             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    abs             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    cos             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    deg2rad         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    rad2deg         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    die             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    exp             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    floor           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    isset           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    list            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    log             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    log10           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    max             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    min             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    rand            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    round           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    sin             reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    sqrt            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    unset           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    eval            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    CADENA          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endwhile        reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endfor          reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endforeach      reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    break           reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endswitch       reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    default         reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    case            reduce using rule 54 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)


state 469

    (55) print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .

    COMMENT         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    empty           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    include         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    include_once    reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    require         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    require_once    reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    namespace       reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    int             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    float           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    double          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    global          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    const           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    print           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    echo            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    while           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    do              reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    if              reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    function        reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    ID              reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    return          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    class           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    final           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    new             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    interface       reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    trait           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    use             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    continue        reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    goto            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    declare         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    for             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    foreach         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    switch          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    try             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    throw           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    exit            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    private         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    protected       reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    public          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    var             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    array           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    pow             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    POW             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    abs             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    cos             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    deg2rad         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    rad2deg         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    die             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    exp             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    floor           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    isset           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    list            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    log             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    log10           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    max             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    min             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    rand            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    round           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    sin             reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    sqrt            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    unset           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    eval            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    CADENA          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    $end            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endwhile        reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endfor          reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endforeach      reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    break           reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endswitch       reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    default         reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    case            reduce using rule 55 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)


state 470

    (59) echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include_once    reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    require         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    require_once    reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    namespace       reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    int             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    float           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    double          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    global          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    do              reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    return          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    final           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    interface       reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    trait           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    use             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    continue        reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    goto            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    declare         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    switch          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    try             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    throw           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    private         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    protected       reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    public          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    var             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    array           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    pow             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    POW             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    abs             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    cos             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    deg2rad         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    rad2deg         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    die             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exp             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    floor           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    isset           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    list            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    log             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    log10           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    max             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    min             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    rand            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    round           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    sin             reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    sqrt            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    unset           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    eval            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endwhile        reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endfor          reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endforeach      reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    break           reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endswitch       reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    default         reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    case            reduce using rule 59 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)


state 471

    (60) echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .

    COMMENT         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    empty           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    include         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    include_once    reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    require         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    require_once    reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    namespace       reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    int             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    float           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    double          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    global          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    const           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    print           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    echo            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    while           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    do              reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    if              reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    function        reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    return          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    class           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    final           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    new             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    interface       reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    trait           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    use             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    continue        reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    goto            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    declare         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    for             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    foreach         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    switch          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    try             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    throw           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    exit            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    private         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    protected       reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    public          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    var             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    array           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    pow             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    POW             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    abs             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    cos             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    deg2rad         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    rad2deg         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    die             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    exp             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    floor           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    isset           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    list            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    log             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    log10           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    max             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    min             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    rand            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    round           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    sin             reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    sqrt            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    unset           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    eval            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    CADENA          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endwhile        reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endfor          reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endforeach      reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    break           reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endswitch       reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    default         reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    case            reduce using rule 60 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)


state 472

    (61) echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .

    COMMENT         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    empty           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    include         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    include_once    reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    require         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    require_once    reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    namespace       reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    int             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    float           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    double          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    global          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    const           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    print           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    echo            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    while           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    do              reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    if              reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    function        reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    ID              reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    return          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    class           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    final           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    new             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    interface       reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    trait           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    use             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    continue        reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    goto            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    declare         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    for             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    foreach         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    switch          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    try             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    throw           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    exit            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    private         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    protected       reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    public          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    var             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    array           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    pow             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    POW             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    abs             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    cos             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    deg2rad         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    rad2deg         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    die             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    exp             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    floor           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    isset           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    list            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    log             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    log10           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    max             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    min             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    rand            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    round           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    sin             reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    sqrt            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    unset           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    eval            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    CADENA          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    $end            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endwhile        reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endfor          reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endforeach      reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    break           reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endswitch       reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    default         reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    case            reduce using rule 61 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)


state 473

    (281) ceil_expression -> ceil LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)
    COMMA           reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)
    RPAREN          reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)
    COLON           reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 281 (ceil_expression -> ceil LPAREN expression RPAREN .)


state 474

    (93) iteration_stmt -> while LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 528
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 475

    (94) iteration_stmt -> while LPAREN expression RPAREN COLON . declaration_list endwhile SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    endwhile        reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 529
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 476

    (95) iteration_stmt -> do LBLOCK declaration_list RBLOCK while . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 530


state 477

    (96) iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .

    COMMENT         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    COMMENT_MULTI   reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    empty           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    include         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    include_once    reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    require         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    require_once    reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    namespace       reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    int             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    float           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    double          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    global          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    const           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    print           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    echo            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    while           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    do              reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    if              reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    function        reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    ID              reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    return          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    class           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    final           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    new             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    interface       reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    trait           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    use             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    continue        reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    goto            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    declare         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    VARIABLE        reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    CLOSE_TAG       reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    for             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    foreach         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    switch          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    try             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    throw           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    exit            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    private         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    protected       reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    public          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    var             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    array           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    pow             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    POW             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    abs             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    cos             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    deg2rad         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    rad2deg         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    die             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    exp             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    floor           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    isset           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    list            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    log             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    log10           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    max             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    min             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    rand            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    round           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    sin             reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    sqrt            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    unset           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    eval            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    CADENA          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    $end            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    RBLOCK          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endwhile        reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endfor          reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endforeach      reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    break           reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endswitch       reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    default         reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    case            reduce using rule 96 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)


state 478

    (139) if_statement -> if LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 531
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 479

    (144) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration_list return_statement RBLOCK

    LBLOCK          shift and go to state 532


state 480

    (146) fun_declaration -> visibility static function ID LPAREN . params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility static function ID LPAREN . params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 533
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 481

    (152) return_statement -> return ID LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 534


state 482

    (153) class_declaration -> class ID LBLOCK class_body RBLOCK .

    COMMENT         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    empty           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    include         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    include_once    reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    require         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    require_once    reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    namespace       reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    int             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    float           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    double          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    global          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    const           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    print           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    echo            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    while           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    do              reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    if              reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    function        reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    ID              reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    return          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    class           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    final           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    new             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    interface       reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    trait           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    use             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    continue        reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    goto            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    declare         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    VARIABLE        reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    CLOSE_TAG       reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    for             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    foreach         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    switch          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    try             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    throw           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    exit            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    private         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    protected       reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    public          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    var             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    array           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    pow             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    POW             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    abs             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    cos             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    deg2rad         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    rad2deg         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    die             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    exp             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    floor           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    isset           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    list            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    log             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    log10           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    max             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    min             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    rand            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    round           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    sin             reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    sqrt            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    unset           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    eval            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    CADENA          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    $end            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    RBLOCK          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endwhile        reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endfor          reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endforeach      reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    break           reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endswitch       reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    default         reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    case            reduce using rule 153 (class_declaration -> class ID LBLOCK class_body RBLOCK .)


state 483

    (165) class_body -> class_body class_body_element .

    RBLOCK          reduce using rule 165 (class_body -> class_body class_body_element .)
    private         reduce using rule 165 (class_body -> class_body class_body_element .)
    protected       reduce using rule 165 (class_body -> class_body class_body_element .)
    public          reduce using rule 165 (class_body -> class_body class_body_element .)
    var             reduce using rule 165 (class_body -> class_body class_body_element .)
    COMMENT         reduce using rule 165 (class_body -> class_body class_body_element .)
    COMMENT_HASHTAG reduce using rule 165 (class_body -> class_body class_body_element .)
    COMMENT_MULTI   reduce using rule 165 (class_body -> class_body class_body_element .)
    empty           reduce using rule 165 (class_body -> class_body class_body_element .)
    include         reduce using rule 165 (class_body -> class_body class_body_element .)
    include_once    reduce using rule 165 (class_body -> class_body class_body_element .)
    require         reduce using rule 165 (class_body -> class_body class_body_element .)
    require_once    reduce using rule 165 (class_body -> class_body class_body_element .)
    namespace       reduce using rule 165 (class_body -> class_body class_body_element .)
    int             reduce using rule 165 (class_body -> class_body class_body_element .)
    float           reduce using rule 165 (class_body -> class_body class_body_element .)
    double          reduce using rule 165 (class_body -> class_body class_body_element .)
    global          reduce using rule 165 (class_body -> class_body class_body_element .)
    const           reduce using rule 165 (class_body -> class_body class_body_element .)
    print           reduce using rule 165 (class_body -> class_body class_body_element .)
    echo            reduce using rule 165 (class_body -> class_body class_body_element .)
    while           reduce using rule 165 (class_body -> class_body class_body_element .)
    do              reduce using rule 165 (class_body -> class_body class_body_element .)
    if              reduce using rule 165 (class_body -> class_body class_body_element .)
    function        reduce using rule 165 (class_body -> class_body class_body_element .)
    ID              reduce using rule 165 (class_body -> class_body class_body_element .)
    return          reduce using rule 165 (class_body -> class_body class_body_element .)
    class           reduce using rule 165 (class_body -> class_body class_body_element .)
    final           reduce using rule 165 (class_body -> class_body class_body_element .)
    new             reduce using rule 165 (class_body -> class_body class_body_element .)
    interface       reduce using rule 165 (class_body -> class_body class_body_element .)
    trait           reduce using rule 165 (class_body -> class_body class_body_element .)
    use             reduce using rule 165 (class_body -> class_body class_body_element .)
    continue        reduce using rule 165 (class_body -> class_body class_body_element .)
    goto            reduce using rule 165 (class_body -> class_body class_body_element .)
    declare         reduce using rule 165 (class_body -> class_body class_body_element .)
    VARIABLE        reduce using rule 165 (class_body -> class_body class_body_element .)
    CLOSE_TAG       reduce using rule 165 (class_body -> class_body class_body_element .)
    for             reduce using rule 165 (class_body -> class_body class_body_element .)
    foreach         reduce using rule 165 (class_body -> class_body class_body_element .)
    switch          reduce using rule 165 (class_body -> class_body class_body_element .)
    try             reduce using rule 165 (class_body -> class_body class_body_element .)
    throw           reduce using rule 165 (class_body -> class_body class_body_element .)
    exit            reduce using rule 165 (class_body -> class_body class_body_element .)
    array           reduce using rule 165 (class_body -> class_body class_body_element .)
    pow             reduce using rule 165 (class_body -> class_body class_body_element .)
    POW             reduce using rule 165 (class_body -> class_body class_body_element .)
    abs             reduce using rule 165 (class_body -> class_body class_body_element .)
    cos             reduce using rule 165 (class_body -> class_body class_body_element .)
    deg2rad         reduce using rule 165 (class_body -> class_body class_body_element .)
    rad2deg         reduce using rule 165 (class_body -> class_body class_body_element .)
    die             reduce using rule 165 (class_body -> class_body class_body_element .)
    exp             reduce using rule 165 (class_body -> class_body class_body_element .)
    floor           reduce using rule 165 (class_body -> class_body class_body_element .)
    isset           reduce using rule 165 (class_body -> class_body class_body_element .)
    list            reduce using rule 165 (class_body -> class_body class_body_element .)
    log             reduce using rule 165 (class_body -> class_body class_body_element .)
    log10           reduce using rule 165 (class_body -> class_body class_body_element .)
    max             reduce using rule 165 (class_body -> class_body class_body_element .)
    min             reduce using rule 165 (class_body -> class_body class_body_element .)
    rand            reduce using rule 165 (class_body -> class_body class_body_element .)
    round           reduce using rule 165 (class_body -> class_body class_body_element .)
    sin             reduce using rule 165 (class_body -> class_body class_body_element .)
    sqrt            reduce using rule 165 (class_body -> class_body class_body_element .)
    unset           reduce using rule 165 (class_body -> class_body class_body_element .)
    eval            reduce using rule 165 (class_body -> class_body class_body_element .)
    CADENA          reduce using rule 165 (class_body -> class_body class_body_element .)


state 484

    (167) class_body_element -> visibility var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 535


state 485

    (168) class_body_element -> visibility fun_declaration .

    RBLOCK          reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    private         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    protected       reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    public          reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    var             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    COMMENT         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    COMMENT_HASHTAG reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    COMMENT_MULTI   reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    empty           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    include         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    include_once    reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    require         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    require_once    reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    namespace       reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    int             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    float           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    double          reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    global          reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    const           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    print           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    echo            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    while           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    do              reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    if              reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    function        reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    ID              reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    return          reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    class           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    final           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    new             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    interface       reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    trait           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    use             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    continue        reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    goto            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    declare         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    VARIABLE        reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    CLOSE_TAG       reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    for             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    foreach         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    switch          reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    try             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    throw           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    exit            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    array           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    pow             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    POW             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    abs             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    cos             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    deg2rad         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    rad2deg         reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    die             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    exp             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    floor           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    isset           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    list            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    log             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    log10           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    max             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    min             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    rand            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    round           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    sin             reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    sqrt            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    unset           reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    eval            reduce using rule 168 (class_body_element -> visibility fun_declaration .)
    CADENA          reduce using rule 168 (class_body_element -> visibility fun_declaration .)


state 486

    (155) class_declaration -> class ID implements ID LBLOCK . class_body RBLOCK
    (164) class_body -> . class_body_element
    (165) class_body -> . class_body class_body_element
    (166) class_body -> . empty_function
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (284) empty_function -> .
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body                     shift and go to state 536
    class_body_element             shift and go to state 393
    empty_function                 shift and go to state 394
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 487

    (157) class_extension -> class ID extends ID LBLOCK . RBLOCK

    RBLOCK          shift and go to state 537


state 488

    (158) class_extension -> class ID extends Exception LBLOCK . RBLOCK

    RBLOCK          shift and go to state 538


state 489

    (159) class_extension -> class ID extends ErrorException LBLOCK . RBLOCK

    RBLOCK          shift and go to state 539


state 490

    (160) class_extension -> class ID extends Error LBLOCK . RBLOCK

    RBLOCK          shift and go to state 540


state 491

    (161) class_extension -> class ID extends ParseError LBLOCK . RBLOCK

    RBLOCK          shift and go to state 541


state 492

    (162) class_extension -> class ID extends TypeError LBLOCK . RBLOCK

    RBLOCK          shift and go to state 542


state 493

    (154) class_declaration -> final class ID LBLOCK class_body . RBLOCK
    (165) class_body -> class_body . class_body_element
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 543
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body_element             shift and go to state 483
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 494

    (156) class_declaration -> final class ID implements ID . LBLOCK class_body RBLOCK

    LBLOCK          shift and go to state 544


state 495

    (163) create_obj_declaration -> new ID LPAREN params RPAREN .

    COMMENT         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    empty           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include_once    reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    require         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    require_once    reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    namespace       reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    int             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    float           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    double          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    global          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    const           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    print           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    echo            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    while           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    do              reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    if              reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    function        reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ID              reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    return          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    class           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    final           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    new             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    interface       reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    trait           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    use             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    continue        reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    goto            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    declare         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    for             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    foreach         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    switch          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    try             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    throw           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exit            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    private         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    protected       reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    public          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    var             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    array           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    pow             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    POW             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    abs             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    cos             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    deg2rad         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    rad2deg         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    die             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exp             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    floor           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    isset           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    list            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    log             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    log10           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    max             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    min             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    rand            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    round           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    sin             reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    sqrt            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    unset           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    eval            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CADENA          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    $end            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endwhile        reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMA           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COLON           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ASSIGN          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endfor          reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endforeach      reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    break           reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endswitch       reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    default         reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    case            reduce using rule 163 (create_obj_declaration -> new ID LPAREN params RPAREN .)


state 496

    (170) interface_declaration -> interface ID LBLOCK interface_body RBLOCK .

    COMMENT         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    empty           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    include         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    include_once    reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    require         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    require_once    reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    namespace       reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    int             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    float           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    double          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    global          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    const           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    print           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    echo            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    while           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    do              reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    if              reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    function        reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    ID              reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    return          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    class           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    final           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    new             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    interface       reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    trait           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    use             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    continue        reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    goto            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    declare         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    VARIABLE        reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    CLOSE_TAG       reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    for             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    foreach         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    switch          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    try             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    throw           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    exit            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    private         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    protected       reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    public          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    var             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    array           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    pow             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    POW             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    abs             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    cos             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    deg2rad         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    rad2deg         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    die             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    exp             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    floor           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    isset           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    list            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    log             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    log10           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    max             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    min             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    rand            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    round           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    sin             reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    sqrt            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    unset           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    eval            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    CADENA          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    $end            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    RBLOCK          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endwhile        reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endfor          reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endforeach      reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    break           reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endswitch       reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    default         reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    case            reduce using rule 170 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)


state 497

    (172) interface_body -> interface_body interface_method_declaration .

    RBLOCK          reduce using rule 172 (interface_body -> interface_body interface_method_declaration .)
    private         reduce using rule 172 (interface_body -> interface_body interface_method_declaration .)
    protected       reduce using rule 172 (interface_body -> interface_body interface_method_declaration .)
    public          reduce using rule 172 (interface_body -> interface_body interface_method_declaration .)
    var             reduce using rule 172 (interface_body -> interface_body interface_method_declaration .)


state 498

    (174) interface_method_declaration -> visibility function . ID LPAREN params RPAREN SEMICOLON

    ID              shift and go to state 545


state 499

    (175) trait_declaration -> trait ID LBLOCK trait_body RBLOCK .

    COMMENT         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    empty           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    include         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    include_once    reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    require         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    require_once    reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    namespace       reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    int             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    float           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    double          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    global          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    const           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    print           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    echo            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    while           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    do              reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    if              reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    function        reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    ID              reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    return          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    class           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    final           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    new             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    interface       reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    trait           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    use             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    continue        reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    goto            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    declare         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    VARIABLE        reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    CLOSE_TAG       reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    for             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    foreach         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    switch          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    try             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    throw           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    exit            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    private         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    protected       reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    public          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    var             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    array           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    pow             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    POW             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    abs             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    cos             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    deg2rad         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    rad2deg         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    die             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    exp             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    floor           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    isset           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    list            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    log             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    log10           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    max             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    min             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    rand            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    round           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    sin             reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    sqrt            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    unset           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    eval            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    CADENA          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    $end            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    RBLOCK          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endwhile        reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endfor          reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endforeach      reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    break           reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endswitch       reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    default         reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    case            reduce using rule 175 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)


state 500

    (177) trait_body -> trait_body trait_element .

    RBLOCK          reduce using rule 177 (trait_body -> trait_body trait_element .)
    private         reduce using rule 177 (trait_body -> trait_body trait_element .)
    protected       reduce using rule 177 (trait_body -> trait_body trait_element .)
    public          reduce using rule 177 (trait_body -> trait_body trait_element .)
    var             reduce using rule 177 (trait_body -> trait_body trait_element .)


state 501

    (179) trait_element -> visibility var_declaration . SEMICOLON

    SEMICOLON       shift and go to state 546


state 502

    (180) trait_element -> visibility fun_declaration .

    RBLOCK          reduce using rule 180 (trait_element -> visibility fun_declaration .)
    private         reduce using rule 180 (trait_element -> visibility fun_declaration .)
    protected       reduce using rule 180 (trait_element -> visibility fun_declaration .)
    public          reduce using rule 180 (trait_element -> visibility fun_declaration .)
    var             reduce using rule 180 (trait_element -> visibility fun_declaration .)


state 503

    (182) use_declaration -> use id_list LBLOCK use_body RBLOCK .

    COMMENT         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    empty           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    include         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    include_once    reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    require         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    require_once    reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    namespace       reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    int             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    float           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    double          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    global          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    const           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    print           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    echo            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    while           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    do              reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    if              reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    function        reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    ID              reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    return          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    class           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    final           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    new             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    interface       reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    trait           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    use             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    continue        reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    goto            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    declare         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    VARIABLE        reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    CLOSE_TAG       reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    for             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    foreach         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    switch          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    try             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    throw           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    exit            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    private         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    protected       reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    public          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    var             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    array           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    pow             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    POW             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    abs             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    cos             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    deg2rad         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    rad2deg         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    die             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    exp             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    floor           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    isset           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    list            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    log             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    log10           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    max             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    min             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    rand            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    round           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    sin             reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    sqrt            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    unset           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    eval            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    CADENA          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    $end            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    RBLOCK          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    endwhile        reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    endfor          reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    endforeach      reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    break           reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    endswitch       reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    default         reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)
    case            reduce using rule 182 (use_declaration -> use id_list LBLOCK use_body RBLOCK .)


state 504

    (183) use_body -> use_body use_statement .

    RBLOCK          reduce using rule 183 (use_body -> use_body use_statement .)
    ID              reduce using rule 183 (use_body -> use_body use_statement .)


state 505

    (186) use_statement -> ID COLON . COLON ID insteadof ID SEMICOLON

    COLON           shift and go to state 547


state 506

    (283) declare_statement -> declare LPAREN ID EQUAL expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 548


state 507

    (213) for_loop -> for LPAREN for_init for_expr for_update . RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> for LPAREN for_init for_expr for_update . RPAREN COLON declaration_list endfor SEMICOLON

    RPAREN          shift and go to state 549


state 508

    (217) for_update -> expression .

    RPAREN          reduce using rule 217 (for_update -> expression .)


state 509

    (216) for_expr -> expression SEMICOLON .

    VARIABLE        reduce using rule 216 (for_expr -> expression SEMICOLON .)
    MINUS           reduce using rule 216 (for_expr -> expression SEMICOLON .)
    NUMBER          reduce using rule 216 (for_expr -> expression SEMICOLON .)
    LPAREN          reduce using rule 216 (for_expr -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 216 (for_expr -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 216 (for_expr -> expression SEMICOLON .)
    true            reduce using rule 216 (for_expr -> expression SEMICOLON .)
    false           reduce using rule 216 (for_expr -> expression SEMICOLON .)


state 510

    (219) foreach_loop -> foreach LPAREN expression as expression . RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> foreach LPAREN expression as expression . RPAREN COLON declaration_list endforeach SEMICOLON

    RPAREN          shift and go to state 550


state 511

    (221) switch_statement -> switch LPAREN expression RPAREN LBLOCK . case_blocks default_block RBLOCK
    (223) case_blocks -> . case_blocks case_block
    (224) case_blocks -> . case_block
    (225) case_blocks -> . empty_function
    (226) case_block -> . case expression COLON statement_list
    (227) case_block -> . case expression COLON statement_list break SEMICOLON
    (284) empty_function -> .

  ! shift/reduce conflict for case resolved as shift
    case            shift and go to state 554
    default         reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)

  ! case            [ reduce using rule 284 (empty_function -> .) ]

    case_blocks                    shift and go to state 551
    case_block                     shift and go to state 552
    empty_function                 shift and go to state 553

state 512

    (222) switch_statement -> switch LPAREN expression RPAREN COLON . case_blocks default_block endswitch SEMICOLON
    (223) case_blocks -> . case_blocks case_block
    (224) case_blocks -> . case_block
    (225) case_blocks -> . empty_function
    (226) case_block -> . case expression COLON statement_list
    (227) case_block -> . case expression COLON statement_list break SEMICOLON
    (284) empty_function -> .

  ! shift/reduce conflict for case resolved as shift
    case            shift and go to state 554
    default         reduce using rule 284 (empty_function -> .)
    endswitch       reduce using rule 284 (empty_function -> .)

  ! case            [ reduce using rule 284 (empty_function -> .) ]

    case_blocks                    shift and go to state 555
    case_block                     shift and go to state 552
    empty_function                 shift and go to state 553

state 513

    (231) try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .
    (232) catch_blocks -> catch_blocks . catch_block
    (234) catch_blocks -> catch_blocks . finally_block
    (236) catch_block -> . catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK
    (243) finally_block -> . finally LBLOCK statement_list RBLOCK

    COMMENT         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    COMMENT_HASHTAG reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    COMMENT_MULTI   reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    empty           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    include         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    include_once    reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    require         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    require_once    reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    namespace       reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    int             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    float           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    double          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    global          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    const           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    print           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    echo            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    while           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    do              reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    if              reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    function        reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    ID              reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    return          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    class           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    final           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    new             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    interface       reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    trait           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    use             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    continue        reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    goto            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    declare         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    VARIABLE        reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    CLOSE_TAG       reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    for             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    foreach         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    switch          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    try             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    throw           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    exit            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    private         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    protected       reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    public          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    var             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    array           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    pow             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    POW             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    abs             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    cos             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    deg2rad         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    rad2deg         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    die             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    exp             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    floor           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    isset           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    list            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    log             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    log10           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    max             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    min             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    rand            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    round           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    sin             reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    sqrt            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    unset           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    eval            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    CADENA          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    $end            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    RBLOCK          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endwhile        reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endfor          reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endforeach      reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    break           reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endswitch       reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    default         reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    case            reduce using rule 231 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    catch           shift and go to state 516
    finally         shift and go to state 517

    catch_block                    shift and go to state 556
    finally_block                  shift and go to state 557

state 514

    (233) catch_blocks -> catch_block .

    catch           reduce using rule 233 (catch_blocks -> catch_block .)
    finally         reduce using rule 233 (catch_blocks -> catch_block .)
    COMMENT         reduce using rule 233 (catch_blocks -> catch_block .)
    COMMENT_HASHTAG reduce using rule 233 (catch_blocks -> catch_block .)
    COMMENT_MULTI   reduce using rule 233 (catch_blocks -> catch_block .)
    empty           reduce using rule 233 (catch_blocks -> catch_block .)
    include         reduce using rule 233 (catch_blocks -> catch_block .)
    include_once    reduce using rule 233 (catch_blocks -> catch_block .)
    require         reduce using rule 233 (catch_blocks -> catch_block .)
    require_once    reduce using rule 233 (catch_blocks -> catch_block .)
    namespace       reduce using rule 233 (catch_blocks -> catch_block .)
    int             reduce using rule 233 (catch_blocks -> catch_block .)
    float           reduce using rule 233 (catch_blocks -> catch_block .)
    double          reduce using rule 233 (catch_blocks -> catch_block .)
    global          reduce using rule 233 (catch_blocks -> catch_block .)
    const           reduce using rule 233 (catch_blocks -> catch_block .)
    print           reduce using rule 233 (catch_blocks -> catch_block .)
    echo            reduce using rule 233 (catch_blocks -> catch_block .)
    while           reduce using rule 233 (catch_blocks -> catch_block .)
    do              reduce using rule 233 (catch_blocks -> catch_block .)
    if              reduce using rule 233 (catch_blocks -> catch_block .)
    function        reduce using rule 233 (catch_blocks -> catch_block .)
    ID              reduce using rule 233 (catch_blocks -> catch_block .)
    return          reduce using rule 233 (catch_blocks -> catch_block .)
    class           reduce using rule 233 (catch_blocks -> catch_block .)
    final           reduce using rule 233 (catch_blocks -> catch_block .)
    new             reduce using rule 233 (catch_blocks -> catch_block .)
    interface       reduce using rule 233 (catch_blocks -> catch_block .)
    trait           reduce using rule 233 (catch_blocks -> catch_block .)
    use             reduce using rule 233 (catch_blocks -> catch_block .)
    continue        reduce using rule 233 (catch_blocks -> catch_block .)
    goto            reduce using rule 233 (catch_blocks -> catch_block .)
    declare         reduce using rule 233 (catch_blocks -> catch_block .)
    VARIABLE        reduce using rule 233 (catch_blocks -> catch_block .)
    CLOSE_TAG       reduce using rule 233 (catch_blocks -> catch_block .)
    for             reduce using rule 233 (catch_blocks -> catch_block .)
    foreach         reduce using rule 233 (catch_blocks -> catch_block .)
    switch          reduce using rule 233 (catch_blocks -> catch_block .)
    try             reduce using rule 233 (catch_blocks -> catch_block .)
    throw           reduce using rule 233 (catch_blocks -> catch_block .)
    exit            reduce using rule 233 (catch_blocks -> catch_block .)
    private         reduce using rule 233 (catch_blocks -> catch_block .)
    protected       reduce using rule 233 (catch_blocks -> catch_block .)
    public          reduce using rule 233 (catch_blocks -> catch_block .)
    var             reduce using rule 233 (catch_blocks -> catch_block .)
    array           reduce using rule 233 (catch_blocks -> catch_block .)
    pow             reduce using rule 233 (catch_blocks -> catch_block .)
    POW             reduce using rule 233 (catch_blocks -> catch_block .)
    abs             reduce using rule 233 (catch_blocks -> catch_block .)
    cos             reduce using rule 233 (catch_blocks -> catch_block .)
    deg2rad         reduce using rule 233 (catch_blocks -> catch_block .)
    rad2deg         reduce using rule 233 (catch_blocks -> catch_block .)
    die             reduce using rule 233 (catch_blocks -> catch_block .)
    exp             reduce using rule 233 (catch_blocks -> catch_block .)
    floor           reduce using rule 233 (catch_blocks -> catch_block .)
    isset           reduce using rule 233 (catch_blocks -> catch_block .)
    list            reduce using rule 233 (catch_blocks -> catch_block .)
    log             reduce using rule 233 (catch_blocks -> catch_block .)
    log10           reduce using rule 233 (catch_blocks -> catch_block .)
    max             reduce using rule 233 (catch_blocks -> catch_block .)
    min             reduce using rule 233 (catch_blocks -> catch_block .)
    rand            reduce using rule 233 (catch_blocks -> catch_block .)
    round           reduce using rule 233 (catch_blocks -> catch_block .)
    sin             reduce using rule 233 (catch_blocks -> catch_block .)
    sqrt            reduce using rule 233 (catch_blocks -> catch_block .)
    unset           reduce using rule 233 (catch_blocks -> catch_block .)
    eval            reduce using rule 233 (catch_blocks -> catch_block .)
    CADENA          reduce using rule 233 (catch_blocks -> catch_block .)
    $end            reduce using rule 233 (catch_blocks -> catch_block .)
    RBLOCK          reduce using rule 233 (catch_blocks -> catch_block .)
    endwhile        reduce using rule 233 (catch_blocks -> catch_block .)
    endfor          reduce using rule 233 (catch_blocks -> catch_block .)
    endforeach      reduce using rule 233 (catch_blocks -> catch_block .)
    break           reduce using rule 233 (catch_blocks -> catch_block .)
    endswitch       reduce using rule 233 (catch_blocks -> catch_block .)
    default         reduce using rule 233 (catch_blocks -> catch_block .)
    case            reduce using rule 233 (catch_blocks -> catch_block .)


state 515

    (235) catch_blocks -> finally_block .

    catch           reduce using rule 235 (catch_blocks -> finally_block .)
    finally         reduce using rule 235 (catch_blocks -> finally_block .)
    COMMENT         reduce using rule 235 (catch_blocks -> finally_block .)
    COMMENT_HASHTAG reduce using rule 235 (catch_blocks -> finally_block .)
    COMMENT_MULTI   reduce using rule 235 (catch_blocks -> finally_block .)
    empty           reduce using rule 235 (catch_blocks -> finally_block .)
    include         reduce using rule 235 (catch_blocks -> finally_block .)
    include_once    reduce using rule 235 (catch_blocks -> finally_block .)
    require         reduce using rule 235 (catch_blocks -> finally_block .)
    require_once    reduce using rule 235 (catch_blocks -> finally_block .)
    namespace       reduce using rule 235 (catch_blocks -> finally_block .)
    int             reduce using rule 235 (catch_blocks -> finally_block .)
    float           reduce using rule 235 (catch_blocks -> finally_block .)
    double          reduce using rule 235 (catch_blocks -> finally_block .)
    global          reduce using rule 235 (catch_blocks -> finally_block .)
    const           reduce using rule 235 (catch_blocks -> finally_block .)
    print           reduce using rule 235 (catch_blocks -> finally_block .)
    echo            reduce using rule 235 (catch_blocks -> finally_block .)
    while           reduce using rule 235 (catch_blocks -> finally_block .)
    do              reduce using rule 235 (catch_blocks -> finally_block .)
    if              reduce using rule 235 (catch_blocks -> finally_block .)
    function        reduce using rule 235 (catch_blocks -> finally_block .)
    ID              reduce using rule 235 (catch_blocks -> finally_block .)
    return          reduce using rule 235 (catch_blocks -> finally_block .)
    class           reduce using rule 235 (catch_blocks -> finally_block .)
    final           reduce using rule 235 (catch_blocks -> finally_block .)
    new             reduce using rule 235 (catch_blocks -> finally_block .)
    interface       reduce using rule 235 (catch_blocks -> finally_block .)
    trait           reduce using rule 235 (catch_blocks -> finally_block .)
    use             reduce using rule 235 (catch_blocks -> finally_block .)
    continue        reduce using rule 235 (catch_blocks -> finally_block .)
    goto            reduce using rule 235 (catch_blocks -> finally_block .)
    declare         reduce using rule 235 (catch_blocks -> finally_block .)
    VARIABLE        reduce using rule 235 (catch_blocks -> finally_block .)
    CLOSE_TAG       reduce using rule 235 (catch_blocks -> finally_block .)
    for             reduce using rule 235 (catch_blocks -> finally_block .)
    foreach         reduce using rule 235 (catch_blocks -> finally_block .)
    switch          reduce using rule 235 (catch_blocks -> finally_block .)
    try             reduce using rule 235 (catch_blocks -> finally_block .)
    throw           reduce using rule 235 (catch_blocks -> finally_block .)
    exit            reduce using rule 235 (catch_blocks -> finally_block .)
    private         reduce using rule 235 (catch_blocks -> finally_block .)
    protected       reduce using rule 235 (catch_blocks -> finally_block .)
    public          reduce using rule 235 (catch_blocks -> finally_block .)
    var             reduce using rule 235 (catch_blocks -> finally_block .)
    array           reduce using rule 235 (catch_blocks -> finally_block .)
    pow             reduce using rule 235 (catch_blocks -> finally_block .)
    POW             reduce using rule 235 (catch_blocks -> finally_block .)
    abs             reduce using rule 235 (catch_blocks -> finally_block .)
    cos             reduce using rule 235 (catch_blocks -> finally_block .)
    deg2rad         reduce using rule 235 (catch_blocks -> finally_block .)
    rad2deg         reduce using rule 235 (catch_blocks -> finally_block .)
    die             reduce using rule 235 (catch_blocks -> finally_block .)
    exp             reduce using rule 235 (catch_blocks -> finally_block .)
    floor           reduce using rule 235 (catch_blocks -> finally_block .)
    isset           reduce using rule 235 (catch_blocks -> finally_block .)
    list            reduce using rule 235 (catch_blocks -> finally_block .)
    log             reduce using rule 235 (catch_blocks -> finally_block .)
    log10           reduce using rule 235 (catch_blocks -> finally_block .)
    max             reduce using rule 235 (catch_blocks -> finally_block .)
    min             reduce using rule 235 (catch_blocks -> finally_block .)
    rand            reduce using rule 235 (catch_blocks -> finally_block .)
    round           reduce using rule 235 (catch_blocks -> finally_block .)
    sin             reduce using rule 235 (catch_blocks -> finally_block .)
    sqrt            reduce using rule 235 (catch_blocks -> finally_block .)
    unset           reduce using rule 235 (catch_blocks -> finally_block .)
    eval            reduce using rule 235 (catch_blocks -> finally_block .)
    CADENA          reduce using rule 235 (catch_blocks -> finally_block .)
    $end            reduce using rule 235 (catch_blocks -> finally_block .)
    RBLOCK          reduce using rule 235 (catch_blocks -> finally_block .)
    endwhile        reduce using rule 235 (catch_blocks -> finally_block .)
    endfor          reduce using rule 235 (catch_blocks -> finally_block .)
    endforeach      reduce using rule 235 (catch_blocks -> finally_block .)
    break           reduce using rule 235 (catch_blocks -> finally_block .)
    endswitch       reduce using rule 235 (catch_blocks -> finally_block .)
    default         reduce using rule 235 (catch_blocks -> finally_block .)
    case            reduce using rule 235 (catch_blocks -> finally_block .)


state 516

    (236) catch_block -> catch . LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK

    LPAREN          shift and go to state 558


state 517

    (243) finally_block -> finally . LBLOCK statement_list RBLOCK

    LBLOCK          shift and go to state 559


state 518

    (242) throw_statement -> throw new Exception LPAREN params . RPAREN SEMICOLON
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 560
    COMMA           shift and go to state 309


state 519

    (218) exit_statement -> exit LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    include_once    reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    require         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    require_once    reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    namespace       reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    int             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    float           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    double          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    global          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    final           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    use             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    continue        reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    goto            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    declare         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    try             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    throw           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    eval            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 218 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)


state 520

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET . NUMBER RBRACKET EQUAL expression SEMICOLON

    NUMBER          shift and go to state 561


state 521

    (90) assignment_tail -> VARIABLE LBRACKET expression COMMA . params
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    SEMICOLON       reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    RPAREN          reduce using rule 284 (empty_function -> .)
    COLON           reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)
    RBRACKET        reduce using rule 284 (empty_function -> .)
    ASSIGN          reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 562
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 522

    (91) assignment_tail -> VARIABLE LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COMMA           reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COLON           reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    ASSIGN          reduce using rule 91 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)


state 523

    (92) assignment_tail -> VARIABLE LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COMMA           reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COLON           reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    ASSIGN          reduce using rule 92 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)


state 524

    (190) match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN . LBLOCK match_body RBLOCK SEMICOLON

    LBLOCK          shift and go to state 563


state 525

    (81) var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .

    SEMICOLON       reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    COMMA           reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    COLON           reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    ASSIGN          reduce using rule 81 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)


state 526

    (84) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .

    SEMICOLON       reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    COMMA           reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    COLON           reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    ASSIGN          reduce using rule 84 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)


state 527

    (100) expression -> additive_expression comp_op additive_expression logical_op additive_expression . comp_op additive_expression
    (123) comp_op -> . LESS
    (124) comp_op -> . LESSEQUAL
    (125) comp_op -> . GREATER
    (126) comp_op -> . GREATEREQUAL
    (127) comp_op -> . DEQUAL
    (128) comp_op -> . DISTINT
    (129) comp_op -> . DIVEQUAL
    (130) comp_op -> . ISEQUAL
    (131) comp_op -> . ISIDENTICAL
    (132) comp_op -> . ISNOTIDENTICAL

    LESS            shift and go to state 258
    LESSEQUAL       shift and go to state 259
    GREATER         shift and go to state 260
    GREATEREQUAL    shift and go to state 261
    DEQUAL          shift and go to state 262
    DISTINT         shift and go to state 263
    DIVEQUAL        shift and go to state 264
    ISEQUAL         shift and go to state 265
    ISIDENTICAL     shift and go to state 266
    ISNOTIDENTICAL  shift and go to state 267

    comp_op                        shift and go to state 564

state 528

    (93) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 565
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 529

    (94) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list . endwhile SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for endwhile resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    endwhile        shift and go to state 566
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! endwhile        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 530

    (95) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN . expression RPAREN SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 567
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 531

    (139) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 568
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 532

    (144) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration_list RBLOCK
    (145) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration_list return_statement RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 569
    return_statement               shift and go to state 21
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 533

    (146) fun_declaration -> visibility static function ID LPAREN params . RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility static function ID LPAREN params . RPAREN LBLOCK declaration_list return_statement RBLOCK
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 570
    COMMA           shift and go to state 309


state 534

    (152) return_statement -> return ID LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    include_once    reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    require         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    require_once    reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    namespace       reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    int             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    float           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    double          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    global          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    final           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    use             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    continue        reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    goto            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    declare         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    try             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    throw           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    eval            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 152 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)


state 535

    (167) class_body_element -> visibility var_declaration2 SEMICOLON .

    RBLOCK          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    private         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    protected       reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    public          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    var             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    empty           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    include         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    include_once    reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    require         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    require_once    reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    namespace       reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    int             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    float           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    double          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    global          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    const           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    print           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    echo            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    while           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    do              reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    if              reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    function        reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    ID              reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    return          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    class           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    final           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    new             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    interface       reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    trait           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    use             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    continue        reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    goto            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    declare         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    for             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    foreach         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    switch          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    try             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    throw           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    exit            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    array           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    pow             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    POW             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    abs             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    cos             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    die             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    exp             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    floor           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    isset           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    list            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    log             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    log10           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    max             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    min             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    rand            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    round           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    sin             reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    unset           reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    eval            reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 167 (class_body_element -> visibility var_declaration2 SEMICOLON .)


state 536

    (155) class_declaration -> class ID implements ID LBLOCK class_body . RBLOCK
    (165) class_body -> class_body . class_body_element
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 571
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body_element             shift and go to state 483
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 537

    (157) class_extension -> class ID extends ID LBLOCK RBLOCK .

    COMMENT         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    empty           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    include         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    include_once    reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    require         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    require_once    reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    namespace       reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    int             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    float           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    double          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    global          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    const           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    print           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    echo            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    while           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    do              reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    if              reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    function        reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    ID              reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    return          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    class           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    final           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    new             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    interface       reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    trait           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    use             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    continue        reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    goto            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    declare         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    for             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    foreach         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    switch          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    try             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    throw           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    exit            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    private         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    protected       reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    public          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    var             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    array           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    pow             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    POW             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    abs             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    cos             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    deg2rad         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    rad2deg         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    die             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    exp             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    floor           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    isset           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    list            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    log             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    log10           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    max             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    min             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    rand            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    round           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    sin             reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    sqrt            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    unset           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    eval            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    CADENA          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    $end            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endwhile        reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endfor          reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endforeach      reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    break           reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endswitch       reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    default         reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    case            reduce using rule 157 (class_extension -> class ID extends ID LBLOCK RBLOCK .)


state 538

    (158) class_extension -> class ID extends Exception LBLOCK RBLOCK .

    COMMENT         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    empty           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    include         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    include_once    reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    require         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    require_once    reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    namespace       reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    int             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    float           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    double          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    global          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    const           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    print           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    echo            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    while           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    do              reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    if              reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    function        reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    ID              reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    return          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    class           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    final           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    new             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    interface       reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    trait           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    use             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    continue        reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    goto            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    declare         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    for             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    foreach         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    switch          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    try             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    throw           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    exit            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    private         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    protected       reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    public          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    var             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    array           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    pow             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    POW             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    abs             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    cos             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    deg2rad         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    rad2deg         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    die             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    exp             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    floor           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    isset           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    list            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    log             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    log10           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    max             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    min             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    rand            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    round           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    sin             reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    sqrt            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    unset           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    eval            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    CADENA          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    $end            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endwhile        reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endfor          reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endforeach      reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    break           reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endswitch       reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    default         reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    case            reduce using rule 158 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)


state 539

    (159) class_extension -> class ID extends ErrorException LBLOCK RBLOCK .

    COMMENT         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    empty           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    include         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    include_once    reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    require         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    require_once    reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    namespace       reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    int             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    float           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    double          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    global          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    const           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    print           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    echo            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    while           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    do              reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    if              reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    function        reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    ID              reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    return          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    class           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    final           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    new             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    interface       reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    trait           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    use             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    continue        reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    goto            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    declare         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    for             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    foreach         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    switch          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    try             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    throw           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    exit            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    private         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    protected       reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    public          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    var             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    array           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    pow             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    POW             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    abs             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    cos             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    deg2rad         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    rad2deg         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    die             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    exp             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    floor           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    isset           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    list            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    log             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    log10           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    max             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    min             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    rand            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    round           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    sin             reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    sqrt            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    unset           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    eval            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    CADENA          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    $end            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endwhile        reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endfor          reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endforeach      reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    break           reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endswitch       reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    default         reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    case            reduce using rule 159 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)


state 540

    (160) class_extension -> class ID extends Error LBLOCK RBLOCK .

    COMMENT         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    empty           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    include         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    include_once    reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    require         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    require_once    reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    namespace       reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    int             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    float           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    double          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    global          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    const           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    print           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    echo            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    while           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    do              reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    if              reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    function        reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    ID              reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    return          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    class           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    final           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    new             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    interface       reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    trait           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    use             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    continue        reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    goto            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    declare         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    for             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    foreach         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    switch          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    try             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    throw           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    exit            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    private         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    protected       reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    public          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    var             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    array           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    pow             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    POW             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    abs             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    cos             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    deg2rad         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    rad2deg         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    die             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    exp             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    floor           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    isset           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    list            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    log             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    log10           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    max             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    min             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    rand            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    round           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    sin             reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    sqrt            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    unset           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    eval            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    CADENA          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    $end            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endwhile        reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endfor          reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endforeach      reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    break           reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endswitch       reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    default         reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    case            reduce using rule 160 (class_extension -> class ID extends Error LBLOCK RBLOCK .)


state 541

    (161) class_extension -> class ID extends ParseError LBLOCK RBLOCK .

    COMMENT         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    empty           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    include         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    include_once    reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    require         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    require_once    reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    namespace       reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    int             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    float           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    double          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    global          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    const           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    print           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    echo            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    while           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    do              reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    if              reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    function        reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    ID              reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    return          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    class           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    final           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    new             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    interface       reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    trait           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    use             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    continue        reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    goto            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    declare         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    for             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    foreach         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    switch          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    try             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    throw           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    exit            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    private         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    protected       reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    public          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    var             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    array           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    pow             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    POW             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    abs             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    cos             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    deg2rad         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    rad2deg         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    die             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    exp             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    floor           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    isset           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    list            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    log             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    log10           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    max             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    min             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    rand            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    round           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    sin             reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    sqrt            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    unset           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    eval            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    CADENA          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    $end            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endwhile        reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endfor          reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endforeach      reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    break           reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endswitch       reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    default         reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    case            reduce using rule 161 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)


state 542

    (162) class_extension -> class ID extends TypeError LBLOCK RBLOCK .

    COMMENT         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    empty           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    include         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    include_once    reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    require         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    require_once    reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    namespace       reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    int             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    float           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    double          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    global          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    const           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    print           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    echo            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    while           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    do              reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    if              reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    function        reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    ID              reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    return          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    class           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    final           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    new             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    interface       reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    trait           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    use             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    continue        reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    goto            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    declare         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    for             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    foreach         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    switch          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    try             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    throw           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    exit            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    private         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    protected       reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    public          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    var             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    array           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    pow             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    POW             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    abs             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    cos             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    deg2rad         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    rad2deg         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    die             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    exp             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    floor           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    isset           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    list            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    log             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    log10           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    max             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    min             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    rand            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    round           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    sin             reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    sqrt            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    unset           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    eval            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    CADENA          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    $end            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endwhile        reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endfor          reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endforeach      reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    break           reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endswitch       reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    default         reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    case            reduce using rule 162 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)


state 543

    (154) class_declaration -> final class ID LBLOCK class_body RBLOCK .

    COMMENT         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    empty           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    include         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    include_once    reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    require         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    require_once    reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    namespace       reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    int             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    float           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    double          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    global          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    const           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    print           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    echo            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    while           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    do              reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    if              reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    function        reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    ID              reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    return          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    class           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    final           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    new             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    interface       reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    trait           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    use             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    continue        reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    goto            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    declare         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    VARIABLE        reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    CLOSE_TAG       reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    for             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    foreach         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    switch          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    try             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    throw           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    exit            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    private         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    protected       reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    public          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    var             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    array           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    pow             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    POW             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    abs             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    cos             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    deg2rad         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    rad2deg         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    die             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    exp             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    floor           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    isset           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    list            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    log             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    log10           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    max             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    min             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    rand            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    round           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    sin             reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    sqrt            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    unset           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    eval            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    CADENA          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    $end            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    RBLOCK          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    endwhile        reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    endfor          reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    endforeach      reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    break           reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    endswitch       reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    default         reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)
    case            reduce using rule 154 (class_declaration -> final class ID LBLOCK class_body RBLOCK .)


state 544

    (156) class_declaration -> final class ID implements ID LBLOCK . class_body RBLOCK
    (164) class_body -> . class_body_element
    (165) class_body -> . class_body class_body_element
    (166) class_body -> . empty_function
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (284) empty_function -> .
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body                     shift and go to state 572
    class_body_element             shift and go to state 393
    empty_function                 shift and go to state 394
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 545

    (174) interface_method_declaration -> visibility function ID . LPAREN params RPAREN SEMICOLON

    LPAREN          shift and go to state 573


state 546

    (179) trait_element -> visibility var_declaration SEMICOLON .

    RBLOCK          reduce using rule 179 (trait_element -> visibility var_declaration SEMICOLON .)
    private         reduce using rule 179 (trait_element -> visibility var_declaration SEMICOLON .)
    protected       reduce using rule 179 (trait_element -> visibility var_declaration SEMICOLON .)
    public          reduce using rule 179 (trait_element -> visibility var_declaration SEMICOLON .)
    var             reduce using rule 179 (trait_element -> visibility var_declaration SEMICOLON .)


state 547

    (186) use_statement -> ID COLON COLON . ID insteadof ID SEMICOLON

    ID              shift and go to state 574


state 548

    (283) declare_statement -> declare LPAREN ID EQUAL expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 575


state 549

    (213) for_loop -> for LPAREN for_init for_expr for_update RPAREN . LBLOCK declaration_list RBLOCK
    (214) for_loop -> for LPAREN for_init for_expr for_update RPAREN . COLON declaration_list endfor SEMICOLON

    LBLOCK          shift and go to state 576
    COLON           shift and go to state 577


state 550

    (219) foreach_loop -> foreach LPAREN expression as expression RPAREN . LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> foreach LPAREN expression as expression RPAREN . COLON declaration_list endforeach SEMICOLON

    LBLOCK          shift and go to state 578
    COLON           shift and go to state 579


state 551

    (221) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks . default_block RBLOCK
    (223) case_blocks -> case_blocks . case_block
    (228) default_block -> . default COLON statement_list
    (229) default_block -> . default COLON statement_list break SEMICOLON
    (230) default_block -> . empty_function
    (226) case_block -> . case expression COLON statement_list
    (227) case_block -> . case expression COLON statement_list break SEMICOLON
    (284) empty_function -> .

    default         shift and go to state 582
    case            shift and go to state 554
    RBLOCK          reduce using rule 284 (empty_function -> .)

    default_block                  shift and go to state 580
    case_block                     shift and go to state 581
    empty_function                 shift and go to state 583

state 552

    (224) case_blocks -> case_block .

    default         reduce using rule 224 (case_blocks -> case_block .)
    case            reduce using rule 224 (case_blocks -> case_block .)
    RBLOCK          reduce using rule 224 (case_blocks -> case_block .)
    endswitch       reduce using rule 224 (case_blocks -> case_block .)


state 553

    (225) case_blocks -> empty_function .

    default         reduce using rule 225 (case_blocks -> empty_function .)
    case            reduce using rule 225 (case_blocks -> empty_function .)
    RBLOCK          reduce using rule 225 (case_blocks -> empty_function .)
    endswitch       reduce using rule 225 (case_blocks -> empty_function .)


state 554

    (226) case_block -> case . expression COLON statement_list
    (227) case_block -> case . expression COLON statement_list break SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 584
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 555

    (222) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks . default_block endswitch SEMICOLON
    (223) case_blocks -> case_blocks . case_block
    (228) default_block -> . default COLON statement_list
    (229) default_block -> . default COLON statement_list break SEMICOLON
    (230) default_block -> . empty_function
    (226) case_block -> . case expression COLON statement_list
    (227) case_block -> . case expression COLON statement_list break SEMICOLON
    (284) empty_function -> .

    default         shift and go to state 582
    case            shift and go to state 554
    endswitch       reduce using rule 284 (empty_function -> .)

    default_block                  shift and go to state 585
    case_block                     shift and go to state 581
    empty_function                 shift and go to state 583

state 556

    (232) catch_blocks -> catch_blocks catch_block .

    catch           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    finally         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    COMMENT         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    COMMENT_HASHTAG reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    COMMENT_MULTI   reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    empty           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    include         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    include_once    reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    require         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    require_once    reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    namespace       reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    int             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    float           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    double          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    global          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    const           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    print           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    echo            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    while           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    do              reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    if              reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    function        reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    ID              reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    return          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    class           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    final           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    new             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    interface       reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    trait           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    use             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    continue        reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    goto            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    declare         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    VARIABLE        reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    CLOSE_TAG       reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    for             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    foreach         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    switch          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    try             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    throw           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    exit            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    private         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    protected       reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    public          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    var             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    array           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    pow             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    POW             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    abs             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    cos             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    deg2rad         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    rad2deg         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    die             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    exp             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    floor           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    isset           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    list            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    log             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    log10           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    max             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    min             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    rand            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    round           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    sin             reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    sqrt            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    unset           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    eval            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    CADENA          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    $end            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    RBLOCK          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    endwhile        reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    endfor          reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    endforeach      reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    break           reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    endswitch       reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    default         reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)
    case            reduce using rule 232 (catch_blocks -> catch_blocks catch_block .)


state 557

    (234) catch_blocks -> catch_blocks finally_block .

    catch           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    finally         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    COMMENT         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    COMMENT_HASHTAG reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    COMMENT_MULTI   reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    empty           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    include         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    include_once    reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    require         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    require_once    reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    namespace       reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    int             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    float           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    double          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    global          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    const           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    print           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    echo            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    while           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    do              reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    if              reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    function        reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    ID              reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    return          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    class           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    final           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    new             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    interface       reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    trait           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    use             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    continue        reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    goto            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    declare         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    VARIABLE        reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    CLOSE_TAG       reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    for             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    foreach         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    switch          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    try             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    throw           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    exit            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    private         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    protected       reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    public          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    var             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    array           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    pow             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    POW             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    abs             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    cos             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    deg2rad         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    rad2deg         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    die             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    exp             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    floor           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    isset           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    list            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    log             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    log10           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    max             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    min             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    rand            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    round           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    sin             reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    sqrt            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    unset           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    eval            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    CADENA          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    $end            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    RBLOCK          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    endwhile        reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    endfor          reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    endforeach      reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    break           reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    endswitch       reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    default         reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)
    case            reduce using rule 234 (catch_blocks -> catch_blocks finally_block .)


state 558

    (236) catch_block -> catch LPAREN . list_exception RPAREN LBLOCK statement_list RBLOCK
    (237) list_exception -> . list_exception PIPE exception_statement
    (238) list_exception -> . exception_statement
    (239) exception_statement -> . Exception VARIABLE
    (240) exception_statement -> . ID VARIABLE

    Exception       shift and go to state 588
    ID              shift and go to state 589

    list_exception                 shift and go to state 586
    exception_statement            shift and go to state 587

state 559

    (243) finally_block -> finally LBLOCK . statement_list RBLOCK
    (244) statement_list -> . declaration
    (245) statement_list -> . statement_list declaration
    (246) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (284) empty_function -> .
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    RBLOCK          reduce using rule 284 (empty_function -> .)
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    statement_list                 shift and go to state 590
    declaration                    shift and go to state 329
    empty_function                 shift and go to state 330
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 560

    (242) throw_statement -> throw new Exception LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 591


state 561

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER . RBRACKET EQUAL expression SEMICOLON

    RBRACKET        shift and go to state 592


state 562

    (90) assignment_tail -> VARIABLE LBRACKET expression COMMA params .
    (204) params -> params . COMMA single_param

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RPAREN          reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COLON           reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBLOCK          reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBRACKET        reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    ASSIGN          reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COMMA           shift and go to state 309

  ! COMMA           [ reduce using rule 90 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .) ]


state 563

    (190) match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK . match_body RBLOCK SEMICOLON
    (191) match_body -> . match_body match_statement COMMA
    (192) match_body -> . match_statement COMMA
    (193) match_statement -> . single_param ASSIGN single_param
    (194) match_statement -> . expression ASSIGN single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 169
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 593
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    ASSIGN          reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    MINUS           shift and go to state 134
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139

    single_param                   shift and go to state 594
    match_body                     shift and go to state 595
    match_statement                shift and go to state 596
    expression                     shift and go to state 597
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 171
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    additive_expression            shift and go to state 127
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136

state 564

    (100) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op . additive_expression
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    VARIABLE        shift and go to state 281
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    additive_expression            shift and go to state 598
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 565

    (93) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    include_once    reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    require         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    require_once    reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    namespace       reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    int             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    float           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    double          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    global          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    final           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    goto            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    declare         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    eval            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 93 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)


state 566

    (94) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile . SEMICOLON

    SEMICOLON       shift and go to state 599


state 567

    (95) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 600


state 568

    (139) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (140) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (141) else_part -> . else LBLOCK declaration_list RBLOCK
    (142) else_part -> . endif
    (143) else_part -> . empty_function
    (284) empty_function -> .

    elseif          shift and go to state 602
    else            shift and go to state 603
    endif           shift and go to state 604
    COMMENT         reduce using rule 284 (empty_function -> .)
    COMMENT_HASHTAG reduce using rule 284 (empty_function -> .)
    COMMENT_MULTI   reduce using rule 284 (empty_function -> .)
    empty           reduce using rule 284 (empty_function -> .)
    include         reduce using rule 284 (empty_function -> .)
    include_once    reduce using rule 284 (empty_function -> .)
    require         reduce using rule 284 (empty_function -> .)
    require_once    reduce using rule 284 (empty_function -> .)
    namespace       reduce using rule 284 (empty_function -> .)
    int             reduce using rule 284 (empty_function -> .)
    float           reduce using rule 284 (empty_function -> .)
    double          reduce using rule 284 (empty_function -> .)
    global          reduce using rule 284 (empty_function -> .)
    const           reduce using rule 284 (empty_function -> .)
    print           reduce using rule 284 (empty_function -> .)
    echo            reduce using rule 284 (empty_function -> .)
    while           reduce using rule 284 (empty_function -> .)
    do              reduce using rule 284 (empty_function -> .)
    if              reduce using rule 284 (empty_function -> .)
    function        reduce using rule 284 (empty_function -> .)
    ID              reduce using rule 284 (empty_function -> .)
    return          reduce using rule 284 (empty_function -> .)
    class           reduce using rule 284 (empty_function -> .)
    final           reduce using rule 284 (empty_function -> .)
    new             reduce using rule 284 (empty_function -> .)
    interface       reduce using rule 284 (empty_function -> .)
    trait           reduce using rule 284 (empty_function -> .)
    use             reduce using rule 284 (empty_function -> .)
    continue        reduce using rule 284 (empty_function -> .)
    goto            reduce using rule 284 (empty_function -> .)
    declare         reduce using rule 284 (empty_function -> .)
    VARIABLE        reduce using rule 284 (empty_function -> .)
    CLOSE_TAG       reduce using rule 284 (empty_function -> .)
    for             reduce using rule 284 (empty_function -> .)
    foreach         reduce using rule 284 (empty_function -> .)
    switch          reduce using rule 284 (empty_function -> .)
    try             reduce using rule 284 (empty_function -> .)
    throw           reduce using rule 284 (empty_function -> .)
    exit            reduce using rule 284 (empty_function -> .)
    private         reduce using rule 284 (empty_function -> .)
    protected       reduce using rule 284 (empty_function -> .)
    public          reduce using rule 284 (empty_function -> .)
    var             reduce using rule 284 (empty_function -> .)
    array           reduce using rule 284 (empty_function -> .)
    pow             reduce using rule 284 (empty_function -> .)
    POW             reduce using rule 284 (empty_function -> .)
    abs             reduce using rule 284 (empty_function -> .)
    cos             reduce using rule 284 (empty_function -> .)
    deg2rad         reduce using rule 284 (empty_function -> .)
    rad2deg         reduce using rule 284 (empty_function -> .)
    die             reduce using rule 284 (empty_function -> .)
    exp             reduce using rule 284 (empty_function -> .)
    floor           reduce using rule 284 (empty_function -> .)
    isset           reduce using rule 284 (empty_function -> .)
    list            reduce using rule 284 (empty_function -> .)
    log             reduce using rule 284 (empty_function -> .)
    log10           reduce using rule 284 (empty_function -> .)
    max             reduce using rule 284 (empty_function -> .)
    min             reduce using rule 284 (empty_function -> .)
    rand            reduce using rule 284 (empty_function -> .)
    round           reduce using rule 284 (empty_function -> .)
    sin             reduce using rule 284 (empty_function -> .)
    sqrt            reduce using rule 284 (empty_function -> .)
    unset           reduce using rule 284 (empty_function -> .)
    eval            reduce using rule 284 (empty_function -> .)
    CADENA          reduce using rule 284 (empty_function -> .)
    $end            reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)
    endwhile        reduce using rule 284 (empty_function -> .)
    endfor          reduce using rule 284 (empty_function -> .)
    endforeach      reduce using rule 284 (empty_function -> .)
    break           reduce using rule 284 (empty_function -> .)
    endswitch       reduce using rule 284 (empty_function -> .)
    default         reduce using rule 284 (empty_function -> .)
    case            reduce using rule 284 (empty_function -> .)

    else_part                      shift and go to state 601
    empty_function                 shift and go to state 605

state 569

    (144) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list . RBLOCK
    (145) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list . return_statement RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 606
    return          shift and go to state 63
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    return_statement               shift and go to state 607
    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 570

    (146) fun_declaration -> visibility static function ID LPAREN params RPAREN . LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> visibility static function ID LPAREN params RPAREN . LBLOCK declaration_list return_statement RBLOCK

    LBLOCK          shift and go to state 608


state 571

    (155) class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .

    COMMENT         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    empty           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    include         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    include_once    reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    require         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    require_once    reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    namespace       reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    int             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    float           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    double          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    global          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    const           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    print           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    echo            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    while           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    do              reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    if              reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    function        reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    ID              reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    return          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    class           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    final           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    new             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    interface       reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    trait           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    use             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    continue        reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    goto            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    declare         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    VARIABLE        reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    CLOSE_TAG       reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    for             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    foreach         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    switch          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    try             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    throw           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    exit            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    private         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    protected       reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    public          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    var             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    array           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    pow             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    POW             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    abs             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    cos             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    deg2rad         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    rad2deg         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    die             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    exp             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    floor           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    isset           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    list            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    log             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    log10           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    max             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    min             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    rand            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    round           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    sin             reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    sqrt            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    unset           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    eval            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    CADENA          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    $end            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    RBLOCK          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    endwhile        reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    endfor          reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    endforeach      reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    break           reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    endswitch       reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    default         reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)
    case            reduce using rule 155 (class_declaration -> class ID implements ID LBLOCK class_body RBLOCK .)


state 572

    (156) class_declaration -> final class ID implements ID LBLOCK class_body . RBLOCK
    (165) class_body -> class_body . class_body_element
    (167) class_body_element -> . visibility var_declaration2 SEMICOLON
    (168) class_body_element -> . visibility fun_declaration
    (169) class_body_element -> . declaration
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 609
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    class_body_element             shift and go to state 483
    visibility                     shift and go to state 395
    var_declaration2               shift and go to state 53
    fun_declaration                shift and go to state 19
    declaration                    shift and go to state 396
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 573

    (174) interface_method_declaration -> visibility function ID LPAREN . params RPAREN SEMICOLON
    (203) params -> . single_param
    (204) params -> . params COMMA single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    RPAREN          reduce using rule 284 (empty_function -> .)
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    params                         shift and go to state 610
    single_param                   shift and go to state 167
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 574

    (186) use_statement -> ID COLON COLON ID . insteadof ID SEMICOLON

    insteadof       shift and go to state 611


state 575

    (283) declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    empty           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    include         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    include_once    reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    require         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    require_once    reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    namespace       reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    int             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    float           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    double          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    global          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    const           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    print           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    echo            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    while           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    do              reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    if              reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    function        reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    ID              reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    return          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    class           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    final           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    new             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    interface       reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    trait           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    use             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    continue        reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    goto            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    declare         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    for             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    foreach         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    switch          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    try             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    throw           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    exit            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    private         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    protected       reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    public          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    var             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    array           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    pow             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    POW             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    abs             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    cos             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    die             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    exp             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    floor           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    isset           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    list            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    log             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    log10           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    max             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    min             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    rand            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    round           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    sin             reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    unset           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    eval            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    $end            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    endfor          reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    break           reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    default         reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)
    case            reduce using rule 283 (declare_statement -> declare LPAREN ID EQUAL expression RPAREN SEMICOLON .)


state 576

    (213) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 612
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 577

    (214) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON . declaration_list endfor SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    endfor          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 613
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 578

    (219) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 614
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 579

    (220) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON . declaration_list endforeach SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    endforeach      reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 615
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 580

    (221) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block . RBLOCK

    RBLOCK          shift and go to state 616


state 581

    (223) case_blocks -> case_blocks case_block .

    default         reduce using rule 223 (case_blocks -> case_blocks case_block .)
    case            reduce using rule 223 (case_blocks -> case_blocks case_block .)
    RBLOCK          reduce using rule 223 (case_blocks -> case_blocks case_block .)
    endswitch       reduce using rule 223 (case_blocks -> case_blocks case_block .)


state 582

    (228) default_block -> default . COLON statement_list
    (229) default_block -> default . COLON statement_list break SEMICOLON

    COLON           shift and go to state 617


state 583

    (230) default_block -> empty_function .

    RBLOCK          reduce using rule 230 (default_block -> empty_function .)
    endswitch       reduce using rule 230 (default_block -> empty_function .)


state 584

    (226) case_block -> case expression . COLON statement_list
    (227) case_block -> case expression . COLON statement_list break SEMICOLON

    COLON           shift and go to state 618


state 585

    (222) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block . endswitch SEMICOLON

    endswitch       shift and go to state 619


state 586

    (236) catch_block -> catch LPAREN list_exception . RPAREN LBLOCK statement_list RBLOCK
    (237) list_exception -> list_exception . PIPE exception_statement

    RPAREN          shift and go to state 620
    PIPE            shift and go to state 621


state 587

    (238) list_exception -> exception_statement .

    RPAREN          reduce using rule 238 (list_exception -> exception_statement .)
    PIPE            reduce using rule 238 (list_exception -> exception_statement .)


state 588

    (239) exception_statement -> Exception . VARIABLE

    VARIABLE        shift and go to state 622


state 589

    (240) exception_statement -> ID . VARIABLE

    VARIABLE        shift and go to state 623


state 590

    (243) finally_block -> finally LBLOCK statement_list . RBLOCK
    (245) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 624
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 428
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 591

    (242) throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .

    COMMENT         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    empty           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    include         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    include_once    reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    require         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    require_once    reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    namespace       reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    int             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    float           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    double          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    global          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    const           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    print           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    echo            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    while           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    do              reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    if              reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    function        reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    ID              reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    return          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    class           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    final           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    new             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    interface       reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    trait           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    use             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    continue        reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    goto            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    declare         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    for             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    foreach         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    switch          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    try             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    throw           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    exit            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    private         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    protected       reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    public          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    var             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    array           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    pow             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    POW             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    abs             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    cos             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    deg2rad         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    rad2deg         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    die             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    exp             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    floor           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    isset           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    list            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    log             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    log10           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    max             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    min             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    rand            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    round           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    sin             reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    sqrt            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    unset           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    eval            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    CADENA          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endwhile        reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endfor          reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endforeach      reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    break           reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endswitch       reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    default         reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    case            reduce using rule 242 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)


state 592

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 625


state 593

    (102) expression -> VARIABLE . instanceof ID
    (68) var_declaration2 -> VARIABLE .
    (69) var_declaration2 -> VARIABLE . expression
    (70) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (71) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (72) var_declaration2 -> VARIABLE . EQUAL CADENA
    (73) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (74) var_declaration2 -> VARIABLE . EQUAL expression
    (75) var_declaration2 -> VARIABLE . assignation VARIABLE
    (76) var_declaration2 -> VARIABLE . assignation NUMBER
    (77) var_declaration2 -> VARIABLE . EQUAL ceil_expression
    (78) var_declaration2 -> VARIABLE . EQUAL clone_declaration
    (81) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (86) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (269) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (110) factor -> VARIABLE .
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (276) assignation -> . ASSIGN
    (277) assignation -> . SREQUAL
    (278) assignation -> . SLEQUAL
    (279) assignation -> . XOREQUAL
    (280) assignation -> . ANDEQUAL
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

  ! reduce/reduce conflict for ASSIGN resolved using rule 68 (var_declaration2 -> VARIABLE .)
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    instanceof      shift and go to state 226
    EQUAL           shift and go to state 285
    QUESTIONMARK    shift and go to state 124
    OBJ_OPERATOR    shift and go to state 125
    DOT             shift and go to state 126
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    TIMES           reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 110 (factor -> VARIABLE .)
    MOD             reduce using rule 110 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 110 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 110 (factor -> VARIABLE .)
    NOT             reduce using rule 110 (factor -> VARIABLE .)
    or              reduce using rule 110 (factor -> VARIABLE .)
    and             reduce using rule 110 (factor -> VARIABLE .)
    xor             reduce using rule 110 (factor -> VARIABLE .)
    LESS            reduce using rule 110 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 110 (factor -> VARIABLE .)
    GREATER         reduce using rule 110 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 110 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 110 (factor -> VARIABLE .)
    DISTINT         reduce using rule 110 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 110 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 110 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 110 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 110 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 110 (factor -> VARIABLE .)
    SR              reduce using rule 110 (factor -> VARIABLE .)
    SL              reduce using rule 110 (factor -> VARIABLE .)
    VARIABLE        shift and go to state 118
    ASSIGN          shift and go to state 128
    SREQUAL         shift and go to state 129
    SLEQUAL         shift and go to state 130
    XOREQUAL        shift and go to state 131
    ANDEQUAL        shift and go to state 132
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

  ! ASSIGN          [ reduce using rule 68 (var_declaration2 -> VARIABLE .) ]
  ! PLUSPLUS        [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! MINUSMINUS      [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! ASSIGN          [ reduce using rule 110 (factor -> VARIABLE .) ]

    expression                     shift and go to state 121
    assignation                    shift and go to state 123
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 594

    (193) match_statement -> single_param . ASSIGN single_param

    ASSIGN          shift and go to state 626


state 595

    (190) match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body . RBLOCK SEMICOLON
    (191) match_body -> match_body . match_statement COMMA
    (193) match_statement -> . single_param ASSIGN single_param
    (194) match_statement -> . expression ASSIGN single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS

    RBLOCK          shift and go to state 627
    NUMBER          shift and go to state 169
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 593
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    ASSIGN          reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    MINUS           shift and go to state 134
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139

    single_param                   shift and go to state 594
    match_statement                shift and go to state 628
    expression                     shift and go to state 597
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 171
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    additive_expression            shift and go to state 127
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136

state 596

    (192) match_body -> match_statement . COMMA

    COMMA           shift and go to state 629


state 597

    (194) match_statement -> expression . ASSIGN single_param

    ASSIGN          shift and go to state 630


state 598

    (100) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .

    SEMICOLON       reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COLON           reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    ASSIGN          reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    as              reduce using rule 100 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)


state 599

    (94) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .

    COMMENT         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    COMMENT_MULTI   reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    empty           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    include         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    include_once    reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    require         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    require_once    reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    namespace       reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    int             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    float           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    double          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    global          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    const           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    print           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    echo            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    while           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    do              reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    if              reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    function        reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    ID              reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    return          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    class           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    final           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    new             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    interface       reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    trait           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    use             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    continue        reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    goto            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    declare         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    VARIABLE        reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    CLOSE_TAG       reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    for             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    foreach         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    switch          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    try             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    throw           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    exit            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    private         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    protected       reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    public          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    var             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    array           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    pow             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    POW             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    abs             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    cos             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    deg2rad         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    rad2deg         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    die             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    exp             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    floor           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    isset           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    list            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    log             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    log10           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    max             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    min             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    rand            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    round           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    sin             reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    sqrt            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    unset           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    eval            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    CADENA          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    $end            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    RBLOCK          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endwhile        reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endfor          reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endforeach      reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    break           reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endswitch       reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    default         reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    case            reduce using rule 94 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)


state 600

    (95) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 631


state 601

    (139) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include_once    reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    require         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    require_once    reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    namespace       reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    int             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    float           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    double          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    global          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    do              reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    return          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    final           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    interface       reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    trait           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    use             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    continue        reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    goto            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    declare         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    switch          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    try             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    throw           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    private         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    protected       reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    public          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    var             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    array           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    pow             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    POW             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    abs             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    cos             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    deg2rad         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rad2deg         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    die             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exp             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    floor           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    isset           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    list            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log10           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    max             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    min             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rand            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    round           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sin             reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sqrt            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    unset           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    eval            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CADENA          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endwhile        reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endfor          reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endforeach      reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    break           reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endswitch       reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    default         reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    case            reduce using rule 139 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)


state 602

    (140) else_part -> elseif . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 632


state 603

    (141) else_part -> else . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 633


state 604

    (142) else_part -> endif .

    COMMENT         reduce using rule 142 (else_part -> endif .)
    COMMENT_HASHTAG reduce using rule 142 (else_part -> endif .)
    COMMENT_MULTI   reduce using rule 142 (else_part -> endif .)
    empty           reduce using rule 142 (else_part -> endif .)
    include         reduce using rule 142 (else_part -> endif .)
    include_once    reduce using rule 142 (else_part -> endif .)
    require         reduce using rule 142 (else_part -> endif .)
    require_once    reduce using rule 142 (else_part -> endif .)
    namespace       reduce using rule 142 (else_part -> endif .)
    int             reduce using rule 142 (else_part -> endif .)
    float           reduce using rule 142 (else_part -> endif .)
    double          reduce using rule 142 (else_part -> endif .)
    global          reduce using rule 142 (else_part -> endif .)
    const           reduce using rule 142 (else_part -> endif .)
    print           reduce using rule 142 (else_part -> endif .)
    echo            reduce using rule 142 (else_part -> endif .)
    while           reduce using rule 142 (else_part -> endif .)
    do              reduce using rule 142 (else_part -> endif .)
    if              reduce using rule 142 (else_part -> endif .)
    function        reduce using rule 142 (else_part -> endif .)
    ID              reduce using rule 142 (else_part -> endif .)
    return          reduce using rule 142 (else_part -> endif .)
    class           reduce using rule 142 (else_part -> endif .)
    final           reduce using rule 142 (else_part -> endif .)
    new             reduce using rule 142 (else_part -> endif .)
    interface       reduce using rule 142 (else_part -> endif .)
    trait           reduce using rule 142 (else_part -> endif .)
    use             reduce using rule 142 (else_part -> endif .)
    continue        reduce using rule 142 (else_part -> endif .)
    goto            reduce using rule 142 (else_part -> endif .)
    declare         reduce using rule 142 (else_part -> endif .)
    VARIABLE        reduce using rule 142 (else_part -> endif .)
    CLOSE_TAG       reduce using rule 142 (else_part -> endif .)
    for             reduce using rule 142 (else_part -> endif .)
    foreach         reduce using rule 142 (else_part -> endif .)
    switch          reduce using rule 142 (else_part -> endif .)
    try             reduce using rule 142 (else_part -> endif .)
    throw           reduce using rule 142 (else_part -> endif .)
    exit            reduce using rule 142 (else_part -> endif .)
    private         reduce using rule 142 (else_part -> endif .)
    protected       reduce using rule 142 (else_part -> endif .)
    public          reduce using rule 142 (else_part -> endif .)
    var             reduce using rule 142 (else_part -> endif .)
    array           reduce using rule 142 (else_part -> endif .)
    pow             reduce using rule 142 (else_part -> endif .)
    POW             reduce using rule 142 (else_part -> endif .)
    abs             reduce using rule 142 (else_part -> endif .)
    cos             reduce using rule 142 (else_part -> endif .)
    deg2rad         reduce using rule 142 (else_part -> endif .)
    rad2deg         reduce using rule 142 (else_part -> endif .)
    die             reduce using rule 142 (else_part -> endif .)
    exp             reduce using rule 142 (else_part -> endif .)
    floor           reduce using rule 142 (else_part -> endif .)
    isset           reduce using rule 142 (else_part -> endif .)
    list            reduce using rule 142 (else_part -> endif .)
    log             reduce using rule 142 (else_part -> endif .)
    log10           reduce using rule 142 (else_part -> endif .)
    max             reduce using rule 142 (else_part -> endif .)
    min             reduce using rule 142 (else_part -> endif .)
    rand            reduce using rule 142 (else_part -> endif .)
    round           reduce using rule 142 (else_part -> endif .)
    sin             reduce using rule 142 (else_part -> endif .)
    sqrt            reduce using rule 142 (else_part -> endif .)
    unset           reduce using rule 142 (else_part -> endif .)
    eval            reduce using rule 142 (else_part -> endif .)
    CADENA          reduce using rule 142 (else_part -> endif .)
    $end            reduce using rule 142 (else_part -> endif .)
    RBLOCK          reduce using rule 142 (else_part -> endif .)
    endwhile        reduce using rule 142 (else_part -> endif .)
    endfor          reduce using rule 142 (else_part -> endif .)
    endforeach      reduce using rule 142 (else_part -> endif .)
    break           reduce using rule 142 (else_part -> endif .)
    endswitch       reduce using rule 142 (else_part -> endif .)
    default         reduce using rule 142 (else_part -> endif .)
    case            reduce using rule 142 (else_part -> endif .)


state 605

    (143) else_part -> empty_function .

    COMMENT         reduce using rule 143 (else_part -> empty_function .)
    COMMENT_HASHTAG reduce using rule 143 (else_part -> empty_function .)
    COMMENT_MULTI   reduce using rule 143 (else_part -> empty_function .)
    empty           reduce using rule 143 (else_part -> empty_function .)
    include         reduce using rule 143 (else_part -> empty_function .)
    include_once    reduce using rule 143 (else_part -> empty_function .)
    require         reduce using rule 143 (else_part -> empty_function .)
    require_once    reduce using rule 143 (else_part -> empty_function .)
    namespace       reduce using rule 143 (else_part -> empty_function .)
    int             reduce using rule 143 (else_part -> empty_function .)
    float           reduce using rule 143 (else_part -> empty_function .)
    double          reduce using rule 143 (else_part -> empty_function .)
    global          reduce using rule 143 (else_part -> empty_function .)
    const           reduce using rule 143 (else_part -> empty_function .)
    print           reduce using rule 143 (else_part -> empty_function .)
    echo            reduce using rule 143 (else_part -> empty_function .)
    while           reduce using rule 143 (else_part -> empty_function .)
    do              reduce using rule 143 (else_part -> empty_function .)
    if              reduce using rule 143 (else_part -> empty_function .)
    function        reduce using rule 143 (else_part -> empty_function .)
    ID              reduce using rule 143 (else_part -> empty_function .)
    return          reduce using rule 143 (else_part -> empty_function .)
    class           reduce using rule 143 (else_part -> empty_function .)
    final           reduce using rule 143 (else_part -> empty_function .)
    new             reduce using rule 143 (else_part -> empty_function .)
    interface       reduce using rule 143 (else_part -> empty_function .)
    trait           reduce using rule 143 (else_part -> empty_function .)
    use             reduce using rule 143 (else_part -> empty_function .)
    continue        reduce using rule 143 (else_part -> empty_function .)
    goto            reduce using rule 143 (else_part -> empty_function .)
    declare         reduce using rule 143 (else_part -> empty_function .)
    VARIABLE        reduce using rule 143 (else_part -> empty_function .)
    CLOSE_TAG       reduce using rule 143 (else_part -> empty_function .)
    for             reduce using rule 143 (else_part -> empty_function .)
    foreach         reduce using rule 143 (else_part -> empty_function .)
    switch          reduce using rule 143 (else_part -> empty_function .)
    try             reduce using rule 143 (else_part -> empty_function .)
    throw           reduce using rule 143 (else_part -> empty_function .)
    exit            reduce using rule 143 (else_part -> empty_function .)
    private         reduce using rule 143 (else_part -> empty_function .)
    protected       reduce using rule 143 (else_part -> empty_function .)
    public          reduce using rule 143 (else_part -> empty_function .)
    var             reduce using rule 143 (else_part -> empty_function .)
    array           reduce using rule 143 (else_part -> empty_function .)
    pow             reduce using rule 143 (else_part -> empty_function .)
    POW             reduce using rule 143 (else_part -> empty_function .)
    abs             reduce using rule 143 (else_part -> empty_function .)
    cos             reduce using rule 143 (else_part -> empty_function .)
    deg2rad         reduce using rule 143 (else_part -> empty_function .)
    rad2deg         reduce using rule 143 (else_part -> empty_function .)
    die             reduce using rule 143 (else_part -> empty_function .)
    exp             reduce using rule 143 (else_part -> empty_function .)
    floor           reduce using rule 143 (else_part -> empty_function .)
    isset           reduce using rule 143 (else_part -> empty_function .)
    list            reduce using rule 143 (else_part -> empty_function .)
    log             reduce using rule 143 (else_part -> empty_function .)
    log10           reduce using rule 143 (else_part -> empty_function .)
    max             reduce using rule 143 (else_part -> empty_function .)
    min             reduce using rule 143 (else_part -> empty_function .)
    rand            reduce using rule 143 (else_part -> empty_function .)
    round           reduce using rule 143 (else_part -> empty_function .)
    sin             reduce using rule 143 (else_part -> empty_function .)
    sqrt            reduce using rule 143 (else_part -> empty_function .)
    unset           reduce using rule 143 (else_part -> empty_function .)
    eval            reduce using rule 143 (else_part -> empty_function .)
    CADENA          reduce using rule 143 (else_part -> empty_function .)
    $end            reduce using rule 143 (else_part -> empty_function .)
    RBLOCK          reduce using rule 143 (else_part -> empty_function .)
    endwhile        reduce using rule 143 (else_part -> empty_function .)
    endfor          reduce using rule 143 (else_part -> empty_function .)
    endforeach      reduce using rule 143 (else_part -> empty_function .)
    break           reduce using rule 143 (else_part -> empty_function .)
    endswitch       reduce using rule 143 (else_part -> empty_function .)
    default         reduce using rule 143 (else_part -> empty_function .)
    case            reduce using rule 143 (else_part -> empty_function .)


state 606

    (144) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    include_once    reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    require         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    require_once    reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    namespace       reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    int             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    float           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    double          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    global          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    final           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    goto            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    declare         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    eval            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 144 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)


state 607

    (145) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement . RBLOCK
    (21) declaration -> return_statement .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 634
    return          reduce using rule 21 (declaration -> return_statement .)
    COMMENT         reduce using rule 21 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> return_statement .)
    empty           reduce using rule 21 (declaration -> return_statement .)
    include         reduce using rule 21 (declaration -> return_statement .)
    include_once    reduce using rule 21 (declaration -> return_statement .)
    require         reduce using rule 21 (declaration -> return_statement .)
    require_once    reduce using rule 21 (declaration -> return_statement .)
    namespace       reduce using rule 21 (declaration -> return_statement .)
    int             reduce using rule 21 (declaration -> return_statement .)
    float           reduce using rule 21 (declaration -> return_statement .)
    double          reduce using rule 21 (declaration -> return_statement .)
    global          reduce using rule 21 (declaration -> return_statement .)
    const           reduce using rule 21 (declaration -> return_statement .)
    print           reduce using rule 21 (declaration -> return_statement .)
    echo            reduce using rule 21 (declaration -> return_statement .)
    while           reduce using rule 21 (declaration -> return_statement .)
    do              reduce using rule 21 (declaration -> return_statement .)
    if              reduce using rule 21 (declaration -> return_statement .)
    function        reduce using rule 21 (declaration -> return_statement .)
    ID              reduce using rule 21 (declaration -> return_statement .)
    class           reduce using rule 21 (declaration -> return_statement .)
    final           reduce using rule 21 (declaration -> return_statement .)
    new             reduce using rule 21 (declaration -> return_statement .)
    interface       reduce using rule 21 (declaration -> return_statement .)
    trait           reduce using rule 21 (declaration -> return_statement .)
    use             reduce using rule 21 (declaration -> return_statement .)
    continue        reduce using rule 21 (declaration -> return_statement .)
    goto            reduce using rule 21 (declaration -> return_statement .)
    declare         reduce using rule 21 (declaration -> return_statement .)
    VARIABLE        reduce using rule 21 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 21 (declaration -> return_statement .)
    for             reduce using rule 21 (declaration -> return_statement .)
    foreach         reduce using rule 21 (declaration -> return_statement .)
    switch          reduce using rule 21 (declaration -> return_statement .)
    try             reduce using rule 21 (declaration -> return_statement .)
    throw           reduce using rule 21 (declaration -> return_statement .)
    exit            reduce using rule 21 (declaration -> return_statement .)
    private         reduce using rule 21 (declaration -> return_statement .)
    protected       reduce using rule 21 (declaration -> return_statement .)
    public          reduce using rule 21 (declaration -> return_statement .)
    var             reduce using rule 21 (declaration -> return_statement .)
    array           reduce using rule 21 (declaration -> return_statement .)
    pow             reduce using rule 21 (declaration -> return_statement .)
    POW             reduce using rule 21 (declaration -> return_statement .)
    abs             reduce using rule 21 (declaration -> return_statement .)
    cos             reduce using rule 21 (declaration -> return_statement .)
    deg2rad         reduce using rule 21 (declaration -> return_statement .)
    rad2deg         reduce using rule 21 (declaration -> return_statement .)
    die             reduce using rule 21 (declaration -> return_statement .)
    exp             reduce using rule 21 (declaration -> return_statement .)
    floor           reduce using rule 21 (declaration -> return_statement .)
    isset           reduce using rule 21 (declaration -> return_statement .)
    list            reduce using rule 21 (declaration -> return_statement .)
    log             reduce using rule 21 (declaration -> return_statement .)
    log10           reduce using rule 21 (declaration -> return_statement .)
    max             reduce using rule 21 (declaration -> return_statement .)
    min             reduce using rule 21 (declaration -> return_statement .)
    rand            reduce using rule 21 (declaration -> return_statement .)
    round           reduce using rule 21 (declaration -> return_statement .)
    sin             reduce using rule 21 (declaration -> return_statement .)
    sqrt            reduce using rule 21 (declaration -> return_statement .)
    unset           reduce using rule 21 (declaration -> return_statement .)
    eval            reduce using rule 21 (declaration -> return_statement .)
    CADENA          reduce using rule 21 (declaration -> return_statement .)

  ! RBLOCK          [ reduce using rule 21 (declaration -> return_statement .) ]


state 608

    (146) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK . declaration_list RBLOCK
    (147) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK . declaration_list return_statement RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    visibility                     shift and go to state 62
    declaration_list               shift and go to state 635
    return_statement               shift and go to state 21
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 609

    (156) class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .

    COMMENT         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    empty           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    include         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    include_once    reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    require         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    require_once    reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    namespace       reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    int             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    float           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    double          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    global          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    const           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    print           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    echo            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    while           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    do              reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    if              reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    function        reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    ID              reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    return          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    class           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    final           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    new             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    interface       reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    trait           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    use             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    continue        reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    goto            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    declare         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    VARIABLE        reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    CLOSE_TAG       reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    for             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    foreach         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    switch          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    try             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    throw           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    exit            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    private         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    protected       reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    public          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    var             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    array           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    pow             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    POW             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    abs             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    cos             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    deg2rad         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    rad2deg         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    die             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    exp             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    floor           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    isset           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    list            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    log             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    log10           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    max             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    min             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    rand            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    round           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    sin             reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    sqrt            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    unset           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    eval            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    CADENA          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    $end            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    RBLOCK          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    endwhile        reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    endfor          reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    endforeach      reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    break           reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    endswitch       reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    default         reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)
    case            reduce using rule 156 (class_declaration -> final class ID implements ID LBLOCK class_body RBLOCK .)


state 610

    (174) interface_method_declaration -> visibility function ID LPAREN params . RPAREN SEMICOLON
    (204) params -> params . COMMA single_param

    RPAREN          shift and go to state 636
    COMMA           shift and go to state 309


state 611

    (186) use_statement -> ID COLON COLON ID insteadof . ID SEMICOLON

    ID              shift and go to state 637


state 612

    (213) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 638
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 613

    (214) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list . endfor SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for endfor resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    endfor          shift and go to state 639
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! endfor          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 614

    (219) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 640
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 615

    (220) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list . endforeach SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for endforeach resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    endforeach      shift and go to state 641
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! endforeach      [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 616

    (221) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .

    COMMENT         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    COMMENT_HASHTAG reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    COMMENT_MULTI   reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    empty           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    include         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    include_once    reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    require         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    require_once    reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    namespace       reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    int             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    float           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    double          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    global          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    const           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    print           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    echo            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    while           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    do              reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    if              reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    function        reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    ID              reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    return          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    class           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    final           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    new             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    interface       reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    trait           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    use             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    continue        reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    goto            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    declare         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    VARIABLE        reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    CLOSE_TAG       reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    for             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    foreach         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    switch          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    try             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    throw           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    exit            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    private         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    protected       reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    public          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    var             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    array           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    pow             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    POW             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    abs             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    cos             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    deg2rad         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    rad2deg         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    die             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    exp             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    floor           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    isset           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    list            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    log             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    log10           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    max             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    min             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    rand            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    round           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    sin             reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    sqrt            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    unset           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    eval            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    CADENA          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    $end            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    RBLOCK          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endwhile        reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endfor          reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endforeach      reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    break           reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endswitch       reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    default         reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    case            reduce using rule 221 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)


state 617

    (228) default_block -> default COLON . statement_list
    (229) default_block -> default COLON . statement_list break SEMICOLON
    (244) statement_list -> . declaration
    (245) statement_list -> . statement_list declaration
    (246) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (284) empty_function -> .
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    break           reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)
    endswitch       reduce using rule 284 (empty_function -> .)
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    statement_list                 shift and go to state 642
    declaration                    shift and go to state 329
    empty_function                 shift and go to state 330
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 618

    (226) case_block -> case expression COLON . statement_list
    (227) case_block -> case expression COLON . statement_list break SEMICOLON
    (244) statement_list -> . declaration
    (245) statement_list -> . statement_list declaration
    (246) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (284) empty_function -> .
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    break           reduce using rule 284 (empty_function -> .)
    default         reduce using rule 284 (empty_function -> .)
    case            reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)
    endswitch       reduce using rule 284 (empty_function -> .)
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    statement_list                 shift and go to state 643
    declaration                    shift and go to state 329
    empty_function                 shift and go to state 330
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 619

    (222) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch . SEMICOLON

    SEMICOLON       shift and go to state 644


state 620

    (236) catch_block -> catch LPAREN list_exception RPAREN . LBLOCK statement_list RBLOCK

    LBLOCK          shift and go to state 645


state 621

    (237) list_exception -> list_exception PIPE . exception_statement
    (239) exception_statement -> . Exception VARIABLE
    (240) exception_statement -> . ID VARIABLE

    Exception       shift and go to state 588
    ID              shift and go to state 589

    exception_statement            shift and go to state 646

state 622

    (239) exception_statement -> Exception VARIABLE .

    RPAREN          reduce using rule 239 (exception_statement -> Exception VARIABLE .)
    PIPE            reduce using rule 239 (exception_statement -> Exception VARIABLE .)


state 623

    (240) exception_statement -> ID VARIABLE .

    RPAREN          reduce using rule 240 (exception_statement -> ID VARIABLE .)
    PIPE            reduce using rule 240 (exception_statement -> ID VARIABLE .)


state 624

    (243) finally_block -> finally LBLOCK statement_list RBLOCK .

    catch           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    finally         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    COMMENT         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    empty           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    include         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    include_once    reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    require         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    require_once    reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    namespace       reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    int             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    float           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    double          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    global          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    const           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    print           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    echo            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    while           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    do              reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    if              reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    function        reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    ID              reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    return          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    class           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    final           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    new             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    interface       reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    trait           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    use             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    continue        reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    goto            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    declare         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    VARIABLE        reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    CLOSE_TAG       reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    for             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    foreach         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    switch          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    try             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    throw           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    exit            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    private         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    protected       reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    public          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    var             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    array           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    pow             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    POW             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    abs             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    cos             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    deg2rad         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    rad2deg         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    die             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    exp             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    floor           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    isset           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    list            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    log             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    log10           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    max             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    min             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    rand            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    round           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    sin             reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    sqrt            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    unset           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    eval            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    CADENA          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    $end            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    RBLOCK          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endwhile        reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endfor          reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endforeach      reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    break           reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endswitch       reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    default         reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    case            reduce using rule 243 (finally_block -> finally LBLOCK statement_list RBLOCK .)


state 625

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL . expression SEMICOLON
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 647
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 626

    (193) match_statement -> single_param ASSIGN . single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    single_param                   shift and go to state 648
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 627

    (190) match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK . SEMICOLON

    SEMICOLON       shift and go to state 649


state 628

    (191) match_body -> match_body match_statement . COMMA

    COMMA           shift and go to state 650


state 629

    (192) match_body -> match_statement COMMA .

    RBLOCK          reduce using rule 192 (match_body -> match_statement COMMA .)
    NUMBER          reduce using rule 192 (match_body -> match_statement COMMA .)
    CADENA          reduce using rule 192 (match_body -> match_statement COMMA .)
    VARIABLE        reduce using rule 192 (match_body -> match_statement COMMA .)
    true            reduce using rule 192 (match_body -> match_statement COMMA .)
    false           reduce using rule 192 (match_body -> match_statement COMMA .)
    callable        reduce using rule 192 (match_body -> match_statement COMMA .)
    array           reduce using rule 192 (match_body -> match_statement COMMA .)
    pow             reduce using rule 192 (match_body -> match_statement COMMA .)
    POW             reduce using rule 192 (match_body -> match_statement COMMA .)
    abs             reduce using rule 192 (match_body -> match_statement COMMA .)
    cos             reduce using rule 192 (match_body -> match_statement COMMA .)
    deg2rad         reduce using rule 192 (match_body -> match_statement COMMA .)
    rad2deg         reduce using rule 192 (match_body -> match_statement COMMA .)
    die             reduce using rule 192 (match_body -> match_statement COMMA .)
    exp             reduce using rule 192 (match_body -> match_statement COMMA .)
    floor           reduce using rule 192 (match_body -> match_statement COMMA .)
    isset           reduce using rule 192 (match_body -> match_statement COMMA .)
    list            reduce using rule 192 (match_body -> match_statement COMMA .)
    log             reduce using rule 192 (match_body -> match_statement COMMA .)
    log10           reduce using rule 192 (match_body -> match_statement COMMA .)
    max             reduce using rule 192 (match_body -> match_statement COMMA .)
    min             reduce using rule 192 (match_body -> match_statement COMMA .)
    rand            reduce using rule 192 (match_body -> match_statement COMMA .)
    round           reduce using rule 192 (match_body -> match_statement COMMA .)
    sin             reduce using rule 192 (match_body -> match_statement COMMA .)
    sqrt            reduce using rule 192 (match_body -> match_statement COMMA .)
    unset           reduce using rule 192 (match_body -> match_statement COMMA .)
    eval            reduce using rule 192 (match_body -> match_statement COMMA .)
    MINUS           reduce using rule 192 (match_body -> match_statement COMMA .)
    LPAREN          reduce using rule 192 (match_body -> match_statement COMMA .)
    PLUSPLUS        reduce using rule 192 (match_body -> match_statement COMMA .)
    MINUSMINUS      reduce using rule 192 (match_body -> match_statement COMMA .)
    ASSIGN          reduce using rule 192 (match_body -> match_statement COMMA .)


state 630

    (194) match_statement -> expression ASSIGN . single_param
    (205) single_param -> . var_declaration2
    (206) single_param -> . NUMBER
    (207) single_param -> . CADENA
    (208) single_param -> . bool_type
    (209) single_param -> . callable_declaration
    (210) single_param -> . empty_function
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (211) bool_type -> . true
    (212) bool_type -> . false
    (202) callable_declaration -> . callable VARIABLE
    (284) empty_function -> .
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 224
    CADENA          shift and go to state 170
    VARIABLE        shift and go to state 144
    true            shift and go to state 140
    false           shift and go to state 141
    callable        shift and go to state 174
    COMMA           reduce using rule 284 (empty_function -> .)
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107

    single_param                   shift and go to state 651
    var_declaration2               shift and go to state 168
    bool_type                      shift and go to state 225
    callable_declaration           shift and go to state 172
    empty_function                 shift and go to state 173
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 631

    (95) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    include_once    reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    require         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    require_once    reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    namespace       reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    int             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    float           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    double          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    global          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    final           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    use             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    continue        reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    goto            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    declare         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    try             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    throw           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    eval            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 95 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)


state 632

    (140) else_part -> elseif LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (97) expression -> . additive_expression
    (98) expression -> . additive_expression logical_op additive_expression
    (99) expression -> . additive_expression comp_op additive_expression
    (100) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (101) expression -> . additive_expression bits_op additive_expression
    (102) expression -> . VARIABLE instanceof ID
    (103) additive_expression -> . term
    (104) additive_expression -> . term math_op term
    (105) term -> . MINUS term
    (106) term -> . factor
    (107) term -> . factor increment_decrement_op
    (108) term -> . increment_decrement_op factor
    (109) factor -> . NUMBER
    (110) factor -> . VARIABLE
    (111) factor -> . bool_type
    (112) factor -> . LPAREN expression RPAREN
    (113) increment_decrement_op -> . PLUSPLUS
    (114) increment_decrement_op -> . MINUSMINUS
    (211) bool_type -> . true
    (212) bool_type -> . false

    VARIABLE        shift and go to state 118
    MINUS           shift and go to state 134
    NUMBER          shift and go to state 122
    LPAREN          shift and go to state 120
    PLUSPLUS        shift and go to state 138
    MINUSMINUS      shift and go to state 139
    true            shift and go to state 140
    false           shift and go to state 141

    expression                     shift and go to state 652
    additive_expression            shift and go to state 127
    term                           shift and go to state 133
    factor                         shift and go to state 135
    increment_decrement_op         shift and go to state 136
    bool_type                      shift and go to state 137

state 633

    (141) else_part -> else LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 653
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 634

    (145) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .

    COMMENT         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_HASHTAG reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_MULTI   reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    empty           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    include         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    include_once    reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    require         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    require_once    reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    namespace       reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    int             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    float           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    double          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    global          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    const           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    print           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    echo            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    while           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    do              reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    if              reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    function        reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    ID              reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    return          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    class           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    final           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    new             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    interface       reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    trait           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    use             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    continue        reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    goto            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    declare         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    VARIABLE        reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CLOSE_TAG       reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    for             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    foreach         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    switch          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    try             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    throw           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exit            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    private         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    protected       reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    public          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    var             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    array           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    pow             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    POW             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    abs             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    cos             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    deg2rad         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rad2deg         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    die             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exp             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    floor           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    isset           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    list            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log10           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    max             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    min             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rand            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    round           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sin             reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sqrt            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    unset           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    eval            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CADENA          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    $end            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    RBLOCK          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endwhile        reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endfor          reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endforeach      reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    break           reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endswitch       reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    default         reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    case            reduce using rule 145 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)


state 635

    (146) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list . RBLOCK
    (147) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list . return_statement RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 654
    return          shift and go to state 63
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    visibility                     shift and go to state 62
    return_statement               shift and go to state 655
    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 636

    (174) interface_method_declaration -> visibility function ID LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 656


state 637

    (186) use_statement -> ID COLON COLON ID insteadof ID . SEMICOLON

    SEMICOLON       shift and go to state 657


state 638

    (213) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    include_once    reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    require         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    require_once    reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    namespace       reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    int             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    float           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    double          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    global          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    final           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    goto            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    declare         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    eval            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 213 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)


state 639

    (214) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor . SEMICOLON

    SEMICOLON       shift and go to state 658


state 640

    (219) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    include_once    reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    require         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    require_once    reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    namespace       reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    int             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    float           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    double          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    global          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    final           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    goto            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    declare         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    eval            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 219 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)


state 641

    (220) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach . SEMICOLON

    SEMICOLON       shift and go to state 659


state 642

    (228) default_block -> default COLON statement_list .
    (229) default_block -> default COLON statement_list . break SEMICOLON
    (245) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for break resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! reduce/reduce conflict for RBLOCK resolved using rule 228 (default_block -> default COLON statement_list .)
  ! reduce/reduce conflict for endswitch resolved using rule 228 (default_block -> default COLON statement_list .)
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 228 (default_block -> default COLON statement_list .)
    endswitch       reduce using rule 228 (default_block -> default COLON statement_list .)
    break           shift and go to state 660
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! break           [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! endswitch       [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 428
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 643

    (226) case_block -> case expression COLON statement_list .
    (227) case_block -> case expression COLON statement_list . break SEMICOLON
    (245) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for break resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! reduce/reduce conflict for default resolved using rule 226 (case_block -> case expression COLON statement_list .)
  ! reduce/reduce conflict for case resolved using rule 226 (case_block -> case expression COLON statement_list .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 226 (case_block -> case expression COLON statement_list .)
  ! reduce/reduce conflict for endswitch resolved using rule 226 (case_block -> case expression COLON statement_list .)
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    default         reduce using rule 226 (case_block -> case expression COLON statement_list .)
    case            reduce using rule 226 (case_block -> case expression COLON statement_list .)
    RBLOCK          reduce using rule 226 (case_block -> case expression COLON statement_list .)
    endswitch       reduce using rule 226 (case_block -> case expression COLON statement_list .)
    break           shift and go to state 661
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! break           [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]
  ! default         [ reduce using rule 284 (empty_function -> .) ]
  ! case            [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! endswitch       [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 428
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 644

    (222) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .

    COMMENT         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    COMMENT_MULTI   reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    empty           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    include         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    include_once    reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    require         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    require_once    reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    namespace       reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    int             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    float           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    double          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    global          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    const           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    print           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    echo            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    while           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    do              reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    if              reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    function        reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    ID              reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    return          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    class           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    final           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    new             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    interface       reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    trait           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    use             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    continue        reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    goto            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    declare         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    VARIABLE        reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    CLOSE_TAG       reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    for             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    foreach         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    switch          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    try             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    throw           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    exit            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    private         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    protected       reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    public          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    var             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    array           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    pow             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    POW             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    abs             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    cos             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    deg2rad         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    rad2deg         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    die             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    exp             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    floor           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    isset           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    list            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    log             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    log10           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    max             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    min             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    rand            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    round           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    sin             reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    sqrt            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    unset           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    eval            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    CADENA          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    $end            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    RBLOCK          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endwhile        reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endfor          reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endforeach      reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    break           reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endswitch       reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    default         reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    case            reduce using rule 222 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)


state 645

    (236) catch_block -> catch LPAREN list_exception RPAREN LBLOCK . statement_list RBLOCK
    (244) statement_list -> . declaration
    (245) statement_list -> . statement_list declaration
    (246) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (284) empty_function -> .
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    RBLOCK          reduce using rule 284 (empty_function -> .)
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    statement_list                 shift and go to state 662
    declaration                    shift and go to state 329
    empty_function                 shift and go to state 330
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 646

    (237) list_exception -> list_exception PIPE exception_statement .

    RPAREN          reduce using rule 237 (list_exception -> list_exception PIPE exception_statement .)
    PIPE            reduce using rule 237 (list_exception -> list_exception PIPE exception_statement .)


state 647

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 663


state 648

    (193) match_statement -> single_param ASSIGN single_param .

    COMMA           reduce using rule 193 (match_statement -> single_param ASSIGN single_param .)


state 649

    (190) match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .

    COMMENT         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    COMMENT_MULTI   reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    empty           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    include         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    include_once    reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    require         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    require_once    reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    namespace       reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    int             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    float           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    double          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    global          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    const           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    print           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    echo            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    while           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    do              reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    if              reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    function        reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    ID              reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    return          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    class           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    final           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    new             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    interface       reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    trait           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    use             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    continue        reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    goto            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    declare         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    VARIABLE        reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    CLOSE_TAG       reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    for             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    foreach         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    switch          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    try             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    throw           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    exit            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    private         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    protected       reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    public          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    var             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    array           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    pow             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    POW             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    abs             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    cos             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    deg2rad         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    rad2deg         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    die             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    exp             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    floor           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    isset           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    list            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    log             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    log10           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    max             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    min             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    rand            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    round           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    sin             reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    sqrt            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    unset           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    eval            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    CADENA          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    $end            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    RBLOCK          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    endwhile        reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    endfor          reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    endforeach      reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    break           reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    endswitch       reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    default         reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)
    case            reduce using rule 190 (match_declaration -> VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON .)


state 650

    (191) match_body -> match_body match_statement COMMA .

    RBLOCK          reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    NUMBER          reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    CADENA          reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    VARIABLE        reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    true            reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    false           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    callable        reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    array           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    pow             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    POW             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    abs             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    cos             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    deg2rad         reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    rad2deg         reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    die             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    exp             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    floor           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    isset           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    list            reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    log             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    log10           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    max             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    min             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    rand            reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    round           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    sin             reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    sqrt            reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    unset           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    eval            reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    MINUS           reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    LPAREN          reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    PLUSPLUS        reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    MINUSMINUS      reduce using rule 191 (match_body -> match_body match_statement COMMA .)
    ASSIGN          reduce using rule 191 (match_body -> match_body match_statement COMMA .)


state 651

    (194) match_statement -> expression ASSIGN single_param .

    COMMA           reduce using rule 194 (match_statement -> expression ASSIGN single_param .)


state 652

    (140) else_part -> elseif LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 664


state 653

    (141) else_part -> else LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 665
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 654

    (146) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    include_once    reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    require         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    require_once    reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    namespace       reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    int             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    float           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    double          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    global          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    final           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    goto            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    declare         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    eval            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 146 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)


state 655

    (147) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement . RBLOCK
    (21) declaration -> return_statement .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 666
    return          reduce using rule 21 (declaration -> return_statement .)
    COMMENT         reduce using rule 21 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> return_statement .)
    empty           reduce using rule 21 (declaration -> return_statement .)
    include         reduce using rule 21 (declaration -> return_statement .)
    include_once    reduce using rule 21 (declaration -> return_statement .)
    require         reduce using rule 21 (declaration -> return_statement .)
    require_once    reduce using rule 21 (declaration -> return_statement .)
    namespace       reduce using rule 21 (declaration -> return_statement .)
    int             reduce using rule 21 (declaration -> return_statement .)
    float           reduce using rule 21 (declaration -> return_statement .)
    double          reduce using rule 21 (declaration -> return_statement .)
    global          reduce using rule 21 (declaration -> return_statement .)
    const           reduce using rule 21 (declaration -> return_statement .)
    print           reduce using rule 21 (declaration -> return_statement .)
    echo            reduce using rule 21 (declaration -> return_statement .)
    while           reduce using rule 21 (declaration -> return_statement .)
    do              reduce using rule 21 (declaration -> return_statement .)
    if              reduce using rule 21 (declaration -> return_statement .)
    function        reduce using rule 21 (declaration -> return_statement .)
    ID              reduce using rule 21 (declaration -> return_statement .)
    class           reduce using rule 21 (declaration -> return_statement .)
    final           reduce using rule 21 (declaration -> return_statement .)
    new             reduce using rule 21 (declaration -> return_statement .)
    interface       reduce using rule 21 (declaration -> return_statement .)
    trait           reduce using rule 21 (declaration -> return_statement .)
    use             reduce using rule 21 (declaration -> return_statement .)
    continue        reduce using rule 21 (declaration -> return_statement .)
    goto            reduce using rule 21 (declaration -> return_statement .)
    declare         reduce using rule 21 (declaration -> return_statement .)
    VARIABLE        reduce using rule 21 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 21 (declaration -> return_statement .)
    for             reduce using rule 21 (declaration -> return_statement .)
    foreach         reduce using rule 21 (declaration -> return_statement .)
    switch          reduce using rule 21 (declaration -> return_statement .)
    try             reduce using rule 21 (declaration -> return_statement .)
    throw           reduce using rule 21 (declaration -> return_statement .)
    exit            reduce using rule 21 (declaration -> return_statement .)
    private         reduce using rule 21 (declaration -> return_statement .)
    protected       reduce using rule 21 (declaration -> return_statement .)
    public          reduce using rule 21 (declaration -> return_statement .)
    var             reduce using rule 21 (declaration -> return_statement .)
    array           reduce using rule 21 (declaration -> return_statement .)
    pow             reduce using rule 21 (declaration -> return_statement .)
    POW             reduce using rule 21 (declaration -> return_statement .)
    abs             reduce using rule 21 (declaration -> return_statement .)
    cos             reduce using rule 21 (declaration -> return_statement .)
    deg2rad         reduce using rule 21 (declaration -> return_statement .)
    rad2deg         reduce using rule 21 (declaration -> return_statement .)
    die             reduce using rule 21 (declaration -> return_statement .)
    exp             reduce using rule 21 (declaration -> return_statement .)
    floor           reduce using rule 21 (declaration -> return_statement .)
    isset           reduce using rule 21 (declaration -> return_statement .)
    list            reduce using rule 21 (declaration -> return_statement .)
    log             reduce using rule 21 (declaration -> return_statement .)
    log10           reduce using rule 21 (declaration -> return_statement .)
    max             reduce using rule 21 (declaration -> return_statement .)
    min             reduce using rule 21 (declaration -> return_statement .)
    rand            reduce using rule 21 (declaration -> return_statement .)
    round           reduce using rule 21 (declaration -> return_statement .)
    sin             reduce using rule 21 (declaration -> return_statement .)
    sqrt            reduce using rule 21 (declaration -> return_statement .)
    unset           reduce using rule 21 (declaration -> return_statement .)
    eval            reduce using rule 21 (declaration -> return_statement .)
    CADENA          reduce using rule 21 (declaration -> return_statement .)

  ! RBLOCK          [ reduce using rule 21 (declaration -> return_statement .) ]


state 656

    (174) interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .

    RBLOCK          reduce using rule 174 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    private         reduce using rule 174 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    protected       reduce using rule 174 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    public          reduce using rule 174 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    var             reduce using rule 174 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)


state 657

    (186) use_statement -> ID COLON COLON ID insteadof ID SEMICOLON .

    RBLOCK          reduce using rule 186 (use_statement -> ID COLON COLON ID insteadof ID SEMICOLON .)
    ID              reduce using rule 186 (use_statement -> ID COLON COLON ID insteadof ID SEMICOLON .)


state 658

    (214) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .

    COMMENT         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    COMMENT_MULTI   reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    empty           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    include         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    include_once    reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    require         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    require_once    reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    namespace       reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    int             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    float           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    double          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    global          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    const           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    print           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    echo            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    while           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    do              reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    if              reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    function        reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    ID              reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    return          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    class           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    final           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    new             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    interface       reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    trait           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    use             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    continue        reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    goto            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    declare         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    VARIABLE        reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    CLOSE_TAG       reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    for             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    foreach         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    switch          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    try             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    throw           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    exit            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    private         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    protected       reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    public          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    var             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    array           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    pow             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    POW             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    abs             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    cos             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    deg2rad         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    rad2deg         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    die             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    exp             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    floor           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    isset           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    list            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    log             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    log10           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    max             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    min             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    rand            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    round           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    sin             reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    sqrt            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    unset           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    eval            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    CADENA          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    $end            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    RBLOCK          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endwhile        reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endfor          reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endforeach      reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    break           reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endswitch       reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    default         reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    case            reduce using rule 214 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)


state 659

    (220) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .

    COMMENT         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    COMMENT_MULTI   reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    empty           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    include         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    include_once    reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    require         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    require_once    reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    namespace       reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    int             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    float           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    double          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    global          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    const           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    print           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    echo            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    while           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    do              reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    if              reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    function        reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    ID              reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    return          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    class           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    final           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    new             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    interface       reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    trait           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    use             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    continue        reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    goto            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    declare         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    VARIABLE        reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    CLOSE_TAG       reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    for             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    foreach         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    switch          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    try             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    throw           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    exit            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    private         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    protected       reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    public          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    var             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    array           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    pow             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    POW             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    abs             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    cos             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    deg2rad         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    rad2deg         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    die             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    exp             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    floor           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    isset           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    list            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    log             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    log10           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    max             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    min             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    rand            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    round           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    sin             reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    sqrt            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    unset           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    eval            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    CADENA          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    $end            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    RBLOCK          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endwhile        reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endfor          reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endforeach      reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    break           reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endswitch       reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    default         reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    case            reduce using rule 220 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)


state 660

    (229) default_block -> default COLON statement_list break . SEMICOLON

    SEMICOLON       shift and go to state 667


state 661

    (227) case_block -> case expression COLON statement_list break . SEMICOLON

    SEMICOLON       shift and go to state 668


state 662

    (236) catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list . RBLOCK
    (245) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 669
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 428
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 663

    (67) matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .

    COMMENT         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    COMMENT_MULTI   reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    empty           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    include         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    include_once    reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    require         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    require_once    reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    namespace       reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    int             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    float           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    double          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    global          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    const           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    print           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    echo            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    while           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    do              reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    if              reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    function        reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    ID              reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    return          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    class           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    final           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    new             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    interface       reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    trait           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    use             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    continue        reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    goto            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    declare         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    VARIABLE        reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    for             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    foreach         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    switch          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    try             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    throw           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    exit            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    private         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    protected       reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    public          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    var             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    array           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    pow             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    POW             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    abs             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    cos             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    deg2rad         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    rad2deg         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    die             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    exp             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    floor           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    isset           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    list            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    log             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    log10           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    max             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    min             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    rand            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    round           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    sin             reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    sqrt            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    unset           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    eval            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    CADENA          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    $end            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    RBLOCK          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    endwhile        reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    endfor          reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    endforeach      reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    break           reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    endswitch       reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    default         reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)
    case            reduce using rule 67 (matrix_type -> data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON .)


state 664

    (140) else_part -> elseif LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 670


state 665

    (141) else_part -> else LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    include_once    reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    require         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    require_once    reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    namespace       reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    int             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    float           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    double          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    global          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    final           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    goto            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    declare         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    eval            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 141 (else_part -> else LBLOCK declaration_list RBLOCK .)


state 666

    (147) fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .

    COMMENT         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_HASHTAG reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_MULTI   reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    empty           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    include         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    include_once    reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    require         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    require_once    reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    namespace       reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    int             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    float           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    double          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    global          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    const           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    print           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    echo            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    while           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    do              reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    if              reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    function        reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    ID              reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    return          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    class           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    final           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    new             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    interface       reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    trait           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    use             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    continue        reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    goto            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    declare         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    VARIABLE        reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CLOSE_TAG       reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    for             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    foreach         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    switch          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    try             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    throw           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exit            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    private         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    protected       reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    public          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    var             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    array           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    pow             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    POW             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    abs             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    cos             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    deg2rad         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rad2deg         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    die             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exp             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    floor           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    isset           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    list            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log10           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    max             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    min             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rand            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    round           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sin             reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sqrt            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    unset           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    eval            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CADENA          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    $end            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    RBLOCK          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endwhile        reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endfor          reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endforeach      reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    break           reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endswitch       reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    default         reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    case            reduce using rule 147 (fun_declaration -> visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)


state 667

    (229) default_block -> default COLON statement_list break SEMICOLON .

    RBLOCK          reduce using rule 229 (default_block -> default COLON statement_list break SEMICOLON .)
    endswitch       reduce using rule 229 (default_block -> default COLON statement_list break SEMICOLON .)


state 668

    (227) case_block -> case expression COLON statement_list break SEMICOLON .

    default         reduce using rule 227 (case_block -> case expression COLON statement_list break SEMICOLON .)
    case            reduce using rule 227 (case_block -> case expression COLON statement_list break SEMICOLON .)
    RBLOCK          reduce using rule 227 (case_block -> case expression COLON statement_list break SEMICOLON .)
    endswitch       reduce using rule 227 (case_block -> case expression COLON statement_list break SEMICOLON .)


state 669

    (236) catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .

    catch           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    finally         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    COMMENT         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    empty           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    include         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    include_once    reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    require         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    require_once    reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    namespace       reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    int             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    float           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    double          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    global          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    const           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    print           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    echo            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    while           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    do              reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    if              reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    function        reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    ID              reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    return          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    class           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    final           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    new             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    interface       reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    trait           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    use             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    continue        reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    goto            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    declare         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    VARIABLE        reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    CLOSE_TAG       reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    for             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    foreach         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    switch          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    try             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    throw           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    exit            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    private         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    protected       reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    public          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    var             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    array           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    pow             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    POW             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    abs             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    cos             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    deg2rad         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    rad2deg         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    die             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    exp             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    floor           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    isset           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    list            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    log             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    log10           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    max             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    min             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    rand            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    round           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    sin             reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    sqrt            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    unset           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    eval            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    CADENA          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    $end            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    RBLOCK          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endwhile        reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endfor          reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endforeach      reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    break           reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endswitch       reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    default         reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    case            reduce using rule 236 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)


state 670

    (140) else_part -> elseif LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    RBLOCK          reduce using rule 284 (empty_function -> .)
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration_list               shift and go to state 671
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 671

    (140) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . namespace_declaration
    (11) declaration -> . data_type
    (12) declaration -> . matrix_type
    (13) declaration -> . var_declaration
    (14) declaration -> . constant_declaration
    (15) declaration -> . print_declaration
    (16) declaration -> . echo_declaration
    (17) declaration -> . iteration_stmt
    (18) declaration -> . if_statement
    (19) declaration -> . fun_declaration
    (20) declaration -> . fun_call
    (21) declaration -> . return_statement
    (22) declaration -> . class_declaration
    (23) declaration -> . class_extension
    (24) declaration -> . create_obj_declaration
    (25) declaration -> . interface_declaration
    (26) declaration -> . trait_declaration
    (27) declaration -> . use_declaration
    (28) declaration -> . continue_declaration
    (29) declaration -> . label_declaration
    (30) declaration -> . goto_declaration
    (31) declaration -> . declare_statement
    (32) declaration -> . match_declaration
    (33) declaration -> . footer_declaration
    (34) declaration -> . for_loop
    (35) declaration -> . foreach_loop
    (36) declaration -> . switch_statement
    (37) declaration -> . try_statement
    (38) declaration -> . throw_statement
    (39) declaration -> . exit_statement
    (40) declaration -> . empty
    (45) header_declaration -> . include CADENA SEMICOLON
    (46) header_declaration -> . include_once CADENA SEMICOLON
    (47) header_declaration -> . require CADENA SEMICOLON
    (48) header_declaration -> . require_once CADENA SEMICOLON
    (49) namespace_declaration -> . namespace ID SEMICOLON
    (41) data_type -> . int
    (42) data_type -> . float
    (43) data_type -> . double
    (44) data_type -> . empty_function
    (67) matrix_type -> . data_type VARIABLE LBRACKET NUMBER RBRACKET LBRACKET NUMBER RBRACKET EQUAL expression SEMICOLON
    (65) var_declaration -> . var_declaration2 SEMICOLON
    (66) var_declaration -> . global var_declaration2 SEMICOLON
    (50) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (51) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (52) print_declaration -> . print var_declaration2 SEMICOLON
    (53) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (54) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (55) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (56) print_declaration -> . print NUMBER SEMICOLON
    (57) print_declaration -> . print CADENA SEMICOLON
    (58) echo_declaration -> . echo var_declaration2 SEMICOLON
    (59) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (60) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (61) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (62) echo_declaration -> . echo NUMBER SEMICOLON
    (63) echo_declaration -> . echo ceil_expression SEMICOLON
    (64) echo_declaration -> . echo CADENA SEMICOLON
    (93) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (94) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (95) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (96) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (139) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (144) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (145) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (146) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (147) fun_declaration -> . visibility static function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (148) fun_call -> . ID LPAREN params RPAREN
    (149) return_statement -> . return expression SEMICOLON
    (150) return_statement -> . return params SEMICOLON
    (151) return_statement -> . return SEMICOLON
    (152) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (153) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (154) class_declaration -> . final class ID LBLOCK class_body RBLOCK
    (155) class_declaration -> . class ID implements ID LBLOCK class_body RBLOCK
    (156) class_declaration -> . final class ID implements ID LBLOCK class_body RBLOCK
    (157) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (158) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (159) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (160) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (161) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (162) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (163) create_obj_declaration -> . new ID LPAREN params RPAREN
    (170) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (175) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (181) use_declaration -> . use ID SEMICOLON
    (182) use_declaration -> . use id_list LBLOCK use_body RBLOCK
    (199) continue_declaration -> . continue SEMICOLON
    (200) label_declaration -> . ID COLON
    (201) goto_declaration -> . goto ID SEMICOLON
    (283) declare_statement -> . declare LPAREN ID EQUAL expression RPAREN SEMICOLON
    (190) match_declaration -> . VARIABLE EQUAL match LPAREN single_param RPAREN LBLOCK match_body RBLOCK SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (213) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (214) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (219) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (220) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (221) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (222) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (231) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (241) throw_statement -> . throw create_obj_declaration SEMICOLON
    (242) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (218) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (284) empty_function -> .
    (68) var_declaration2 -> . VARIABLE
    (69) var_declaration2 -> . VARIABLE expression
    (70) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (71) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (72) var_declaration2 -> . VARIABLE EQUAL CADENA
    (73) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (74) var_declaration2 -> . VARIABLE EQUAL expression
    (75) var_declaration2 -> . VARIABLE assignation VARIABLE
    (76) var_declaration2 -> . VARIABLE assignation NUMBER
    (77) var_declaration2 -> . VARIABLE EQUAL ceil_expression
    (78) var_declaration2 -> . VARIABLE EQUAL clone_declaration
    (79) var_declaration2 -> . Built_In_Declaration
    (80) var_declaration2 -> . Concatenar_Cadenas_declaration
    (81) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (82) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (83) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (84) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (85) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (86) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (195) visibility -> . private
    (196) visibility -> . protected
    (197) visibility -> . public
    (198) visibility -> . var
    (247) Built_In_Declaration -> . array LPAREN params RPAREN
    (248) Built_In_Declaration -> . pow LPAREN params RPAREN
    (249) Built_In_Declaration -> . POW LPAREN params RPAREN
    (250) Built_In_Declaration -> . abs LPAREN params RPAREN
    (251) Built_In_Declaration -> . cos LPAREN params RPAREN
    (252) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (253) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (254) Built_In_Declaration -> . die LPAREN params RPAREN
    (255) Built_In_Declaration -> . exp LPAREN params RPAREN
    (256) Built_In_Declaration -> . floor LPAREN params RPAREN
    (257) Built_In_Declaration -> . isset LPAREN params RPAREN
    (258) Built_In_Declaration -> . list LPAREN params RPAREN
    (259) Built_In_Declaration -> . log LPAREN params RPAREN
    (260) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (261) Built_In_Declaration -> . max LPAREN params RPAREN
    (262) Built_In_Declaration -> . min LPAREN params RPAREN
    (263) Built_In_Declaration -> . rand LPAREN params RPAREN
    (264) Built_In_Declaration -> . round LPAREN params RPAREN
    (265) Built_In_Declaration -> . sin LPAREN params RPAREN
    (266) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (267) Built_In_Declaration -> . unset LPAREN params RPAREN
    (268) Built_In_Declaration -> . eval LPAREN params RPAREN
    (269) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (270) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (271) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (272) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for include_once resolved as shift
  ! shift/reduce conflict for require resolved as shift
  ! shift/reduce conflict for require_once resolved as shift
  ! shift/reduce conflict for namespace resolved as shift
  ! shift/reduce conflict for int resolved as shift
  ! shift/reduce conflict for float resolved as shift
  ! shift/reduce conflict for double resolved as shift
  ! shift/reduce conflict for global resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for final resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for goto resolved as shift
  ! shift/reduce conflict for declare resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for eval resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          shift and go to state 672
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 40
    include         shift and go to state 41
    include_once    shift and go to state 43
    require         shift and go to state 44
    require_once    shift and go to state 45
    namespace       shift and go to state 46
    int             shift and go to state 48
    float           shift and go to state 49
    double          shift and go to state 50
    global          shift and go to state 54
    const           shift and go to state 55
    print           shift and go to state 56
    echo            shift and go to state 57
    while           shift and go to state 58
    do              shift and go to state 59
    if              shift and go to state 60
    function        shift and go to state 61
    ID              shift and go to state 47
    return          shift and go to state 63
    class           shift and go to state 64
    final           shift and go to state 65
    new             shift and go to state 66
    interface       shift and go to state 67
    trait           shift and go to state 68
    use             shift and go to state 69
    continue        shift and go to state 70
    goto            shift and go to state 71
    declare         shift and go to state 72
    VARIABLE        shift and go to state 52
    CLOSE_TAG       shift and go to state 73
    for             shift and go to state 74
    foreach         shift and go to state 75
    switch          shift and go to state 76
    try             shift and go to state 77
    throw           shift and go to state 78
    exit            shift and go to state 79
    private         shift and go to state 82
    protected       shift and go to state 83
    public          shift and go to state 84
    var             shift and go to state 85
    array           shift and go to state 86
    pow             shift and go to state 87
    POW             shift and go to state 88
    abs             shift and go to state 89
    cos             shift and go to state 90
    deg2rad         shift and go to state 91
    rad2deg         shift and go to state 92
    die             shift and go to state 93
    exp             shift and go to state 94
    floor           shift and go to state 95
    isset           shift and go to state 96
    list            shift and go to state 97
    log             shift and go to state 98
    log10           shift and go to state 99
    max             shift and go to state 100
    min             shift and go to state 101
    rand            shift and go to state 102
    round           shift and go to state 103
    sin             shift and go to state 104
    sqrt            shift and go to state 105
    unset           shift and go to state 106
    eval            shift and go to state 107
    CADENA          shift and go to state 42

  ! VARIABLE        [ reduce using rule 284 (empty_function -> .) ]
  ! RBLOCK          [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 284 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 284 (empty_function -> .) ]
  ! empty           [ reduce using rule 284 (empty_function -> .) ]
  ! include         [ reduce using rule 284 (empty_function -> .) ]
  ! include_once    [ reduce using rule 284 (empty_function -> .) ]
  ! require         [ reduce using rule 284 (empty_function -> .) ]
  ! require_once    [ reduce using rule 284 (empty_function -> .) ]
  ! namespace       [ reduce using rule 284 (empty_function -> .) ]
  ! int             [ reduce using rule 284 (empty_function -> .) ]
  ! float           [ reduce using rule 284 (empty_function -> .) ]
  ! double          [ reduce using rule 284 (empty_function -> .) ]
  ! global          [ reduce using rule 284 (empty_function -> .) ]
  ! const           [ reduce using rule 284 (empty_function -> .) ]
  ! print           [ reduce using rule 284 (empty_function -> .) ]
  ! echo            [ reduce using rule 284 (empty_function -> .) ]
  ! while           [ reduce using rule 284 (empty_function -> .) ]
  ! do              [ reduce using rule 284 (empty_function -> .) ]
  ! if              [ reduce using rule 284 (empty_function -> .) ]
  ! function        [ reduce using rule 284 (empty_function -> .) ]
  ! ID              [ reduce using rule 284 (empty_function -> .) ]
  ! return          [ reduce using rule 284 (empty_function -> .) ]
  ! class           [ reduce using rule 284 (empty_function -> .) ]
  ! final           [ reduce using rule 284 (empty_function -> .) ]
  ! new             [ reduce using rule 284 (empty_function -> .) ]
  ! interface       [ reduce using rule 284 (empty_function -> .) ]
  ! trait           [ reduce using rule 284 (empty_function -> .) ]
  ! use             [ reduce using rule 284 (empty_function -> .) ]
  ! continue        [ reduce using rule 284 (empty_function -> .) ]
  ! goto            [ reduce using rule 284 (empty_function -> .) ]
  ! declare         [ reduce using rule 284 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 284 (empty_function -> .) ]
  ! for             [ reduce using rule 284 (empty_function -> .) ]
  ! foreach         [ reduce using rule 284 (empty_function -> .) ]
  ! switch          [ reduce using rule 284 (empty_function -> .) ]
  ! try             [ reduce using rule 284 (empty_function -> .) ]
  ! throw           [ reduce using rule 284 (empty_function -> .) ]
  ! exit            [ reduce using rule 284 (empty_function -> .) ]
  ! private         [ reduce using rule 284 (empty_function -> .) ]
  ! protected       [ reduce using rule 284 (empty_function -> .) ]
  ! public          [ reduce using rule 284 (empty_function -> .) ]
  ! var             [ reduce using rule 284 (empty_function -> .) ]
  ! array           [ reduce using rule 284 (empty_function -> .) ]
  ! pow             [ reduce using rule 284 (empty_function -> .) ]
  ! POW             [ reduce using rule 284 (empty_function -> .) ]
  ! abs             [ reduce using rule 284 (empty_function -> .) ]
  ! cos             [ reduce using rule 284 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 284 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 284 (empty_function -> .) ]
  ! die             [ reduce using rule 284 (empty_function -> .) ]
  ! exp             [ reduce using rule 284 (empty_function -> .) ]
  ! floor           [ reduce using rule 284 (empty_function -> .) ]
  ! isset           [ reduce using rule 284 (empty_function -> .) ]
  ! list            [ reduce using rule 284 (empty_function -> .) ]
  ! log             [ reduce using rule 284 (empty_function -> .) ]
  ! log10           [ reduce using rule 284 (empty_function -> .) ]
  ! max             [ reduce using rule 284 (empty_function -> .) ]
  ! min             [ reduce using rule 284 (empty_function -> .) ]
  ! rand            [ reduce using rule 284 (empty_function -> .) ]
  ! round           [ reduce using rule 284 (empty_function -> .) ]
  ! sin             [ reduce using rule 284 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 284 (empty_function -> .) ]
  ! unset           [ reduce using rule 284 (empty_function -> .) ]
  ! eval            [ reduce using rule 284 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 284 (empty_function -> .) ]

    declaration                    shift and go to state 108
    header_declaration             shift and go to state 9
    namespace_declaration          shift and go to state 10
    data_type                      shift and go to state 11
    matrix_type                    shift and go to state 12
    var_declaration                shift and go to state 13
    constant_declaration           shift and go to state 14
    print_declaration              shift and go to state 15
    echo_declaration               shift and go to state 16
    iteration_stmt                 shift and go to state 17
    if_statement                   shift and go to state 18
    fun_declaration                shift and go to state 19
    fun_call                       shift and go to state 20
    return_statement               shift and go to state 21
    class_declaration              shift and go to state 22
    class_extension                shift and go to state 23
    create_obj_declaration         shift and go to state 24
    interface_declaration          shift and go to state 25
    trait_declaration              shift and go to state 26
    use_declaration                shift and go to state 27
    continue_declaration           shift and go to state 28
    label_declaration              shift and go to state 29
    goto_declaration               shift and go to state 30
    declare_statement              shift and go to state 31
    match_declaration              shift and go to state 32
    footer_declaration             shift and go to state 33
    for_loop                       shift and go to state 34
    foreach_loop                   shift and go to state 35
    switch_statement               shift and go to state 36
    try_statement                  shift and go to state 37
    throw_statement                shift and go to state 38
    exit_statement                 shift and go to state 39
    empty_function                 shift and go to state 51
    var_declaration2               shift and go to state 53
    visibility                     shift and go to state 62
    Built_In_Declaration           shift and go to state 80
    Concatenar_Cadenas_declaration shift and go to state 81

state 672

    (140) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (140) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (141) else_part -> . else LBLOCK declaration_list RBLOCK
    (142) else_part -> . endif
    (143) else_part -> . empty_function
    (284) empty_function -> .

    elseif          shift and go to state 602
    else            shift and go to state 603
    endif           shift and go to state 604
    COMMENT         reduce using rule 284 (empty_function -> .)
    COMMENT_HASHTAG reduce using rule 284 (empty_function -> .)
    COMMENT_MULTI   reduce using rule 284 (empty_function -> .)
    empty           reduce using rule 284 (empty_function -> .)
    include         reduce using rule 284 (empty_function -> .)
    include_once    reduce using rule 284 (empty_function -> .)
    require         reduce using rule 284 (empty_function -> .)
    require_once    reduce using rule 284 (empty_function -> .)
    namespace       reduce using rule 284 (empty_function -> .)
    int             reduce using rule 284 (empty_function -> .)
    float           reduce using rule 284 (empty_function -> .)
    double          reduce using rule 284 (empty_function -> .)
    global          reduce using rule 284 (empty_function -> .)
    const           reduce using rule 284 (empty_function -> .)
    print           reduce using rule 284 (empty_function -> .)
    echo            reduce using rule 284 (empty_function -> .)
    while           reduce using rule 284 (empty_function -> .)
    do              reduce using rule 284 (empty_function -> .)
    if              reduce using rule 284 (empty_function -> .)
    function        reduce using rule 284 (empty_function -> .)
    ID              reduce using rule 284 (empty_function -> .)
    return          reduce using rule 284 (empty_function -> .)
    class           reduce using rule 284 (empty_function -> .)
    final           reduce using rule 284 (empty_function -> .)
    new             reduce using rule 284 (empty_function -> .)
    interface       reduce using rule 284 (empty_function -> .)
    trait           reduce using rule 284 (empty_function -> .)
    use             reduce using rule 284 (empty_function -> .)
    continue        reduce using rule 284 (empty_function -> .)
    goto            reduce using rule 284 (empty_function -> .)
    declare         reduce using rule 284 (empty_function -> .)
    VARIABLE        reduce using rule 284 (empty_function -> .)
    CLOSE_TAG       reduce using rule 284 (empty_function -> .)
    for             reduce using rule 284 (empty_function -> .)
    foreach         reduce using rule 284 (empty_function -> .)
    switch          reduce using rule 284 (empty_function -> .)
    try             reduce using rule 284 (empty_function -> .)
    throw           reduce using rule 284 (empty_function -> .)
    exit            reduce using rule 284 (empty_function -> .)
    private         reduce using rule 284 (empty_function -> .)
    protected       reduce using rule 284 (empty_function -> .)
    public          reduce using rule 284 (empty_function -> .)
    var             reduce using rule 284 (empty_function -> .)
    array           reduce using rule 284 (empty_function -> .)
    pow             reduce using rule 284 (empty_function -> .)
    POW             reduce using rule 284 (empty_function -> .)
    abs             reduce using rule 284 (empty_function -> .)
    cos             reduce using rule 284 (empty_function -> .)
    deg2rad         reduce using rule 284 (empty_function -> .)
    rad2deg         reduce using rule 284 (empty_function -> .)
    die             reduce using rule 284 (empty_function -> .)
    exp             reduce using rule 284 (empty_function -> .)
    floor           reduce using rule 284 (empty_function -> .)
    isset           reduce using rule 284 (empty_function -> .)
    list            reduce using rule 284 (empty_function -> .)
    log             reduce using rule 284 (empty_function -> .)
    log10           reduce using rule 284 (empty_function -> .)
    max             reduce using rule 284 (empty_function -> .)
    min             reduce using rule 284 (empty_function -> .)
    rand            reduce using rule 284 (empty_function -> .)
    round           reduce using rule 284 (empty_function -> .)
    sin             reduce using rule 284 (empty_function -> .)
    sqrt            reduce using rule 284 (empty_function -> .)
    unset           reduce using rule 284 (empty_function -> .)
    eval            reduce using rule 284 (empty_function -> .)
    CADENA          reduce using rule 284 (empty_function -> .)
    $end            reduce using rule 284 (empty_function -> .)
    RBLOCK          reduce using rule 284 (empty_function -> .)
    endwhile        reduce using rule 284 (empty_function -> .)
    endfor          reduce using rule 284 (empty_function -> .)
    endforeach      reduce using rule 284 (empty_function -> .)
    break           reduce using rule 284 (empty_function -> .)
    endswitch       reduce using rule 284 (empty_function -> .)
    default         reduce using rule 284 (empty_function -> .)
    case            reduce using rule 284 (empty_function -> .)

    else_part                      shift and go to state 673
    empty_function                 shift and go to state 605

state 673

    (140) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include_once    reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    require         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    require_once    reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    namespace       reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    int             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    float           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    double          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    global          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    do              reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    return          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    final           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    interface       reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    trait           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    use             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    continue        reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    goto            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    declare         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    switch          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    try             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    throw           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    private         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    protected       reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    public          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    var             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    array           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    pow             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    POW             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    abs             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    cos             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    deg2rad         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rad2deg         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    die             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exp             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    floor           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    isset           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    list            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log10           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    max             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    min             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rand            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    round           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sin             reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sqrt            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    unset           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    eval            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CADENA          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endwhile        reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endfor          reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endforeach      reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    break           reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endswitch       reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    default         reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    case            reduce using rule 140 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VARIABLE in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 2 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 2 resolved as shift
WARNING: shift/reduce conflict for empty in state 2 resolved as shift
WARNING: shift/reduce conflict for include in state 2 resolved as shift
WARNING: shift/reduce conflict for include_once in state 2 resolved as shift
WARNING: shift/reduce conflict for require in state 2 resolved as shift
WARNING: shift/reduce conflict for require_once in state 2 resolved as shift
WARNING: shift/reduce conflict for namespace in state 2 resolved as shift
WARNING: shift/reduce conflict for int in state 2 resolved as shift
WARNING: shift/reduce conflict for float in state 2 resolved as shift
WARNING: shift/reduce conflict for double in state 2 resolved as shift
WARNING: shift/reduce conflict for global in state 2 resolved as shift
WARNING: shift/reduce conflict for const in state 2 resolved as shift
WARNING: shift/reduce conflict for print in state 2 resolved as shift
WARNING: shift/reduce conflict for echo in state 2 resolved as shift
WARNING: shift/reduce conflict for while in state 2 resolved as shift
WARNING: shift/reduce conflict for do in state 2 resolved as shift
WARNING: shift/reduce conflict for if in state 2 resolved as shift
WARNING: shift/reduce conflict for function in state 2 resolved as shift
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for return in state 2 resolved as shift
WARNING: shift/reduce conflict for class in state 2 resolved as shift
WARNING: shift/reduce conflict for final in state 2 resolved as shift
WARNING: shift/reduce conflict for new in state 2 resolved as shift
WARNING: shift/reduce conflict for interface in state 2 resolved as shift
WARNING: shift/reduce conflict for trait in state 2 resolved as shift
WARNING: shift/reduce conflict for use in state 2 resolved as shift
WARNING: shift/reduce conflict for continue in state 2 resolved as shift
WARNING: shift/reduce conflict for goto in state 2 resolved as shift
WARNING: shift/reduce conflict for declare in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 2 resolved as shift
WARNING: shift/reduce conflict for for in state 2 resolved as shift
WARNING: shift/reduce conflict for foreach in state 2 resolved as shift
WARNING: shift/reduce conflict for switch in state 2 resolved as shift
WARNING: shift/reduce conflict for try in state 2 resolved as shift
WARNING: shift/reduce conflict for throw in state 2 resolved as shift
WARNING: shift/reduce conflict for exit in state 2 resolved as shift
WARNING: shift/reduce conflict for private in state 2 resolved as shift
WARNING: shift/reduce conflict for protected in state 2 resolved as shift
WARNING: shift/reduce conflict for public in state 2 resolved as shift
WARNING: shift/reduce conflict for var in state 2 resolved as shift
WARNING: shift/reduce conflict for array in state 2 resolved as shift
WARNING: shift/reduce conflict for pow in state 2 resolved as shift
WARNING: shift/reduce conflict for POW in state 2 resolved as shift
WARNING: shift/reduce conflict for abs in state 2 resolved as shift
WARNING: shift/reduce conflict for cos in state 2 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 2 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 2 resolved as shift
WARNING: shift/reduce conflict for die in state 2 resolved as shift
WARNING: shift/reduce conflict for exp in state 2 resolved as shift
WARNING: shift/reduce conflict for floor in state 2 resolved as shift
WARNING: shift/reduce conflict for isset in state 2 resolved as shift
WARNING: shift/reduce conflict for list in state 2 resolved as shift
WARNING: shift/reduce conflict for log in state 2 resolved as shift
WARNING: shift/reduce conflict for log10 in state 2 resolved as shift
WARNING: shift/reduce conflict for max in state 2 resolved as shift
WARNING: shift/reduce conflict for min in state 2 resolved as shift
WARNING: shift/reduce conflict for rand in state 2 resolved as shift
WARNING: shift/reduce conflict for round in state 2 resolved as shift
WARNING: shift/reduce conflict for sin in state 2 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 2 resolved as shift
WARNING: shift/reduce conflict for unset in state 2 resolved as shift
WARNING: shift/reduce conflict for eval in state 2 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 2 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 4 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 4 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 4 resolved as shift
WARNING: shift/reduce conflict for empty in state 4 resolved as shift
WARNING: shift/reduce conflict for include in state 4 resolved as shift
WARNING: shift/reduce conflict for include_once in state 4 resolved as shift
WARNING: shift/reduce conflict for require in state 4 resolved as shift
WARNING: shift/reduce conflict for require_once in state 4 resolved as shift
WARNING: shift/reduce conflict for namespace in state 4 resolved as shift
WARNING: shift/reduce conflict for int in state 4 resolved as shift
WARNING: shift/reduce conflict for float in state 4 resolved as shift
WARNING: shift/reduce conflict for double in state 4 resolved as shift
WARNING: shift/reduce conflict for global in state 4 resolved as shift
WARNING: shift/reduce conflict for const in state 4 resolved as shift
WARNING: shift/reduce conflict for print in state 4 resolved as shift
WARNING: shift/reduce conflict for echo in state 4 resolved as shift
WARNING: shift/reduce conflict for while in state 4 resolved as shift
WARNING: shift/reduce conflict for do in state 4 resolved as shift
WARNING: shift/reduce conflict for if in state 4 resolved as shift
WARNING: shift/reduce conflict for function in state 4 resolved as shift
WARNING: shift/reduce conflict for ID in state 4 resolved as shift
WARNING: shift/reduce conflict for return in state 4 resolved as shift
WARNING: shift/reduce conflict for class in state 4 resolved as shift
WARNING: shift/reduce conflict for final in state 4 resolved as shift
WARNING: shift/reduce conflict for new in state 4 resolved as shift
WARNING: shift/reduce conflict for interface in state 4 resolved as shift
WARNING: shift/reduce conflict for trait in state 4 resolved as shift
WARNING: shift/reduce conflict for use in state 4 resolved as shift
WARNING: shift/reduce conflict for continue in state 4 resolved as shift
WARNING: shift/reduce conflict for goto in state 4 resolved as shift
WARNING: shift/reduce conflict for declare in state 4 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 4 resolved as shift
WARNING: shift/reduce conflict for for in state 4 resolved as shift
WARNING: shift/reduce conflict for foreach in state 4 resolved as shift
WARNING: shift/reduce conflict for switch in state 4 resolved as shift
WARNING: shift/reduce conflict for try in state 4 resolved as shift
WARNING: shift/reduce conflict for throw in state 4 resolved as shift
WARNING: shift/reduce conflict for exit in state 4 resolved as shift
WARNING: shift/reduce conflict for private in state 4 resolved as shift
WARNING: shift/reduce conflict for protected in state 4 resolved as shift
WARNING: shift/reduce conflict for public in state 4 resolved as shift
WARNING: shift/reduce conflict for var in state 4 resolved as shift
WARNING: shift/reduce conflict for array in state 4 resolved as shift
WARNING: shift/reduce conflict for pow in state 4 resolved as shift
WARNING: shift/reduce conflict for POW in state 4 resolved as shift
WARNING: shift/reduce conflict for abs in state 4 resolved as shift
WARNING: shift/reduce conflict for cos in state 4 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 4 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 4 resolved as shift
WARNING: shift/reduce conflict for die in state 4 resolved as shift
WARNING: shift/reduce conflict for exp in state 4 resolved as shift
WARNING: shift/reduce conflict for floor in state 4 resolved as shift
WARNING: shift/reduce conflict for isset in state 4 resolved as shift
WARNING: shift/reduce conflict for list in state 4 resolved as shift
WARNING: shift/reduce conflict for log in state 4 resolved as shift
WARNING: shift/reduce conflict for log10 in state 4 resolved as shift
WARNING: shift/reduce conflict for max in state 4 resolved as shift
WARNING: shift/reduce conflict for min in state 4 resolved as shift
WARNING: shift/reduce conflict for rand in state 4 resolved as shift
WARNING: shift/reduce conflict for round in state 4 resolved as shift
WARNING: shift/reduce conflict for sin in state 4 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 4 resolved as shift
WARNING: shift/reduce conflict for unset in state 4 resolved as shift
WARNING: shift/reduce conflict for eval in state 4 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 4 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 11 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 63 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 144 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 157 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 157 resolved as shift
WARNING: shift/reduce conflict for empty in state 157 resolved as shift
WARNING: shift/reduce conflict for include in state 157 resolved as shift
WARNING: shift/reduce conflict for include_once in state 157 resolved as shift
WARNING: shift/reduce conflict for require in state 157 resolved as shift
WARNING: shift/reduce conflict for require_once in state 157 resolved as shift
WARNING: shift/reduce conflict for namespace in state 157 resolved as shift
WARNING: shift/reduce conflict for int in state 157 resolved as shift
WARNING: shift/reduce conflict for float in state 157 resolved as shift
WARNING: shift/reduce conflict for double in state 157 resolved as shift
WARNING: shift/reduce conflict for global in state 157 resolved as shift
WARNING: shift/reduce conflict for const in state 157 resolved as shift
WARNING: shift/reduce conflict for print in state 157 resolved as shift
WARNING: shift/reduce conflict for echo in state 157 resolved as shift
WARNING: shift/reduce conflict for while in state 157 resolved as shift
WARNING: shift/reduce conflict for do in state 157 resolved as shift
WARNING: shift/reduce conflict for if in state 157 resolved as shift
WARNING: shift/reduce conflict for function in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for return in state 157 resolved as shift
WARNING: shift/reduce conflict for class in state 157 resolved as shift
WARNING: shift/reduce conflict for final in state 157 resolved as shift
WARNING: shift/reduce conflict for new in state 157 resolved as shift
WARNING: shift/reduce conflict for interface in state 157 resolved as shift
WARNING: shift/reduce conflict for trait in state 157 resolved as shift
WARNING: shift/reduce conflict for use in state 157 resolved as shift
WARNING: shift/reduce conflict for continue in state 157 resolved as shift
WARNING: shift/reduce conflict for goto in state 157 resolved as shift
WARNING: shift/reduce conflict for declare in state 157 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 157 resolved as shift
WARNING: shift/reduce conflict for for in state 157 resolved as shift
WARNING: shift/reduce conflict for foreach in state 157 resolved as shift
WARNING: shift/reduce conflict for switch in state 157 resolved as shift
WARNING: shift/reduce conflict for try in state 157 resolved as shift
WARNING: shift/reduce conflict for throw in state 157 resolved as shift
WARNING: shift/reduce conflict for exit in state 157 resolved as shift
WARNING: shift/reduce conflict for private in state 157 resolved as shift
WARNING: shift/reduce conflict for protected in state 157 resolved as shift
WARNING: shift/reduce conflict for public in state 157 resolved as shift
WARNING: shift/reduce conflict for var in state 157 resolved as shift
WARNING: shift/reduce conflict for array in state 157 resolved as shift
WARNING: shift/reduce conflict for pow in state 157 resolved as shift
WARNING: shift/reduce conflict for POW in state 157 resolved as shift
WARNING: shift/reduce conflict for abs in state 157 resolved as shift
WARNING: shift/reduce conflict for cos in state 157 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 157 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 157 resolved as shift
WARNING: shift/reduce conflict for die in state 157 resolved as shift
WARNING: shift/reduce conflict for exp in state 157 resolved as shift
WARNING: shift/reduce conflict for floor in state 157 resolved as shift
WARNING: shift/reduce conflict for isset in state 157 resolved as shift
WARNING: shift/reduce conflict for list in state 157 resolved as shift
WARNING: shift/reduce conflict for log in state 157 resolved as shift
WARNING: shift/reduce conflict for log10 in state 157 resolved as shift
WARNING: shift/reduce conflict for max in state 157 resolved as shift
WARNING: shift/reduce conflict for min in state 157 resolved as shift
WARNING: shift/reduce conflict for rand in state 157 resolved as shift
WARNING: shift/reduce conflict for round in state 157 resolved as shift
WARNING: shift/reduce conflict for sin in state 157 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 157 resolved as shift
WARNING: shift/reduce conflict for unset in state 157 resolved as shift
WARNING: shift/reduce conflict for eval in state 157 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 157 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 158 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 158 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 158 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 158 resolved as shift
WARNING: shift/reduce conflict for empty in state 158 resolved as shift
WARNING: shift/reduce conflict for include in state 158 resolved as shift
WARNING: shift/reduce conflict for include_once in state 158 resolved as shift
WARNING: shift/reduce conflict for require in state 158 resolved as shift
WARNING: shift/reduce conflict for require_once in state 158 resolved as shift
WARNING: shift/reduce conflict for namespace in state 158 resolved as shift
WARNING: shift/reduce conflict for int in state 158 resolved as shift
WARNING: shift/reduce conflict for float in state 158 resolved as shift
WARNING: shift/reduce conflict for double in state 158 resolved as shift
WARNING: shift/reduce conflict for global in state 158 resolved as shift
WARNING: shift/reduce conflict for const in state 158 resolved as shift
WARNING: shift/reduce conflict for print in state 158 resolved as shift
WARNING: shift/reduce conflict for echo in state 158 resolved as shift
WARNING: shift/reduce conflict for while in state 158 resolved as shift
WARNING: shift/reduce conflict for do in state 158 resolved as shift
WARNING: shift/reduce conflict for if in state 158 resolved as shift
WARNING: shift/reduce conflict for function in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for return in state 158 resolved as shift
WARNING: shift/reduce conflict for class in state 158 resolved as shift
WARNING: shift/reduce conflict for final in state 158 resolved as shift
WARNING: shift/reduce conflict for new in state 158 resolved as shift
WARNING: shift/reduce conflict for interface in state 158 resolved as shift
WARNING: shift/reduce conflict for trait in state 158 resolved as shift
WARNING: shift/reduce conflict for use in state 158 resolved as shift
WARNING: shift/reduce conflict for continue in state 158 resolved as shift
WARNING: shift/reduce conflict for goto in state 158 resolved as shift
WARNING: shift/reduce conflict for declare in state 158 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 158 resolved as shift
WARNING: shift/reduce conflict for for in state 158 resolved as shift
WARNING: shift/reduce conflict for foreach in state 158 resolved as shift
WARNING: shift/reduce conflict for switch in state 158 resolved as shift
WARNING: shift/reduce conflict for try in state 158 resolved as shift
WARNING: shift/reduce conflict for throw in state 158 resolved as shift
WARNING: shift/reduce conflict for exit in state 158 resolved as shift
WARNING: shift/reduce conflict for private in state 158 resolved as shift
WARNING: shift/reduce conflict for protected in state 158 resolved as shift
WARNING: shift/reduce conflict for public in state 158 resolved as shift
WARNING: shift/reduce conflict for var in state 158 resolved as shift
WARNING: shift/reduce conflict for array in state 158 resolved as shift
WARNING: shift/reduce conflict for pow in state 158 resolved as shift
WARNING: shift/reduce conflict for POW in state 158 resolved as shift
WARNING: shift/reduce conflict for abs in state 158 resolved as shift
WARNING: shift/reduce conflict for cos in state 158 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 158 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 158 resolved as shift
WARNING: shift/reduce conflict for die in state 158 resolved as shift
WARNING: shift/reduce conflict for exp in state 158 resolved as shift
WARNING: shift/reduce conflict for floor in state 158 resolved as shift
WARNING: shift/reduce conflict for isset in state 158 resolved as shift
WARNING: shift/reduce conflict for list in state 158 resolved as shift
WARNING: shift/reduce conflict for log in state 158 resolved as shift
WARNING: shift/reduce conflict for log10 in state 158 resolved as shift
WARNING: shift/reduce conflict for max in state 158 resolved as shift
WARNING: shift/reduce conflict for min in state 158 resolved as shift
WARNING: shift/reduce conflict for rand in state 158 resolved as shift
WARNING: shift/reduce conflict for round in state 158 resolved as shift
WARNING: shift/reduce conflict for sin in state 158 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 158 resolved as shift
WARNING: shift/reduce conflict for unset in state 158 resolved as shift
WARNING: shift/reduce conflict for eval in state 158 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 189 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 189 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 189 resolved as shift
WARNING: shift/reduce conflict for empty in state 189 resolved as shift
WARNING: shift/reduce conflict for include in state 189 resolved as shift
WARNING: shift/reduce conflict for include_once in state 189 resolved as shift
WARNING: shift/reduce conflict for require in state 189 resolved as shift
WARNING: shift/reduce conflict for require_once in state 189 resolved as shift
WARNING: shift/reduce conflict for namespace in state 189 resolved as shift
WARNING: shift/reduce conflict for int in state 189 resolved as shift
WARNING: shift/reduce conflict for float in state 189 resolved as shift
WARNING: shift/reduce conflict for double in state 189 resolved as shift
WARNING: shift/reduce conflict for global in state 189 resolved as shift
WARNING: shift/reduce conflict for const in state 189 resolved as shift
WARNING: shift/reduce conflict for print in state 189 resolved as shift
WARNING: shift/reduce conflict for echo in state 189 resolved as shift
WARNING: shift/reduce conflict for while in state 189 resolved as shift
WARNING: shift/reduce conflict for do in state 189 resolved as shift
WARNING: shift/reduce conflict for if in state 189 resolved as shift
WARNING: shift/reduce conflict for function in state 189 resolved as shift
WARNING: shift/reduce conflict for ID in state 189 resolved as shift
WARNING: shift/reduce conflict for return in state 189 resolved as shift
WARNING: shift/reduce conflict for class in state 189 resolved as shift
WARNING: shift/reduce conflict for final in state 189 resolved as shift
WARNING: shift/reduce conflict for new in state 189 resolved as shift
WARNING: shift/reduce conflict for interface in state 189 resolved as shift
WARNING: shift/reduce conflict for trait in state 189 resolved as shift
WARNING: shift/reduce conflict for use in state 189 resolved as shift
WARNING: shift/reduce conflict for continue in state 189 resolved as shift
WARNING: shift/reduce conflict for goto in state 189 resolved as shift
WARNING: shift/reduce conflict for declare in state 189 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 189 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 189 resolved as shift
WARNING: shift/reduce conflict for for in state 189 resolved as shift
WARNING: shift/reduce conflict for foreach in state 189 resolved as shift
WARNING: shift/reduce conflict for switch in state 189 resolved as shift
WARNING: shift/reduce conflict for try in state 189 resolved as shift
WARNING: shift/reduce conflict for throw in state 189 resolved as shift
WARNING: shift/reduce conflict for exit in state 189 resolved as shift
WARNING: shift/reduce conflict for private in state 189 resolved as shift
WARNING: shift/reduce conflict for protected in state 189 resolved as shift
WARNING: shift/reduce conflict for public in state 189 resolved as shift
WARNING: shift/reduce conflict for var in state 189 resolved as shift
WARNING: shift/reduce conflict for array in state 189 resolved as shift
WARNING: shift/reduce conflict for pow in state 189 resolved as shift
WARNING: shift/reduce conflict for POW in state 189 resolved as shift
WARNING: shift/reduce conflict for abs in state 189 resolved as shift
WARNING: shift/reduce conflict for cos in state 189 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 189 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 189 resolved as shift
WARNING: shift/reduce conflict for die in state 189 resolved as shift
WARNING: shift/reduce conflict for exp in state 189 resolved as shift
WARNING: shift/reduce conflict for floor in state 189 resolved as shift
WARNING: shift/reduce conflict for isset in state 189 resolved as shift
WARNING: shift/reduce conflict for list in state 189 resolved as shift
WARNING: shift/reduce conflict for log in state 189 resolved as shift
WARNING: shift/reduce conflict for log10 in state 189 resolved as shift
WARNING: shift/reduce conflict for max in state 189 resolved as shift
WARNING: shift/reduce conflict for min in state 189 resolved as shift
WARNING: shift/reduce conflict for rand in state 189 resolved as shift
WARNING: shift/reduce conflict for round in state 189 resolved as shift
WARNING: shift/reduce conflict for sin in state 189 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 189 resolved as shift
WARNING: shift/reduce conflict for unset in state 189 resolved as shift
WARNING: shift/reduce conflict for eval in state 189 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 189 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 302 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 302 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 302 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 302 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 302 resolved as shift
WARNING: shift/reduce conflict for empty in state 302 resolved as shift
WARNING: shift/reduce conflict for include in state 302 resolved as shift
WARNING: shift/reduce conflict for include_once in state 302 resolved as shift
WARNING: shift/reduce conflict for require in state 302 resolved as shift
WARNING: shift/reduce conflict for require_once in state 302 resolved as shift
WARNING: shift/reduce conflict for namespace in state 302 resolved as shift
WARNING: shift/reduce conflict for int in state 302 resolved as shift
WARNING: shift/reduce conflict for float in state 302 resolved as shift
WARNING: shift/reduce conflict for double in state 302 resolved as shift
WARNING: shift/reduce conflict for global in state 302 resolved as shift
WARNING: shift/reduce conflict for const in state 302 resolved as shift
WARNING: shift/reduce conflict for print in state 302 resolved as shift
WARNING: shift/reduce conflict for echo in state 302 resolved as shift
WARNING: shift/reduce conflict for while in state 302 resolved as shift
WARNING: shift/reduce conflict for do in state 302 resolved as shift
WARNING: shift/reduce conflict for if in state 302 resolved as shift
WARNING: shift/reduce conflict for function in state 302 resolved as shift
WARNING: shift/reduce conflict for ID in state 302 resolved as shift
WARNING: shift/reduce conflict for return in state 302 resolved as shift
WARNING: shift/reduce conflict for class in state 302 resolved as shift
WARNING: shift/reduce conflict for final in state 302 resolved as shift
WARNING: shift/reduce conflict for new in state 302 resolved as shift
WARNING: shift/reduce conflict for interface in state 302 resolved as shift
WARNING: shift/reduce conflict for trait in state 302 resolved as shift
WARNING: shift/reduce conflict for use in state 302 resolved as shift
WARNING: shift/reduce conflict for continue in state 302 resolved as shift
WARNING: shift/reduce conflict for goto in state 302 resolved as shift
WARNING: shift/reduce conflict for declare in state 302 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 302 resolved as shift
WARNING: shift/reduce conflict for for in state 302 resolved as shift
WARNING: shift/reduce conflict for foreach in state 302 resolved as shift
WARNING: shift/reduce conflict for switch in state 302 resolved as shift
WARNING: shift/reduce conflict for try in state 302 resolved as shift
WARNING: shift/reduce conflict for throw in state 302 resolved as shift
WARNING: shift/reduce conflict for exit in state 302 resolved as shift
WARNING: shift/reduce conflict for private in state 302 resolved as shift
WARNING: shift/reduce conflict for protected in state 302 resolved as shift
WARNING: shift/reduce conflict for public in state 302 resolved as shift
WARNING: shift/reduce conflict for var in state 302 resolved as shift
WARNING: shift/reduce conflict for array in state 302 resolved as shift
WARNING: shift/reduce conflict for pow in state 302 resolved as shift
WARNING: shift/reduce conflict for POW in state 302 resolved as shift
WARNING: shift/reduce conflict for abs in state 302 resolved as shift
WARNING: shift/reduce conflict for cos in state 302 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 302 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 302 resolved as shift
WARNING: shift/reduce conflict for die in state 302 resolved as shift
WARNING: shift/reduce conflict for exp in state 302 resolved as shift
WARNING: shift/reduce conflict for floor in state 302 resolved as shift
WARNING: shift/reduce conflict for isset in state 302 resolved as shift
WARNING: shift/reduce conflict for list in state 302 resolved as shift
WARNING: shift/reduce conflict for log in state 302 resolved as shift
WARNING: shift/reduce conflict for log10 in state 302 resolved as shift
WARNING: shift/reduce conflict for max in state 302 resolved as shift
WARNING: shift/reduce conflict for min in state 302 resolved as shift
WARNING: shift/reduce conflict for rand in state 302 resolved as shift
WARNING: shift/reduce conflict for round in state 302 resolved as shift
WARNING: shift/reduce conflict for sin in state 302 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 302 resolved as shift
WARNING: shift/reduce conflict for unset in state 302 resolved as shift
WARNING: shift/reduce conflict for eval in state 302 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 302 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 303 resolved as shift
WARNING: shift/reduce conflict for endwhile in state 303 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 303 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 303 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 303 resolved as shift
WARNING: shift/reduce conflict for empty in state 303 resolved as shift
WARNING: shift/reduce conflict for include in state 303 resolved as shift
WARNING: shift/reduce conflict for include_once in state 303 resolved as shift
WARNING: shift/reduce conflict for require in state 303 resolved as shift
WARNING: shift/reduce conflict for require_once in state 303 resolved as shift
WARNING: shift/reduce conflict for namespace in state 303 resolved as shift
WARNING: shift/reduce conflict for int in state 303 resolved as shift
WARNING: shift/reduce conflict for float in state 303 resolved as shift
WARNING: shift/reduce conflict for double in state 303 resolved as shift
WARNING: shift/reduce conflict for global in state 303 resolved as shift
WARNING: shift/reduce conflict for const in state 303 resolved as shift
WARNING: shift/reduce conflict for print in state 303 resolved as shift
WARNING: shift/reduce conflict for echo in state 303 resolved as shift
WARNING: shift/reduce conflict for while in state 303 resolved as shift
WARNING: shift/reduce conflict for do in state 303 resolved as shift
WARNING: shift/reduce conflict for if in state 303 resolved as shift
WARNING: shift/reduce conflict for function in state 303 resolved as shift
WARNING: shift/reduce conflict for ID in state 303 resolved as shift
WARNING: shift/reduce conflict for return in state 303 resolved as shift
WARNING: shift/reduce conflict for class in state 303 resolved as shift
WARNING: shift/reduce conflict for final in state 303 resolved as shift
WARNING: shift/reduce conflict for new in state 303 resolved as shift
WARNING: shift/reduce conflict for interface in state 303 resolved as shift
WARNING: shift/reduce conflict for trait in state 303 resolved as shift
WARNING: shift/reduce conflict for use in state 303 resolved as shift
WARNING: shift/reduce conflict for continue in state 303 resolved as shift
WARNING: shift/reduce conflict for goto in state 303 resolved as shift
WARNING: shift/reduce conflict for declare in state 303 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 303 resolved as shift
WARNING: shift/reduce conflict for for in state 303 resolved as shift
WARNING: shift/reduce conflict for foreach in state 303 resolved as shift
WARNING: shift/reduce conflict for switch in state 303 resolved as shift
WARNING: shift/reduce conflict for try in state 303 resolved as shift
WARNING: shift/reduce conflict for throw in state 303 resolved as shift
WARNING: shift/reduce conflict for exit in state 303 resolved as shift
WARNING: shift/reduce conflict for private in state 303 resolved as shift
WARNING: shift/reduce conflict for protected in state 303 resolved as shift
WARNING: shift/reduce conflict for public in state 303 resolved as shift
WARNING: shift/reduce conflict for var in state 303 resolved as shift
WARNING: shift/reduce conflict for array in state 303 resolved as shift
WARNING: shift/reduce conflict for pow in state 303 resolved as shift
WARNING: shift/reduce conflict for POW in state 303 resolved as shift
WARNING: shift/reduce conflict for abs in state 303 resolved as shift
WARNING: shift/reduce conflict for cos in state 303 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 303 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 303 resolved as shift
WARNING: shift/reduce conflict for die in state 303 resolved as shift
WARNING: shift/reduce conflict for exp in state 303 resolved as shift
WARNING: shift/reduce conflict for floor in state 303 resolved as shift
WARNING: shift/reduce conflict for isset in state 303 resolved as shift
WARNING: shift/reduce conflict for list in state 303 resolved as shift
WARNING: shift/reduce conflict for log in state 303 resolved as shift
WARNING: shift/reduce conflict for log10 in state 303 resolved as shift
WARNING: shift/reduce conflict for max in state 303 resolved as shift
WARNING: shift/reduce conflict for min in state 303 resolved as shift
WARNING: shift/reduce conflict for rand in state 303 resolved as shift
WARNING: shift/reduce conflict for round in state 303 resolved as shift
WARNING: shift/reduce conflict for sin in state 303 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 303 resolved as shift
WARNING: shift/reduce conflict for unset in state 303 resolved as shift
WARNING: shift/reduce conflict for eval in state 303 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 303 resolved as shift
WARNING: shift/reduce conflict for private in state 312 resolved as shift
WARNING: shift/reduce conflict for protected in state 312 resolved as shift
WARNING: shift/reduce conflict for public in state 312 resolved as shift
WARNING: shift/reduce conflict for var in state 312 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 312 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 312 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 312 resolved as shift
WARNING: shift/reduce conflict for empty in state 312 resolved as shift
WARNING: shift/reduce conflict for include in state 312 resolved as shift
WARNING: shift/reduce conflict for include_once in state 312 resolved as shift
WARNING: shift/reduce conflict for require in state 312 resolved as shift
WARNING: shift/reduce conflict for require_once in state 312 resolved as shift
WARNING: shift/reduce conflict for namespace in state 312 resolved as shift
WARNING: shift/reduce conflict for int in state 312 resolved as shift
WARNING: shift/reduce conflict for float in state 312 resolved as shift
WARNING: shift/reduce conflict for double in state 312 resolved as shift
WARNING: shift/reduce conflict for global in state 312 resolved as shift
WARNING: shift/reduce conflict for const in state 312 resolved as shift
WARNING: shift/reduce conflict for print in state 312 resolved as shift
WARNING: shift/reduce conflict for echo in state 312 resolved as shift
WARNING: shift/reduce conflict for while in state 312 resolved as shift
WARNING: shift/reduce conflict for do in state 312 resolved as shift
WARNING: shift/reduce conflict for if in state 312 resolved as shift
WARNING: shift/reduce conflict for function in state 312 resolved as shift
WARNING: shift/reduce conflict for ID in state 312 resolved as shift
WARNING: shift/reduce conflict for return in state 312 resolved as shift
WARNING: shift/reduce conflict for class in state 312 resolved as shift
WARNING: shift/reduce conflict for final in state 312 resolved as shift
WARNING: shift/reduce conflict for new in state 312 resolved as shift
WARNING: shift/reduce conflict for interface in state 312 resolved as shift
WARNING: shift/reduce conflict for trait in state 312 resolved as shift
WARNING: shift/reduce conflict for use in state 312 resolved as shift
WARNING: shift/reduce conflict for continue in state 312 resolved as shift
WARNING: shift/reduce conflict for goto in state 312 resolved as shift
WARNING: shift/reduce conflict for declare in state 312 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 312 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 312 resolved as shift
WARNING: shift/reduce conflict for for in state 312 resolved as shift
WARNING: shift/reduce conflict for foreach in state 312 resolved as shift
WARNING: shift/reduce conflict for switch in state 312 resolved as shift
WARNING: shift/reduce conflict for try in state 312 resolved as shift
WARNING: shift/reduce conflict for throw in state 312 resolved as shift
WARNING: shift/reduce conflict for exit in state 312 resolved as shift
WARNING: shift/reduce conflict for array in state 312 resolved as shift
WARNING: shift/reduce conflict for pow in state 312 resolved as shift
WARNING: shift/reduce conflict for POW in state 312 resolved as shift
WARNING: shift/reduce conflict for abs in state 312 resolved as shift
WARNING: shift/reduce conflict for cos in state 312 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 312 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 312 resolved as shift
WARNING: shift/reduce conflict for die in state 312 resolved as shift
WARNING: shift/reduce conflict for exp in state 312 resolved as shift
WARNING: shift/reduce conflict for floor in state 312 resolved as shift
WARNING: shift/reduce conflict for isset in state 312 resolved as shift
WARNING: shift/reduce conflict for list in state 312 resolved as shift
WARNING: shift/reduce conflict for log in state 312 resolved as shift
WARNING: shift/reduce conflict for log10 in state 312 resolved as shift
WARNING: shift/reduce conflict for max in state 312 resolved as shift
WARNING: shift/reduce conflict for min in state 312 resolved as shift
WARNING: shift/reduce conflict for rand in state 312 resolved as shift
WARNING: shift/reduce conflict for round in state 312 resolved as shift
WARNING: shift/reduce conflict for sin in state 312 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 312 resolved as shift
WARNING: shift/reduce conflict for unset in state 312 resolved as shift
WARNING: shift/reduce conflict for eval in state 312 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 312 resolved as shift
WARNING: shift/reduce conflict for private in state 317 resolved as shift
WARNING: shift/reduce conflict for protected in state 317 resolved as shift
WARNING: shift/reduce conflict for public in state 317 resolved as shift
WARNING: shift/reduce conflict for var in state 317 resolved as shift
WARNING: shift/reduce conflict for private in state 318 resolved as shift
WARNING: shift/reduce conflict for protected in state 318 resolved as shift
WARNING: shift/reduce conflict for public in state 318 resolved as shift
WARNING: shift/reduce conflict for var in state 318 resolved as shift
WARNING: shift/reduce conflict for ID in state 320 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 328 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 328 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 328 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 328 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 328 resolved as shift
WARNING: shift/reduce conflict for empty in state 328 resolved as shift
WARNING: shift/reduce conflict for include in state 328 resolved as shift
WARNING: shift/reduce conflict for include_once in state 328 resolved as shift
WARNING: shift/reduce conflict for require in state 328 resolved as shift
WARNING: shift/reduce conflict for require_once in state 328 resolved as shift
WARNING: shift/reduce conflict for namespace in state 328 resolved as shift
WARNING: shift/reduce conflict for int in state 328 resolved as shift
WARNING: shift/reduce conflict for float in state 328 resolved as shift
WARNING: shift/reduce conflict for double in state 328 resolved as shift
WARNING: shift/reduce conflict for global in state 328 resolved as shift
WARNING: shift/reduce conflict for const in state 328 resolved as shift
WARNING: shift/reduce conflict for print in state 328 resolved as shift
WARNING: shift/reduce conflict for echo in state 328 resolved as shift
WARNING: shift/reduce conflict for while in state 328 resolved as shift
WARNING: shift/reduce conflict for do in state 328 resolved as shift
WARNING: shift/reduce conflict for if in state 328 resolved as shift
WARNING: shift/reduce conflict for function in state 328 resolved as shift
WARNING: shift/reduce conflict for ID in state 328 resolved as shift
WARNING: shift/reduce conflict for return in state 328 resolved as shift
WARNING: shift/reduce conflict for class in state 328 resolved as shift
WARNING: shift/reduce conflict for final in state 328 resolved as shift
WARNING: shift/reduce conflict for new in state 328 resolved as shift
WARNING: shift/reduce conflict for interface in state 328 resolved as shift
WARNING: shift/reduce conflict for trait in state 328 resolved as shift
WARNING: shift/reduce conflict for use in state 328 resolved as shift
WARNING: shift/reduce conflict for continue in state 328 resolved as shift
WARNING: shift/reduce conflict for goto in state 328 resolved as shift
WARNING: shift/reduce conflict for declare in state 328 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 328 resolved as shift
WARNING: shift/reduce conflict for for in state 328 resolved as shift
WARNING: shift/reduce conflict for foreach in state 328 resolved as shift
WARNING: shift/reduce conflict for switch in state 328 resolved as shift
WARNING: shift/reduce conflict for try in state 328 resolved as shift
WARNING: shift/reduce conflict for throw in state 328 resolved as shift
WARNING: shift/reduce conflict for exit in state 328 resolved as shift
WARNING: shift/reduce conflict for private in state 328 resolved as shift
WARNING: shift/reduce conflict for protected in state 328 resolved as shift
WARNING: shift/reduce conflict for public in state 328 resolved as shift
WARNING: shift/reduce conflict for var in state 328 resolved as shift
WARNING: shift/reduce conflict for array in state 328 resolved as shift
WARNING: shift/reduce conflict for pow in state 328 resolved as shift
WARNING: shift/reduce conflict for POW in state 328 resolved as shift
WARNING: shift/reduce conflict for abs in state 328 resolved as shift
WARNING: shift/reduce conflict for cos in state 328 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 328 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 328 resolved as shift
WARNING: shift/reduce conflict for die in state 328 resolved as shift
WARNING: shift/reduce conflict for exp in state 328 resolved as shift
WARNING: shift/reduce conflict for floor in state 328 resolved as shift
WARNING: shift/reduce conflict for isset in state 328 resolved as shift
WARNING: shift/reduce conflict for list in state 328 resolved as shift
WARNING: shift/reduce conflict for log in state 328 resolved as shift
WARNING: shift/reduce conflict for log10 in state 328 resolved as shift
WARNING: shift/reduce conflict for max in state 328 resolved as shift
WARNING: shift/reduce conflict for min in state 328 resolved as shift
WARNING: shift/reduce conflict for rand in state 328 resolved as shift
WARNING: shift/reduce conflict for round in state 328 resolved as shift
WARNING: shift/reduce conflict for sin in state 328 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 328 resolved as shift
WARNING: shift/reduce conflict for unset in state 328 resolved as shift
WARNING: shift/reduce conflict for eval in state 328 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 328 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 392 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 392 resolved as shift
WARNING: shift/reduce conflict for private in state 392 resolved as shift
WARNING: shift/reduce conflict for protected in state 392 resolved as shift
WARNING: shift/reduce conflict for public in state 392 resolved as shift
WARNING: shift/reduce conflict for var in state 392 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 392 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 392 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 392 resolved as shift
WARNING: shift/reduce conflict for empty in state 392 resolved as shift
WARNING: shift/reduce conflict for include in state 392 resolved as shift
WARNING: shift/reduce conflict for include_once in state 392 resolved as shift
WARNING: shift/reduce conflict for require in state 392 resolved as shift
WARNING: shift/reduce conflict for require_once in state 392 resolved as shift
WARNING: shift/reduce conflict for namespace in state 392 resolved as shift
WARNING: shift/reduce conflict for int in state 392 resolved as shift
WARNING: shift/reduce conflict for float in state 392 resolved as shift
WARNING: shift/reduce conflict for double in state 392 resolved as shift
WARNING: shift/reduce conflict for global in state 392 resolved as shift
WARNING: shift/reduce conflict for const in state 392 resolved as shift
WARNING: shift/reduce conflict for print in state 392 resolved as shift
WARNING: shift/reduce conflict for echo in state 392 resolved as shift
WARNING: shift/reduce conflict for while in state 392 resolved as shift
WARNING: shift/reduce conflict for do in state 392 resolved as shift
WARNING: shift/reduce conflict for if in state 392 resolved as shift
WARNING: shift/reduce conflict for function in state 392 resolved as shift
WARNING: shift/reduce conflict for ID in state 392 resolved as shift
WARNING: shift/reduce conflict for return in state 392 resolved as shift
WARNING: shift/reduce conflict for class in state 392 resolved as shift
WARNING: shift/reduce conflict for final in state 392 resolved as shift
WARNING: shift/reduce conflict for new in state 392 resolved as shift
WARNING: shift/reduce conflict for interface in state 392 resolved as shift
WARNING: shift/reduce conflict for trait in state 392 resolved as shift
WARNING: shift/reduce conflict for use in state 392 resolved as shift
WARNING: shift/reduce conflict for continue in state 392 resolved as shift
WARNING: shift/reduce conflict for goto in state 392 resolved as shift
WARNING: shift/reduce conflict for declare in state 392 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 392 resolved as shift
WARNING: shift/reduce conflict for for in state 392 resolved as shift
WARNING: shift/reduce conflict for foreach in state 392 resolved as shift
WARNING: shift/reduce conflict for switch in state 392 resolved as shift
WARNING: shift/reduce conflict for try in state 392 resolved as shift
WARNING: shift/reduce conflict for throw in state 392 resolved as shift
WARNING: shift/reduce conflict for exit in state 392 resolved as shift
WARNING: shift/reduce conflict for array in state 392 resolved as shift
WARNING: shift/reduce conflict for pow in state 392 resolved as shift
WARNING: shift/reduce conflict for POW in state 392 resolved as shift
WARNING: shift/reduce conflict for abs in state 392 resolved as shift
WARNING: shift/reduce conflict for cos in state 392 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 392 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 392 resolved as shift
WARNING: shift/reduce conflict for die in state 392 resolved as shift
WARNING: shift/reduce conflict for exp in state 392 resolved as shift
WARNING: shift/reduce conflict for floor in state 392 resolved as shift
WARNING: shift/reduce conflict for isset in state 392 resolved as shift
WARNING: shift/reduce conflict for list in state 392 resolved as shift
WARNING: shift/reduce conflict for log in state 392 resolved as shift
WARNING: shift/reduce conflict for log10 in state 392 resolved as shift
WARNING: shift/reduce conflict for max in state 392 resolved as shift
WARNING: shift/reduce conflict for min in state 392 resolved as shift
WARNING: shift/reduce conflict for rand in state 392 resolved as shift
WARNING: shift/reduce conflict for round in state 392 resolved as shift
WARNING: shift/reduce conflict for sin in state 392 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 392 resolved as shift
WARNING: shift/reduce conflict for unset in state 392 resolved as shift
WARNING: shift/reduce conflict for eval in state 392 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 392 resolved as shift
WARNING: shift/reduce conflict for private in state 404 resolved as shift
WARNING: shift/reduce conflict for protected in state 404 resolved as shift
WARNING: shift/reduce conflict for public in state 404 resolved as shift
WARNING: shift/reduce conflict for var in state 404 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 404 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 404 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 404 resolved as shift
WARNING: shift/reduce conflict for empty in state 404 resolved as shift
WARNING: shift/reduce conflict for include in state 404 resolved as shift
WARNING: shift/reduce conflict for include_once in state 404 resolved as shift
WARNING: shift/reduce conflict for require in state 404 resolved as shift
WARNING: shift/reduce conflict for require_once in state 404 resolved as shift
WARNING: shift/reduce conflict for namespace in state 404 resolved as shift
WARNING: shift/reduce conflict for int in state 404 resolved as shift
WARNING: shift/reduce conflict for float in state 404 resolved as shift
WARNING: shift/reduce conflict for double in state 404 resolved as shift
WARNING: shift/reduce conflict for global in state 404 resolved as shift
WARNING: shift/reduce conflict for const in state 404 resolved as shift
WARNING: shift/reduce conflict for print in state 404 resolved as shift
WARNING: shift/reduce conflict for echo in state 404 resolved as shift
WARNING: shift/reduce conflict for while in state 404 resolved as shift
WARNING: shift/reduce conflict for do in state 404 resolved as shift
WARNING: shift/reduce conflict for if in state 404 resolved as shift
WARNING: shift/reduce conflict for function in state 404 resolved as shift
WARNING: shift/reduce conflict for ID in state 404 resolved as shift
WARNING: shift/reduce conflict for return in state 404 resolved as shift
WARNING: shift/reduce conflict for class in state 404 resolved as shift
WARNING: shift/reduce conflict for final in state 404 resolved as shift
WARNING: shift/reduce conflict for new in state 404 resolved as shift
WARNING: shift/reduce conflict for interface in state 404 resolved as shift
WARNING: shift/reduce conflict for trait in state 404 resolved as shift
WARNING: shift/reduce conflict for use in state 404 resolved as shift
WARNING: shift/reduce conflict for continue in state 404 resolved as shift
WARNING: shift/reduce conflict for goto in state 404 resolved as shift
WARNING: shift/reduce conflict for declare in state 404 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 404 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 404 resolved as shift
WARNING: shift/reduce conflict for for in state 404 resolved as shift
WARNING: shift/reduce conflict for foreach in state 404 resolved as shift
WARNING: shift/reduce conflict for switch in state 404 resolved as shift
WARNING: shift/reduce conflict for try in state 404 resolved as shift
WARNING: shift/reduce conflict for throw in state 404 resolved as shift
WARNING: shift/reduce conflict for exit in state 404 resolved as shift
WARNING: shift/reduce conflict for array in state 404 resolved as shift
WARNING: shift/reduce conflict for pow in state 404 resolved as shift
WARNING: shift/reduce conflict for POW in state 404 resolved as shift
WARNING: shift/reduce conflict for abs in state 404 resolved as shift
WARNING: shift/reduce conflict for cos in state 404 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 404 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 404 resolved as shift
WARNING: shift/reduce conflict for die in state 404 resolved as shift
WARNING: shift/reduce conflict for exp in state 404 resolved as shift
WARNING: shift/reduce conflict for floor in state 404 resolved as shift
WARNING: shift/reduce conflict for isset in state 404 resolved as shift
WARNING: shift/reduce conflict for list in state 404 resolved as shift
WARNING: shift/reduce conflict for log in state 404 resolved as shift
WARNING: shift/reduce conflict for log10 in state 404 resolved as shift
WARNING: shift/reduce conflict for max in state 404 resolved as shift
WARNING: shift/reduce conflict for min in state 404 resolved as shift
WARNING: shift/reduce conflict for rand in state 404 resolved as shift
WARNING: shift/reduce conflict for round in state 404 resolved as shift
WARNING: shift/reduce conflict for sin in state 404 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 404 resolved as shift
WARNING: shift/reduce conflict for unset in state 404 resolved as shift
WARNING: shift/reduce conflict for eval in state 404 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 404 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 474 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 474 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 474 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 474 resolved as shift
WARNING: shift/reduce conflict for empty in state 474 resolved as shift
WARNING: shift/reduce conflict for include in state 474 resolved as shift
WARNING: shift/reduce conflict for include_once in state 474 resolved as shift
WARNING: shift/reduce conflict for require in state 474 resolved as shift
WARNING: shift/reduce conflict for require_once in state 474 resolved as shift
WARNING: shift/reduce conflict for namespace in state 474 resolved as shift
WARNING: shift/reduce conflict for int in state 474 resolved as shift
WARNING: shift/reduce conflict for float in state 474 resolved as shift
WARNING: shift/reduce conflict for double in state 474 resolved as shift
WARNING: shift/reduce conflict for global in state 474 resolved as shift
WARNING: shift/reduce conflict for const in state 474 resolved as shift
WARNING: shift/reduce conflict for print in state 474 resolved as shift
WARNING: shift/reduce conflict for echo in state 474 resolved as shift
WARNING: shift/reduce conflict for while in state 474 resolved as shift
WARNING: shift/reduce conflict for do in state 474 resolved as shift
WARNING: shift/reduce conflict for if in state 474 resolved as shift
WARNING: shift/reduce conflict for function in state 474 resolved as shift
WARNING: shift/reduce conflict for ID in state 474 resolved as shift
WARNING: shift/reduce conflict for return in state 474 resolved as shift
WARNING: shift/reduce conflict for class in state 474 resolved as shift
WARNING: shift/reduce conflict for final in state 474 resolved as shift
WARNING: shift/reduce conflict for new in state 474 resolved as shift
WARNING: shift/reduce conflict for interface in state 474 resolved as shift
WARNING: shift/reduce conflict for trait in state 474 resolved as shift
WARNING: shift/reduce conflict for use in state 474 resolved as shift
WARNING: shift/reduce conflict for continue in state 474 resolved as shift
WARNING: shift/reduce conflict for goto in state 474 resolved as shift
WARNING: shift/reduce conflict for declare in state 474 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 474 resolved as shift
WARNING: shift/reduce conflict for for in state 474 resolved as shift
WARNING: shift/reduce conflict for foreach in state 474 resolved as shift
WARNING: shift/reduce conflict for switch in state 474 resolved as shift
WARNING: shift/reduce conflict for try in state 474 resolved as shift
WARNING: shift/reduce conflict for throw in state 474 resolved as shift
WARNING: shift/reduce conflict for exit in state 474 resolved as shift
WARNING: shift/reduce conflict for private in state 474 resolved as shift
WARNING: shift/reduce conflict for protected in state 474 resolved as shift
WARNING: shift/reduce conflict for public in state 474 resolved as shift
WARNING: shift/reduce conflict for var in state 474 resolved as shift
WARNING: shift/reduce conflict for array in state 474 resolved as shift
WARNING: shift/reduce conflict for pow in state 474 resolved as shift
WARNING: shift/reduce conflict for POW in state 474 resolved as shift
WARNING: shift/reduce conflict for abs in state 474 resolved as shift
WARNING: shift/reduce conflict for cos in state 474 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 474 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 474 resolved as shift
WARNING: shift/reduce conflict for die in state 474 resolved as shift
WARNING: shift/reduce conflict for exp in state 474 resolved as shift
WARNING: shift/reduce conflict for floor in state 474 resolved as shift
WARNING: shift/reduce conflict for isset in state 474 resolved as shift
WARNING: shift/reduce conflict for list in state 474 resolved as shift
WARNING: shift/reduce conflict for log in state 474 resolved as shift
WARNING: shift/reduce conflict for log10 in state 474 resolved as shift
WARNING: shift/reduce conflict for max in state 474 resolved as shift
WARNING: shift/reduce conflict for min in state 474 resolved as shift
WARNING: shift/reduce conflict for rand in state 474 resolved as shift
WARNING: shift/reduce conflict for round in state 474 resolved as shift
WARNING: shift/reduce conflict for sin in state 474 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 474 resolved as shift
WARNING: shift/reduce conflict for unset in state 474 resolved as shift
WARNING: shift/reduce conflict for eval in state 474 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 474 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 475 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 475 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 475 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 475 resolved as shift
WARNING: shift/reduce conflict for empty in state 475 resolved as shift
WARNING: shift/reduce conflict for include in state 475 resolved as shift
WARNING: shift/reduce conflict for include_once in state 475 resolved as shift
WARNING: shift/reduce conflict for require in state 475 resolved as shift
WARNING: shift/reduce conflict for require_once in state 475 resolved as shift
WARNING: shift/reduce conflict for namespace in state 475 resolved as shift
WARNING: shift/reduce conflict for int in state 475 resolved as shift
WARNING: shift/reduce conflict for float in state 475 resolved as shift
WARNING: shift/reduce conflict for double in state 475 resolved as shift
WARNING: shift/reduce conflict for global in state 475 resolved as shift
WARNING: shift/reduce conflict for const in state 475 resolved as shift
WARNING: shift/reduce conflict for print in state 475 resolved as shift
WARNING: shift/reduce conflict for echo in state 475 resolved as shift
WARNING: shift/reduce conflict for while in state 475 resolved as shift
WARNING: shift/reduce conflict for do in state 475 resolved as shift
WARNING: shift/reduce conflict for if in state 475 resolved as shift
WARNING: shift/reduce conflict for function in state 475 resolved as shift
WARNING: shift/reduce conflict for ID in state 475 resolved as shift
WARNING: shift/reduce conflict for return in state 475 resolved as shift
WARNING: shift/reduce conflict for class in state 475 resolved as shift
WARNING: shift/reduce conflict for final in state 475 resolved as shift
WARNING: shift/reduce conflict for new in state 475 resolved as shift
WARNING: shift/reduce conflict for interface in state 475 resolved as shift
WARNING: shift/reduce conflict for trait in state 475 resolved as shift
WARNING: shift/reduce conflict for use in state 475 resolved as shift
WARNING: shift/reduce conflict for continue in state 475 resolved as shift
WARNING: shift/reduce conflict for goto in state 475 resolved as shift
WARNING: shift/reduce conflict for declare in state 475 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 475 resolved as shift
WARNING: shift/reduce conflict for for in state 475 resolved as shift
WARNING: shift/reduce conflict for foreach in state 475 resolved as shift
WARNING: shift/reduce conflict for switch in state 475 resolved as shift
WARNING: shift/reduce conflict for try in state 475 resolved as shift
WARNING: shift/reduce conflict for throw in state 475 resolved as shift
WARNING: shift/reduce conflict for exit in state 475 resolved as shift
WARNING: shift/reduce conflict for private in state 475 resolved as shift
WARNING: shift/reduce conflict for protected in state 475 resolved as shift
WARNING: shift/reduce conflict for public in state 475 resolved as shift
WARNING: shift/reduce conflict for var in state 475 resolved as shift
WARNING: shift/reduce conflict for array in state 475 resolved as shift
WARNING: shift/reduce conflict for pow in state 475 resolved as shift
WARNING: shift/reduce conflict for POW in state 475 resolved as shift
WARNING: shift/reduce conflict for abs in state 475 resolved as shift
WARNING: shift/reduce conflict for cos in state 475 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 475 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 475 resolved as shift
WARNING: shift/reduce conflict for die in state 475 resolved as shift
WARNING: shift/reduce conflict for exp in state 475 resolved as shift
WARNING: shift/reduce conflict for floor in state 475 resolved as shift
WARNING: shift/reduce conflict for isset in state 475 resolved as shift
WARNING: shift/reduce conflict for list in state 475 resolved as shift
WARNING: shift/reduce conflict for log in state 475 resolved as shift
WARNING: shift/reduce conflict for log10 in state 475 resolved as shift
WARNING: shift/reduce conflict for max in state 475 resolved as shift
WARNING: shift/reduce conflict for min in state 475 resolved as shift
WARNING: shift/reduce conflict for rand in state 475 resolved as shift
WARNING: shift/reduce conflict for round in state 475 resolved as shift
WARNING: shift/reduce conflict for sin in state 475 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 475 resolved as shift
WARNING: shift/reduce conflict for unset in state 475 resolved as shift
WARNING: shift/reduce conflict for eval in state 475 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 475 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 478 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 478 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 478 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 478 resolved as shift
WARNING: shift/reduce conflict for empty in state 478 resolved as shift
WARNING: shift/reduce conflict for include in state 478 resolved as shift
WARNING: shift/reduce conflict for include_once in state 478 resolved as shift
WARNING: shift/reduce conflict for require in state 478 resolved as shift
WARNING: shift/reduce conflict for require_once in state 478 resolved as shift
WARNING: shift/reduce conflict for namespace in state 478 resolved as shift
WARNING: shift/reduce conflict for int in state 478 resolved as shift
WARNING: shift/reduce conflict for float in state 478 resolved as shift
WARNING: shift/reduce conflict for double in state 478 resolved as shift
WARNING: shift/reduce conflict for global in state 478 resolved as shift
WARNING: shift/reduce conflict for const in state 478 resolved as shift
WARNING: shift/reduce conflict for print in state 478 resolved as shift
WARNING: shift/reduce conflict for echo in state 478 resolved as shift
WARNING: shift/reduce conflict for while in state 478 resolved as shift
WARNING: shift/reduce conflict for do in state 478 resolved as shift
WARNING: shift/reduce conflict for if in state 478 resolved as shift
WARNING: shift/reduce conflict for function in state 478 resolved as shift
WARNING: shift/reduce conflict for ID in state 478 resolved as shift
WARNING: shift/reduce conflict for return in state 478 resolved as shift
WARNING: shift/reduce conflict for class in state 478 resolved as shift
WARNING: shift/reduce conflict for final in state 478 resolved as shift
WARNING: shift/reduce conflict for new in state 478 resolved as shift
WARNING: shift/reduce conflict for interface in state 478 resolved as shift
WARNING: shift/reduce conflict for trait in state 478 resolved as shift
WARNING: shift/reduce conflict for use in state 478 resolved as shift
WARNING: shift/reduce conflict for continue in state 478 resolved as shift
WARNING: shift/reduce conflict for goto in state 478 resolved as shift
WARNING: shift/reduce conflict for declare in state 478 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 478 resolved as shift
WARNING: shift/reduce conflict for for in state 478 resolved as shift
WARNING: shift/reduce conflict for foreach in state 478 resolved as shift
WARNING: shift/reduce conflict for switch in state 478 resolved as shift
WARNING: shift/reduce conflict for try in state 478 resolved as shift
WARNING: shift/reduce conflict for throw in state 478 resolved as shift
WARNING: shift/reduce conflict for exit in state 478 resolved as shift
WARNING: shift/reduce conflict for private in state 478 resolved as shift
WARNING: shift/reduce conflict for protected in state 478 resolved as shift
WARNING: shift/reduce conflict for public in state 478 resolved as shift
WARNING: shift/reduce conflict for var in state 478 resolved as shift
WARNING: shift/reduce conflict for array in state 478 resolved as shift
WARNING: shift/reduce conflict for pow in state 478 resolved as shift
WARNING: shift/reduce conflict for POW in state 478 resolved as shift
WARNING: shift/reduce conflict for abs in state 478 resolved as shift
WARNING: shift/reduce conflict for cos in state 478 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 478 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 478 resolved as shift
WARNING: shift/reduce conflict for die in state 478 resolved as shift
WARNING: shift/reduce conflict for exp in state 478 resolved as shift
WARNING: shift/reduce conflict for floor in state 478 resolved as shift
WARNING: shift/reduce conflict for isset in state 478 resolved as shift
WARNING: shift/reduce conflict for list in state 478 resolved as shift
WARNING: shift/reduce conflict for log in state 478 resolved as shift
WARNING: shift/reduce conflict for log10 in state 478 resolved as shift
WARNING: shift/reduce conflict for max in state 478 resolved as shift
WARNING: shift/reduce conflict for min in state 478 resolved as shift
WARNING: shift/reduce conflict for rand in state 478 resolved as shift
WARNING: shift/reduce conflict for round in state 478 resolved as shift
WARNING: shift/reduce conflict for sin in state 478 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 478 resolved as shift
WARNING: shift/reduce conflict for unset in state 478 resolved as shift
WARNING: shift/reduce conflict for eval in state 478 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 478 resolved as shift
WARNING: shift/reduce conflict for private in state 486 resolved as shift
WARNING: shift/reduce conflict for protected in state 486 resolved as shift
WARNING: shift/reduce conflict for public in state 486 resolved as shift
WARNING: shift/reduce conflict for var in state 486 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 486 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 486 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 486 resolved as shift
WARNING: shift/reduce conflict for empty in state 486 resolved as shift
WARNING: shift/reduce conflict for include in state 486 resolved as shift
WARNING: shift/reduce conflict for include_once in state 486 resolved as shift
WARNING: shift/reduce conflict for require in state 486 resolved as shift
WARNING: shift/reduce conflict for require_once in state 486 resolved as shift
WARNING: shift/reduce conflict for namespace in state 486 resolved as shift
WARNING: shift/reduce conflict for int in state 486 resolved as shift
WARNING: shift/reduce conflict for float in state 486 resolved as shift
WARNING: shift/reduce conflict for double in state 486 resolved as shift
WARNING: shift/reduce conflict for global in state 486 resolved as shift
WARNING: shift/reduce conflict for const in state 486 resolved as shift
WARNING: shift/reduce conflict for print in state 486 resolved as shift
WARNING: shift/reduce conflict for echo in state 486 resolved as shift
WARNING: shift/reduce conflict for while in state 486 resolved as shift
WARNING: shift/reduce conflict for do in state 486 resolved as shift
WARNING: shift/reduce conflict for if in state 486 resolved as shift
WARNING: shift/reduce conflict for function in state 486 resolved as shift
WARNING: shift/reduce conflict for ID in state 486 resolved as shift
WARNING: shift/reduce conflict for return in state 486 resolved as shift
WARNING: shift/reduce conflict for class in state 486 resolved as shift
WARNING: shift/reduce conflict for final in state 486 resolved as shift
WARNING: shift/reduce conflict for new in state 486 resolved as shift
WARNING: shift/reduce conflict for interface in state 486 resolved as shift
WARNING: shift/reduce conflict for trait in state 486 resolved as shift
WARNING: shift/reduce conflict for use in state 486 resolved as shift
WARNING: shift/reduce conflict for continue in state 486 resolved as shift
WARNING: shift/reduce conflict for goto in state 486 resolved as shift
WARNING: shift/reduce conflict for declare in state 486 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 486 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 486 resolved as shift
WARNING: shift/reduce conflict for for in state 486 resolved as shift
WARNING: shift/reduce conflict for foreach in state 486 resolved as shift
WARNING: shift/reduce conflict for switch in state 486 resolved as shift
WARNING: shift/reduce conflict for try in state 486 resolved as shift
WARNING: shift/reduce conflict for throw in state 486 resolved as shift
WARNING: shift/reduce conflict for exit in state 486 resolved as shift
WARNING: shift/reduce conflict for array in state 486 resolved as shift
WARNING: shift/reduce conflict for pow in state 486 resolved as shift
WARNING: shift/reduce conflict for POW in state 486 resolved as shift
WARNING: shift/reduce conflict for abs in state 486 resolved as shift
WARNING: shift/reduce conflict for cos in state 486 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 486 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 486 resolved as shift
WARNING: shift/reduce conflict for die in state 486 resolved as shift
WARNING: shift/reduce conflict for exp in state 486 resolved as shift
WARNING: shift/reduce conflict for floor in state 486 resolved as shift
WARNING: shift/reduce conflict for isset in state 486 resolved as shift
WARNING: shift/reduce conflict for list in state 486 resolved as shift
WARNING: shift/reduce conflict for log in state 486 resolved as shift
WARNING: shift/reduce conflict for log10 in state 486 resolved as shift
WARNING: shift/reduce conflict for max in state 486 resolved as shift
WARNING: shift/reduce conflict for min in state 486 resolved as shift
WARNING: shift/reduce conflict for rand in state 486 resolved as shift
WARNING: shift/reduce conflict for round in state 486 resolved as shift
WARNING: shift/reduce conflict for sin in state 486 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 486 resolved as shift
WARNING: shift/reduce conflict for unset in state 486 resolved as shift
WARNING: shift/reduce conflict for eval in state 486 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 486 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 493 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 493 resolved as shift
WARNING: shift/reduce conflict for private in state 493 resolved as shift
WARNING: shift/reduce conflict for protected in state 493 resolved as shift
WARNING: shift/reduce conflict for public in state 493 resolved as shift
WARNING: shift/reduce conflict for var in state 493 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 493 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 493 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 493 resolved as shift
WARNING: shift/reduce conflict for empty in state 493 resolved as shift
WARNING: shift/reduce conflict for include in state 493 resolved as shift
WARNING: shift/reduce conflict for include_once in state 493 resolved as shift
WARNING: shift/reduce conflict for require in state 493 resolved as shift
WARNING: shift/reduce conflict for require_once in state 493 resolved as shift
WARNING: shift/reduce conflict for namespace in state 493 resolved as shift
WARNING: shift/reduce conflict for int in state 493 resolved as shift
WARNING: shift/reduce conflict for float in state 493 resolved as shift
WARNING: shift/reduce conflict for double in state 493 resolved as shift
WARNING: shift/reduce conflict for global in state 493 resolved as shift
WARNING: shift/reduce conflict for const in state 493 resolved as shift
WARNING: shift/reduce conflict for print in state 493 resolved as shift
WARNING: shift/reduce conflict for echo in state 493 resolved as shift
WARNING: shift/reduce conflict for while in state 493 resolved as shift
WARNING: shift/reduce conflict for do in state 493 resolved as shift
WARNING: shift/reduce conflict for if in state 493 resolved as shift
WARNING: shift/reduce conflict for function in state 493 resolved as shift
WARNING: shift/reduce conflict for ID in state 493 resolved as shift
WARNING: shift/reduce conflict for return in state 493 resolved as shift
WARNING: shift/reduce conflict for class in state 493 resolved as shift
WARNING: shift/reduce conflict for final in state 493 resolved as shift
WARNING: shift/reduce conflict for new in state 493 resolved as shift
WARNING: shift/reduce conflict for interface in state 493 resolved as shift
WARNING: shift/reduce conflict for trait in state 493 resolved as shift
WARNING: shift/reduce conflict for use in state 493 resolved as shift
WARNING: shift/reduce conflict for continue in state 493 resolved as shift
WARNING: shift/reduce conflict for goto in state 493 resolved as shift
WARNING: shift/reduce conflict for declare in state 493 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 493 resolved as shift
WARNING: shift/reduce conflict for for in state 493 resolved as shift
WARNING: shift/reduce conflict for foreach in state 493 resolved as shift
WARNING: shift/reduce conflict for switch in state 493 resolved as shift
WARNING: shift/reduce conflict for try in state 493 resolved as shift
WARNING: shift/reduce conflict for throw in state 493 resolved as shift
WARNING: shift/reduce conflict for exit in state 493 resolved as shift
WARNING: shift/reduce conflict for array in state 493 resolved as shift
WARNING: shift/reduce conflict for pow in state 493 resolved as shift
WARNING: shift/reduce conflict for POW in state 493 resolved as shift
WARNING: shift/reduce conflict for abs in state 493 resolved as shift
WARNING: shift/reduce conflict for cos in state 493 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 493 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 493 resolved as shift
WARNING: shift/reduce conflict for die in state 493 resolved as shift
WARNING: shift/reduce conflict for exp in state 493 resolved as shift
WARNING: shift/reduce conflict for floor in state 493 resolved as shift
WARNING: shift/reduce conflict for isset in state 493 resolved as shift
WARNING: shift/reduce conflict for list in state 493 resolved as shift
WARNING: shift/reduce conflict for log in state 493 resolved as shift
WARNING: shift/reduce conflict for log10 in state 493 resolved as shift
WARNING: shift/reduce conflict for max in state 493 resolved as shift
WARNING: shift/reduce conflict for min in state 493 resolved as shift
WARNING: shift/reduce conflict for rand in state 493 resolved as shift
WARNING: shift/reduce conflict for round in state 493 resolved as shift
WARNING: shift/reduce conflict for sin in state 493 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 493 resolved as shift
WARNING: shift/reduce conflict for unset in state 493 resolved as shift
WARNING: shift/reduce conflict for eval in state 493 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 493 resolved as shift
WARNING: shift/reduce conflict for case in state 511 resolved as shift
WARNING: shift/reduce conflict for case in state 512 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 528 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 528 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 528 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 528 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 528 resolved as shift
WARNING: shift/reduce conflict for empty in state 528 resolved as shift
WARNING: shift/reduce conflict for include in state 528 resolved as shift
WARNING: shift/reduce conflict for include_once in state 528 resolved as shift
WARNING: shift/reduce conflict for require in state 528 resolved as shift
WARNING: shift/reduce conflict for require_once in state 528 resolved as shift
WARNING: shift/reduce conflict for namespace in state 528 resolved as shift
WARNING: shift/reduce conflict for int in state 528 resolved as shift
WARNING: shift/reduce conflict for float in state 528 resolved as shift
WARNING: shift/reduce conflict for double in state 528 resolved as shift
WARNING: shift/reduce conflict for global in state 528 resolved as shift
WARNING: shift/reduce conflict for const in state 528 resolved as shift
WARNING: shift/reduce conflict for print in state 528 resolved as shift
WARNING: shift/reduce conflict for echo in state 528 resolved as shift
WARNING: shift/reduce conflict for while in state 528 resolved as shift
WARNING: shift/reduce conflict for do in state 528 resolved as shift
WARNING: shift/reduce conflict for if in state 528 resolved as shift
WARNING: shift/reduce conflict for function in state 528 resolved as shift
WARNING: shift/reduce conflict for ID in state 528 resolved as shift
WARNING: shift/reduce conflict for return in state 528 resolved as shift
WARNING: shift/reduce conflict for class in state 528 resolved as shift
WARNING: shift/reduce conflict for final in state 528 resolved as shift
WARNING: shift/reduce conflict for new in state 528 resolved as shift
WARNING: shift/reduce conflict for interface in state 528 resolved as shift
WARNING: shift/reduce conflict for trait in state 528 resolved as shift
WARNING: shift/reduce conflict for use in state 528 resolved as shift
WARNING: shift/reduce conflict for continue in state 528 resolved as shift
WARNING: shift/reduce conflict for goto in state 528 resolved as shift
WARNING: shift/reduce conflict for declare in state 528 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 528 resolved as shift
WARNING: shift/reduce conflict for for in state 528 resolved as shift
WARNING: shift/reduce conflict for foreach in state 528 resolved as shift
WARNING: shift/reduce conflict for switch in state 528 resolved as shift
WARNING: shift/reduce conflict for try in state 528 resolved as shift
WARNING: shift/reduce conflict for throw in state 528 resolved as shift
WARNING: shift/reduce conflict for exit in state 528 resolved as shift
WARNING: shift/reduce conflict for private in state 528 resolved as shift
WARNING: shift/reduce conflict for protected in state 528 resolved as shift
WARNING: shift/reduce conflict for public in state 528 resolved as shift
WARNING: shift/reduce conflict for var in state 528 resolved as shift
WARNING: shift/reduce conflict for array in state 528 resolved as shift
WARNING: shift/reduce conflict for pow in state 528 resolved as shift
WARNING: shift/reduce conflict for POW in state 528 resolved as shift
WARNING: shift/reduce conflict for abs in state 528 resolved as shift
WARNING: shift/reduce conflict for cos in state 528 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 528 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 528 resolved as shift
WARNING: shift/reduce conflict for die in state 528 resolved as shift
WARNING: shift/reduce conflict for exp in state 528 resolved as shift
WARNING: shift/reduce conflict for floor in state 528 resolved as shift
WARNING: shift/reduce conflict for isset in state 528 resolved as shift
WARNING: shift/reduce conflict for list in state 528 resolved as shift
WARNING: shift/reduce conflict for log in state 528 resolved as shift
WARNING: shift/reduce conflict for log10 in state 528 resolved as shift
WARNING: shift/reduce conflict for max in state 528 resolved as shift
WARNING: shift/reduce conflict for min in state 528 resolved as shift
WARNING: shift/reduce conflict for rand in state 528 resolved as shift
WARNING: shift/reduce conflict for round in state 528 resolved as shift
WARNING: shift/reduce conflict for sin in state 528 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 528 resolved as shift
WARNING: shift/reduce conflict for unset in state 528 resolved as shift
WARNING: shift/reduce conflict for eval in state 528 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 528 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 529 resolved as shift
WARNING: shift/reduce conflict for endwhile in state 529 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 529 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 529 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 529 resolved as shift
WARNING: shift/reduce conflict for empty in state 529 resolved as shift
WARNING: shift/reduce conflict for include in state 529 resolved as shift
WARNING: shift/reduce conflict for include_once in state 529 resolved as shift
WARNING: shift/reduce conflict for require in state 529 resolved as shift
WARNING: shift/reduce conflict for require_once in state 529 resolved as shift
WARNING: shift/reduce conflict for namespace in state 529 resolved as shift
WARNING: shift/reduce conflict for int in state 529 resolved as shift
WARNING: shift/reduce conflict for float in state 529 resolved as shift
WARNING: shift/reduce conflict for double in state 529 resolved as shift
WARNING: shift/reduce conflict for global in state 529 resolved as shift
WARNING: shift/reduce conflict for const in state 529 resolved as shift
WARNING: shift/reduce conflict for print in state 529 resolved as shift
WARNING: shift/reduce conflict for echo in state 529 resolved as shift
WARNING: shift/reduce conflict for while in state 529 resolved as shift
WARNING: shift/reduce conflict for do in state 529 resolved as shift
WARNING: shift/reduce conflict for if in state 529 resolved as shift
WARNING: shift/reduce conflict for function in state 529 resolved as shift
WARNING: shift/reduce conflict for ID in state 529 resolved as shift
WARNING: shift/reduce conflict for return in state 529 resolved as shift
WARNING: shift/reduce conflict for class in state 529 resolved as shift
WARNING: shift/reduce conflict for final in state 529 resolved as shift
WARNING: shift/reduce conflict for new in state 529 resolved as shift
WARNING: shift/reduce conflict for interface in state 529 resolved as shift
WARNING: shift/reduce conflict for trait in state 529 resolved as shift
WARNING: shift/reduce conflict for use in state 529 resolved as shift
WARNING: shift/reduce conflict for continue in state 529 resolved as shift
WARNING: shift/reduce conflict for goto in state 529 resolved as shift
WARNING: shift/reduce conflict for declare in state 529 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 529 resolved as shift
WARNING: shift/reduce conflict for for in state 529 resolved as shift
WARNING: shift/reduce conflict for foreach in state 529 resolved as shift
WARNING: shift/reduce conflict for switch in state 529 resolved as shift
WARNING: shift/reduce conflict for try in state 529 resolved as shift
WARNING: shift/reduce conflict for throw in state 529 resolved as shift
WARNING: shift/reduce conflict for exit in state 529 resolved as shift
WARNING: shift/reduce conflict for private in state 529 resolved as shift
WARNING: shift/reduce conflict for protected in state 529 resolved as shift
WARNING: shift/reduce conflict for public in state 529 resolved as shift
WARNING: shift/reduce conflict for var in state 529 resolved as shift
WARNING: shift/reduce conflict for array in state 529 resolved as shift
WARNING: shift/reduce conflict for pow in state 529 resolved as shift
WARNING: shift/reduce conflict for POW in state 529 resolved as shift
WARNING: shift/reduce conflict for abs in state 529 resolved as shift
WARNING: shift/reduce conflict for cos in state 529 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 529 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 529 resolved as shift
WARNING: shift/reduce conflict for die in state 529 resolved as shift
WARNING: shift/reduce conflict for exp in state 529 resolved as shift
WARNING: shift/reduce conflict for floor in state 529 resolved as shift
WARNING: shift/reduce conflict for isset in state 529 resolved as shift
WARNING: shift/reduce conflict for list in state 529 resolved as shift
WARNING: shift/reduce conflict for log in state 529 resolved as shift
WARNING: shift/reduce conflict for log10 in state 529 resolved as shift
WARNING: shift/reduce conflict for max in state 529 resolved as shift
WARNING: shift/reduce conflict for min in state 529 resolved as shift
WARNING: shift/reduce conflict for rand in state 529 resolved as shift
WARNING: shift/reduce conflict for round in state 529 resolved as shift
WARNING: shift/reduce conflict for sin in state 529 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 529 resolved as shift
WARNING: shift/reduce conflict for unset in state 529 resolved as shift
WARNING: shift/reduce conflict for eval in state 529 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 529 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 531 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 531 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 531 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 531 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 531 resolved as shift
WARNING: shift/reduce conflict for empty in state 531 resolved as shift
WARNING: shift/reduce conflict for include in state 531 resolved as shift
WARNING: shift/reduce conflict for include_once in state 531 resolved as shift
WARNING: shift/reduce conflict for require in state 531 resolved as shift
WARNING: shift/reduce conflict for require_once in state 531 resolved as shift
WARNING: shift/reduce conflict for namespace in state 531 resolved as shift
WARNING: shift/reduce conflict for int in state 531 resolved as shift
WARNING: shift/reduce conflict for float in state 531 resolved as shift
WARNING: shift/reduce conflict for double in state 531 resolved as shift
WARNING: shift/reduce conflict for global in state 531 resolved as shift
WARNING: shift/reduce conflict for const in state 531 resolved as shift
WARNING: shift/reduce conflict for print in state 531 resolved as shift
WARNING: shift/reduce conflict for echo in state 531 resolved as shift
WARNING: shift/reduce conflict for while in state 531 resolved as shift
WARNING: shift/reduce conflict for do in state 531 resolved as shift
WARNING: shift/reduce conflict for if in state 531 resolved as shift
WARNING: shift/reduce conflict for function in state 531 resolved as shift
WARNING: shift/reduce conflict for ID in state 531 resolved as shift
WARNING: shift/reduce conflict for return in state 531 resolved as shift
WARNING: shift/reduce conflict for class in state 531 resolved as shift
WARNING: shift/reduce conflict for final in state 531 resolved as shift
WARNING: shift/reduce conflict for new in state 531 resolved as shift
WARNING: shift/reduce conflict for interface in state 531 resolved as shift
WARNING: shift/reduce conflict for trait in state 531 resolved as shift
WARNING: shift/reduce conflict for use in state 531 resolved as shift
WARNING: shift/reduce conflict for continue in state 531 resolved as shift
WARNING: shift/reduce conflict for goto in state 531 resolved as shift
WARNING: shift/reduce conflict for declare in state 531 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 531 resolved as shift
WARNING: shift/reduce conflict for for in state 531 resolved as shift
WARNING: shift/reduce conflict for foreach in state 531 resolved as shift
WARNING: shift/reduce conflict for switch in state 531 resolved as shift
WARNING: shift/reduce conflict for try in state 531 resolved as shift
WARNING: shift/reduce conflict for throw in state 531 resolved as shift
WARNING: shift/reduce conflict for exit in state 531 resolved as shift
WARNING: shift/reduce conflict for private in state 531 resolved as shift
WARNING: shift/reduce conflict for protected in state 531 resolved as shift
WARNING: shift/reduce conflict for public in state 531 resolved as shift
WARNING: shift/reduce conflict for var in state 531 resolved as shift
WARNING: shift/reduce conflict for array in state 531 resolved as shift
WARNING: shift/reduce conflict for pow in state 531 resolved as shift
WARNING: shift/reduce conflict for POW in state 531 resolved as shift
WARNING: shift/reduce conflict for abs in state 531 resolved as shift
WARNING: shift/reduce conflict for cos in state 531 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 531 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 531 resolved as shift
WARNING: shift/reduce conflict for die in state 531 resolved as shift
WARNING: shift/reduce conflict for exp in state 531 resolved as shift
WARNING: shift/reduce conflict for floor in state 531 resolved as shift
WARNING: shift/reduce conflict for isset in state 531 resolved as shift
WARNING: shift/reduce conflict for list in state 531 resolved as shift
WARNING: shift/reduce conflict for log in state 531 resolved as shift
WARNING: shift/reduce conflict for log10 in state 531 resolved as shift
WARNING: shift/reduce conflict for max in state 531 resolved as shift
WARNING: shift/reduce conflict for min in state 531 resolved as shift
WARNING: shift/reduce conflict for rand in state 531 resolved as shift
WARNING: shift/reduce conflict for round in state 531 resolved as shift
WARNING: shift/reduce conflict for sin in state 531 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 531 resolved as shift
WARNING: shift/reduce conflict for unset in state 531 resolved as shift
WARNING: shift/reduce conflict for eval in state 531 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 531 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 532 resolved as shift
WARNING: shift/reduce conflict for return in state 532 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 532 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 532 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 532 resolved as shift
WARNING: shift/reduce conflict for empty in state 532 resolved as shift
WARNING: shift/reduce conflict for include in state 532 resolved as shift
WARNING: shift/reduce conflict for include_once in state 532 resolved as shift
WARNING: shift/reduce conflict for require in state 532 resolved as shift
WARNING: shift/reduce conflict for require_once in state 532 resolved as shift
WARNING: shift/reduce conflict for namespace in state 532 resolved as shift
WARNING: shift/reduce conflict for int in state 532 resolved as shift
WARNING: shift/reduce conflict for float in state 532 resolved as shift
WARNING: shift/reduce conflict for double in state 532 resolved as shift
WARNING: shift/reduce conflict for global in state 532 resolved as shift
WARNING: shift/reduce conflict for const in state 532 resolved as shift
WARNING: shift/reduce conflict for print in state 532 resolved as shift
WARNING: shift/reduce conflict for echo in state 532 resolved as shift
WARNING: shift/reduce conflict for while in state 532 resolved as shift
WARNING: shift/reduce conflict for do in state 532 resolved as shift
WARNING: shift/reduce conflict for if in state 532 resolved as shift
WARNING: shift/reduce conflict for function in state 532 resolved as shift
WARNING: shift/reduce conflict for ID in state 532 resolved as shift
WARNING: shift/reduce conflict for class in state 532 resolved as shift
WARNING: shift/reduce conflict for final in state 532 resolved as shift
WARNING: shift/reduce conflict for new in state 532 resolved as shift
WARNING: shift/reduce conflict for interface in state 532 resolved as shift
WARNING: shift/reduce conflict for trait in state 532 resolved as shift
WARNING: shift/reduce conflict for use in state 532 resolved as shift
WARNING: shift/reduce conflict for continue in state 532 resolved as shift
WARNING: shift/reduce conflict for goto in state 532 resolved as shift
WARNING: shift/reduce conflict for declare in state 532 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 532 resolved as shift
WARNING: shift/reduce conflict for for in state 532 resolved as shift
WARNING: shift/reduce conflict for foreach in state 532 resolved as shift
WARNING: shift/reduce conflict for switch in state 532 resolved as shift
WARNING: shift/reduce conflict for try in state 532 resolved as shift
WARNING: shift/reduce conflict for throw in state 532 resolved as shift
WARNING: shift/reduce conflict for exit in state 532 resolved as shift
WARNING: shift/reduce conflict for private in state 532 resolved as shift
WARNING: shift/reduce conflict for protected in state 532 resolved as shift
WARNING: shift/reduce conflict for public in state 532 resolved as shift
WARNING: shift/reduce conflict for var in state 532 resolved as shift
WARNING: shift/reduce conflict for array in state 532 resolved as shift
WARNING: shift/reduce conflict for pow in state 532 resolved as shift
WARNING: shift/reduce conflict for POW in state 532 resolved as shift
WARNING: shift/reduce conflict for abs in state 532 resolved as shift
WARNING: shift/reduce conflict for cos in state 532 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 532 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 532 resolved as shift
WARNING: shift/reduce conflict for die in state 532 resolved as shift
WARNING: shift/reduce conflict for exp in state 532 resolved as shift
WARNING: shift/reduce conflict for floor in state 532 resolved as shift
WARNING: shift/reduce conflict for isset in state 532 resolved as shift
WARNING: shift/reduce conflict for list in state 532 resolved as shift
WARNING: shift/reduce conflict for log in state 532 resolved as shift
WARNING: shift/reduce conflict for log10 in state 532 resolved as shift
WARNING: shift/reduce conflict for max in state 532 resolved as shift
WARNING: shift/reduce conflict for min in state 532 resolved as shift
WARNING: shift/reduce conflict for rand in state 532 resolved as shift
WARNING: shift/reduce conflict for round in state 532 resolved as shift
WARNING: shift/reduce conflict for sin in state 532 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 532 resolved as shift
WARNING: shift/reduce conflict for unset in state 532 resolved as shift
WARNING: shift/reduce conflict for eval in state 532 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 532 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 536 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 536 resolved as shift
WARNING: shift/reduce conflict for private in state 536 resolved as shift
WARNING: shift/reduce conflict for protected in state 536 resolved as shift
WARNING: shift/reduce conflict for public in state 536 resolved as shift
WARNING: shift/reduce conflict for var in state 536 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 536 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 536 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 536 resolved as shift
WARNING: shift/reduce conflict for empty in state 536 resolved as shift
WARNING: shift/reduce conflict for include in state 536 resolved as shift
WARNING: shift/reduce conflict for include_once in state 536 resolved as shift
WARNING: shift/reduce conflict for require in state 536 resolved as shift
WARNING: shift/reduce conflict for require_once in state 536 resolved as shift
WARNING: shift/reduce conflict for namespace in state 536 resolved as shift
WARNING: shift/reduce conflict for int in state 536 resolved as shift
WARNING: shift/reduce conflict for float in state 536 resolved as shift
WARNING: shift/reduce conflict for double in state 536 resolved as shift
WARNING: shift/reduce conflict for global in state 536 resolved as shift
WARNING: shift/reduce conflict for const in state 536 resolved as shift
WARNING: shift/reduce conflict for print in state 536 resolved as shift
WARNING: shift/reduce conflict for echo in state 536 resolved as shift
WARNING: shift/reduce conflict for while in state 536 resolved as shift
WARNING: shift/reduce conflict for do in state 536 resolved as shift
WARNING: shift/reduce conflict for if in state 536 resolved as shift
WARNING: shift/reduce conflict for function in state 536 resolved as shift
WARNING: shift/reduce conflict for ID in state 536 resolved as shift
WARNING: shift/reduce conflict for return in state 536 resolved as shift
WARNING: shift/reduce conflict for class in state 536 resolved as shift
WARNING: shift/reduce conflict for final in state 536 resolved as shift
WARNING: shift/reduce conflict for new in state 536 resolved as shift
WARNING: shift/reduce conflict for interface in state 536 resolved as shift
WARNING: shift/reduce conflict for trait in state 536 resolved as shift
WARNING: shift/reduce conflict for use in state 536 resolved as shift
WARNING: shift/reduce conflict for continue in state 536 resolved as shift
WARNING: shift/reduce conflict for goto in state 536 resolved as shift
WARNING: shift/reduce conflict for declare in state 536 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 536 resolved as shift
WARNING: shift/reduce conflict for for in state 536 resolved as shift
WARNING: shift/reduce conflict for foreach in state 536 resolved as shift
WARNING: shift/reduce conflict for switch in state 536 resolved as shift
WARNING: shift/reduce conflict for try in state 536 resolved as shift
WARNING: shift/reduce conflict for throw in state 536 resolved as shift
WARNING: shift/reduce conflict for exit in state 536 resolved as shift
WARNING: shift/reduce conflict for array in state 536 resolved as shift
WARNING: shift/reduce conflict for pow in state 536 resolved as shift
WARNING: shift/reduce conflict for POW in state 536 resolved as shift
WARNING: shift/reduce conflict for abs in state 536 resolved as shift
WARNING: shift/reduce conflict for cos in state 536 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 536 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 536 resolved as shift
WARNING: shift/reduce conflict for die in state 536 resolved as shift
WARNING: shift/reduce conflict for exp in state 536 resolved as shift
WARNING: shift/reduce conflict for floor in state 536 resolved as shift
WARNING: shift/reduce conflict for isset in state 536 resolved as shift
WARNING: shift/reduce conflict for list in state 536 resolved as shift
WARNING: shift/reduce conflict for log in state 536 resolved as shift
WARNING: shift/reduce conflict for log10 in state 536 resolved as shift
WARNING: shift/reduce conflict for max in state 536 resolved as shift
WARNING: shift/reduce conflict for min in state 536 resolved as shift
WARNING: shift/reduce conflict for rand in state 536 resolved as shift
WARNING: shift/reduce conflict for round in state 536 resolved as shift
WARNING: shift/reduce conflict for sin in state 536 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 536 resolved as shift
WARNING: shift/reduce conflict for unset in state 536 resolved as shift
WARNING: shift/reduce conflict for eval in state 536 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 536 resolved as shift
WARNING: shift/reduce conflict for private in state 544 resolved as shift
WARNING: shift/reduce conflict for protected in state 544 resolved as shift
WARNING: shift/reduce conflict for public in state 544 resolved as shift
WARNING: shift/reduce conflict for var in state 544 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 544 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 544 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 544 resolved as shift
WARNING: shift/reduce conflict for empty in state 544 resolved as shift
WARNING: shift/reduce conflict for include in state 544 resolved as shift
WARNING: shift/reduce conflict for include_once in state 544 resolved as shift
WARNING: shift/reduce conflict for require in state 544 resolved as shift
WARNING: shift/reduce conflict for require_once in state 544 resolved as shift
WARNING: shift/reduce conflict for namespace in state 544 resolved as shift
WARNING: shift/reduce conflict for int in state 544 resolved as shift
WARNING: shift/reduce conflict for float in state 544 resolved as shift
WARNING: shift/reduce conflict for double in state 544 resolved as shift
WARNING: shift/reduce conflict for global in state 544 resolved as shift
WARNING: shift/reduce conflict for const in state 544 resolved as shift
WARNING: shift/reduce conflict for print in state 544 resolved as shift
WARNING: shift/reduce conflict for echo in state 544 resolved as shift
WARNING: shift/reduce conflict for while in state 544 resolved as shift
WARNING: shift/reduce conflict for do in state 544 resolved as shift
WARNING: shift/reduce conflict for if in state 544 resolved as shift
WARNING: shift/reduce conflict for function in state 544 resolved as shift
WARNING: shift/reduce conflict for ID in state 544 resolved as shift
WARNING: shift/reduce conflict for return in state 544 resolved as shift
WARNING: shift/reduce conflict for class in state 544 resolved as shift
WARNING: shift/reduce conflict for final in state 544 resolved as shift
WARNING: shift/reduce conflict for new in state 544 resolved as shift
WARNING: shift/reduce conflict for interface in state 544 resolved as shift
WARNING: shift/reduce conflict for trait in state 544 resolved as shift
WARNING: shift/reduce conflict for use in state 544 resolved as shift
WARNING: shift/reduce conflict for continue in state 544 resolved as shift
WARNING: shift/reduce conflict for goto in state 544 resolved as shift
WARNING: shift/reduce conflict for declare in state 544 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 544 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 544 resolved as shift
WARNING: shift/reduce conflict for for in state 544 resolved as shift
WARNING: shift/reduce conflict for foreach in state 544 resolved as shift
WARNING: shift/reduce conflict for switch in state 544 resolved as shift
WARNING: shift/reduce conflict for try in state 544 resolved as shift
WARNING: shift/reduce conflict for throw in state 544 resolved as shift
WARNING: shift/reduce conflict for exit in state 544 resolved as shift
WARNING: shift/reduce conflict for array in state 544 resolved as shift
WARNING: shift/reduce conflict for pow in state 544 resolved as shift
WARNING: shift/reduce conflict for POW in state 544 resolved as shift
WARNING: shift/reduce conflict for abs in state 544 resolved as shift
WARNING: shift/reduce conflict for cos in state 544 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 544 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 544 resolved as shift
WARNING: shift/reduce conflict for die in state 544 resolved as shift
WARNING: shift/reduce conflict for exp in state 544 resolved as shift
WARNING: shift/reduce conflict for floor in state 544 resolved as shift
WARNING: shift/reduce conflict for isset in state 544 resolved as shift
WARNING: shift/reduce conflict for list in state 544 resolved as shift
WARNING: shift/reduce conflict for log in state 544 resolved as shift
WARNING: shift/reduce conflict for log10 in state 544 resolved as shift
WARNING: shift/reduce conflict for max in state 544 resolved as shift
WARNING: shift/reduce conflict for min in state 544 resolved as shift
WARNING: shift/reduce conflict for rand in state 544 resolved as shift
WARNING: shift/reduce conflict for round in state 544 resolved as shift
WARNING: shift/reduce conflict for sin in state 544 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 544 resolved as shift
WARNING: shift/reduce conflict for unset in state 544 resolved as shift
WARNING: shift/reduce conflict for eval in state 544 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 544 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 559 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 559 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 559 resolved as shift
WARNING: shift/reduce conflict for empty in state 559 resolved as shift
WARNING: shift/reduce conflict for include in state 559 resolved as shift
WARNING: shift/reduce conflict for include_once in state 559 resolved as shift
WARNING: shift/reduce conflict for require in state 559 resolved as shift
WARNING: shift/reduce conflict for require_once in state 559 resolved as shift
WARNING: shift/reduce conflict for namespace in state 559 resolved as shift
WARNING: shift/reduce conflict for int in state 559 resolved as shift
WARNING: shift/reduce conflict for float in state 559 resolved as shift
WARNING: shift/reduce conflict for double in state 559 resolved as shift
WARNING: shift/reduce conflict for global in state 559 resolved as shift
WARNING: shift/reduce conflict for const in state 559 resolved as shift
WARNING: shift/reduce conflict for print in state 559 resolved as shift
WARNING: shift/reduce conflict for echo in state 559 resolved as shift
WARNING: shift/reduce conflict for while in state 559 resolved as shift
WARNING: shift/reduce conflict for do in state 559 resolved as shift
WARNING: shift/reduce conflict for if in state 559 resolved as shift
WARNING: shift/reduce conflict for function in state 559 resolved as shift
WARNING: shift/reduce conflict for ID in state 559 resolved as shift
WARNING: shift/reduce conflict for return in state 559 resolved as shift
WARNING: shift/reduce conflict for class in state 559 resolved as shift
WARNING: shift/reduce conflict for final in state 559 resolved as shift
WARNING: shift/reduce conflict for new in state 559 resolved as shift
WARNING: shift/reduce conflict for interface in state 559 resolved as shift
WARNING: shift/reduce conflict for trait in state 559 resolved as shift
WARNING: shift/reduce conflict for use in state 559 resolved as shift
WARNING: shift/reduce conflict for continue in state 559 resolved as shift
WARNING: shift/reduce conflict for goto in state 559 resolved as shift
WARNING: shift/reduce conflict for declare in state 559 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 559 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 559 resolved as shift
WARNING: shift/reduce conflict for for in state 559 resolved as shift
WARNING: shift/reduce conflict for foreach in state 559 resolved as shift
WARNING: shift/reduce conflict for switch in state 559 resolved as shift
WARNING: shift/reduce conflict for try in state 559 resolved as shift
WARNING: shift/reduce conflict for throw in state 559 resolved as shift
WARNING: shift/reduce conflict for exit in state 559 resolved as shift
WARNING: shift/reduce conflict for private in state 559 resolved as shift
WARNING: shift/reduce conflict for protected in state 559 resolved as shift
WARNING: shift/reduce conflict for public in state 559 resolved as shift
WARNING: shift/reduce conflict for var in state 559 resolved as shift
WARNING: shift/reduce conflict for array in state 559 resolved as shift
WARNING: shift/reduce conflict for pow in state 559 resolved as shift
WARNING: shift/reduce conflict for POW in state 559 resolved as shift
WARNING: shift/reduce conflict for abs in state 559 resolved as shift
WARNING: shift/reduce conflict for cos in state 559 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 559 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 559 resolved as shift
WARNING: shift/reduce conflict for die in state 559 resolved as shift
WARNING: shift/reduce conflict for exp in state 559 resolved as shift
WARNING: shift/reduce conflict for floor in state 559 resolved as shift
WARNING: shift/reduce conflict for isset in state 559 resolved as shift
WARNING: shift/reduce conflict for list in state 559 resolved as shift
WARNING: shift/reduce conflict for log in state 559 resolved as shift
WARNING: shift/reduce conflict for log10 in state 559 resolved as shift
WARNING: shift/reduce conflict for max in state 559 resolved as shift
WARNING: shift/reduce conflict for min in state 559 resolved as shift
WARNING: shift/reduce conflict for rand in state 559 resolved as shift
WARNING: shift/reduce conflict for round in state 559 resolved as shift
WARNING: shift/reduce conflict for sin in state 559 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 559 resolved as shift
WARNING: shift/reduce conflict for unset in state 559 resolved as shift
WARNING: shift/reduce conflict for eval in state 559 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 559 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 562 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 569 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 569 resolved as shift
WARNING: shift/reduce conflict for return in state 569 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 569 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 569 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 569 resolved as shift
WARNING: shift/reduce conflict for empty in state 569 resolved as shift
WARNING: shift/reduce conflict for include in state 569 resolved as shift
WARNING: shift/reduce conflict for include_once in state 569 resolved as shift
WARNING: shift/reduce conflict for require in state 569 resolved as shift
WARNING: shift/reduce conflict for require_once in state 569 resolved as shift
WARNING: shift/reduce conflict for namespace in state 569 resolved as shift
WARNING: shift/reduce conflict for int in state 569 resolved as shift
WARNING: shift/reduce conflict for float in state 569 resolved as shift
WARNING: shift/reduce conflict for double in state 569 resolved as shift
WARNING: shift/reduce conflict for global in state 569 resolved as shift
WARNING: shift/reduce conflict for const in state 569 resolved as shift
WARNING: shift/reduce conflict for print in state 569 resolved as shift
WARNING: shift/reduce conflict for echo in state 569 resolved as shift
WARNING: shift/reduce conflict for while in state 569 resolved as shift
WARNING: shift/reduce conflict for do in state 569 resolved as shift
WARNING: shift/reduce conflict for if in state 569 resolved as shift
WARNING: shift/reduce conflict for function in state 569 resolved as shift
WARNING: shift/reduce conflict for ID in state 569 resolved as shift
WARNING: shift/reduce conflict for class in state 569 resolved as shift
WARNING: shift/reduce conflict for final in state 569 resolved as shift
WARNING: shift/reduce conflict for new in state 569 resolved as shift
WARNING: shift/reduce conflict for interface in state 569 resolved as shift
WARNING: shift/reduce conflict for trait in state 569 resolved as shift
WARNING: shift/reduce conflict for use in state 569 resolved as shift
WARNING: shift/reduce conflict for continue in state 569 resolved as shift
WARNING: shift/reduce conflict for goto in state 569 resolved as shift
WARNING: shift/reduce conflict for declare in state 569 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 569 resolved as shift
WARNING: shift/reduce conflict for for in state 569 resolved as shift
WARNING: shift/reduce conflict for foreach in state 569 resolved as shift
WARNING: shift/reduce conflict for switch in state 569 resolved as shift
WARNING: shift/reduce conflict for try in state 569 resolved as shift
WARNING: shift/reduce conflict for throw in state 569 resolved as shift
WARNING: shift/reduce conflict for exit in state 569 resolved as shift
WARNING: shift/reduce conflict for private in state 569 resolved as shift
WARNING: shift/reduce conflict for protected in state 569 resolved as shift
WARNING: shift/reduce conflict for public in state 569 resolved as shift
WARNING: shift/reduce conflict for var in state 569 resolved as shift
WARNING: shift/reduce conflict for array in state 569 resolved as shift
WARNING: shift/reduce conflict for pow in state 569 resolved as shift
WARNING: shift/reduce conflict for POW in state 569 resolved as shift
WARNING: shift/reduce conflict for abs in state 569 resolved as shift
WARNING: shift/reduce conflict for cos in state 569 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 569 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 569 resolved as shift
WARNING: shift/reduce conflict for die in state 569 resolved as shift
WARNING: shift/reduce conflict for exp in state 569 resolved as shift
WARNING: shift/reduce conflict for floor in state 569 resolved as shift
WARNING: shift/reduce conflict for isset in state 569 resolved as shift
WARNING: shift/reduce conflict for list in state 569 resolved as shift
WARNING: shift/reduce conflict for log in state 569 resolved as shift
WARNING: shift/reduce conflict for log10 in state 569 resolved as shift
WARNING: shift/reduce conflict for max in state 569 resolved as shift
WARNING: shift/reduce conflict for min in state 569 resolved as shift
WARNING: shift/reduce conflict for rand in state 569 resolved as shift
WARNING: shift/reduce conflict for round in state 569 resolved as shift
WARNING: shift/reduce conflict for sin in state 569 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 569 resolved as shift
WARNING: shift/reduce conflict for unset in state 569 resolved as shift
WARNING: shift/reduce conflict for eval in state 569 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 569 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 572 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 572 resolved as shift
WARNING: shift/reduce conflict for private in state 572 resolved as shift
WARNING: shift/reduce conflict for protected in state 572 resolved as shift
WARNING: shift/reduce conflict for public in state 572 resolved as shift
WARNING: shift/reduce conflict for var in state 572 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 572 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 572 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 572 resolved as shift
WARNING: shift/reduce conflict for empty in state 572 resolved as shift
WARNING: shift/reduce conflict for include in state 572 resolved as shift
WARNING: shift/reduce conflict for include_once in state 572 resolved as shift
WARNING: shift/reduce conflict for require in state 572 resolved as shift
WARNING: shift/reduce conflict for require_once in state 572 resolved as shift
WARNING: shift/reduce conflict for namespace in state 572 resolved as shift
WARNING: shift/reduce conflict for int in state 572 resolved as shift
WARNING: shift/reduce conflict for float in state 572 resolved as shift
WARNING: shift/reduce conflict for double in state 572 resolved as shift
WARNING: shift/reduce conflict for global in state 572 resolved as shift
WARNING: shift/reduce conflict for const in state 572 resolved as shift
WARNING: shift/reduce conflict for print in state 572 resolved as shift
WARNING: shift/reduce conflict for echo in state 572 resolved as shift
WARNING: shift/reduce conflict for while in state 572 resolved as shift
WARNING: shift/reduce conflict for do in state 572 resolved as shift
WARNING: shift/reduce conflict for if in state 572 resolved as shift
WARNING: shift/reduce conflict for function in state 572 resolved as shift
WARNING: shift/reduce conflict for ID in state 572 resolved as shift
WARNING: shift/reduce conflict for return in state 572 resolved as shift
WARNING: shift/reduce conflict for class in state 572 resolved as shift
WARNING: shift/reduce conflict for final in state 572 resolved as shift
WARNING: shift/reduce conflict for new in state 572 resolved as shift
WARNING: shift/reduce conflict for interface in state 572 resolved as shift
WARNING: shift/reduce conflict for trait in state 572 resolved as shift
WARNING: shift/reduce conflict for use in state 572 resolved as shift
WARNING: shift/reduce conflict for continue in state 572 resolved as shift
WARNING: shift/reduce conflict for goto in state 572 resolved as shift
WARNING: shift/reduce conflict for declare in state 572 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 572 resolved as shift
WARNING: shift/reduce conflict for for in state 572 resolved as shift
WARNING: shift/reduce conflict for foreach in state 572 resolved as shift
WARNING: shift/reduce conflict for switch in state 572 resolved as shift
WARNING: shift/reduce conflict for try in state 572 resolved as shift
WARNING: shift/reduce conflict for throw in state 572 resolved as shift
WARNING: shift/reduce conflict for exit in state 572 resolved as shift
WARNING: shift/reduce conflict for array in state 572 resolved as shift
WARNING: shift/reduce conflict for pow in state 572 resolved as shift
WARNING: shift/reduce conflict for POW in state 572 resolved as shift
WARNING: shift/reduce conflict for abs in state 572 resolved as shift
WARNING: shift/reduce conflict for cos in state 572 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 572 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 572 resolved as shift
WARNING: shift/reduce conflict for die in state 572 resolved as shift
WARNING: shift/reduce conflict for exp in state 572 resolved as shift
WARNING: shift/reduce conflict for floor in state 572 resolved as shift
WARNING: shift/reduce conflict for isset in state 572 resolved as shift
WARNING: shift/reduce conflict for list in state 572 resolved as shift
WARNING: shift/reduce conflict for log in state 572 resolved as shift
WARNING: shift/reduce conflict for log10 in state 572 resolved as shift
WARNING: shift/reduce conflict for max in state 572 resolved as shift
WARNING: shift/reduce conflict for min in state 572 resolved as shift
WARNING: shift/reduce conflict for rand in state 572 resolved as shift
WARNING: shift/reduce conflict for round in state 572 resolved as shift
WARNING: shift/reduce conflict for sin in state 572 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 572 resolved as shift
WARNING: shift/reduce conflict for unset in state 572 resolved as shift
WARNING: shift/reduce conflict for eval in state 572 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 572 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 576 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 576 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 576 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 576 resolved as shift
WARNING: shift/reduce conflict for empty in state 576 resolved as shift
WARNING: shift/reduce conflict for include in state 576 resolved as shift
WARNING: shift/reduce conflict for include_once in state 576 resolved as shift
WARNING: shift/reduce conflict for require in state 576 resolved as shift
WARNING: shift/reduce conflict for require_once in state 576 resolved as shift
WARNING: shift/reduce conflict for namespace in state 576 resolved as shift
WARNING: shift/reduce conflict for int in state 576 resolved as shift
WARNING: shift/reduce conflict for float in state 576 resolved as shift
WARNING: shift/reduce conflict for double in state 576 resolved as shift
WARNING: shift/reduce conflict for global in state 576 resolved as shift
WARNING: shift/reduce conflict for const in state 576 resolved as shift
WARNING: shift/reduce conflict for print in state 576 resolved as shift
WARNING: shift/reduce conflict for echo in state 576 resolved as shift
WARNING: shift/reduce conflict for while in state 576 resolved as shift
WARNING: shift/reduce conflict for do in state 576 resolved as shift
WARNING: shift/reduce conflict for if in state 576 resolved as shift
WARNING: shift/reduce conflict for function in state 576 resolved as shift
WARNING: shift/reduce conflict for ID in state 576 resolved as shift
WARNING: shift/reduce conflict for return in state 576 resolved as shift
WARNING: shift/reduce conflict for class in state 576 resolved as shift
WARNING: shift/reduce conflict for final in state 576 resolved as shift
WARNING: shift/reduce conflict for new in state 576 resolved as shift
WARNING: shift/reduce conflict for interface in state 576 resolved as shift
WARNING: shift/reduce conflict for trait in state 576 resolved as shift
WARNING: shift/reduce conflict for use in state 576 resolved as shift
WARNING: shift/reduce conflict for continue in state 576 resolved as shift
WARNING: shift/reduce conflict for goto in state 576 resolved as shift
WARNING: shift/reduce conflict for declare in state 576 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 576 resolved as shift
WARNING: shift/reduce conflict for for in state 576 resolved as shift
WARNING: shift/reduce conflict for foreach in state 576 resolved as shift
WARNING: shift/reduce conflict for switch in state 576 resolved as shift
WARNING: shift/reduce conflict for try in state 576 resolved as shift
WARNING: shift/reduce conflict for throw in state 576 resolved as shift
WARNING: shift/reduce conflict for exit in state 576 resolved as shift
WARNING: shift/reduce conflict for private in state 576 resolved as shift
WARNING: shift/reduce conflict for protected in state 576 resolved as shift
WARNING: shift/reduce conflict for public in state 576 resolved as shift
WARNING: shift/reduce conflict for var in state 576 resolved as shift
WARNING: shift/reduce conflict for array in state 576 resolved as shift
WARNING: shift/reduce conflict for pow in state 576 resolved as shift
WARNING: shift/reduce conflict for POW in state 576 resolved as shift
WARNING: shift/reduce conflict for abs in state 576 resolved as shift
WARNING: shift/reduce conflict for cos in state 576 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 576 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 576 resolved as shift
WARNING: shift/reduce conflict for die in state 576 resolved as shift
WARNING: shift/reduce conflict for exp in state 576 resolved as shift
WARNING: shift/reduce conflict for floor in state 576 resolved as shift
WARNING: shift/reduce conflict for isset in state 576 resolved as shift
WARNING: shift/reduce conflict for list in state 576 resolved as shift
WARNING: shift/reduce conflict for log in state 576 resolved as shift
WARNING: shift/reduce conflict for log10 in state 576 resolved as shift
WARNING: shift/reduce conflict for max in state 576 resolved as shift
WARNING: shift/reduce conflict for min in state 576 resolved as shift
WARNING: shift/reduce conflict for rand in state 576 resolved as shift
WARNING: shift/reduce conflict for round in state 576 resolved as shift
WARNING: shift/reduce conflict for sin in state 576 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 576 resolved as shift
WARNING: shift/reduce conflict for unset in state 576 resolved as shift
WARNING: shift/reduce conflict for eval in state 576 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 576 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 577 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 577 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 577 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 577 resolved as shift
WARNING: shift/reduce conflict for empty in state 577 resolved as shift
WARNING: shift/reduce conflict for include in state 577 resolved as shift
WARNING: shift/reduce conflict for include_once in state 577 resolved as shift
WARNING: shift/reduce conflict for require in state 577 resolved as shift
WARNING: shift/reduce conflict for require_once in state 577 resolved as shift
WARNING: shift/reduce conflict for namespace in state 577 resolved as shift
WARNING: shift/reduce conflict for int in state 577 resolved as shift
WARNING: shift/reduce conflict for float in state 577 resolved as shift
WARNING: shift/reduce conflict for double in state 577 resolved as shift
WARNING: shift/reduce conflict for global in state 577 resolved as shift
WARNING: shift/reduce conflict for const in state 577 resolved as shift
WARNING: shift/reduce conflict for print in state 577 resolved as shift
WARNING: shift/reduce conflict for echo in state 577 resolved as shift
WARNING: shift/reduce conflict for while in state 577 resolved as shift
WARNING: shift/reduce conflict for do in state 577 resolved as shift
WARNING: shift/reduce conflict for if in state 577 resolved as shift
WARNING: shift/reduce conflict for function in state 577 resolved as shift
WARNING: shift/reduce conflict for ID in state 577 resolved as shift
WARNING: shift/reduce conflict for return in state 577 resolved as shift
WARNING: shift/reduce conflict for class in state 577 resolved as shift
WARNING: shift/reduce conflict for final in state 577 resolved as shift
WARNING: shift/reduce conflict for new in state 577 resolved as shift
WARNING: shift/reduce conflict for interface in state 577 resolved as shift
WARNING: shift/reduce conflict for trait in state 577 resolved as shift
WARNING: shift/reduce conflict for use in state 577 resolved as shift
WARNING: shift/reduce conflict for continue in state 577 resolved as shift
WARNING: shift/reduce conflict for goto in state 577 resolved as shift
WARNING: shift/reduce conflict for declare in state 577 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 577 resolved as shift
WARNING: shift/reduce conflict for for in state 577 resolved as shift
WARNING: shift/reduce conflict for foreach in state 577 resolved as shift
WARNING: shift/reduce conflict for switch in state 577 resolved as shift
WARNING: shift/reduce conflict for try in state 577 resolved as shift
WARNING: shift/reduce conflict for throw in state 577 resolved as shift
WARNING: shift/reduce conflict for exit in state 577 resolved as shift
WARNING: shift/reduce conflict for private in state 577 resolved as shift
WARNING: shift/reduce conflict for protected in state 577 resolved as shift
WARNING: shift/reduce conflict for public in state 577 resolved as shift
WARNING: shift/reduce conflict for var in state 577 resolved as shift
WARNING: shift/reduce conflict for array in state 577 resolved as shift
WARNING: shift/reduce conflict for pow in state 577 resolved as shift
WARNING: shift/reduce conflict for POW in state 577 resolved as shift
WARNING: shift/reduce conflict for abs in state 577 resolved as shift
WARNING: shift/reduce conflict for cos in state 577 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 577 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 577 resolved as shift
WARNING: shift/reduce conflict for die in state 577 resolved as shift
WARNING: shift/reduce conflict for exp in state 577 resolved as shift
WARNING: shift/reduce conflict for floor in state 577 resolved as shift
WARNING: shift/reduce conflict for isset in state 577 resolved as shift
WARNING: shift/reduce conflict for list in state 577 resolved as shift
WARNING: shift/reduce conflict for log in state 577 resolved as shift
WARNING: shift/reduce conflict for log10 in state 577 resolved as shift
WARNING: shift/reduce conflict for max in state 577 resolved as shift
WARNING: shift/reduce conflict for min in state 577 resolved as shift
WARNING: shift/reduce conflict for rand in state 577 resolved as shift
WARNING: shift/reduce conflict for round in state 577 resolved as shift
WARNING: shift/reduce conflict for sin in state 577 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 577 resolved as shift
WARNING: shift/reduce conflict for unset in state 577 resolved as shift
WARNING: shift/reduce conflict for eval in state 577 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 577 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 578 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 578 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 578 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 578 resolved as shift
WARNING: shift/reduce conflict for empty in state 578 resolved as shift
WARNING: shift/reduce conflict for include in state 578 resolved as shift
WARNING: shift/reduce conflict for include_once in state 578 resolved as shift
WARNING: shift/reduce conflict for require in state 578 resolved as shift
WARNING: shift/reduce conflict for require_once in state 578 resolved as shift
WARNING: shift/reduce conflict for namespace in state 578 resolved as shift
WARNING: shift/reduce conflict for int in state 578 resolved as shift
WARNING: shift/reduce conflict for float in state 578 resolved as shift
WARNING: shift/reduce conflict for double in state 578 resolved as shift
WARNING: shift/reduce conflict for global in state 578 resolved as shift
WARNING: shift/reduce conflict for const in state 578 resolved as shift
WARNING: shift/reduce conflict for print in state 578 resolved as shift
WARNING: shift/reduce conflict for echo in state 578 resolved as shift
WARNING: shift/reduce conflict for while in state 578 resolved as shift
WARNING: shift/reduce conflict for do in state 578 resolved as shift
WARNING: shift/reduce conflict for if in state 578 resolved as shift
WARNING: shift/reduce conflict for function in state 578 resolved as shift
WARNING: shift/reduce conflict for ID in state 578 resolved as shift
WARNING: shift/reduce conflict for return in state 578 resolved as shift
WARNING: shift/reduce conflict for class in state 578 resolved as shift
WARNING: shift/reduce conflict for final in state 578 resolved as shift
WARNING: shift/reduce conflict for new in state 578 resolved as shift
WARNING: shift/reduce conflict for interface in state 578 resolved as shift
WARNING: shift/reduce conflict for trait in state 578 resolved as shift
WARNING: shift/reduce conflict for use in state 578 resolved as shift
WARNING: shift/reduce conflict for continue in state 578 resolved as shift
WARNING: shift/reduce conflict for goto in state 578 resolved as shift
WARNING: shift/reduce conflict for declare in state 578 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 578 resolved as shift
WARNING: shift/reduce conflict for for in state 578 resolved as shift
WARNING: shift/reduce conflict for foreach in state 578 resolved as shift
WARNING: shift/reduce conflict for switch in state 578 resolved as shift
WARNING: shift/reduce conflict for try in state 578 resolved as shift
WARNING: shift/reduce conflict for throw in state 578 resolved as shift
WARNING: shift/reduce conflict for exit in state 578 resolved as shift
WARNING: shift/reduce conflict for private in state 578 resolved as shift
WARNING: shift/reduce conflict for protected in state 578 resolved as shift
WARNING: shift/reduce conflict for public in state 578 resolved as shift
WARNING: shift/reduce conflict for var in state 578 resolved as shift
WARNING: shift/reduce conflict for array in state 578 resolved as shift
WARNING: shift/reduce conflict for pow in state 578 resolved as shift
WARNING: shift/reduce conflict for POW in state 578 resolved as shift
WARNING: shift/reduce conflict for abs in state 578 resolved as shift
WARNING: shift/reduce conflict for cos in state 578 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 578 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 578 resolved as shift
WARNING: shift/reduce conflict for die in state 578 resolved as shift
WARNING: shift/reduce conflict for exp in state 578 resolved as shift
WARNING: shift/reduce conflict for floor in state 578 resolved as shift
WARNING: shift/reduce conflict for isset in state 578 resolved as shift
WARNING: shift/reduce conflict for list in state 578 resolved as shift
WARNING: shift/reduce conflict for log in state 578 resolved as shift
WARNING: shift/reduce conflict for log10 in state 578 resolved as shift
WARNING: shift/reduce conflict for max in state 578 resolved as shift
WARNING: shift/reduce conflict for min in state 578 resolved as shift
WARNING: shift/reduce conflict for rand in state 578 resolved as shift
WARNING: shift/reduce conflict for round in state 578 resolved as shift
WARNING: shift/reduce conflict for sin in state 578 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 578 resolved as shift
WARNING: shift/reduce conflict for unset in state 578 resolved as shift
WARNING: shift/reduce conflict for eval in state 578 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 578 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 579 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 579 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 579 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 579 resolved as shift
WARNING: shift/reduce conflict for empty in state 579 resolved as shift
WARNING: shift/reduce conflict for include in state 579 resolved as shift
WARNING: shift/reduce conflict for include_once in state 579 resolved as shift
WARNING: shift/reduce conflict for require in state 579 resolved as shift
WARNING: shift/reduce conflict for require_once in state 579 resolved as shift
WARNING: shift/reduce conflict for namespace in state 579 resolved as shift
WARNING: shift/reduce conflict for int in state 579 resolved as shift
WARNING: shift/reduce conflict for float in state 579 resolved as shift
WARNING: shift/reduce conflict for double in state 579 resolved as shift
WARNING: shift/reduce conflict for global in state 579 resolved as shift
WARNING: shift/reduce conflict for const in state 579 resolved as shift
WARNING: shift/reduce conflict for print in state 579 resolved as shift
WARNING: shift/reduce conflict for echo in state 579 resolved as shift
WARNING: shift/reduce conflict for while in state 579 resolved as shift
WARNING: shift/reduce conflict for do in state 579 resolved as shift
WARNING: shift/reduce conflict for if in state 579 resolved as shift
WARNING: shift/reduce conflict for function in state 579 resolved as shift
WARNING: shift/reduce conflict for ID in state 579 resolved as shift
WARNING: shift/reduce conflict for return in state 579 resolved as shift
WARNING: shift/reduce conflict for class in state 579 resolved as shift
WARNING: shift/reduce conflict for final in state 579 resolved as shift
WARNING: shift/reduce conflict for new in state 579 resolved as shift
WARNING: shift/reduce conflict for interface in state 579 resolved as shift
WARNING: shift/reduce conflict for trait in state 579 resolved as shift
WARNING: shift/reduce conflict for use in state 579 resolved as shift
WARNING: shift/reduce conflict for continue in state 579 resolved as shift
WARNING: shift/reduce conflict for goto in state 579 resolved as shift
WARNING: shift/reduce conflict for declare in state 579 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 579 resolved as shift
WARNING: shift/reduce conflict for for in state 579 resolved as shift
WARNING: shift/reduce conflict for foreach in state 579 resolved as shift
WARNING: shift/reduce conflict for switch in state 579 resolved as shift
WARNING: shift/reduce conflict for try in state 579 resolved as shift
WARNING: shift/reduce conflict for throw in state 579 resolved as shift
WARNING: shift/reduce conflict for exit in state 579 resolved as shift
WARNING: shift/reduce conflict for private in state 579 resolved as shift
WARNING: shift/reduce conflict for protected in state 579 resolved as shift
WARNING: shift/reduce conflict for public in state 579 resolved as shift
WARNING: shift/reduce conflict for var in state 579 resolved as shift
WARNING: shift/reduce conflict for array in state 579 resolved as shift
WARNING: shift/reduce conflict for pow in state 579 resolved as shift
WARNING: shift/reduce conflict for POW in state 579 resolved as shift
WARNING: shift/reduce conflict for abs in state 579 resolved as shift
WARNING: shift/reduce conflict for cos in state 579 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 579 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 579 resolved as shift
WARNING: shift/reduce conflict for die in state 579 resolved as shift
WARNING: shift/reduce conflict for exp in state 579 resolved as shift
WARNING: shift/reduce conflict for floor in state 579 resolved as shift
WARNING: shift/reduce conflict for isset in state 579 resolved as shift
WARNING: shift/reduce conflict for list in state 579 resolved as shift
WARNING: shift/reduce conflict for log in state 579 resolved as shift
WARNING: shift/reduce conflict for log10 in state 579 resolved as shift
WARNING: shift/reduce conflict for max in state 579 resolved as shift
WARNING: shift/reduce conflict for min in state 579 resolved as shift
WARNING: shift/reduce conflict for rand in state 579 resolved as shift
WARNING: shift/reduce conflict for round in state 579 resolved as shift
WARNING: shift/reduce conflict for sin in state 579 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 579 resolved as shift
WARNING: shift/reduce conflict for unset in state 579 resolved as shift
WARNING: shift/reduce conflict for eval in state 579 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 579 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 590 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 590 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 590 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 590 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 590 resolved as shift
WARNING: shift/reduce conflict for empty in state 590 resolved as shift
WARNING: shift/reduce conflict for include in state 590 resolved as shift
WARNING: shift/reduce conflict for include_once in state 590 resolved as shift
WARNING: shift/reduce conflict for require in state 590 resolved as shift
WARNING: shift/reduce conflict for require_once in state 590 resolved as shift
WARNING: shift/reduce conflict for namespace in state 590 resolved as shift
WARNING: shift/reduce conflict for int in state 590 resolved as shift
WARNING: shift/reduce conflict for float in state 590 resolved as shift
WARNING: shift/reduce conflict for double in state 590 resolved as shift
WARNING: shift/reduce conflict for global in state 590 resolved as shift
WARNING: shift/reduce conflict for const in state 590 resolved as shift
WARNING: shift/reduce conflict for print in state 590 resolved as shift
WARNING: shift/reduce conflict for echo in state 590 resolved as shift
WARNING: shift/reduce conflict for while in state 590 resolved as shift
WARNING: shift/reduce conflict for do in state 590 resolved as shift
WARNING: shift/reduce conflict for if in state 590 resolved as shift
WARNING: shift/reduce conflict for function in state 590 resolved as shift
WARNING: shift/reduce conflict for ID in state 590 resolved as shift
WARNING: shift/reduce conflict for return in state 590 resolved as shift
WARNING: shift/reduce conflict for class in state 590 resolved as shift
WARNING: shift/reduce conflict for final in state 590 resolved as shift
WARNING: shift/reduce conflict for new in state 590 resolved as shift
WARNING: shift/reduce conflict for interface in state 590 resolved as shift
WARNING: shift/reduce conflict for trait in state 590 resolved as shift
WARNING: shift/reduce conflict for use in state 590 resolved as shift
WARNING: shift/reduce conflict for continue in state 590 resolved as shift
WARNING: shift/reduce conflict for goto in state 590 resolved as shift
WARNING: shift/reduce conflict for declare in state 590 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 590 resolved as shift
WARNING: shift/reduce conflict for for in state 590 resolved as shift
WARNING: shift/reduce conflict for foreach in state 590 resolved as shift
WARNING: shift/reduce conflict for switch in state 590 resolved as shift
WARNING: shift/reduce conflict for try in state 590 resolved as shift
WARNING: shift/reduce conflict for throw in state 590 resolved as shift
WARNING: shift/reduce conflict for exit in state 590 resolved as shift
WARNING: shift/reduce conflict for private in state 590 resolved as shift
WARNING: shift/reduce conflict for protected in state 590 resolved as shift
WARNING: shift/reduce conflict for public in state 590 resolved as shift
WARNING: shift/reduce conflict for var in state 590 resolved as shift
WARNING: shift/reduce conflict for array in state 590 resolved as shift
WARNING: shift/reduce conflict for pow in state 590 resolved as shift
WARNING: shift/reduce conflict for POW in state 590 resolved as shift
WARNING: shift/reduce conflict for abs in state 590 resolved as shift
WARNING: shift/reduce conflict for cos in state 590 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 590 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 590 resolved as shift
WARNING: shift/reduce conflict for die in state 590 resolved as shift
WARNING: shift/reduce conflict for exp in state 590 resolved as shift
WARNING: shift/reduce conflict for floor in state 590 resolved as shift
WARNING: shift/reduce conflict for isset in state 590 resolved as shift
WARNING: shift/reduce conflict for list in state 590 resolved as shift
WARNING: shift/reduce conflict for log in state 590 resolved as shift
WARNING: shift/reduce conflict for log10 in state 590 resolved as shift
WARNING: shift/reduce conflict for max in state 590 resolved as shift
WARNING: shift/reduce conflict for min in state 590 resolved as shift
WARNING: shift/reduce conflict for rand in state 590 resolved as shift
WARNING: shift/reduce conflict for round in state 590 resolved as shift
WARNING: shift/reduce conflict for sin in state 590 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 590 resolved as shift
WARNING: shift/reduce conflict for unset in state 590 resolved as shift
WARNING: shift/reduce conflict for eval in state 590 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 590 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 593 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 593 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 593 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 593 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 607 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 608 resolved as shift
WARNING: shift/reduce conflict for return in state 608 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 608 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 608 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 608 resolved as shift
WARNING: shift/reduce conflict for empty in state 608 resolved as shift
WARNING: shift/reduce conflict for include in state 608 resolved as shift
WARNING: shift/reduce conflict for include_once in state 608 resolved as shift
WARNING: shift/reduce conflict for require in state 608 resolved as shift
WARNING: shift/reduce conflict for require_once in state 608 resolved as shift
WARNING: shift/reduce conflict for namespace in state 608 resolved as shift
WARNING: shift/reduce conflict for int in state 608 resolved as shift
WARNING: shift/reduce conflict for float in state 608 resolved as shift
WARNING: shift/reduce conflict for double in state 608 resolved as shift
WARNING: shift/reduce conflict for global in state 608 resolved as shift
WARNING: shift/reduce conflict for const in state 608 resolved as shift
WARNING: shift/reduce conflict for print in state 608 resolved as shift
WARNING: shift/reduce conflict for echo in state 608 resolved as shift
WARNING: shift/reduce conflict for while in state 608 resolved as shift
WARNING: shift/reduce conflict for do in state 608 resolved as shift
WARNING: shift/reduce conflict for if in state 608 resolved as shift
WARNING: shift/reduce conflict for function in state 608 resolved as shift
WARNING: shift/reduce conflict for ID in state 608 resolved as shift
WARNING: shift/reduce conflict for class in state 608 resolved as shift
WARNING: shift/reduce conflict for final in state 608 resolved as shift
WARNING: shift/reduce conflict for new in state 608 resolved as shift
WARNING: shift/reduce conflict for interface in state 608 resolved as shift
WARNING: shift/reduce conflict for trait in state 608 resolved as shift
WARNING: shift/reduce conflict for use in state 608 resolved as shift
WARNING: shift/reduce conflict for continue in state 608 resolved as shift
WARNING: shift/reduce conflict for goto in state 608 resolved as shift
WARNING: shift/reduce conflict for declare in state 608 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 608 resolved as shift
WARNING: shift/reduce conflict for for in state 608 resolved as shift
WARNING: shift/reduce conflict for foreach in state 608 resolved as shift
WARNING: shift/reduce conflict for switch in state 608 resolved as shift
WARNING: shift/reduce conflict for try in state 608 resolved as shift
WARNING: shift/reduce conflict for throw in state 608 resolved as shift
WARNING: shift/reduce conflict for exit in state 608 resolved as shift
WARNING: shift/reduce conflict for private in state 608 resolved as shift
WARNING: shift/reduce conflict for protected in state 608 resolved as shift
WARNING: shift/reduce conflict for public in state 608 resolved as shift
WARNING: shift/reduce conflict for var in state 608 resolved as shift
WARNING: shift/reduce conflict for array in state 608 resolved as shift
WARNING: shift/reduce conflict for pow in state 608 resolved as shift
WARNING: shift/reduce conflict for POW in state 608 resolved as shift
WARNING: shift/reduce conflict for abs in state 608 resolved as shift
WARNING: shift/reduce conflict for cos in state 608 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 608 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 608 resolved as shift
WARNING: shift/reduce conflict for die in state 608 resolved as shift
WARNING: shift/reduce conflict for exp in state 608 resolved as shift
WARNING: shift/reduce conflict for floor in state 608 resolved as shift
WARNING: shift/reduce conflict for isset in state 608 resolved as shift
WARNING: shift/reduce conflict for list in state 608 resolved as shift
WARNING: shift/reduce conflict for log in state 608 resolved as shift
WARNING: shift/reduce conflict for log10 in state 608 resolved as shift
WARNING: shift/reduce conflict for max in state 608 resolved as shift
WARNING: shift/reduce conflict for min in state 608 resolved as shift
WARNING: shift/reduce conflict for rand in state 608 resolved as shift
WARNING: shift/reduce conflict for round in state 608 resolved as shift
WARNING: shift/reduce conflict for sin in state 608 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 608 resolved as shift
WARNING: shift/reduce conflict for unset in state 608 resolved as shift
WARNING: shift/reduce conflict for eval in state 608 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 608 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 612 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 612 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 612 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 612 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 612 resolved as shift
WARNING: shift/reduce conflict for empty in state 612 resolved as shift
WARNING: shift/reduce conflict for include in state 612 resolved as shift
WARNING: shift/reduce conflict for include_once in state 612 resolved as shift
WARNING: shift/reduce conflict for require in state 612 resolved as shift
WARNING: shift/reduce conflict for require_once in state 612 resolved as shift
WARNING: shift/reduce conflict for namespace in state 612 resolved as shift
WARNING: shift/reduce conflict for int in state 612 resolved as shift
WARNING: shift/reduce conflict for float in state 612 resolved as shift
WARNING: shift/reduce conflict for double in state 612 resolved as shift
WARNING: shift/reduce conflict for global in state 612 resolved as shift
WARNING: shift/reduce conflict for const in state 612 resolved as shift
WARNING: shift/reduce conflict for print in state 612 resolved as shift
WARNING: shift/reduce conflict for echo in state 612 resolved as shift
WARNING: shift/reduce conflict for while in state 612 resolved as shift
WARNING: shift/reduce conflict for do in state 612 resolved as shift
WARNING: shift/reduce conflict for if in state 612 resolved as shift
WARNING: shift/reduce conflict for function in state 612 resolved as shift
WARNING: shift/reduce conflict for ID in state 612 resolved as shift
WARNING: shift/reduce conflict for return in state 612 resolved as shift
WARNING: shift/reduce conflict for class in state 612 resolved as shift
WARNING: shift/reduce conflict for final in state 612 resolved as shift
WARNING: shift/reduce conflict for new in state 612 resolved as shift
WARNING: shift/reduce conflict for interface in state 612 resolved as shift
WARNING: shift/reduce conflict for trait in state 612 resolved as shift
WARNING: shift/reduce conflict for use in state 612 resolved as shift
WARNING: shift/reduce conflict for continue in state 612 resolved as shift
WARNING: shift/reduce conflict for goto in state 612 resolved as shift
WARNING: shift/reduce conflict for declare in state 612 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 612 resolved as shift
WARNING: shift/reduce conflict for for in state 612 resolved as shift
WARNING: shift/reduce conflict for foreach in state 612 resolved as shift
WARNING: shift/reduce conflict for switch in state 612 resolved as shift
WARNING: shift/reduce conflict for try in state 612 resolved as shift
WARNING: shift/reduce conflict for throw in state 612 resolved as shift
WARNING: shift/reduce conflict for exit in state 612 resolved as shift
WARNING: shift/reduce conflict for private in state 612 resolved as shift
WARNING: shift/reduce conflict for protected in state 612 resolved as shift
WARNING: shift/reduce conflict for public in state 612 resolved as shift
WARNING: shift/reduce conflict for var in state 612 resolved as shift
WARNING: shift/reduce conflict for array in state 612 resolved as shift
WARNING: shift/reduce conflict for pow in state 612 resolved as shift
WARNING: shift/reduce conflict for POW in state 612 resolved as shift
WARNING: shift/reduce conflict for abs in state 612 resolved as shift
WARNING: shift/reduce conflict for cos in state 612 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 612 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 612 resolved as shift
WARNING: shift/reduce conflict for die in state 612 resolved as shift
WARNING: shift/reduce conflict for exp in state 612 resolved as shift
WARNING: shift/reduce conflict for floor in state 612 resolved as shift
WARNING: shift/reduce conflict for isset in state 612 resolved as shift
WARNING: shift/reduce conflict for list in state 612 resolved as shift
WARNING: shift/reduce conflict for log in state 612 resolved as shift
WARNING: shift/reduce conflict for log10 in state 612 resolved as shift
WARNING: shift/reduce conflict for max in state 612 resolved as shift
WARNING: shift/reduce conflict for min in state 612 resolved as shift
WARNING: shift/reduce conflict for rand in state 612 resolved as shift
WARNING: shift/reduce conflict for round in state 612 resolved as shift
WARNING: shift/reduce conflict for sin in state 612 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 612 resolved as shift
WARNING: shift/reduce conflict for unset in state 612 resolved as shift
WARNING: shift/reduce conflict for eval in state 612 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 612 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 613 resolved as shift
WARNING: shift/reduce conflict for endfor in state 613 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 613 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 613 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 613 resolved as shift
WARNING: shift/reduce conflict for empty in state 613 resolved as shift
WARNING: shift/reduce conflict for include in state 613 resolved as shift
WARNING: shift/reduce conflict for include_once in state 613 resolved as shift
WARNING: shift/reduce conflict for require in state 613 resolved as shift
WARNING: shift/reduce conflict for require_once in state 613 resolved as shift
WARNING: shift/reduce conflict for namespace in state 613 resolved as shift
WARNING: shift/reduce conflict for int in state 613 resolved as shift
WARNING: shift/reduce conflict for float in state 613 resolved as shift
WARNING: shift/reduce conflict for double in state 613 resolved as shift
WARNING: shift/reduce conflict for global in state 613 resolved as shift
WARNING: shift/reduce conflict for const in state 613 resolved as shift
WARNING: shift/reduce conflict for print in state 613 resolved as shift
WARNING: shift/reduce conflict for echo in state 613 resolved as shift
WARNING: shift/reduce conflict for while in state 613 resolved as shift
WARNING: shift/reduce conflict for do in state 613 resolved as shift
WARNING: shift/reduce conflict for if in state 613 resolved as shift
WARNING: shift/reduce conflict for function in state 613 resolved as shift
WARNING: shift/reduce conflict for ID in state 613 resolved as shift
WARNING: shift/reduce conflict for return in state 613 resolved as shift
WARNING: shift/reduce conflict for class in state 613 resolved as shift
WARNING: shift/reduce conflict for final in state 613 resolved as shift
WARNING: shift/reduce conflict for new in state 613 resolved as shift
WARNING: shift/reduce conflict for interface in state 613 resolved as shift
WARNING: shift/reduce conflict for trait in state 613 resolved as shift
WARNING: shift/reduce conflict for use in state 613 resolved as shift
WARNING: shift/reduce conflict for continue in state 613 resolved as shift
WARNING: shift/reduce conflict for goto in state 613 resolved as shift
WARNING: shift/reduce conflict for declare in state 613 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 613 resolved as shift
WARNING: shift/reduce conflict for for in state 613 resolved as shift
WARNING: shift/reduce conflict for foreach in state 613 resolved as shift
WARNING: shift/reduce conflict for switch in state 613 resolved as shift
WARNING: shift/reduce conflict for try in state 613 resolved as shift
WARNING: shift/reduce conflict for throw in state 613 resolved as shift
WARNING: shift/reduce conflict for exit in state 613 resolved as shift
WARNING: shift/reduce conflict for private in state 613 resolved as shift
WARNING: shift/reduce conflict for protected in state 613 resolved as shift
WARNING: shift/reduce conflict for public in state 613 resolved as shift
WARNING: shift/reduce conflict for var in state 613 resolved as shift
WARNING: shift/reduce conflict for array in state 613 resolved as shift
WARNING: shift/reduce conflict for pow in state 613 resolved as shift
WARNING: shift/reduce conflict for POW in state 613 resolved as shift
WARNING: shift/reduce conflict for abs in state 613 resolved as shift
WARNING: shift/reduce conflict for cos in state 613 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 613 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 613 resolved as shift
WARNING: shift/reduce conflict for die in state 613 resolved as shift
WARNING: shift/reduce conflict for exp in state 613 resolved as shift
WARNING: shift/reduce conflict for floor in state 613 resolved as shift
WARNING: shift/reduce conflict for isset in state 613 resolved as shift
WARNING: shift/reduce conflict for list in state 613 resolved as shift
WARNING: shift/reduce conflict for log in state 613 resolved as shift
WARNING: shift/reduce conflict for log10 in state 613 resolved as shift
WARNING: shift/reduce conflict for max in state 613 resolved as shift
WARNING: shift/reduce conflict for min in state 613 resolved as shift
WARNING: shift/reduce conflict for rand in state 613 resolved as shift
WARNING: shift/reduce conflict for round in state 613 resolved as shift
WARNING: shift/reduce conflict for sin in state 613 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 613 resolved as shift
WARNING: shift/reduce conflict for unset in state 613 resolved as shift
WARNING: shift/reduce conflict for eval in state 613 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 613 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 614 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 614 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 614 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 614 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 614 resolved as shift
WARNING: shift/reduce conflict for empty in state 614 resolved as shift
WARNING: shift/reduce conflict for include in state 614 resolved as shift
WARNING: shift/reduce conflict for include_once in state 614 resolved as shift
WARNING: shift/reduce conflict for require in state 614 resolved as shift
WARNING: shift/reduce conflict for require_once in state 614 resolved as shift
WARNING: shift/reduce conflict for namespace in state 614 resolved as shift
WARNING: shift/reduce conflict for int in state 614 resolved as shift
WARNING: shift/reduce conflict for float in state 614 resolved as shift
WARNING: shift/reduce conflict for double in state 614 resolved as shift
WARNING: shift/reduce conflict for global in state 614 resolved as shift
WARNING: shift/reduce conflict for const in state 614 resolved as shift
WARNING: shift/reduce conflict for print in state 614 resolved as shift
WARNING: shift/reduce conflict for echo in state 614 resolved as shift
WARNING: shift/reduce conflict for while in state 614 resolved as shift
WARNING: shift/reduce conflict for do in state 614 resolved as shift
WARNING: shift/reduce conflict for if in state 614 resolved as shift
WARNING: shift/reduce conflict for function in state 614 resolved as shift
WARNING: shift/reduce conflict for ID in state 614 resolved as shift
WARNING: shift/reduce conflict for return in state 614 resolved as shift
WARNING: shift/reduce conflict for class in state 614 resolved as shift
WARNING: shift/reduce conflict for final in state 614 resolved as shift
WARNING: shift/reduce conflict for new in state 614 resolved as shift
WARNING: shift/reduce conflict for interface in state 614 resolved as shift
WARNING: shift/reduce conflict for trait in state 614 resolved as shift
WARNING: shift/reduce conflict for use in state 614 resolved as shift
WARNING: shift/reduce conflict for continue in state 614 resolved as shift
WARNING: shift/reduce conflict for goto in state 614 resolved as shift
WARNING: shift/reduce conflict for declare in state 614 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 614 resolved as shift
WARNING: shift/reduce conflict for for in state 614 resolved as shift
WARNING: shift/reduce conflict for foreach in state 614 resolved as shift
WARNING: shift/reduce conflict for switch in state 614 resolved as shift
WARNING: shift/reduce conflict for try in state 614 resolved as shift
WARNING: shift/reduce conflict for throw in state 614 resolved as shift
WARNING: shift/reduce conflict for exit in state 614 resolved as shift
WARNING: shift/reduce conflict for private in state 614 resolved as shift
WARNING: shift/reduce conflict for protected in state 614 resolved as shift
WARNING: shift/reduce conflict for public in state 614 resolved as shift
WARNING: shift/reduce conflict for var in state 614 resolved as shift
WARNING: shift/reduce conflict for array in state 614 resolved as shift
WARNING: shift/reduce conflict for pow in state 614 resolved as shift
WARNING: shift/reduce conflict for POW in state 614 resolved as shift
WARNING: shift/reduce conflict for abs in state 614 resolved as shift
WARNING: shift/reduce conflict for cos in state 614 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 614 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 614 resolved as shift
WARNING: shift/reduce conflict for die in state 614 resolved as shift
WARNING: shift/reduce conflict for exp in state 614 resolved as shift
WARNING: shift/reduce conflict for floor in state 614 resolved as shift
WARNING: shift/reduce conflict for isset in state 614 resolved as shift
WARNING: shift/reduce conflict for list in state 614 resolved as shift
WARNING: shift/reduce conflict for log in state 614 resolved as shift
WARNING: shift/reduce conflict for log10 in state 614 resolved as shift
WARNING: shift/reduce conflict for max in state 614 resolved as shift
WARNING: shift/reduce conflict for min in state 614 resolved as shift
WARNING: shift/reduce conflict for rand in state 614 resolved as shift
WARNING: shift/reduce conflict for round in state 614 resolved as shift
WARNING: shift/reduce conflict for sin in state 614 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 614 resolved as shift
WARNING: shift/reduce conflict for unset in state 614 resolved as shift
WARNING: shift/reduce conflict for eval in state 614 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 614 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 615 resolved as shift
WARNING: shift/reduce conflict for endforeach in state 615 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 615 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 615 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 615 resolved as shift
WARNING: shift/reduce conflict for empty in state 615 resolved as shift
WARNING: shift/reduce conflict for include in state 615 resolved as shift
WARNING: shift/reduce conflict for include_once in state 615 resolved as shift
WARNING: shift/reduce conflict for require in state 615 resolved as shift
WARNING: shift/reduce conflict for require_once in state 615 resolved as shift
WARNING: shift/reduce conflict for namespace in state 615 resolved as shift
WARNING: shift/reduce conflict for int in state 615 resolved as shift
WARNING: shift/reduce conflict for float in state 615 resolved as shift
WARNING: shift/reduce conflict for double in state 615 resolved as shift
WARNING: shift/reduce conflict for global in state 615 resolved as shift
WARNING: shift/reduce conflict for const in state 615 resolved as shift
WARNING: shift/reduce conflict for print in state 615 resolved as shift
WARNING: shift/reduce conflict for echo in state 615 resolved as shift
WARNING: shift/reduce conflict for while in state 615 resolved as shift
WARNING: shift/reduce conflict for do in state 615 resolved as shift
WARNING: shift/reduce conflict for if in state 615 resolved as shift
WARNING: shift/reduce conflict for function in state 615 resolved as shift
WARNING: shift/reduce conflict for ID in state 615 resolved as shift
WARNING: shift/reduce conflict for return in state 615 resolved as shift
WARNING: shift/reduce conflict for class in state 615 resolved as shift
WARNING: shift/reduce conflict for final in state 615 resolved as shift
WARNING: shift/reduce conflict for new in state 615 resolved as shift
WARNING: shift/reduce conflict for interface in state 615 resolved as shift
WARNING: shift/reduce conflict for trait in state 615 resolved as shift
WARNING: shift/reduce conflict for use in state 615 resolved as shift
WARNING: shift/reduce conflict for continue in state 615 resolved as shift
WARNING: shift/reduce conflict for goto in state 615 resolved as shift
WARNING: shift/reduce conflict for declare in state 615 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 615 resolved as shift
WARNING: shift/reduce conflict for for in state 615 resolved as shift
WARNING: shift/reduce conflict for foreach in state 615 resolved as shift
WARNING: shift/reduce conflict for switch in state 615 resolved as shift
WARNING: shift/reduce conflict for try in state 615 resolved as shift
WARNING: shift/reduce conflict for throw in state 615 resolved as shift
WARNING: shift/reduce conflict for exit in state 615 resolved as shift
WARNING: shift/reduce conflict for private in state 615 resolved as shift
WARNING: shift/reduce conflict for protected in state 615 resolved as shift
WARNING: shift/reduce conflict for public in state 615 resolved as shift
WARNING: shift/reduce conflict for var in state 615 resolved as shift
WARNING: shift/reduce conflict for array in state 615 resolved as shift
WARNING: shift/reduce conflict for pow in state 615 resolved as shift
WARNING: shift/reduce conflict for POW in state 615 resolved as shift
WARNING: shift/reduce conflict for abs in state 615 resolved as shift
WARNING: shift/reduce conflict for cos in state 615 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 615 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 615 resolved as shift
WARNING: shift/reduce conflict for die in state 615 resolved as shift
WARNING: shift/reduce conflict for exp in state 615 resolved as shift
WARNING: shift/reduce conflict for floor in state 615 resolved as shift
WARNING: shift/reduce conflict for isset in state 615 resolved as shift
WARNING: shift/reduce conflict for list in state 615 resolved as shift
WARNING: shift/reduce conflict for log in state 615 resolved as shift
WARNING: shift/reduce conflict for log10 in state 615 resolved as shift
WARNING: shift/reduce conflict for max in state 615 resolved as shift
WARNING: shift/reduce conflict for min in state 615 resolved as shift
WARNING: shift/reduce conflict for rand in state 615 resolved as shift
WARNING: shift/reduce conflict for round in state 615 resolved as shift
WARNING: shift/reduce conflict for sin in state 615 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 615 resolved as shift
WARNING: shift/reduce conflict for unset in state 615 resolved as shift
WARNING: shift/reduce conflict for eval in state 615 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 615 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 617 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 617 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 617 resolved as shift
WARNING: shift/reduce conflict for empty in state 617 resolved as shift
WARNING: shift/reduce conflict for include in state 617 resolved as shift
WARNING: shift/reduce conflict for include_once in state 617 resolved as shift
WARNING: shift/reduce conflict for require in state 617 resolved as shift
WARNING: shift/reduce conflict for require_once in state 617 resolved as shift
WARNING: shift/reduce conflict for namespace in state 617 resolved as shift
WARNING: shift/reduce conflict for int in state 617 resolved as shift
WARNING: shift/reduce conflict for float in state 617 resolved as shift
WARNING: shift/reduce conflict for double in state 617 resolved as shift
WARNING: shift/reduce conflict for global in state 617 resolved as shift
WARNING: shift/reduce conflict for const in state 617 resolved as shift
WARNING: shift/reduce conflict for print in state 617 resolved as shift
WARNING: shift/reduce conflict for echo in state 617 resolved as shift
WARNING: shift/reduce conflict for while in state 617 resolved as shift
WARNING: shift/reduce conflict for do in state 617 resolved as shift
WARNING: shift/reduce conflict for if in state 617 resolved as shift
WARNING: shift/reduce conflict for function in state 617 resolved as shift
WARNING: shift/reduce conflict for ID in state 617 resolved as shift
WARNING: shift/reduce conflict for return in state 617 resolved as shift
WARNING: shift/reduce conflict for class in state 617 resolved as shift
WARNING: shift/reduce conflict for final in state 617 resolved as shift
WARNING: shift/reduce conflict for new in state 617 resolved as shift
WARNING: shift/reduce conflict for interface in state 617 resolved as shift
WARNING: shift/reduce conflict for trait in state 617 resolved as shift
WARNING: shift/reduce conflict for use in state 617 resolved as shift
WARNING: shift/reduce conflict for continue in state 617 resolved as shift
WARNING: shift/reduce conflict for goto in state 617 resolved as shift
WARNING: shift/reduce conflict for declare in state 617 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 617 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 617 resolved as shift
WARNING: shift/reduce conflict for for in state 617 resolved as shift
WARNING: shift/reduce conflict for foreach in state 617 resolved as shift
WARNING: shift/reduce conflict for switch in state 617 resolved as shift
WARNING: shift/reduce conflict for try in state 617 resolved as shift
WARNING: shift/reduce conflict for throw in state 617 resolved as shift
WARNING: shift/reduce conflict for exit in state 617 resolved as shift
WARNING: shift/reduce conflict for private in state 617 resolved as shift
WARNING: shift/reduce conflict for protected in state 617 resolved as shift
WARNING: shift/reduce conflict for public in state 617 resolved as shift
WARNING: shift/reduce conflict for var in state 617 resolved as shift
WARNING: shift/reduce conflict for array in state 617 resolved as shift
WARNING: shift/reduce conflict for pow in state 617 resolved as shift
WARNING: shift/reduce conflict for POW in state 617 resolved as shift
WARNING: shift/reduce conflict for abs in state 617 resolved as shift
WARNING: shift/reduce conflict for cos in state 617 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 617 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 617 resolved as shift
WARNING: shift/reduce conflict for die in state 617 resolved as shift
WARNING: shift/reduce conflict for exp in state 617 resolved as shift
WARNING: shift/reduce conflict for floor in state 617 resolved as shift
WARNING: shift/reduce conflict for isset in state 617 resolved as shift
WARNING: shift/reduce conflict for list in state 617 resolved as shift
WARNING: shift/reduce conflict for log in state 617 resolved as shift
WARNING: shift/reduce conflict for log10 in state 617 resolved as shift
WARNING: shift/reduce conflict for max in state 617 resolved as shift
WARNING: shift/reduce conflict for min in state 617 resolved as shift
WARNING: shift/reduce conflict for rand in state 617 resolved as shift
WARNING: shift/reduce conflict for round in state 617 resolved as shift
WARNING: shift/reduce conflict for sin in state 617 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 617 resolved as shift
WARNING: shift/reduce conflict for unset in state 617 resolved as shift
WARNING: shift/reduce conflict for eval in state 617 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 617 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 618 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 618 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 618 resolved as shift
WARNING: shift/reduce conflict for empty in state 618 resolved as shift
WARNING: shift/reduce conflict for include in state 618 resolved as shift
WARNING: shift/reduce conflict for include_once in state 618 resolved as shift
WARNING: shift/reduce conflict for require in state 618 resolved as shift
WARNING: shift/reduce conflict for require_once in state 618 resolved as shift
WARNING: shift/reduce conflict for namespace in state 618 resolved as shift
WARNING: shift/reduce conflict for int in state 618 resolved as shift
WARNING: shift/reduce conflict for float in state 618 resolved as shift
WARNING: shift/reduce conflict for double in state 618 resolved as shift
WARNING: shift/reduce conflict for global in state 618 resolved as shift
WARNING: shift/reduce conflict for const in state 618 resolved as shift
WARNING: shift/reduce conflict for print in state 618 resolved as shift
WARNING: shift/reduce conflict for echo in state 618 resolved as shift
WARNING: shift/reduce conflict for while in state 618 resolved as shift
WARNING: shift/reduce conflict for do in state 618 resolved as shift
WARNING: shift/reduce conflict for if in state 618 resolved as shift
WARNING: shift/reduce conflict for function in state 618 resolved as shift
WARNING: shift/reduce conflict for ID in state 618 resolved as shift
WARNING: shift/reduce conflict for return in state 618 resolved as shift
WARNING: shift/reduce conflict for class in state 618 resolved as shift
WARNING: shift/reduce conflict for final in state 618 resolved as shift
WARNING: shift/reduce conflict for new in state 618 resolved as shift
WARNING: shift/reduce conflict for interface in state 618 resolved as shift
WARNING: shift/reduce conflict for trait in state 618 resolved as shift
WARNING: shift/reduce conflict for use in state 618 resolved as shift
WARNING: shift/reduce conflict for continue in state 618 resolved as shift
WARNING: shift/reduce conflict for goto in state 618 resolved as shift
WARNING: shift/reduce conflict for declare in state 618 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 618 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 618 resolved as shift
WARNING: shift/reduce conflict for for in state 618 resolved as shift
WARNING: shift/reduce conflict for foreach in state 618 resolved as shift
WARNING: shift/reduce conflict for switch in state 618 resolved as shift
WARNING: shift/reduce conflict for try in state 618 resolved as shift
WARNING: shift/reduce conflict for throw in state 618 resolved as shift
WARNING: shift/reduce conflict for exit in state 618 resolved as shift
WARNING: shift/reduce conflict for private in state 618 resolved as shift
WARNING: shift/reduce conflict for protected in state 618 resolved as shift
WARNING: shift/reduce conflict for public in state 618 resolved as shift
WARNING: shift/reduce conflict for var in state 618 resolved as shift
WARNING: shift/reduce conflict for array in state 618 resolved as shift
WARNING: shift/reduce conflict for pow in state 618 resolved as shift
WARNING: shift/reduce conflict for POW in state 618 resolved as shift
WARNING: shift/reduce conflict for abs in state 618 resolved as shift
WARNING: shift/reduce conflict for cos in state 618 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 618 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 618 resolved as shift
WARNING: shift/reduce conflict for die in state 618 resolved as shift
WARNING: shift/reduce conflict for exp in state 618 resolved as shift
WARNING: shift/reduce conflict for floor in state 618 resolved as shift
WARNING: shift/reduce conflict for isset in state 618 resolved as shift
WARNING: shift/reduce conflict for list in state 618 resolved as shift
WARNING: shift/reduce conflict for log in state 618 resolved as shift
WARNING: shift/reduce conflict for log10 in state 618 resolved as shift
WARNING: shift/reduce conflict for max in state 618 resolved as shift
WARNING: shift/reduce conflict for min in state 618 resolved as shift
WARNING: shift/reduce conflict for rand in state 618 resolved as shift
WARNING: shift/reduce conflict for round in state 618 resolved as shift
WARNING: shift/reduce conflict for sin in state 618 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 618 resolved as shift
WARNING: shift/reduce conflict for unset in state 618 resolved as shift
WARNING: shift/reduce conflict for eval in state 618 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 618 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 633 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 633 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 633 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 633 resolved as shift
WARNING: shift/reduce conflict for empty in state 633 resolved as shift
WARNING: shift/reduce conflict for include in state 633 resolved as shift
WARNING: shift/reduce conflict for include_once in state 633 resolved as shift
WARNING: shift/reduce conflict for require in state 633 resolved as shift
WARNING: shift/reduce conflict for require_once in state 633 resolved as shift
WARNING: shift/reduce conflict for namespace in state 633 resolved as shift
WARNING: shift/reduce conflict for int in state 633 resolved as shift
WARNING: shift/reduce conflict for float in state 633 resolved as shift
WARNING: shift/reduce conflict for double in state 633 resolved as shift
WARNING: shift/reduce conflict for global in state 633 resolved as shift
WARNING: shift/reduce conflict for const in state 633 resolved as shift
WARNING: shift/reduce conflict for print in state 633 resolved as shift
WARNING: shift/reduce conflict for echo in state 633 resolved as shift
WARNING: shift/reduce conflict for while in state 633 resolved as shift
WARNING: shift/reduce conflict for do in state 633 resolved as shift
WARNING: shift/reduce conflict for if in state 633 resolved as shift
WARNING: shift/reduce conflict for function in state 633 resolved as shift
WARNING: shift/reduce conflict for ID in state 633 resolved as shift
WARNING: shift/reduce conflict for return in state 633 resolved as shift
WARNING: shift/reduce conflict for class in state 633 resolved as shift
WARNING: shift/reduce conflict for final in state 633 resolved as shift
WARNING: shift/reduce conflict for new in state 633 resolved as shift
WARNING: shift/reduce conflict for interface in state 633 resolved as shift
WARNING: shift/reduce conflict for trait in state 633 resolved as shift
WARNING: shift/reduce conflict for use in state 633 resolved as shift
WARNING: shift/reduce conflict for continue in state 633 resolved as shift
WARNING: shift/reduce conflict for goto in state 633 resolved as shift
WARNING: shift/reduce conflict for declare in state 633 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 633 resolved as shift
WARNING: shift/reduce conflict for for in state 633 resolved as shift
WARNING: shift/reduce conflict for foreach in state 633 resolved as shift
WARNING: shift/reduce conflict for switch in state 633 resolved as shift
WARNING: shift/reduce conflict for try in state 633 resolved as shift
WARNING: shift/reduce conflict for throw in state 633 resolved as shift
WARNING: shift/reduce conflict for exit in state 633 resolved as shift
WARNING: shift/reduce conflict for private in state 633 resolved as shift
WARNING: shift/reduce conflict for protected in state 633 resolved as shift
WARNING: shift/reduce conflict for public in state 633 resolved as shift
WARNING: shift/reduce conflict for var in state 633 resolved as shift
WARNING: shift/reduce conflict for array in state 633 resolved as shift
WARNING: shift/reduce conflict for pow in state 633 resolved as shift
WARNING: shift/reduce conflict for POW in state 633 resolved as shift
WARNING: shift/reduce conflict for abs in state 633 resolved as shift
WARNING: shift/reduce conflict for cos in state 633 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 633 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 633 resolved as shift
WARNING: shift/reduce conflict for die in state 633 resolved as shift
WARNING: shift/reduce conflict for exp in state 633 resolved as shift
WARNING: shift/reduce conflict for floor in state 633 resolved as shift
WARNING: shift/reduce conflict for isset in state 633 resolved as shift
WARNING: shift/reduce conflict for list in state 633 resolved as shift
WARNING: shift/reduce conflict for log in state 633 resolved as shift
WARNING: shift/reduce conflict for log10 in state 633 resolved as shift
WARNING: shift/reduce conflict for max in state 633 resolved as shift
WARNING: shift/reduce conflict for min in state 633 resolved as shift
WARNING: shift/reduce conflict for rand in state 633 resolved as shift
WARNING: shift/reduce conflict for round in state 633 resolved as shift
WARNING: shift/reduce conflict for sin in state 633 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 633 resolved as shift
WARNING: shift/reduce conflict for unset in state 633 resolved as shift
WARNING: shift/reduce conflict for eval in state 633 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 633 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 635 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 635 resolved as shift
WARNING: shift/reduce conflict for return in state 635 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 635 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 635 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 635 resolved as shift
WARNING: shift/reduce conflict for empty in state 635 resolved as shift
WARNING: shift/reduce conflict for include in state 635 resolved as shift
WARNING: shift/reduce conflict for include_once in state 635 resolved as shift
WARNING: shift/reduce conflict for require in state 635 resolved as shift
WARNING: shift/reduce conflict for require_once in state 635 resolved as shift
WARNING: shift/reduce conflict for namespace in state 635 resolved as shift
WARNING: shift/reduce conflict for int in state 635 resolved as shift
WARNING: shift/reduce conflict for float in state 635 resolved as shift
WARNING: shift/reduce conflict for double in state 635 resolved as shift
WARNING: shift/reduce conflict for global in state 635 resolved as shift
WARNING: shift/reduce conflict for const in state 635 resolved as shift
WARNING: shift/reduce conflict for print in state 635 resolved as shift
WARNING: shift/reduce conflict for echo in state 635 resolved as shift
WARNING: shift/reduce conflict for while in state 635 resolved as shift
WARNING: shift/reduce conflict for do in state 635 resolved as shift
WARNING: shift/reduce conflict for if in state 635 resolved as shift
WARNING: shift/reduce conflict for function in state 635 resolved as shift
WARNING: shift/reduce conflict for ID in state 635 resolved as shift
WARNING: shift/reduce conflict for class in state 635 resolved as shift
WARNING: shift/reduce conflict for final in state 635 resolved as shift
WARNING: shift/reduce conflict for new in state 635 resolved as shift
WARNING: shift/reduce conflict for interface in state 635 resolved as shift
WARNING: shift/reduce conflict for trait in state 635 resolved as shift
WARNING: shift/reduce conflict for use in state 635 resolved as shift
WARNING: shift/reduce conflict for continue in state 635 resolved as shift
WARNING: shift/reduce conflict for goto in state 635 resolved as shift
WARNING: shift/reduce conflict for declare in state 635 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 635 resolved as shift
WARNING: shift/reduce conflict for for in state 635 resolved as shift
WARNING: shift/reduce conflict for foreach in state 635 resolved as shift
WARNING: shift/reduce conflict for switch in state 635 resolved as shift
WARNING: shift/reduce conflict for try in state 635 resolved as shift
WARNING: shift/reduce conflict for throw in state 635 resolved as shift
WARNING: shift/reduce conflict for exit in state 635 resolved as shift
WARNING: shift/reduce conflict for private in state 635 resolved as shift
WARNING: shift/reduce conflict for protected in state 635 resolved as shift
WARNING: shift/reduce conflict for public in state 635 resolved as shift
WARNING: shift/reduce conflict for var in state 635 resolved as shift
WARNING: shift/reduce conflict for array in state 635 resolved as shift
WARNING: shift/reduce conflict for pow in state 635 resolved as shift
WARNING: shift/reduce conflict for POW in state 635 resolved as shift
WARNING: shift/reduce conflict for abs in state 635 resolved as shift
WARNING: shift/reduce conflict for cos in state 635 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 635 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 635 resolved as shift
WARNING: shift/reduce conflict for die in state 635 resolved as shift
WARNING: shift/reduce conflict for exp in state 635 resolved as shift
WARNING: shift/reduce conflict for floor in state 635 resolved as shift
WARNING: shift/reduce conflict for isset in state 635 resolved as shift
WARNING: shift/reduce conflict for list in state 635 resolved as shift
WARNING: shift/reduce conflict for log in state 635 resolved as shift
WARNING: shift/reduce conflict for log10 in state 635 resolved as shift
WARNING: shift/reduce conflict for max in state 635 resolved as shift
WARNING: shift/reduce conflict for min in state 635 resolved as shift
WARNING: shift/reduce conflict for rand in state 635 resolved as shift
WARNING: shift/reduce conflict for round in state 635 resolved as shift
WARNING: shift/reduce conflict for sin in state 635 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 635 resolved as shift
WARNING: shift/reduce conflict for unset in state 635 resolved as shift
WARNING: shift/reduce conflict for eval in state 635 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 635 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 642 resolved as shift
WARNING: shift/reduce conflict for break in state 642 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 642 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 642 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 642 resolved as shift
WARNING: shift/reduce conflict for empty in state 642 resolved as shift
WARNING: shift/reduce conflict for include in state 642 resolved as shift
WARNING: shift/reduce conflict for include_once in state 642 resolved as shift
WARNING: shift/reduce conflict for require in state 642 resolved as shift
WARNING: shift/reduce conflict for require_once in state 642 resolved as shift
WARNING: shift/reduce conflict for namespace in state 642 resolved as shift
WARNING: shift/reduce conflict for int in state 642 resolved as shift
WARNING: shift/reduce conflict for float in state 642 resolved as shift
WARNING: shift/reduce conflict for double in state 642 resolved as shift
WARNING: shift/reduce conflict for global in state 642 resolved as shift
WARNING: shift/reduce conflict for const in state 642 resolved as shift
WARNING: shift/reduce conflict for print in state 642 resolved as shift
WARNING: shift/reduce conflict for echo in state 642 resolved as shift
WARNING: shift/reduce conflict for while in state 642 resolved as shift
WARNING: shift/reduce conflict for do in state 642 resolved as shift
WARNING: shift/reduce conflict for if in state 642 resolved as shift
WARNING: shift/reduce conflict for function in state 642 resolved as shift
WARNING: shift/reduce conflict for ID in state 642 resolved as shift
WARNING: shift/reduce conflict for return in state 642 resolved as shift
WARNING: shift/reduce conflict for class in state 642 resolved as shift
WARNING: shift/reduce conflict for final in state 642 resolved as shift
WARNING: shift/reduce conflict for new in state 642 resolved as shift
WARNING: shift/reduce conflict for interface in state 642 resolved as shift
WARNING: shift/reduce conflict for trait in state 642 resolved as shift
WARNING: shift/reduce conflict for use in state 642 resolved as shift
WARNING: shift/reduce conflict for continue in state 642 resolved as shift
WARNING: shift/reduce conflict for goto in state 642 resolved as shift
WARNING: shift/reduce conflict for declare in state 642 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 642 resolved as shift
WARNING: shift/reduce conflict for for in state 642 resolved as shift
WARNING: shift/reduce conflict for foreach in state 642 resolved as shift
WARNING: shift/reduce conflict for switch in state 642 resolved as shift
WARNING: shift/reduce conflict for try in state 642 resolved as shift
WARNING: shift/reduce conflict for throw in state 642 resolved as shift
WARNING: shift/reduce conflict for exit in state 642 resolved as shift
WARNING: shift/reduce conflict for private in state 642 resolved as shift
WARNING: shift/reduce conflict for protected in state 642 resolved as shift
WARNING: shift/reduce conflict for public in state 642 resolved as shift
WARNING: shift/reduce conflict for var in state 642 resolved as shift
WARNING: shift/reduce conflict for array in state 642 resolved as shift
WARNING: shift/reduce conflict for pow in state 642 resolved as shift
WARNING: shift/reduce conflict for POW in state 642 resolved as shift
WARNING: shift/reduce conflict for abs in state 642 resolved as shift
WARNING: shift/reduce conflict for cos in state 642 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 642 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 642 resolved as shift
WARNING: shift/reduce conflict for die in state 642 resolved as shift
WARNING: shift/reduce conflict for exp in state 642 resolved as shift
WARNING: shift/reduce conflict for floor in state 642 resolved as shift
WARNING: shift/reduce conflict for isset in state 642 resolved as shift
WARNING: shift/reduce conflict for list in state 642 resolved as shift
WARNING: shift/reduce conflict for log in state 642 resolved as shift
WARNING: shift/reduce conflict for log10 in state 642 resolved as shift
WARNING: shift/reduce conflict for max in state 642 resolved as shift
WARNING: shift/reduce conflict for min in state 642 resolved as shift
WARNING: shift/reduce conflict for rand in state 642 resolved as shift
WARNING: shift/reduce conflict for round in state 642 resolved as shift
WARNING: shift/reduce conflict for sin in state 642 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 642 resolved as shift
WARNING: shift/reduce conflict for unset in state 642 resolved as shift
WARNING: shift/reduce conflict for eval in state 642 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 642 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 643 resolved as shift
WARNING: shift/reduce conflict for break in state 643 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 643 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 643 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 643 resolved as shift
WARNING: shift/reduce conflict for empty in state 643 resolved as shift
WARNING: shift/reduce conflict for include in state 643 resolved as shift
WARNING: shift/reduce conflict for include_once in state 643 resolved as shift
WARNING: shift/reduce conflict for require in state 643 resolved as shift
WARNING: shift/reduce conflict for require_once in state 643 resolved as shift
WARNING: shift/reduce conflict for namespace in state 643 resolved as shift
WARNING: shift/reduce conflict for int in state 643 resolved as shift
WARNING: shift/reduce conflict for float in state 643 resolved as shift
WARNING: shift/reduce conflict for double in state 643 resolved as shift
WARNING: shift/reduce conflict for global in state 643 resolved as shift
WARNING: shift/reduce conflict for const in state 643 resolved as shift
WARNING: shift/reduce conflict for print in state 643 resolved as shift
WARNING: shift/reduce conflict for echo in state 643 resolved as shift
WARNING: shift/reduce conflict for while in state 643 resolved as shift
WARNING: shift/reduce conflict for do in state 643 resolved as shift
WARNING: shift/reduce conflict for if in state 643 resolved as shift
WARNING: shift/reduce conflict for function in state 643 resolved as shift
WARNING: shift/reduce conflict for ID in state 643 resolved as shift
WARNING: shift/reduce conflict for return in state 643 resolved as shift
WARNING: shift/reduce conflict for class in state 643 resolved as shift
WARNING: shift/reduce conflict for final in state 643 resolved as shift
WARNING: shift/reduce conflict for new in state 643 resolved as shift
WARNING: shift/reduce conflict for interface in state 643 resolved as shift
WARNING: shift/reduce conflict for trait in state 643 resolved as shift
WARNING: shift/reduce conflict for use in state 643 resolved as shift
WARNING: shift/reduce conflict for continue in state 643 resolved as shift
WARNING: shift/reduce conflict for goto in state 643 resolved as shift
WARNING: shift/reduce conflict for declare in state 643 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 643 resolved as shift
WARNING: shift/reduce conflict for for in state 643 resolved as shift
WARNING: shift/reduce conflict for foreach in state 643 resolved as shift
WARNING: shift/reduce conflict for switch in state 643 resolved as shift
WARNING: shift/reduce conflict for try in state 643 resolved as shift
WARNING: shift/reduce conflict for throw in state 643 resolved as shift
WARNING: shift/reduce conflict for exit in state 643 resolved as shift
WARNING: shift/reduce conflict for private in state 643 resolved as shift
WARNING: shift/reduce conflict for protected in state 643 resolved as shift
WARNING: shift/reduce conflict for public in state 643 resolved as shift
WARNING: shift/reduce conflict for var in state 643 resolved as shift
WARNING: shift/reduce conflict for array in state 643 resolved as shift
WARNING: shift/reduce conflict for pow in state 643 resolved as shift
WARNING: shift/reduce conflict for POW in state 643 resolved as shift
WARNING: shift/reduce conflict for abs in state 643 resolved as shift
WARNING: shift/reduce conflict for cos in state 643 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 643 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 643 resolved as shift
WARNING: shift/reduce conflict for die in state 643 resolved as shift
WARNING: shift/reduce conflict for exp in state 643 resolved as shift
WARNING: shift/reduce conflict for floor in state 643 resolved as shift
WARNING: shift/reduce conflict for isset in state 643 resolved as shift
WARNING: shift/reduce conflict for list in state 643 resolved as shift
WARNING: shift/reduce conflict for log in state 643 resolved as shift
WARNING: shift/reduce conflict for log10 in state 643 resolved as shift
WARNING: shift/reduce conflict for max in state 643 resolved as shift
WARNING: shift/reduce conflict for min in state 643 resolved as shift
WARNING: shift/reduce conflict for rand in state 643 resolved as shift
WARNING: shift/reduce conflict for round in state 643 resolved as shift
WARNING: shift/reduce conflict for sin in state 643 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 643 resolved as shift
WARNING: shift/reduce conflict for unset in state 643 resolved as shift
WARNING: shift/reduce conflict for eval in state 643 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 643 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 645 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 645 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 645 resolved as shift
WARNING: shift/reduce conflict for empty in state 645 resolved as shift
WARNING: shift/reduce conflict for include in state 645 resolved as shift
WARNING: shift/reduce conflict for include_once in state 645 resolved as shift
WARNING: shift/reduce conflict for require in state 645 resolved as shift
WARNING: shift/reduce conflict for require_once in state 645 resolved as shift
WARNING: shift/reduce conflict for namespace in state 645 resolved as shift
WARNING: shift/reduce conflict for int in state 645 resolved as shift
WARNING: shift/reduce conflict for float in state 645 resolved as shift
WARNING: shift/reduce conflict for double in state 645 resolved as shift
WARNING: shift/reduce conflict for global in state 645 resolved as shift
WARNING: shift/reduce conflict for const in state 645 resolved as shift
WARNING: shift/reduce conflict for print in state 645 resolved as shift
WARNING: shift/reduce conflict for echo in state 645 resolved as shift
WARNING: shift/reduce conflict for while in state 645 resolved as shift
WARNING: shift/reduce conflict for do in state 645 resolved as shift
WARNING: shift/reduce conflict for if in state 645 resolved as shift
WARNING: shift/reduce conflict for function in state 645 resolved as shift
WARNING: shift/reduce conflict for ID in state 645 resolved as shift
WARNING: shift/reduce conflict for return in state 645 resolved as shift
WARNING: shift/reduce conflict for class in state 645 resolved as shift
WARNING: shift/reduce conflict for final in state 645 resolved as shift
WARNING: shift/reduce conflict for new in state 645 resolved as shift
WARNING: shift/reduce conflict for interface in state 645 resolved as shift
WARNING: shift/reduce conflict for trait in state 645 resolved as shift
WARNING: shift/reduce conflict for use in state 645 resolved as shift
WARNING: shift/reduce conflict for continue in state 645 resolved as shift
WARNING: shift/reduce conflict for goto in state 645 resolved as shift
WARNING: shift/reduce conflict for declare in state 645 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 645 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 645 resolved as shift
WARNING: shift/reduce conflict for for in state 645 resolved as shift
WARNING: shift/reduce conflict for foreach in state 645 resolved as shift
WARNING: shift/reduce conflict for switch in state 645 resolved as shift
WARNING: shift/reduce conflict for try in state 645 resolved as shift
WARNING: shift/reduce conflict for throw in state 645 resolved as shift
WARNING: shift/reduce conflict for exit in state 645 resolved as shift
WARNING: shift/reduce conflict for private in state 645 resolved as shift
WARNING: shift/reduce conflict for protected in state 645 resolved as shift
WARNING: shift/reduce conflict for public in state 645 resolved as shift
WARNING: shift/reduce conflict for var in state 645 resolved as shift
WARNING: shift/reduce conflict for array in state 645 resolved as shift
WARNING: shift/reduce conflict for pow in state 645 resolved as shift
WARNING: shift/reduce conflict for POW in state 645 resolved as shift
WARNING: shift/reduce conflict for abs in state 645 resolved as shift
WARNING: shift/reduce conflict for cos in state 645 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 645 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 645 resolved as shift
WARNING: shift/reduce conflict for die in state 645 resolved as shift
WARNING: shift/reduce conflict for exp in state 645 resolved as shift
WARNING: shift/reduce conflict for floor in state 645 resolved as shift
WARNING: shift/reduce conflict for isset in state 645 resolved as shift
WARNING: shift/reduce conflict for list in state 645 resolved as shift
WARNING: shift/reduce conflict for log in state 645 resolved as shift
WARNING: shift/reduce conflict for log10 in state 645 resolved as shift
WARNING: shift/reduce conflict for max in state 645 resolved as shift
WARNING: shift/reduce conflict for min in state 645 resolved as shift
WARNING: shift/reduce conflict for rand in state 645 resolved as shift
WARNING: shift/reduce conflict for round in state 645 resolved as shift
WARNING: shift/reduce conflict for sin in state 645 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 645 resolved as shift
WARNING: shift/reduce conflict for unset in state 645 resolved as shift
WARNING: shift/reduce conflict for eval in state 645 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 645 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 653 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 653 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 653 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 653 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 653 resolved as shift
WARNING: shift/reduce conflict for empty in state 653 resolved as shift
WARNING: shift/reduce conflict for include in state 653 resolved as shift
WARNING: shift/reduce conflict for include_once in state 653 resolved as shift
WARNING: shift/reduce conflict for require in state 653 resolved as shift
WARNING: shift/reduce conflict for require_once in state 653 resolved as shift
WARNING: shift/reduce conflict for namespace in state 653 resolved as shift
WARNING: shift/reduce conflict for int in state 653 resolved as shift
WARNING: shift/reduce conflict for float in state 653 resolved as shift
WARNING: shift/reduce conflict for double in state 653 resolved as shift
WARNING: shift/reduce conflict for global in state 653 resolved as shift
WARNING: shift/reduce conflict for const in state 653 resolved as shift
WARNING: shift/reduce conflict for print in state 653 resolved as shift
WARNING: shift/reduce conflict for echo in state 653 resolved as shift
WARNING: shift/reduce conflict for while in state 653 resolved as shift
WARNING: shift/reduce conflict for do in state 653 resolved as shift
WARNING: shift/reduce conflict for if in state 653 resolved as shift
WARNING: shift/reduce conflict for function in state 653 resolved as shift
WARNING: shift/reduce conflict for ID in state 653 resolved as shift
WARNING: shift/reduce conflict for return in state 653 resolved as shift
WARNING: shift/reduce conflict for class in state 653 resolved as shift
WARNING: shift/reduce conflict for final in state 653 resolved as shift
WARNING: shift/reduce conflict for new in state 653 resolved as shift
WARNING: shift/reduce conflict for interface in state 653 resolved as shift
WARNING: shift/reduce conflict for trait in state 653 resolved as shift
WARNING: shift/reduce conflict for use in state 653 resolved as shift
WARNING: shift/reduce conflict for continue in state 653 resolved as shift
WARNING: shift/reduce conflict for goto in state 653 resolved as shift
WARNING: shift/reduce conflict for declare in state 653 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 653 resolved as shift
WARNING: shift/reduce conflict for for in state 653 resolved as shift
WARNING: shift/reduce conflict for foreach in state 653 resolved as shift
WARNING: shift/reduce conflict for switch in state 653 resolved as shift
WARNING: shift/reduce conflict for try in state 653 resolved as shift
WARNING: shift/reduce conflict for throw in state 653 resolved as shift
WARNING: shift/reduce conflict for exit in state 653 resolved as shift
WARNING: shift/reduce conflict for private in state 653 resolved as shift
WARNING: shift/reduce conflict for protected in state 653 resolved as shift
WARNING: shift/reduce conflict for public in state 653 resolved as shift
WARNING: shift/reduce conflict for var in state 653 resolved as shift
WARNING: shift/reduce conflict for array in state 653 resolved as shift
WARNING: shift/reduce conflict for pow in state 653 resolved as shift
WARNING: shift/reduce conflict for POW in state 653 resolved as shift
WARNING: shift/reduce conflict for abs in state 653 resolved as shift
WARNING: shift/reduce conflict for cos in state 653 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 653 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 653 resolved as shift
WARNING: shift/reduce conflict for die in state 653 resolved as shift
WARNING: shift/reduce conflict for exp in state 653 resolved as shift
WARNING: shift/reduce conflict for floor in state 653 resolved as shift
WARNING: shift/reduce conflict for isset in state 653 resolved as shift
WARNING: shift/reduce conflict for list in state 653 resolved as shift
WARNING: shift/reduce conflict for log in state 653 resolved as shift
WARNING: shift/reduce conflict for log10 in state 653 resolved as shift
WARNING: shift/reduce conflict for max in state 653 resolved as shift
WARNING: shift/reduce conflict for min in state 653 resolved as shift
WARNING: shift/reduce conflict for rand in state 653 resolved as shift
WARNING: shift/reduce conflict for round in state 653 resolved as shift
WARNING: shift/reduce conflict for sin in state 653 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 653 resolved as shift
WARNING: shift/reduce conflict for unset in state 653 resolved as shift
WARNING: shift/reduce conflict for eval in state 653 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 653 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 655 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 662 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 662 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 662 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 662 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 662 resolved as shift
WARNING: shift/reduce conflict for empty in state 662 resolved as shift
WARNING: shift/reduce conflict for include in state 662 resolved as shift
WARNING: shift/reduce conflict for include_once in state 662 resolved as shift
WARNING: shift/reduce conflict for require in state 662 resolved as shift
WARNING: shift/reduce conflict for require_once in state 662 resolved as shift
WARNING: shift/reduce conflict for namespace in state 662 resolved as shift
WARNING: shift/reduce conflict for int in state 662 resolved as shift
WARNING: shift/reduce conflict for float in state 662 resolved as shift
WARNING: shift/reduce conflict for double in state 662 resolved as shift
WARNING: shift/reduce conflict for global in state 662 resolved as shift
WARNING: shift/reduce conflict for const in state 662 resolved as shift
WARNING: shift/reduce conflict for print in state 662 resolved as shift
WARNING: shift/reduce conflict for echo in state 662 resolved as shift
WARNING: shift/reduce conflict for while in state 662 resolved as shift
WARNING: shift/reduce conflict for do in state 662 resolved as shift
WARNING: shift/reduce conflict for if in state 662 resolved as shift
WARNING: shift/reduce conflict for function in state 662 resolved as shift
WARNING: shift/reduce conflict for ID in state 662 resolved as shift
WARNING: shift/reduce conflict for return in state 662 resolved as shift
WARNING: shift/reduce conflict for class in state 662 resolved as shift
WARNING: shift/reduce conflict for final in state 662 resolved as shift
WARNING: shift/reduce conflict for new in state 662 resolved as shift
WARNING: shift/reduce conflict for interface in state 662 resolved as shift
WARNING: shift/reduce conflict for trait in state 662 resolved as shift
WARNING: shift/reduce conflict for use in state 662 resolved as shift
WARNING: shift/reduce conflict for continue in state 662 resolved as shift
WARNING: shift/reduce conflict for goto in state 662 resolved as shift
WARNING: shift/reduce conflict for declare in state 662 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 662 resolved as shift
WARNING: shift/reduce conflict for for in state 662 resolved as shift
WARNING: shift/reduce conflict for foreach in state 662 resolved as shift
WARNING: shift/reduce conflict for switch in state 662 resolved as shift
WARNING: shift/reduce conflict for try in state 662 resolved as shift
WARNING: shift/reduce conflict for throw in state 662 resolved as shift
WARNING: shift/reduce conflict for exit in state 662 resolved as shift
WARNING: shift/reduce conflict for private in state 662 resolved as shift
WARNING: shift/reduce conflict for protected in state 662 resolved as shift
WARNING: shift/reduce conflict for public in state 662 resolved as shift
WARNING: shift/reduce conflict for var in state 662 resolved as shift
WARNING: shift/reduce conflict for array in state 662 resolved as shift
WARNING: shift/reduce conflict for pow in state 662 resolved as shift
WARNING: shift/reduce conflict for POW in state 662 resolved as shift
WARNING: shift/reduce conflict for abs in state 662 resolved as shift
WARNING: shift/reduce conflict for cos in state 662 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 662 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 662 resolved as shift
WARNING: shift/reduce conflict for die in state 662 resolved as shift
WARNING: shift/reduce conflict for exp in state 662 resolved as shift
WARNING: shift/reduce conflict for floor in state 662 resolved as shift
WARNING: shift/reduce conflict for isset in state 662 resolved as shift
WARNING: shift/reduce conflict for list in state 662 resolved as shift
WARNING: shift/reduce conflict for log in state 662 resolved as shift
WARNING: shift/reduce conflict for log10 in state 662 resolved as shift
WARNING: shift/reduce conflict for max in state 662 resolved as shift
WARNING: shift/reduce conflict for min in state 662 resolved as shift
WARNING: shift/reduce conflict for rand in state 662 resolved as shift
WARNING: shift/reduce conflict for round in state 662 resolved as shift
WARNING: shift/reduce conflict for sin in state 662 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 662 resolved as shift
WARNING: shift/reduce conflict for unset in state 662 resolved as shift
WARNING: shift/reduce conflict for eval in state 662 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 662 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 670 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 670 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 670 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 670 resolved as shift
WARNING: shift/reduce conflict for empty in state 670 resolved as shift
WARNING: shift/reduce conflict for include in state 670 resolved as shift
WARNING: shift/reduce conflict for include_once in state 670 resolved as shift
WARNING: shift/reduce conflict for require in state 670 resolved as shift
WARNING: shift/reduce conflict for require_once in state 670 resolved as shift
WARNING: shift/reduce conflict for namespace in state 670 resolved as shift
WARNING: shift/reduce conflict for int in state 670 resolved as shift
WARNING: shift/reduce conflict for float in state 670 resolved as shift
WARNING: shift/reduce conflict for double in state 670 resolved as shift
WARNING: shift/reduce conflict for global in state 670 resolved as shift
WARNING: shift/reduce conflict for const in state 670 resolved as shift
WARNING: shift/reduce conflict for print in state 670 resolved as shift
WARNING: shift/reduce conflict for echo in state 670 resolved as shift
WARNING: shift/reduce conflict for while in state 670 resolved as shift
WARNING: shift/reduce conflict for do in state 670 resolved as shift
WARNING: shift/reduce conflict for if in state 670 resolved as shift
WARNING: shift/reduce conflict for function in state 670 resolved as shift
WARNING: shift/reduce conflict for ID in state 670 resolved as shift
WARNING: shift/reduce conflict for return in state 670 resolved as shift
WARNING: shift/reduce conflict for class in state 670 resolved as shift
WARNING: shift/reduce conflict for final in state 670 resolved as shift
WARNING: shift/reduce conflict for new in state 670 resolved as shift
WARNING: shift/reduce conflict for interface in state 670 resolved as shift
WARNING: shift/reduce conflict for trait in state 670 resolved as shift
WARNING: shift/reduce conflict for use in state 670 resolved as shift
WARNING: shift/reduce conflict for continue in state 670 resolved as shift
WARNING: shift/reduce conflict for goto in state 670 resolved as shift
WARNING: shift/reduce conflict for declare in state 670 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 670 resolved as shift
WARNING: shift/reduce conflict for for in state 670 resolved as shift
WARNING: shift/reduce conflict for foreach in state 670 resolved as shift
WARNING: shift/reduce conflict for switch in state 670 resolved as shift
WARNING: shift/reduce conflict for try in state 670 resolved as shift
WARNING: shift/reduce conflict for throw in state 670 resolved as shift
WARNING: shift/reduce conflict for exit in state 670 resolved as shift
WARNING: shift/reduce conflict for private in state 670 resolved as shift
WARNING: shift/reduce conflict for protected in state 670 resolved as shift
WARNING: shift/reduce conflict for public in state 670 resolved as shift
WARNING: shift/reduce conflict for var in state 670 resolved as shift
WARNING: shift/reduce conflict for array in state 670 resolved as shift
WARNING: shift/reduce conflict for pow in state 670 resolved as shift
WARNING: shift/reduce conflict for POW in state 670 resolved as shift
WARNING: shift/reduce conflict for abs in state 670 resolved as shift
WARNING: shift/reduce conflict for cos in state 670 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 670 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 670 resolved as shift
WARNING: shift/reduce conflict for die in state 670 resolved as shift
WARNING: shift/reduce conflict for exp in state 670 resolved as shift
WARNING: shift/reduce conflict for floor in state 670 resolved as shift
WARNING: shift/reduce conflict for isset in state 670 resolved as shift
WARNING: shift/reduce conflict for list in state 670 resolved as shift
WARNING: shift/reduce conflict for log in state 670 resolved as shift
WARNING: shift/reduce conflict for log10 in state 670 resolved as shift
WARNING: shift/reduce conflict for max in state 670 resolved as shift
WARNING: shift/reduce conflict for min in state 670 resolved as shift
WARNING: shift/reduce conflict for rand in state 670 resolved as shift
WARNING: shift/reduce conflict for round in state 670 resolved as shift
WARNING: shift/reduce conflict for sin in state 670 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 670 resolved as shift
WARNING: shift/reduce conflict for unset in state 670 resolved as shift
WARNING: shift/reduce conflict for eval in state 670 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 670 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 671 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 671 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 671 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 671 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 671 resolved as shift
WARNING: shift/reduce conflict for empty in state 671 resolved as shift
WARNING: shift/reduce conflict for include in state 671 resolved as shift
WARNING: shift/reduce conflict for include_once in state 671 resolved as shift
WARNING: shift/reduce conflict for require in state 671 resolved as shift
WARNING: shift/reduce conflict for require_once in state 671 resolved as shift
WARNING: shift/reduce conflict for namespace in state 671 resolved as shift
WARNING: shift/reduce conflict for int in state 671 resolved as shift
WARNING: shift/reduce conflict for float in state 671 resolved as shift
WARNING: shift/reduce conflict for double in state 671 resolved as shift
WARNING: shift/reduce conflict for global in state 671 resolved as shift
WARNING: shift/reduce conflict for const in state 671 resolved as shift
WARNING: shift/reduce conflict for print in state 671 resolved as shift
WARNING: shift/reduce conflict for echo in state 671 resolved as shift
WARNING: shift/reduce conflict for while in state 671 resolved as shift
WARNING: shift/reduce conflict for do in state 671 resolved as shift
WARNING: shift/reduce conflict for if in state 671 resolved as shift
WARNING: shift/reduce conflict for function in state 671 resolved as shift
WARNING: shift/reduce conflict for ID in state 671 resolved as shift
WARNING: shift/reduce conflict for return in state 671 resolved as shift
WARNING: shift/reduce conflict for class in state 671 resolved as shift
WARNING: shift/reduce conflict for final in state 671 resolved as shift
WARNING: shift/reduce conflict for new in state 671 resolved as shift
WARNING: shift/reduce conflict for interface in state 671 resolved as shift
WARNING: shift/reduce conflict for trait in state 671 resolved as shift
WARNING: shift/reduce conflict for use in state 671 resolved as shift
WARNING: shift/reduce conflict for continue in state 671 resolved as shift
WARNING: shift/reduce conflict for goto in state 671 resolved as shift
WARNING: shift/reduce conflict for declare in state 671 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 671 resolved as shift
WARNING: shift/reduce conflict for for in state 671 resolved as shift
WARNING: shift/reduce conflict for foreach in state 671 resolved as shift
WARNING: shift/reduce conflict for switch in state 671 resolved as shift
WARNING: shift/reduce conflict for try in state 671 resolved as shift
WARNING: shift/reduce conflict for throw in state 671 resolved as shift
WARNING: shift/reduce conflict for exit in state 671 resolved as shift
WARNING: shift/reduce conflict for private in state 671 resolved as shift
WARNING: shift/reduce conflict for protected in state 671 resolved as shift
WARNING: shift/reduce conflict for public in state 671 resolved as shift
WARNING: shift/reduce conflict for var in state 671 resolved as shift
WARNING: shift/reduce conflict for array in state 671 resolved as shift
WARNING: shift/reduce conflict for pow in state 671 resolved as shift
WARNING: shift/reduce conflict for POW in state 671 resolved as shift
WARNING: shift/reduce conflict for abs in state 671 resolved as shift
WARNING: shift/reduce conflict for cos in state 671 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 671 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 671 resolved as shift
WARNING: shift/reduce conflict for die in state 671 resolved as shift
WARNING: shift/reduce conflict for exp in state 671 resolved as shift
WARNING: shift/reduce conflict for floor in state 671 resolved as shift
WARNING: shift/reduce conflict for isset in state 671 resolved as shift
WARNING: shift/reduce conflict for list in state 671 resolved as shift
WARNING: shift/reduce conflict for log in state 671 resolved as shift
WARNING: shift/reduce conflict for log10 in state 671 resolved as shift
WARNING: shift/reduce conflict for max in state 671 resolved as shift
WARNING: shift/reduce conflict for min in state 671 resolved as shift
WARNING: shift/reduce conflict for rand in state 671 resolved as shift
WARNING: shift/reduce conflict for round in state 671 resolved as shift
WARNING: shift/reduce conflict for sin in state 671 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 671 resolved as shift
WARNING: shift/reduce conflict for unset in state 671 resolved as shift
WARNING: shift/reduce conflict for eval in state 671 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 671 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> header declaration_list)
WARNING: rejected rule (empty_function -> <empty>) in state 4
WARNING: reduce/reduce conflict in state 166 resolved using rule (var_declaration2 -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 166
WARNING: reduce/reduce conflict in state 169 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (single_param -> NUMBER) in state 169
WARNING: reduce/reduce conflict in state 171 resolved using rule (factor -> bool_type)
WARNING: rejected rule (single_param -> bool_type) in state 171
WARNING: reduce/reduce conflict in state 227 resolved using rule (var_declaration2 -> VARIABLE EQUAL VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 227
WARNING: reduce/reduce conflict in state 230 resolved using rule (var_declaration2 -> VARIABLE EQUAL NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 230
WARNING: reduce/reduce conflict in state 330 resolved using rule (data_type -> empty_function)
WARNING: rejected rule (statement_list -> empty_function) in state 330
WARNING: reduce/reduce conflict in state 394 resolved using rule (data_type -> empty_function)
WARNING: rejected rule (class_body -> empty_function) in state 394
WARNING: reduce/reduce conflict in state 593 resolved using rule (var_declaration2 -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 593
WARNING: reduce/reduce conflict in state 642 resolved using rule (default_block -> default COLON statement_list)
WARNING: rejected rule (empty_function -> <empty>) in state 642
WARNING: reduce/reduce conflict in state 643 resolved using rule (case_block -> case expression COLON statement_list)
WARNING: rejected rule (empty_function -> <empty>) in state 643
WARNING: Rule (statement_list -> empty_function) is never reduced
WARNING: Rule (class_body -> empty_function) is never reduced
