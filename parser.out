Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    HASHTAG
    INVALID_NUMBER_SEQUENCE
    INVALID_VARIABLE
    abstract
    ceil
    clone
    declare
    endclare
    eval
    final
    global
    goto
    implements
    include_once
    instanceof
    insteadof
    match
    namespace
    readonly
    require
    require_once
    static

Grammar

Rule 0     S' -> program
Rule 1     program -> header declaration_list
Rule 2     header -> OPEN_TAG
Rule 3     footer_declaration -> CLOSE_TAG
Rule 4     declaration_list -> declaration
Rule 5     declaration_list -> declaration_list declaration
Rule 6     declaration -> COMMENT
Rule 7     declaration -> COMMENT_HASHTAG
Rule 8     declaration -> COMMENT_MULTI
Rule 9     declaration -> header_declaration
Rule 10    declaration -> var_declaration
Rule 11    declaration -> constant_declaration
Rule 12    declaration -> print_declaration
Rule 13    declaration -> echo_declaration
Rule 14    declaration -> iteration_stmt
Rule 15    declaration -> if_statement
Rule 16    declaration -> fun_declaration
Rule 17    declaration -> fun_call
Rule 18    declaration -> return_statement
Rule 19    declaration -> class_declaration
Rule 20    declaration -> class_extension
Rule 21    declaration -> create_obj_declaration
Rule 22    declaration -> interface_declaration
Rule 23    declaration -> trait_declaration
Rule 24    declaration -> use_declaration
Rule 25    declaration -> continue_declaration
Rule 26    declaration -> footer_declaration
Rule 27    declaration -> for_loop
Rule 28    declaration -> foreach_loop
Rule 29    declaration -> switch_statement
Rule 30    declaration -> try_statement
Rule 31    declaration -> throw_statement
Rule 32    declaration -> exit_statement
Rule 33    declaration -> empty
Rule 34    header_declaration -> include CADENA SEMICOLON
Rule 35    constant_declaration -> const ID EQUAL CADENA SEMICOLON
Rule 36    constant_declaration -> const ID EQUAL NUMBER SEMICOLON
Rule 37    print_declaration -> print var_declaration2 SEMICOLON
Rule 38    print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON
Rule 39    print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON
Rule 40    print_declaration -> print LPAREN CADENA RPAREN SEMICOLON
Rule 41    print_declaration -> print NUMBER SEMICOLON
Rule 42    print_declaration -> print CADENA SEMICOLON
Rule 43    echo_declaration -> echo var_declaration2 SEMICOLON
Rule 44    echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON
Rule 45    echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON
Rule 46    echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON
Rule 47    echo_declaration -> echo NUMBER SEMICOLON
Rule 48    echo_declaration -> echo CADENA SEMICOLON
Rule 49    var_declaration -> var_declaration2 SEMICOLON
Rule 50    var_declaration2 -> VARIABLE
Rule 51    var_declaration2 -> VARIABLE expression
Rule 52    var_declaration2 -> VARIABLE EQUAL NUMBER
Rule 53    var_declaration2 -> VARIABLE EQUAL VARIABLE
Rule 54    var_declaration2 -> VARIABLE EQUAL CADENA
Rule 55    var_declaration2 -> VARIABLE EQUAL Built_In_Declaration
Rule 56    var_declaration2 -> VARIABLE EQUAL expression
Rule 57    var_declaration2 -> VARIABLE assignation VARIABLE
Rule 58    var_declaration2 -> VARIABLE assignation NUMBER
Rule 59    var_declaration2 -> Built_In_Declaration
Rule 60    var_declaration2 -> Concatenar_Cadenas_declaration
Rule 61    var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN
Rule 62    var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
Rule 63    var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression
Rule 64    var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
Rule 65    var_declaration2 -> VARIABLE EQUAL create_obj_declaration
Rule 66    var_declaration2 -> VARIABLE assignment_tail
Rule 67    var_declaration2 -> VARIABLE EQUAL assignment_tail
Rule 68    assignment_tail -> COMMA var_declaration2
Rule 69    assignment_tail -> LBRACKET params RBRACKET
Rule 70    assignment_tail -> LBLOCK params RBLOCK
Rule 71    assignment_tail -> VARIABLE LBRACKET expression COMMA params
Rule 72    assignment_tail -> VARIABLE LBRACKET params RBRACKET
Rule 73    assignment_tail -> VARIABLE LBLOCK params RBLOCK
Rule 74    iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
Rule 75    iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
Rule 76    iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
Rule 77    iteration_stmt -> do COLON declaration_list endwhile SEMICOLON
Rule 78    expression -> additive_expression
Rule 79    expression -> additive_expression logical_op additive_expression
Rule 80    expression -> additive_expression comp_op additive_expression
Rule 81    expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
Rule 82    expression -> additive_expression bits_op additive_expression
Rule 83    additive_expression -> term
Rule 84    additive_expression -> term math_op term
Rule 85    term -> MINUS term
Rule 86    term -> factor
Rule 87    term -> factor increment_decrement_op
Rule 88    term -> increment_decrement_op factor
Rule 89    factor -> NUMBER
Rule 90    factor -> VARIABLE
Rule 91    factor -> LPAREN expression RPAREN
Rule 92    increment_decrement_op -> PLUSPLUS
Rule 93    increment_decrement_op -> MINUSMINUS
Rule 94    math_op -> PLUS
Rule 95    math_op -> MINUS
Rule 96    math_op -> TIMES
Rule 97    math_op -> DIVIDE
Rule 98    math_op -> MULEQUAL
Rule 99    math_op -> PLUSEQUAL
Rule 100   math_op -> MINUSEQUAL
Rule 101   math_op -> MOD
Rule 102   comp_op -> LESS
Rule 103   comp_op -> LESSEQUAL
Rule 104   comp_op -> GREATER
Rule 105   comp_op -> GREATEREQUAL
Rule 106   comp_op -> DEQUAL
Rule 107   comp_op -> DISTINT
Rule 108   comp_op -> DIVEQUAL
Rule 109   comp_op -> ISEQUAL
Rule 110   comp_op -> ISIDENTICAL
Rule 111   comp_op -> ISNOTIDENTICAL
Rule 112   logical_op -> BOOL_OR
Rule 113   logical_op -> BOOL_AND
Rule 114   logical_op -> NOT
Rule 115   logical_op -> or
Rule 116   logical_op -> and
Rule 117   logical_op -> xor
Rule 118   if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 119   else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
Rule 120   else_part -> else LBLOCK declaration_list RBLOCK
Rule 121   else_part -> endif
Rule 122   else_part -> empty_function
Rule 123   fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
Rule 124   fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
Rule 125   fun_call -> ID LPAREN params RPAREN
Rule 126   return_statement -> return expression SEMICOLON
Rule 127   return_statement -> return params SEMICOLON
Rule 128   return_statement -> return SEMICOLON
Rule 129   return_statement -> return ID LPAREN expression RPAREN SEMICOLON
Rule 130   class_declaration -> class ID LBLOCK class_body RBLOCK
Rule 131   class_extension -> class ID extends ID LBLOCK RBLOCK
Rule 132   class_extension -> class ID extends Exception LBLOCK RBLOCK
Rule 133   class_extension -> class ID extends ErrorException LBLOCK RBLOCK
Rule 134   class_extension -> class ID extends Error LBLOCK RBLOCK
Rule 135   class_extension -> class ID extends ParseError LBLOCK RBLOCK
Rule 136   class_extension -> class ID extends TypeError LBLOCK RBLOCK
Rule 137   create_obj_declaration -> new ID LPAREN params RPAREN
Rule 138   class_body -> class_body_element
Rule 139   class_body -> class_body class_body_element
Rule 140   class_body -> empty_function
Rule 141   class_body_element -> visibility var_declaration2 SEMICOLON
Rule 142   class_body_element -> visibility fun_declaration
Rule 143   class_body_element -> declaration
Rule 144   interface_declaration -> interface ID LBLOCK interface_body RBLOCK
Rule 145   interface_body -> interface_method_declaration
Rule 146   interface_body -> interface_body interface_method_declaration
Rule 147   interface_body -> empty_function
Rule 148   interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON
Rule 149   trait_declaration -> trait ID LBLOCK trait_body RBLOCK
Rule 150   trait_body -> trait_element
Rule 151   trait_body -> trait_body trait_element
Rule 152   trait_body -> empty_function
Rule 153   trait_element -> visibility var_declaration SEMICOLON
Rule 154   trait_element -> visibility fun_declaration
Rule 155   use_declaration -> use ID SEMICOLON
Rule 156   visibility -> private
Rule 157   visibility -> protected
Rule 158   visibility -> public
Rule 159   visibility -> var
Rule 160   continue_declaration -> continue SEMICOLON
Rule 161   callable_declaration -> callable VARIABLE
Rule 162   params -> single_param
Rule 163   params -> params COMMA single_param
Rule 164   single_param -> var_declaration2
Rule 165   single_param -> NUMBER
Rule 166   single_param -> CADENA
Rule 167   single_param -> callable_declaration
Rule 168   single_param -> empty_function
Rule 169   for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
Rule 170   for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
Rule 171   for_init -> var_declaration2 SEMICOLON
Rule 172   for_expr -> expression SEMICOLON
Rule 173   for_update -> expression
Rule 174   exit_statement -> exit LPAREN expression RPAREN SEMICOLON
Rule 175   foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
Rule 176   foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
Rule 177   switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
Rule 178   switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
Rule 179   case_blocks -> case_blocks case_block
Rule 180   case_blocks -> case_block
Rule 181   case_blocks -> empty_function
Rule 182   case_block -> case expression COLON statement_list
Rule 183   case_block -> case expression COLON statement_list break SEMICOLON
Rule 184   default_block -> default COLON statement_list
Rule 185   default_block -> default COLON statement_list break SEMICOLON
Rule 186   default_block -> empty_function
Rule 187   try_statement -> try LBLOCK statement_list RBLOCK catch_blocks
Rule 188   catch_blocks -> catch_blocks catch_block
Rule 189   catch_blocks -> catch_block
Rule 190   catch_blocks -> catch_blocks finally_block
Rule 191   catch_blocks -> finally_block
Rule 192   catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK
Rule 193   list_exception -> list_exception PIPE exception_statement
Rule 194   list_exception -> exception_statement
Rule 195   exception_statement -> Exception VARIABLE
Rule 196   exception_statement -> ID VARIABLE
Rule 197   throw_statement -> throw create_obj_declaration SEMICOLON
Rule 198   throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON
Rule 199   finally_block -> finally LBLOCK statement_list RBLOCK
Rule 200   statement_list -> declaration
Rule 201   statement_list -> statement_list declaration
Rule 202   statement_list -> empty_function
Rule 203   Built_In_Declaration -> array LPAREN params RPAREN
Rule 204   Built_In_Declaration -> pow LPAREN params RPAREN
Rule 205   Built_In_Declaration -> POW LPAREN params RPAREN
Rule 206   Built_In_Declaration -> abs LPAREN params RPAREN
Rule 207   Built_In_Declaration -> cos LPAREN params RPAREN
Rule 208   Built_In_Declaration -> deg2rad LPAREN params RPAREN
Rule 209   Built_In_Declaration -> rad2deg LPAREN params RPAREN
Rule 210   Built_In_Declaration -> die LPAREN params RPAREN
Rule 211   Built_In_Declaration -> exp LPAREN params RPAREN
Rule 212   Built_In_Declaration -> floor LPAREN params RPAREN
Rule 213   Built_In_Declaration -> isset LPAREN params RPAREN
Rule 214   Built_In_Declaration -> list LPAREN params RPAREN
Rule 215   Built_In_Declaration -> log LPAREN params RPAREN
Rule 216   Built_In_Declaration -> log10 LPAREN params RPAREN
Rule 217   Built_In_Declaration -> max LPAREN params RPAREN
Rule 218   Built_In_Declaration -> min LPAREN params RPAREN
Rule 219   Built_In_Declaration -> rand LPAREN params RPAREN
Rule 220   Built_In_Declaration -> round LPAREN params RPAREN
Rule 221   Built_In_Declaration -> sin LPAREN params RPAREN
Rule 222   Built_In_Declaration -> sqrt LPAREN params RPAREN
Rule 223   Built_In_Declaration -> unset LPAREN params RPAREN
Rule 224   Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE
Rule 225   Concatenar_Cadenas_declaration -> CADENA DOT CADENA
Rule 226   Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE
Rule 227   Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA
Rule 228   bits_op -> AMPERSANT
Rule 229   bits_op -> SR
Rule 230   bits_op -> SL
Rule 231   assignation -> ASSIGN
Rule 232   assignation -> SREQUAL
Rule 233   assignation -> SLEQUAL
Rule 234   assignation -> XOREQUAL
Rule 235   assignation -> ANDEQUAL
Rule 236   empty_function -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 228
ANDEQUAL             : 235
ASSIGN               : 231
BACKSLASH            : 
BOOL_AND             : 113
BOOL_OR              : 112
CADENA               : 34 35 40 42 46 48 54 166 225 225 226 227
CLOSE_TAG            : 3
COLON                : 62 75 77 170 176 178 182 183 184 185
COMMA                : 68 71 163
COMMENT              : 6
COMMENT_HASHTAG      : 7
COMMENT_MULTI        : 8
DEQUAL               : 106
DISTINT              : 107
DIVEQUAL             : 108
DIVIDE               : 97
DOT                  : 224 225 226 227
EQUAL                : 35 36 52 53 54 55 56 61 63 65 67
Error                : 134
ErrorException       : 133
Exception            : 132 195 198
GREATER              : 104
GREATEREQUAL         : 105
HASHTAG              : 
ID                   : 35 36 61 63 64 123 124 125 129 130 131 131 132 133 134 135 136 137 144 148 149 155 196
INVALID_NUMBER_SEQUENCE : 
INVALID_VARIABLE     : 
ISEQUAL              : 109
ISIDENTICAL          : 110
ISNOTIDENTICAL       : 111
LBLOCK               : 70 73 74 76 118 119 120 123 124 130 131 132 133 134 135 136 144 149 169 175 177 187 192 199
LBRACKET             : 69 71 72
LESS                 : 102
LESSEQUAL            : 103
LPAREN               : 38 39 40 44 45 46 61 64 74 75 76 91 118 119 123 124 125 129 137 148 169 170 174 175 176 177 178 192 198 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
MINUS                : 85 95
MINUSEQUAL           : 100
MINUSMINUS           : 93
MOD                  : 101
MULEQUAL             : 98
NOT                  : 114
NUMBER               : 36 39 41 45 47 52 58 89 165
OBJ_OPERATOR         : 63 64
OPEN_TAG             : 2
PIPE                 : 193
PLUS                 : 94
PLUSEQUAL            : 99
PLUSPLUS             : 92
POW                  : 205
ParseError           : 135
QUESTIONMARK         : 62
RBLOCK               : 70 73 74 76 118 119 120 123 124 130 131 132 133 134 135 136 144 149 169 175 177 187 192 199
RBRACKET             : 69 72
RPAREN               : 38 39 40 44 45 46 61 64 74 75 76 91 118 119 123 124 125 129 137 148 169 170 174 175 176 177 178 192 198 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
SEMICOLON            : 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 75 76 77 126 127 128 129 141 148 153 155 160 170 171 172 174 176 178 183 185 197 198
SL                   : 230
SLEQUAL              : 233
SR                   : 229
SREQUAL              : 232
TIMES                : 96
TypeError            : 136
VARIABLE             : 50 51 52 53 53 54 55 56 57 57 58 61 62 63 64 65 66 67 71 72 73 90 161 195 196 224 224 226 227
XOREQUAL             : 234
abs                  : 206
abstract             : 
and                  : 116
array                : 203
as                   : 175 176
break                : 183 185
callable             : 161
case                 : 182 183
catch                : 192
ceil                 : 
class                : 130 131 132 133 134 135 136
clone                : 
const                : 35 36
continue             : 160
cos                  : 207
declare              : 
default              : 184 185
deg2rad              : 208
die                  : 210
do                   : 76 77
echo                 : 43 44 45 46 47 48
else                 : 120
elseif               : 119
empty                : 33
endclare             : 
endfor               : 170
endforeach           : 176
endif                : 121
endswitch            : 178
endwhile             : 75 77
error                : 
eval                 : 
exit                 : 174
exp                  : 211
extends              : 131 132 133 134 135 136
final                : 
finally              : 199
floor                : 212
for                  : 169 170
foreach              : 175 176
function             : 123 124 148
global               : 
goto                 : 
if                   : 118
implements           : 
include              : 34
include_once         : 
instanceof           : 
insteadof            : 
interface            : 144
isset                : 213
list                 : 214
log                  : 215
log10                : 216
match                : 
max                  : 217
min                  : 218
namespace            : 
new                  : 137 198
or                   : 115
pow                  : 204
print                : 37 38 39 40 41 42
private              : 156
protected            : 157
public               : 158
rad2deg              : 209
rand                 : 219
readonly             : 
require              : 
require_once         : 
return               : 126 127 128 129
round                : 220
sin                  : 221
sqrt                 : 222
static               : 
switch               : 177 178
throw                : 197 198
trait                : 149
try                  : 187
unset                : 223
use                  : 155
var                  : 159
while                : 74 75 76
xor                  : 117

Nonterminals, with rules where they appear

Built_In_Declaration : 55 59
Concatenar_Cadenas_declaration : 60
additive_expression  : 78 79 79 80 80 81 81 81 81 82 82
assignation          : 57 58
assignment_tail      : 66 67
bits_op              : 82
callable_declaration : 167
case_block           : 179 180
case_blocks          : 177 178 179
catch_block          : 188 189
catch_blocks         : 187 188 190
class_body           : 130 139
class_body_element   : 138 139
class_declaration    : 19
class_extension      : 20
comp_op              : 80 81 81
constant_declaration : 11
continue_declaration : 25
create_obj_declaration : 21 65 197
declaration          : 4 5 143 200 201
declaration_list     : 1 5 74 75 76 77 118 119 120 123 124 169 170 175 176
default_block        : 177 178
echo_declaration     : 13
else_part            : 118 119
empty_function       : 122 140 147 152 168 181 186 202
exception_statement  : 193 194
exit_statement       : 32
expression           : 51 56 63 71 74 75 76 91 118 119 126 129 172 173 174 175 175 176 176 177 178 182 183
factor               : 86 87 88
finally_block        : 190 191
footer_declaration   : 26
for_expr             : 169 170
for_init             : 169 170
for_loop             : 27
for_update           : 169 170
foreach_loop         : 28
fun_call             : 17
fun_declaration      : 16 142 154
header               : 1
header_declaration   : 9
if_statement         : 15
increment_decrement_op : 87 88
interface_body       : 144 146
interface_declaration : 22
interface_method_declaration : 145 146
iteration_stmt       : 14
list_exception       : 192 193
logical_op           : 79 81
math_op              : 84
params               : 61 64 69 70 71 72 73 123 124 125 127 137 148 163 198 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223
print_declaration    : 12
program              : 0
return_statement     : 18 124
single_param         : 162 163
statement_list       : 182 183 184 185 187 192 199 201
switch_statement     : 29
term                 : 83 84 84 85
throw_statement      : 31
trait_body           : 149 151
trait_declaration    : 23
trait_element        : 150 151
try_statement        : 30
use_declaration      : 24
var_declaration      : 10 153
var_declaration2     : 37 38 43 44 49 62 62 68 141 164 171
visibility           : 141 142 148 153 154

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . header declaration_list
    (2) header -> . OPEN_TAG

    OPEN_TAG        shift and go to state 3

    program                        shift and go to state 1
    header                         shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> header . declaration_list
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 4
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 3

    (2) header -> OPEN_TAG .

    COMMENT         reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_HASHTAG reduce using rule 2 (header -> OPEN_TAG .)
    COMMENT_MULTI   reduce using rule 2 (header -> OPEN_TAG .)
    empty           reduce using rule 2 (header -> OPEN_TAG .)
    include         reduce using rule 2 (header -> OPEN_TAG .)
    const           reduce using rule 2 (header -> OPEN_TAG .)
    print           reduce using rule 2 (header -> OPEN_TAG .)
    echo            reduce using rule 2 (header -> OPEN_TAG .)
    while           reduce using rule 2 (header -> OPEN_TAG .)
    do              reduce using rule 2 (header -> OPEN_TAG .)
    if              reduce using rule 2 (header -> OPEN_TAG .)
    function        reduce using rule 2 (header -> OPEN_TAG .)
    ID              reduce using rule 2 (header -> OPEN_TAG .)
    return          reduce using rule 2 (header -> OPEN_TAG .)
    class           reduce using rule 2 (header -> OPEN_TAG .)
    new             reduce using rule 2 (header -> OPEN_TAG .)
    interface       reduce using rule 2 (header -> OPEN_TAG .)
    trait           reduce using rule 2 (header -> OPEN_TAG .)
    use             reduce using rule 2 (header -> OPEN_TAG .)
    continue        reduce using rule 2 (header -> OPEN_TAG .)
    CLOSE_TAG       reduce using rule 2 (header -> OPEN_TAG .)
    for             reduce using rule 2 (header -> OPEN_TAG .)
    foreach         reduce using rule 2 (header -> OPEN_TAG .)
    switch          reduce using rule 2 (header -> OPEN_TAG .)
    try             reduce using rule 2 (header -> OPEN_TAG .)
    throw           reduce using rule 2 (header -> OPEN_TAG .)
    exit            reduce using rule 2 (header -> OPEN_TAG .)
    VARIABLE        reduce using rule 2 (header -> OPEN_TAG .)
    array           reduce using rule 2 (header -> OPEN_TAG .)
    pow             reduce using rule 2 (header -> OPEN_TAG .)
    POW             reduce using rule 2 (header -> OPEN_TAG .)
    abs             reduce using rule 2 (header -> OPEN_TAG .)
    cos             reduce using rule 2 (header -> OPEN_TAG .)
    deg2rad         reduce using rule 2 (header -> OPEN_TAG .)
    rad2deg         reduce using rule 2 (header -> OPEN_TAG .)
    die             reduce using rule 2 (header -> OPEN_TAG .)
    exp             reduce using rule 2 (header -> OPEN_TAG .)
    floor           reduce using rule 2 (header -> OPEN_TAG .)
    isset           reduce using rule 2 (header -> OPEN_TAG .)
    list            reduce using rule 2 (header -> OPEN_TAG .)
    log             reduce using rule 2 (header -> OPEN_TAG .)
    log10           reduce using rule 2 (header -> OPEN_TAG .)
    max             reduce using rule 2 (header -> OPEN_TAG .)
    min             reduce using rule 2 (header -> OPEN_TAG .)
    rand            reduce using rule 2 (header -> OPEN_TAG .)
    round           reduce using rule 2 (header -> OPEN_TAG .)
    sin             reduce using rule 2 (header -> OPEN_TAG .)
    sqrt            reduce using rule 2 (header -> OPEN_TAG .)
    unset           reduce using rule 2 (header -> OPEN_TAG .)
    CADENA          reduce using rule 2 (header -> OPEN_TAG .)


state 4

    (1) program -> header declaration_list .
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    $end            reduce using rule 1 (program -> header declaration_list .)
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 5

    (4) declaration_list -> declaration .

    COMMENT         reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 4 (declaration_list -> declaration .)
    COMMENT_MULTI   reduce using rule 4 (declaration_list -> declaration .)
    empty           reduce using rule 4 (declaration_list -> declaration .)
    include         reduce using rule 4 (declaration_list -> declaration .)
    const           reduce using rule 4 (declaration_list -> declaration .)
    print           reduce using rule 4 (declaration_list -> declaration .)
    echo            reduce using rule 4 (declaration_list -> declaration .)
    while           reduce using rule 4 (declaration_list -> declaration .)
    do              reduce using rule 4 (declaration_list -> declaration .)
    if              reduce using rule 4 (declaration_list -> declaration .)
    function        reduce using rule 4 (declaration_list -> declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration .)
    return          reduce using rule 4 (declaration_list -> declaration .)
    class           reduce using rule 4 (declaration_list -> declaration .)
    new             reduce using rule 4 (declaration_list -> declaration .)
    interface       reduce using rule 4 (declaration_list -> declaration .)
    trait           reduce using rule 4 (declaration_list -> declaration .)
    use             reduce using rule 4 (declaration_list -> declaration .)
    continue        reduce using rule 4 (declaration_list -> declaration .)
    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration .)
    for             reduce using rule 4 (declaration_list -> declaration .)
    foreach         reduce using rule 4 (declaration_list -> declaration .)
    switch          reduce using rule 4 (declaration_list -> declaration .)
    try             reduce using rule 4 (declaration_list -> declaration .)
    throw           reduce using rule 4 (declaration_list -> declaration .)
    exit            reduce using rule 4 (declaration_list -> declaration .)
    VARIABLE        reduce using rule 4 (declaration_list -> declaration .)
    array           reduce using rule 4 (declaration_list -> declaration .)
    pow             reduce using rule 4 (declaration_list -> declaration .)
    POW             reduce using rule 4 (declaration_list -> declaration .)
    abs             reduce using rule 4 (declaration_list -> declaration .)
    cos             reduce using rule 4 (declaration_list -> declaration .)
    deg2rad         reduce using rule 4 (declaration_list -> declaration .)
    rad2deg         reduce using rule 4 (declaration_list -> declaration .)
    die             reduce using rule 4 (declaration_list -> declaration .)
    exp             reduce using rule 4 (declaration_list -> declaration .)
    floor           reduce using rule 4 (declaration_list -> declaration .)
    isset           reduce using rule 4 (declaration_list -> declaration .)
    list            reduce using rule 4 (declaration_list -> declaration .)
    log             reduce using rule 4 (declaration_list -> declaration .)
    log10           reduce using rule 4 (declaration_list -> declaration .)
    max             reduce using rule 4 (declaration_list -> declaration .)
    min             reduce using rule 4 (declaration_list -> declaration .)
    rand            reduce using rule 4 (declaration_list -> declaration .)
    round           reduce using rule 4 (declaration_list -> declaration .)
    sin             reduce using rule 4 (declaration_list -> declaration .)
    sqrt            reduce using rule 4 (declaration_list -> declaration .)
    unset           reduce using rule 4 (declaration_list -> declaration .)
    CADENA          reduce using rule 4 (declaration_list -> declaration .)
    $end            reduce using rule 4 (declaration_list -> declaration .)
    RBLOCK          reduce using rule 4 (declaration_list -> declaration .)
    endwhile        reduce using rule 4 (declaration_list -> declaration .)
    endfor          reduce using rule 4 (declaration_list -> declaration .)
    endforeach      reduce using rule 4 (declaration_list -> declaration .)


state 6

    (6) declaration -> COMMENT .

    COMMENT         reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_HASHTAG reduce using rule 6 (declaration -> COMMENT .)
    COMMENT_MULTI   reduce using rule 6 (declaration -> COMMENT .)
    empty           reduce using rule 6 (declaration -> COMMENT .)
    include         reduce using rule 6 (declaration -> COMMENT .)
    const           reduce using rule 6 (declaration -> COMMENT .)
    print           reduce using rule 6 (declaration -> COMMENT .)
    echo            reduce using rule 6 (declaration -> COMMENT .)
    while           reduce using rule 6 (declaration -> COMMENT .)
    do              reduce using rule 6 (declaration -> COMMENT .)
    if              reduce using rule 6 (declaration -> COMMENT .)
    function        reduce using rule 6 (declaration -> COMMENT .)
    ID              reduce using rule 6 (declaration -> COMMENT .)
    return          reduce using rule 6 (declaration -> COMMENT .)
    class           reduce using rule 6 (declaration -> COMMENT .)
    new             reduce using rule 6 (declaration -> COMMENT .)
    interface       reduce using rule 6 (declaration -> COMMENT .)
    trait           reduce using rule 6 (declaration -> COMMENT .)
    use             reduce using rule 6 (declaration -> COMMENT .)
    continue        reduce using rule 6 (declaration -> COMMENT .)
    CLOSE_TAG       reduce using rule 6 (declaration -> COMMENT .)
    for             reduce using rule 6 (declaration -> COMMENT .)
    foreach         reduce using rule 6 (declaration -> COMMENT .)
    switch          reduce using rule 6 (declaration -> COMMENT .)
    try             reduce using rule 6 (declaration -> COMMENT .)
    throw           reduce using rule 6 (declaration -> COMMENT .)
    exit            reduce using rule 6 (declaration -> COMMENT .)
    VARIABLE        reduce using rule 6 (declaration -> COMMENT .)
    array           reduce using rule 6 (declaration -> COMMENT .)
    pow             reduce using rule 6 (declaration -> COMMENT .)
    POW             reduce using rule 6 (declaration -> COMMENT .)
    abs             reduce using rule 6 (declaration -> COMMENT .)
    cos             reduce using rule 6 (declaration -> COMMENT .)
    deg2rad         reduce using rule 6 (declaration -> COMMENT .)
    rad2deg         reduce using rule 6 (declaration -> COMMENT .)
    die             reduce using rule 6 (declaration -> COMMENT .)
    exp             reduce using rule 6 (declaration -> COMMENT .)
    floor           reduce using rule 6 (declaration -> COMMENT .)
    isset           reduce using rule 6 (declaration -> COMMENT .)
    list            reduce using rule 6 (declaration -> COMMENT .)
    log             reduce using rule 6 (declaration -> COMMENT .)
    log10           reduce using rule 6 (declaration -> COMMENT .)
    max             reduce using rule 6 (declaration -> COMMENT .)
    min             reduce using rule 6 (declaration -> COMMENT .)
    rand            reduce using rule 6 (declaration -> COMMENT .)
    round           reduce using rule 6 (declaration -> COMMENT .)
    sin             reduce using rule 6 (declaration -> COMMENT .)
    sqrt            reduce using rule 6 (declaration -> COMMENT .)
    unset           reduce using rule 6 (declaration -> COMMENT .)
    CADENA          reduce using rule 6 (declaration -> COMMENT .)
    $end            reduce using rule 6 (declaration -> COMMENT .)
    RBLOCK          reduce using rule 6 (declaration -> COMMENT .)
    endwhile        reduce using rule 6 (declaration -> COMMENT .)
    private         reduce using rule 6 (declaration -> COMMENT .)
    protected       reduce using rule 6 (declaration -> COMMENT .)
    public          reduce using rule 6 (declaration -> COMMENT .)
    var             reduce using rule 6 (declaration -> COMMENT .)
    endfor          reduce using rule 6 (declaration -> COMMENT .)
    endforeach      reduce using rule 6 (declaration -> COMMENT .)
    break           reduce using rule 6 (declaration -> COMMENT .)
    endswitch       reduce using rule 6 (declaration -> COMMENT .)
    default         reduce using rule 6 (declaration -> COMMENT .)
    case            reduce using rule 6 (declaration -> COMMENT .)


state 7

    (7) declaration -> COMMENT_HASHTAG .

    COMMENT         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_HASHTAG reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    COMMENT_MULTI   reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    empty           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    include         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    const           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    print           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    echo            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    while           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    do              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    if              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    function        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    ID              reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    return          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    class           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    new             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    interface       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    trait           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    use             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    continue        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CLOSE_TAG       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    for             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    foreach         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    switch          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    try             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    throw           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exit            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    VARIABLE        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    array           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    pow             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    POW             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    abs             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    cos             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    deg2rad         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    rad2deg         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    die             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    exp             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    floor           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    isset           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    list            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    log             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    log10           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    max             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    min             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    rand            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    round           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    sin             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    sqrt            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    unset           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    CADENA          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    $end            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    RBLOCK          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endwhile        reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    private         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    protected       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    public          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    var             reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endfor          reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endforeach      reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    break           reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    endswitch       reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    default         reduce using rule 7 (declaration -> COMMENT_HASHTAG .)
    case            reduce using rule 7 (declaration -> COMMENT_HASHTAG .)


state 8

    (8) declaration -> COMMENT_MULTI .

    COMMENT         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_HASHTAG reduce using rule 8 (declaration -> COMMENT_MULTI .)
    COMMENT_MULTI   reduce using rule 8 (declaration -> COMMENT_MULTI .)
    empty           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    include         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    const           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    print           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    echo            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    while           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    do              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    if              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    function        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    ID              reduce using rule 8 (declaration -> COMMENT_MULTI .)
    return          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    class           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    new             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    interface       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    trait           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    use             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    continue        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CLOSE_TAG       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    for             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    foreach         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    switch          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    try             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    throw           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exit            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    VARIABLE        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    array           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    pow             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    POW             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    abs             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    cos             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    deg2rad         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    rad2deg         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    die             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    exp             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    floor           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    isset           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    list            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    log             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    log10           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    max             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    min             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    rand            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    round           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    sin             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    sqrt            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    unset           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    CADENA          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    $end            reduce using rule 8 (declaration -> COMMENT_MULTI .)
    RBLOCK          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endwhile        reduce using rule 8 (declaration -> COMMENT_MULTI .)
    private         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    protected       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    public          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    var             reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endfor          reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endforeach      reduce using rule 8 (declaration -> COMMENT_MULTI .)
    break           reduce using rule 8 (declaration -> COMMENT_MULTI .)
    endswitch       reduce using rule 8 (declaration -> COMMENT_MULTI .)
    default         reduce using rule 8 (declaration -> COMMENT_MULTI .)
    case            reduce using rule 8 (declaration -> COMMENT_MULTI .)


state 9

    (9) declaration -> header_declaration .

    COMMENT         reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_HASHTAG reduce using rule 9 (declaration -> header_declaration .)
    COMMENT_MULTI   reduce using rule 9 (declaration -> header_declaration .)
    empty           reduce using rule 9 (declaration -> header_declaration .)
    include         reduce using rule 9 (declaration -> header_declaration .)
    const           reduce using rule 9 (declaration -> header_declaration .)
    print           reduce using rule 9 (declaration -> header_declaration .)
    echo            reduce using rule 9 (declaration -> header_declaration .)
    while           reduce using rule 9 (declaration -> header_declaration .)
    do              reduce using rule 9 (declaration -> header_declaration .)
    if              reduce using rule 9 (declaration -> header_declaration .)
    function        reduce using rule 9 (declaration -> header_declaration .)
    ID              reduce using rule 9 (declaration -> header_declaration .)
    return          reduce using rule 9 (declaration -> header_declaration .)
    class           reduce using rule 9 (declaration -> header_declaration .)
    new             reduce using rule 9 (declaration -> header_declaration .)
    interface       reduce using rule 9 (declaration -> header_declaration .)
    trait           reduce using rule 9 (declaration -> header_declaration .)
    use             reduce using rule 9 (declaration -> header_declaration .)
    continue        reduce using rule 9 (declaration -> header_declaration .)
    CLOSE_TAG       reduce using rule 9 (declaration -> header_declaration .)
    for             reduce using rule 9 (declaration -> header_declaration .)
    foreach         reduce using rule 9 (declaration -> header_declaration .)
    switch          reduce using rule 9 (declaration -> header_declaration .)
    try             reduce using rule 9 (declaration -> header_declaration .)
    throw           reduce using rule 9 (declaration -> header_declaration .)
    exit            reduce using rule 9 (declaration -> header_declaration .)
    VARIABLE        reduce using rule 9 (declaration -> header_declaration .)
    array           reduce using rule 9 (declaration -> header_declaration .)
    pow             reduce using rule 9 (declaration -> header_declaration .)
    POW             reduce using rule 9 (declaration -> header_declaration .)
    abs             reduce using rule 9 (declaration -> header_declaration .)
    cos             reduce using rule 9 (declaration -> header_declaration .)
    deg2rad         reduce using rule 9 (declaration -> header_declaration .)
    rad2deg         reduce using rule 9 (declaration -> header_declaration .)
    die             reduce using rule 9 (declaration -> header_declaration .)
    exp             reduce using rule 9 (declaration -> header_declaration .)
    floor           reduce using rule 9 (declaration -> header_declaration .)
    isset           reduce using rule 9 (declaration -> header_declaration .)
    list            reduce using rule 9 (declaration -> header_declaration .)
    log             reduce using rule 9 (declaration -> header_declaration .)
    log10           reduce using rule 9 (declaration -> header_declaration .)
    max             reduce using rule 9 (declaration -> header_declaration .)
    min             reduce using rule 9 (declaration -> header_declaration .)
    rand            reduce using rule 9 (declaration -> header_declaration .)
    round           reduce using rule 9 (declaration -> header_declaration .)
    sin             reduce using rule 9 (declaration -> header_declaration .)
    sqrt            reduce using rule 9 (declaration -> header_declaration .)
    unset           reduce using rule 9 (declaration -> header_declaration .)
    CADENA          reduce using rule 9 (declaration -> header_declaration .)
    $end            reduce using rule 9 (declaration -> header_declaration .)
    RBLOCK          reduce using rule 9 (declaration -> header_declaration .)
    endwhile        reduce using rule 9 (declaration -> header_declaration .)
    private         reduce using rule 9 (declaration -> header_declaration .)
    protected       reduce using rule 9 (declaration -> header_declaration .)
    public          reduce using rule 9 (declaration -> header_declaration .)
    var             reduce using rule 9 (declaration -> header_declaration .)
    endfor          reduce using rule 9 (declaration -> header_declaration .)
    endforeach      reduce using rule 9 (declaration -> header_declaration .)
    break           reduce using rule 9 (declaration -> header_declaration .)
    endswitch       reduce using rule 9 (declaration -> header_declaration .)
    default         reduce using rule 9 (declaration -> header_declaration .)
    case            reduce using rule 9 (declaration -> header_declaration .)


state 10

    (10) declaration -> var_declaration .

    COMMENT         reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_HASHTAG reduce using rule 10 (declaration -> var_declaration .)
    COMMENT_MULTI   reduce using rule 10 (declaration -> var_declaration .)
    empty           reduce using rule 10 (declaration -> var_declaration .)
    include         reduce using rule 10 (declaration -> var_declaration .)
    const           reduce using rule 10 (declaration -> var_declaration .)
    print           reduce using rule 10 (declaration -> var_declaration .)
    echo            reduce using rule 10 (declaration -> var_declaration .)
    while           reduce using rule 10 (declaration -> var_declaration .)
    do              reduce using rule 10 (declaration -> var_declaration .)
    if              reduce using rule 10 (declaration -> var_declaration .)
    function        reduce using rule 10 (declaration -> var_declaration .)
    ID              reduce using rule 10 (declaration -> var_declaration .)
    return          reduce using rule 10 (declaration -> var_declaration .)
    class           reduce using rule 10 (declaration -> var_declaration .)
    new             reduce using rule 10 (declaration -> var_declaration .)
    interface       reduce using rule 10 (declaration -> var_declaration .)
    trait           reduce using rule 10 (declaration -> var_declaration .)
    use             reduce using rule 10 (declaration -> var_declaration .)
    continue        reduce using rule 10 (declaration -> var_declaration .)
    CLOSE_TAG       reduce using rule 10 (declaration -> var_declaration .)
    for             reduce using rule 10 (declaration -> var_declaration .)
    foreach         reduce using rule 10 (declaration -> var_declaration .)
    switch          reduce using rule 10 (declaration -> var_declaration .)
    try             reduce using rule 10 (declaration -> var_declaration .)
    throw           reduce using rule 10 (declaration -> var_declaration .)
    exit            reduce using rule 10 (declaration -> var_declaration .)
    VARIABLE        reduce using rule 10 (declaration -> var_declaration .)
    array           reduce using rule 10 (declaration -> var_declaration .)
    pow             reduce using rule 10 (declaration -> var_declaration .)
    POW             reduce using rule 10 (declaration -> var_declaration .)
    abs             reduce using rule 10 (declaration -> var_declaration .)
    cos             reduce using rule 10 (declaration -> var_declaration .)
    deg2rad         reduce using rule 10 (declaration -> var_declaration .)
    rad2deg         reduce using rule 10 (declaration -> var_declaration .)
    die             reduce using rule 10 (declaration -> var_declaration .)
    exp             reduce using rule 10 (declaration -> var_declaration .)
    floor           reduce using rule 10 (declaration -> var_declaration .)
    isset           reduce using rule 10 (declaration -> var_declaration .)
    list            reduce using rule 10 (declaration -> var_declaration .)
    log             reduce using rule 10 (declaration -> var_declaration .)
    log10           reduce using rule 10 (declaration -> var_declaration .)
    max             reduce using rule 10 (declaration -> var_declaration .)
    min             reduce using rule 10 (declaration -> var_declaration .)
    rand            reduce using rule 10 (declaration -> var_declaration .)
    round           reduce using rule 10 (declaration -> var_declaration .)
    sin             reduce using rule 10 (declaration -> var_declaration .)
    sqrt            reduce using rule 10 (declaration -> var_declaration .)
    unset           reduce using rule 10 (declaration -> var_declaration .)
    CADENA          reduce using rule 10 (declaration -> var_declaration .)
    $end            reduce using rule 10 (declaration -> var_declaration .)
    RBLOCK          reduce using rule 10 (declaration -> var_declaration .)
    endwhile        reduce using rule 10 (declaration -> var_declaration .)
    private         reduce using rule 10 (declaration -> var_declaration .)
    protected       reduce using rule 10 (declaration -> var_declaration .)
    public          reduce using rule 10 (declaration -> var_declaration .)
    var             reduce using rule 10 (declaration -> var_declaration .)
    endfor          reduce using rule 10 (declaration -> var_declaration .)
    endforeach      reduce using rule 10 (declaration -> var_declaration .)
    break           reduce using rule 10 (declaration -> var_declaration .)
    endswitch       reduce using rule 10 (declaration -> var_declaration .)
    default         reduce using rule 10 (declaration -> var_declaration .)
    case            reduce using rule 10 (declaration -> var_declaration .)


state 11

    (11) declaration -> constant_declaration .

    COMMENT         reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_HASHTAG reduce using rule 11 (declaration -> constant_declaration .)
    COMMENT_MULTI   reduce using rule 11 (declaration -> constant_declaration .)
    empty           reduce using rule 11 (declaration -> constant_declaration .)
    include         reduce using rule 11 (declaration -> constant_declaration .)
    const           reduce using rule 11 (declaration -> constant_declaration .)
    print           reduce using rule 11 (declaration -> constant_declaration .)
    echo            reduce using rule 11 (declaration -> constant_declaration .)
    while           reduce using rule 11 (declaration -> constant_declaration .)
    do              reduce using rule 11 (declaration -> constant_declaration .)
    if              reduce using rule 11 (declaration -> constant_declaration .)
    function        reduce using rule 11 (declaration -> constant_declaration .)
    ID              reduce using rule 11 (declaration -> constant_declaration .)
    return          reduce using rule 11 (declaration -> constant_declaration .)
    class           reduce using rule 11 (declaration -> constant_declaration .)
    new             reduce using rule 11 (declaration -> constant_declaration .)
    interface       reduce using rule 11 (declaration -> constant_declaration .)
    trait           reduce using rule 11 (declaration -> constant_declaration .)
    use             reduce using rule 11 (declaration -> constant_declaration .)
    continue        reduce using rule 11 (declaration -> constant_declaration .)
    CLOSE_TAG       reduce using rule 11 (declaration -> constant_declaration .)
    for             reduce using rule 11 (declaration -> constant_declaration .)
    foreach         reduce using rule 11 (declaration -> constant_declaration .)
    switch          reduce using rule 11 (declaration -> constant_declaration .)
    try             reduce using rule 11 (declaration -> constant_declaration .)
    throw           reduce using rule 11 (declaration -> constant_declaration .)
    exit            reduce using rule 11 (declaration -> constant_declaration .)
    VARIABLE        reduce using rule 11 (declaration -> constant_declaration .)
    array           reduce using rule 11 (declaration -> constant_declaration .)
    pow             reduce using rule 11 (declaration -> constant_declaration .)
    POW             reduce using rule 11 (declaration -> constant_declaration .)
    abs             reduce using rule 11 (declaration -> constant_declaration .)
    cos             reduce using rule 11 (declaration -> constant_declaration .)
    deg2rad         reduce using rule 11 (declaration -> constant_declaration .)
    rad2deg         reduce using rule 11 (declaration -> constant_declaration .)
    die             reduce using rule 11 (declaration -> constant_declaration .)
    exp             reduce using rule 11 (declaration -> constant_declaration .)
    floor           reduce using rule 11 (declaration -> constant_declaration .)
    isset           reduce using rule 11 (declaration -> constant_declaration .)
    list            reduce using rule 11 (declaration -> constant_declaration .)
    log             reduce using rule 11 (declaration -> constant_declaration .)
    log10           reduce using rule 11 (declaration -> constant_declaration .)
    max             reduce using rule 11 (declaration -> constant_declaration .)
    min             reduce using rule 11 (declaration -> constant_declaration .)
    rand            reduce using rule 11 (declaration -> constant_declaration .)
    round           reduce using rule 11 (declaration -> constant_declaration .)
    sin             reduce using rule 11 (declaration -> constant_declaration .)
    sqrt            reduce using rule 11 (declaration -> constant_declaration .)
    unset           reduce using rule 11 (declaration -> constant_declaration .)
    CADENA          reduce using rule 11 (declaration -> constant_declaration .)
    $end            reduce using rule 11 (declaration -> constant_declaration .)
    RBLOCK          reduce using rule 11 (declaration -> constant_declaration .)
    endwhile        reduce using rule 11 (declaration -> constant_declaration .)
    private         reduce using rule 11 (declaration -> constant_declaration .)
    protected       reduce using rule 11 (declaration -> constant_declaration .)
    public          reduce using rule 11 (declaration -> constant_declaration .)
    var             reduce using rule 11 (declaration -> constant_declaration .)
    endfor          reduce using rule 11 (declaration -> constant_declaration .)
    endforeach      reduce using rule 11 (declaration -> constant_declaration .)
    break           reduce using rule 11 (declaration -> constant_declaration .)
    endswitch       reduce using rule 11 (declaration -> constant_declaration .)
    default         reduce using rule 11 (declaration -> constant_declaration .)
    case            reduce using rule 11 (declaration -> constant_declaration .)


state 12

    (12) declaration -> print_declaration .

    COMMENT         reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_HASHTAG reduce using rule 12 (declaration -> print_declaration .)
    COMMENT_MULTI   reduce using rule 12 (declaration -> print_declaration .)
    empty           reduce using rule 12 (declaration -> print_declaration .)
    include         reduce using rule 12 (declaration -> print_declaration .)
    const           reduce using rule 12 (declaration -> print_declaration .)
    print           reduce using rule 12 (declaration -> print_declaration .)
    echo            reduce using rule 12 (declaration -> print_declaration .)
    while           reduce using rule 12 (declaration -> print_declaration .)
    do              reduce using rule 12 (declaration -> print_declaration .)
    if              reduce using rule 12 (declaration -> print_declaration .)
    function        reduce using rule 12 (declaration -> print_declaration .)
    ID              reduce using rule 12 (declaration -> print_declaration .)
    return          reduce using rule 12 (declaration -> print_declaration .)
    class           reduce using rule 12 (declaration -> print_declaration .)
    new             reduce using rule 12 (declaration -> print_declaration .)
    interface       reduce using rule 12 (declaration -> print_declaration .)
    trait           reduce using rule 12 (declaration -> print_declaration .)
    use             reduce using rule 12 (declaration -> print_declaration .)
    continue        reduce using rule 12 (declaration -> print_declaration .)
    CLOSE_TAG       reduce using rule 12 (declaration -> print_declaration .)
    for             reduce using rule 12 (declaration -> print_declaration .)
    foreach         reduce using rule 12 (declaration -> print_declaration .)
    switch          reduce using rule 12 (declaration -> print_declaration .)
    try             reduce using rule 12 (declaration -> print_declaration .)
    throw           reduce using rule 12 (declaration -> print_declaration .)
    exit            reduce using rule 12 (declaration -> print_declaration .)
    VARIABLE        reduce using rule 12 (declaration -> print_declaration .)
    array           reduce using rule 12 (declaration -> print_declaration .)
    pow             reduce using rule 12 (declaration -> print_declaration .)
    POW             reduce using rule 12 (declaration -> print_declaration .)
    abs             reduce using rule 12 (declaration -> print_declaration .)
    cos             reduce using rule 12 (declaration -> print_declaration .)
    deg2rad         reduce using rule 12 (declaration -> print_declaration .)
    rad2deg         reduce using rule 12 (declaration -> print_declaration .)
    die             reduce using rule 12 (declaration -> print_declaration .)
    exp             reduce using rule 12 (declaration -> print_declaration .)
    floor           reduce using rule 12 (declaration -> print_declaration .)
    isset           reduce using rule 12 (declaration -> print_declaration .)
    list            reduce using rule 12 (declaration -> print_declaration .)
    log             reduce using rule 12 (declaration -> print_declaration .)
    log10           reduce using rule 12 (declaration -> print_declaration .)
    max             reduce using rule 12 (declaration -> print_declaration .)
    min             reduce using rule 12 (declaration -> print_declaration .)
    rand            reduce using rule 12 (declaration -> print_declaration .)
    round           reduce using rule 12 (declaration -> print_declaration .)
    sin             reduce using rule 12 (declaration -> print_declaration .)
    sqrt            reduce using rule 12 (declaration -> print_declaration .)
    unset           reduce using rule 12 (declaration -> print_declaration .)
    CADENA          reduce using rule 12 (declaration -> print_declaration .)
    $end            reduce using rule 12 (declaration -> print_declaration .)
    RBLOCK          reduce using rule 12 (declaration -> print_declaration .)
    endwhile        reduce using rule 12 (declaration -> print_declaration .)
    private         reduce using rule 12 (declaration -> print_declaration .)
    protected       reduce using rule 12 (declaration -> print_declaration .)
    public          reduce using rule 12 (declaration -> print_declaration .)
    var             reduce using rule 12 (declaration -> print_declaration .)
    endfor          reduce using rule 12 (declaration -> print_declaration .)
    endforeach      reduce using rule 12 (declaration -> print_declaration .)
    break           reduce using rule 12 (declaration -> print_declaration .)
    endswitch       reduce using rule 12 (declaration -> print_declaration .)
    default         reduce using rule 12 (declaration -> print_declaration .)
    case            reduce using rule 12 (declaration -> print_declaration .)


state 13

    (13) declaration -> echo_declaration .

    COMMENT         reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_HASHTAG reduce using rule 13 (declaration -> echo_declaration .)
    COMMENT_MULTI   reduce using rule 13 (declaration -> echo_declaration .)
    empty           reduce using rule 13 (declaration -> echo_declaration .)
    include         reduce using rule 13 (declaration -> echo_declaration .)
    const           reduce using rule 13 (declaration -> echo_declaration .)
    print           reduce using rule 13 (declaration -> echo_declaration .)
    echo            reduce using rule 13 (declaration -> echo_declaration .)
    while           reduce using rule 13 (declaration -> echo_declaration .)
    do              reduce using rule 13 (declaration -> echo_declaration .)
    if              reduce using rule 13 (declaration -> echo_declaration .)
    function        reduce using rule 13 (declaration -> echo_declaration .)
    ID              reduce using rule 13 (declaration -> echo_declaration .)
    return          reduce using rule 13 (declaration -> echo_declaration .)
    class           reduce using rule 13 (declaration -> echo_declaration .)
    new             reduce using rule 13 (declaration -> echo_declaration .)
    interface       reduce using rule 13 (declaration -> echo_declaration .)
    trait           reduce using rule 13 (declaration -> echo_declaration .)
    use             reduce using rule 13 (declaration -> echo_declaration .)
    continue        reduce using rule 13 (declaration -> echo_declaration .)
    CLOSE_TAG       reduce using rule 13 (declaration -> echo_declaration .)
    for             reduce using rule 13 (declaration -> echo_declaration .)
    foreach         reduce using rule 13 (declaration -> echo_declaration .)
    switch          reduce using rule 13 (declaration -> echo_declaration .)
    try             reduce using rule 13 (declaration -> echo_declaration .)
    throw           reduce using rule 13 (declaration -> echo_declaration .)
    exit            reduce using rule 13 (declaration -> echo_declaration .)
    VARIABLE        reduce using rule 13 (declaration -> echo_declaration .)
    array           reduce using rule 13 (declaration -> echo_declaration .)
    pow             reduce using rule 13 (declaration -> echo_declaration .)
    POW             reduce using rule 13 (declaration -> echo_declaration .)
    abs             reduce using rule 13 (declaration -> echo_declaration .)
    cos             reduce using rule 13 (declaration -> echo_declaration .)
    deg2rad         reduce using rule 13 (declaration -> echo_declaration .)
    rad2deg         reduce using rule 13 (declaration -> echo_declaration .)
    die             reduce using rule 13 (declaration -> echo_declaration .)
    exp             reduce using rule 13 (declaration -> echo_declaration .)
    floor           reduce using rule 13 (declaration -> echo_declaration .)
    isset           reduce using rule 13 (declaration -> echo_declaration .)
    list            reduce using rule 13 (declaration -> echo_declaration .)
    log             reduce using rule 13 (declaration -> echo_declaration .)
    log10           reduce using rule 13 (declaration -> echo_declaration .)
    max             reduce using rule 13 (declaration -> echo_declaration .)
    min             reduce using rule 13 (declaration -> echo_declaration .)
    rand            reduce using rule 13 (declaration -> echo_declaration .)
    round           reduce using rule 13 (declaration -> echo_declaration .)
    sin             reduce using rule 13 (declaration -> echo_declaration .)
    sqrt            reduce using rule 13 (declaration -> echo_declaration .)
    unset           reduce using rule 13 (declaration -> echo_declaration .)
    CADENA          reduce using rule 13 (declaration -> echo_declaration .)
    $end            reduce using rule 13 (declaration -> echo_declaration .)
    RBLOCK          reduce using rule 13 (declaration -> echo_declaration .)
    endwhile        reduce using rule 13 (declaration -> echo_declaration .)
    private         reduce using rule 13 (declaration -> echo_declaration .)
    protected       reduce using rule 13 (declaration -> echo_declaration .)
    public          reduce using rule 13 (declaration -> echo_declaration .)
    var             reduce using rule 13 (declaration -> echo_declaration .)
    endfor          reduce using rule 13 (declaration -> echo_declaration .)
    endforeach      reduce using rule 13 (declaration -> echo_declaration .)
    break           reduce using rule 13 (declaration -> echo_declaration .)
    endswitch       reduce using rule 13 (declaration -> echo_declaration .)
    default         reduce using rule 13 (declaration -> echo_declaration .)
    case            reduce using rule 13 (declaration -> echo_declaration .)


state 14

    (14) declaration -> iteration_stmt .

    COMMENT         reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_HASHTAG reduce using rule 14 (declaration -> iteration_stmt .)
    COMMENT_MULTI   reduce using rule 14 (declaration -> iteration_stmt .)
    empty           reduce using rule 14 (declaration -> iteration_stmt .)
    include         reduce using rule 14 (declaration -> iteration_stmt .)
    const           reduce using rule 14 (declaration -> iteration_stmt .)
    print           reduce using rule 14 (declaration -> iteration_stmt .)
    echo            reduce using rule 14 (declaration -> iteration_stmt .)
    while           reduce using rule 14 (declaration -> iteration_stmt .)
    do              reduce using rule 14 (declaration -> iteration_stmt .)
    if              reduce using rule 14 (declaration -> iteration_stmt .)
    function        reduce using rule 14 (declaration -> iteration_stmt .)
    ID              reduce using rule 14 (declaration -> iteration_stmt .)
    return          reduce using rule 14 (declaration -> iteration_stmt .)
    class           reduce using rule 14 (declaration -> iteration_stmt .)
    new             reduce using rule 14 (declaration -> iteration_stmt .)
    interface       reduce using rule 14 (declaration -> iteration_stmt .)
    trait           reduce using rule 14 (declaration -> iteration_stmt .)
    use             reduce using rule 14 (declaration -> iteration_stmt .)
    continue        reduce using rule 14 (declaration -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 14 (declaration -> iteration_stmt .)
    for             reduce using rule 14 (declaration -> iteration_stmt .)
    foreach         reduce using rule 14 (declaration -> iteration_stmt .)
    switch          reduce using rule 14 (declaration -> iteration_stmt .)
    try             reduce using rule 14 (declaration -> iteration_stmt .)
    throw           reduce using rule 14 (declaration -> iteration_stmt .)
    exit            reduce using rule 14 (declaration -> iteration_stmt .)
    VARIABLE        reduce using rule 14 (declaration -> iteration_stmt .)
    array           reduce using rule 14 (declaration -> iteration_stmt .)
    pow             reduce using rule 14 (declaration -> iteration_stmt .)
    POW             reduce using rule 14 (declaration -> iteration_stmt .)
    abs             reduce using rule 14 (declaration -> iteration_stmt .)
    cos             reduce using rule 14 (declaration -> iteration_stmt .)
    deg2rad         reduce using rule 14 (declaration -> iteration_stmt .)
    rad2deg         reduce using rule 14 (declaration -> iteration_stmt .)
    die             reduce using rule 14 (declaration -> iteration_stmt .)
    exp             reduce using rule 14 (declaration -> iteration_stmt .)
    floor           reduce using rule 14 (declaration -> iteration_stmt .)
    isset           reduce using rule 14 (declaration -> iteration_stmt .)
    list            reduce using rule 14 (declaration -> iteration_stmt .)
    log             reduce using rule 14 (declaration -> iteration_stmt .)
    log10           reduce using rule 14 (declaration -> iteration_stmt .)
    max             reduce using rule 14 (declaration -> iteration_stmt .)
    min             reduce using rule 14 (declaration -> iteration_stmt .)
    rand            reduce using rule 14 (declaration -> iteration_stmt .)
    round           reduce using rule 14 (declaration -> iteration_stmt .)
    sin             reduce using rule 14 (declaration -> iteration_stmt .)
    sqrt            reduce using rule 14 (declaration -> iteration_stmt .)
    unset           reduce using rule 14 (declaration -> iteration_stmt .)
    CADENA          reduce using rule 14 (declaration -> iteration_stmt .)
    $end            reduce using rule 14 (declaration -> iteration_stmt .)
    RBLOCK          reduce using rule 14 (declaration -> iteration_stmt .)
    endwhile        reduce using rule 14 (declaration -> iteration_stmt .)
    private         reduce using rule 14 (declaration -> iteration_stmt .)
    protected       reduce using rule 14 (declaration -> iteration_stmt .)
    public          reduce using rule 14 (declaration -> iteration_stmt .)
    var             reduce using rule 14 (declaration -> iteration_stmt .)
    endfor          reduce using rule 14 (declaration -> iteration_stmt .)
    endforeach      reduce using rule 14 (declaration -> iteration_stmt .)
    break           reduce using rule 14 (declaration -> iteration_stmt .)
    endswitch       reduce using rule 14 (declaration -> iteration_stmt .)
    default         reduce using rule 14 (declaration -> iteration_stmt .)
    case            reduce using rule 14 (declaration -> iteration_stmt .)


state 15

    (15) declaration -> if_statement .

    COMMENT         reduce using rule 15 (declaration -> if_statement .)
    COMMENT_HASHTAG reduce using rule 15 (declaration -> if_statement .)
    COMMENT_MULTI   reduce using rule 15 (declaration -> if_statement .)
    empty           reduce using rule 15 (declaration -> if_statement .)
    include         reduce using rule 15 (declaration -> if_statement .)
    const           reduce using rule 15 (declaration -> if_statement .)
    print           reduce using rule 15 (declaration -> if_statement .)
    echo            reduce using rule 15 (declaration -> if_statement .)
    while           reduce using rule 15 (declaration -> if_statement .)
    do              reduce using rule 15 (declaration -> if_statement .)
    if              reduce using rule 15 (declaration -> if_statement .)
    function        reduce using rule 15 (declaration -> if_statement .)
    ID              reduce using rule 15 (declaration -> if_statement .)
    return          reduce using rule 15 (declaration -> if_statement .)
    class           reduce using rule 15 (declaration -> if_statement .)
    new             reduce using rule 15 (declaration -> if_statement .)
    interface       reduce using rule 15 (declaration -> if_statement .)
    trait           reduce using rule 15 (declaration -> if_statement .)
    use             reduce using rule 15 (declaration -> if_statement .)
    continue        reduce using rule 15 (declaration -> if_statement .)
    CLOSE_TAG       reduce using rule 15 (declaration -> if_statement .)
    for             reduce using rule 15 (declaration -> if_statement .)
    foreach         reduce using rule 15 (declaration -> if_statement .)
    switch          reduce using rule 15 (declaration -> if_statement .)
    try             reduce using rule 15 (declaration -> if_statement .)
    throw           reduce using rule 15 (declaration -> if_statement .)
    exit            reduce using rule 15 (declaration -> if_statement .)
    VARIABLE        reduce using rule 15 (declaration -> if_statement .)
    array           reduce using rule 15 (declaration -> if_statement .)
    pow             reduce using rule 15 (declaration -> if_statement .)
    POW             reduce using rule 15 (declaration -> if_statement .)
    abs             reduce using rule 15 (declaration -> if_statement .)
    cos             reduce using rule 15 (declaration -> if_statement .)
    deg2rad         reduce using rule 15 (declaration -> if_statement .)
    rad2deg         reduce using rule 15 (declaration -> if_statement .)
    die             reduce using rule 15 (declaration -> if_statement .)
    exp             reduce using rule 15 (declaration -> if_statement .)
    floor           reduce using rule 15 (declaration -> if_statement .)
    isset           reduce using rule 15 (declaration -> if_statement .)
    list            reduce using rule 15 (declaration -> if_statement .)
    log             reduce using rule 15 (declaration -> if_statement .)
    log10           reduce using rule 15 (declaration -> if_statement .)
    max             reduce using rule 15 (declaration -> if_statement .)
    min             reduce using rule 15 (declaration -> if_statement .)
    rand            reduce using rule 15 (declaration -> if_statement .)
    round           reduce using rule 15 (declaration -> if_statement .)
    sin             reduce using rule 15 (declaration -> if_statement .)
    sqrt            reduce using rule 15 (declaration -> if_statement .)
    unset           reduce using rule 15 (declaration -> if_statement .)
    CADENA          reduce using rule 15 (declaration -> if_statement .)
    $end            reduce using rule 15 (declaration -> if_statement .)
    RBLOCK          reduce using rule 15 (declaration -> if_statement .)
    endwhile        reduce using rule 15 (declaration -> if_statement .)
    private         reduce using rule 15 (declaration -> if_statement .)
    protected       reduce using rule 15 (declaration -> if_statement .)
    public          reduce using rule 15 (declaration -> if_statement .)
    var             reduce using rule 15 (declaration -> if_statement .)
    endfor          reduce using rule 15 (declaration -> if_statement .)
    endforeach      reduce using rule 15 (declaration -> if_statement .)
    break           reduce using rule 15 (declaration -> if_statement .)
    endswitch       reduce using rule 15 (declaration -> if_statement .)
    default         reduce using rule 15 (declaration -> if_statement .)
    case            reduce using rule 15 (declaration -> if_statement .)


state 16

    (16) declaration -> fun_declaration .

    COMMENT         reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_HASHTAG reduce using rule 16 (declaration -> fun_declaration .)
    COMMENT_MULTI   reduce using rule 16 (declaration -> fun_declaration .)
    empty           reduce using rule 16 (declaration -> fun_declaration .)
    include         reduce using rule 16 (declaration -> fun_declaration .)
    const           reduce using rule 16 (declaration -> fun_declaration .)
    print           reduce using rule 16 (declaration -> fun_declaration .)
    echo            reduce using rule 16 (declaration -> fun_declaration .)
    while           reduce using rule 16 (declaration -> fun_declaration .)
    do              reduce using rule 16 (declaration -> fun_declaration .)
    if              reduce using rule 16 (declaration -> fun_declaration .)
    function        reduce using rule 16 (declaration -> fun_declaration .)
    ID              reduce using rule 16 (declaration -> fun_declaration .)
    return          reduce using rule 16 (declaration -> fun_declaration .)
    class           reduce using rule 16 (declaration -> fun_declaration .)
    new             reduce using rule 16 (declaration -> fun_declaration .)
    interface       reduce using rule 16 (declaration -> fun_declaration .)
    trait           reduce using rule 16 (declaration -> fun_declaration .)
    use             reduce using rule 16 (declaration -> fun_declaration .)
    continue        reduce using rule 16 (declaration -> fun_declaration .)
    CLOSE_TAG       reduce using rule 16 (declaration -> fun_declaration .)
    for             reduce using rule 16 (declaration -> fun_declaration .)
    foreach         reduce using rule 16 (declaration -> fun_declaration .)
    switch          reduce using rule 16 (declaration -> fun_declaration .)
    try             reduce using rule 16 (declaration -> fun_declaration .)
    throw           reduce using rule 16 (declaration -> fun_declaration .)
    exit            reduce using rule 16 (declaration -> fun_declaration .)
    VARIABLE        reduce using rule 16 (declaration -> fun_declaration .)
    array           reduce using rule 16 (declaration -> fun_declaration .)
    pow             reduce using rule 16 (declaration -> fun_declaration .)
    POW             reduce using rule 16 (declaration -> fun_declaration .)
    abs             reduce using rule 16 (declaration -> fun_declaration .)
    cos             reduce using rule 16 (declaration -> fun_declaration .)
    deg2rad         reduce using rule 16 (declaration -> fun_declaration .)
    rad2deg         reduce using rule 16 (declaration -> fun_declaration .)
    die             reduce using rule 16 (declaration -> fun_declaration .)
    exp             reduce using rule 16 (declaration -> fun_declaration .)
    floor           reduce using rule 16 (declaration -> fun_declaration .)
    isset           reduce using rule 16 (declaration -> fun_declaration .)
    list            reduce using rule 16 (declaration -> fun_declaration .)
    log             reduce using rule 16 (declaration -> fun_declaration .)
    log10           reduce using rule 16 (declaration -> fun_declaration .)
    max             reduce using rule 16 (declaration -> fun_declaration .)
    min             reduce using rule 16 (declaration -> fun_declaration .)
    rand            reduce using rule 16 (declaration -> fun_declaration .)
    round           reduce using rule 16 (declaration -> fun_declaration .)
    sin             reduce using rule 16 (declaration -> fun_declaration .)
    sqrt            reduce using rule 16 (declaration -> fun_declaration .)
    unset           reduce using rule 16 (declaration -> fun_declaration .)
    CADENA          reduce using rule 16 (declaration -> fun_declaration .)
    $end            reduce using rule 16 (declaration -> fun_declaration .)
    RBLOCK          reduce using rule 16 (declaration -> fun_declaration .)
    endwhile        reduce using rule 16 (declaration -> fun_declaration .)
    private         reduce using rule 16 (declaration -> fun_declaration .)
    protected       reduce using rule 16 (declaration -> fun_declaration .)
    public          reduce using rule 16 (declaration -> fun_declaration .)
    var             reduce using rule 16 (declaration -> fun_declaration .)
    endfor          reduce using rule 16 (declaration -> fun_declaration .)
    endforeach      reduce using rule 16 (declaration -> fun_declaration .)
    break           reduce using rule 16 (declaration -> fun_declaration .)
    endswitch       reduce using rule 16 (declaration -> fun_declaration .)
    default         reduce using rule 16 (declaration -> fun_declaration .)
    case            reduce using rule 16 (declaration -> fun_declaration .)


state 17

    (17) declaration -> fun_call .

    COMMENT         reduce using rule 17 (declaration -> fun_call .)
    COMMENT_HASHTAG reduce using rule 17 (declaration -> fun_call .)
    COMMENT_MULTI   reduce using rule 17 (declaration -> fun_call .)
    empty           reduce using rule 17 (declaration -> fun_call .)
    include         reduce using rule 17 (declaration -> fun_call .)
    const           reduce using rule 17 (declaration -> fun_call .)
    print           reduce using rule 17 (declaration -> fun_call .)
    echo            reduce using rule 17 (declaration -> fun_call .)
    while           reduce using rule 17 (declaration -> fun_call .)
    do              reduce using rule 17 (declaration -> fun_call .)
    if              reduce using rule 17 (declaration -> fun_call .)
    function        reduce using rule 17 (declaration -> fun_call .)
    ID              reduce using rule 17 (declaration -> fun_call .)
    return          reduce using rule 17 (declaration -> fun_call .)
    class           reduce using rule 17 (declaration -> fun_call .)
    new             reduce using rule 17 (declaration -> fun_call .)
    interface       reduce using rule 17 (declaration -> fun_call .)
    trait           reduce using rule 17 (declaration -> fun_call .)
    use             reduce using rule 17 (declaration -> fun_call .)
    continue        reduce using rule 17 (declaration -> fun_call .)
    CLOSE_TAG       reduce using rule 17 (declaration -> fun_call .)
    for             reduce using rule 17 (declaration -> fun_call .)
    foreach         reduce using rule 17 (declaration -> fun_call .)
    switch          reduce using rule 17 (declaration -> fun_call .)
    try             reduce using rule 17 (declaration -> fun_call .)
    throw           reduce using rule 17 (declaration -> fun_call .)
    exit            reduce using rule 17 (declaration -> fun_call .)
    VARIABLE        reduce using rule 17 (declaration -> fun_call .)
    array           reduce using rule 17 (declaration -> fun_call .)
    pow             reduce using rule 17 (declaration -> fun_call .)
    POW             reduce using rule 17 (declaration -> fun_call .)
    abs             reduce using rule 17 (declaration -> fun_call .)
    cos             reduce using rule 17 (declaration -> fun_call .)
    deg2rad         reduce using rule 17 (declaration -> fun_call .)
    rad2deg         reduce using rule 17 (declaration -> fun_call .)
    die             reduce using rule 17 (declaration -> fun_call .)
    exp             reduce using rule 17 (declaration -> fun_call .)
    floor           reduce using rule 17 (declaration -> fun_call .)
    isset           reduce using rule 17 (declaration -> fun_call .)
    list            reduce using rule 17 (declaration -> fun_call .)
    log             reduce using rule 17 (declaration -> fun_call .)
    log10           reduce using rule 17 (declaration -> fun_call .)
    max             reduce using rule 17 (declaration -> fun_call .)
    min             reduce using rule 17 (declaration -> fun_call .)
    rand            reduce using rule 17 (declaration -> fun_call .)
    round           reduce using rule 17 (declaration -> fun_call .)
    sin             reduce using rule 17 (declaration -> fun_call .)
    sqrt            reduce using rule 17 (declaration -> fun_call .)
    unset           reduce using rule 17 (declaration -> fun_call .)
    CADENA          reduce using rule 17 (declaration -> fun_call .)
    $end            reduce using rule 17 (declaration -> fun_call .)
    RBLOCK          reduce using rule 17 (declaration -> fun_call .)
    endwhile        reduce using rule 17 (declaration -> fun_call .)
    private         reduce using rule 17 (declaration -> fun_call .)
    protected       reduce using rule 17 (declaration -> fun_call .)
    public          reduce using rule 17 (declaration -> fun_call .)
    var             reduce using rule 17 (declaration -> fun_call .)
    endfor          reduce using rule 17 (declaration -> fun_call .)
    endforeach      reduce using rule 17 (declaration -> fun_call .)
    break           reduce using rule 17 (declaration -> fun_call .)
    endswitch       reduce using rule 17 (declaration -> fun_call .)
    default         reduce using rule 17 (declaration -> fun_call .)
    case            reduce using rule 17 (declaration -> fun_call .)


state 18

    (18) declaration -> return_statement .

    COMMENT         reduce using rule 18 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> return_statement .)
    empty           reduce using rule 18 (declaration -> return_statement .)
    include         reduce using rule 18 (declaration -> return_statement .)
    const           reduce using rule 18 (declaration -> return_statement .)
    print           reduce using rule 18 (declaration -> return_statement .)
    echo            reduce using rule 18 (declaration -> return_statement .)
    while           reduce using rule 18 (declaration -> return_statement .)
    do              reduce using rule 18 (declaration -> return_statement .)
    if              reduce using rule 18 (declaration -> return_statement .)
    function        reduce using rule 18 (declaration -> return_statement .)
    ID              reduce using rule 18 (declaration -> return_statement .)
    return          reduce using rule 18 (declaration -> return_statement .)
    class           reduce using rule 18 (declaration -> return_statement .)
    new             reduce using rule 18 (declaration -> return_statement .)
    interface       reduce using rule 18 (declaration -> return_statement .)
    trait           reduce using rule 18 (declaration -> return_statement .)
    use             reduce using rule 18 (declaration -> return_statement .)
    continue        reduce using rule 18 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 18 (declaration -> return_statement .)
    for             reduce using rule 18 (declaration -> return_statement .)
    foreach         reduce using rule 18 (declaration -> return_statement .)
    switch          reduce using rule 18 (declaration -> return_statement .)
    try             reduce using rule 18 (declaration -> return_statement .)
    throw           reduce using rule 18 (declaration -> return_statement .)
    exit            reduce using rule 18 (declaration -> return_statement .)
    VARIABLE        reduce using rule 18 (declaration -> return_statement .)
    array           reduce using rule 18 (declaration -> return_statement .)
    pow             reduce using rule 18 (declaration -> return_statement .)
    POW             reduce using rule 18 (declaration -> return_statement .)
    abs             reduce using rule 18 (declaration -> return_statement .)
    cos             reduce using rule 18 (declaration -> return_statement .)
    deg2rad         reduce using rule 18 (declaration -> return_statement .)
    rad2deg         reduce using rule 18 (declaration -> return_statement .)
    die             reduce using rule 18 (declaration -> return_statement .)
    exp             reduce using rule 18 (declaration -> return_statement .)
    floor           reduce using rule 18 (declaration -> return_statement .)
    isset           reduce using rule 18 (declaration -> return_statement .)
    list            reduce using rule 18 (declaration -> return_statement .)
    log             reduce using rule 18 (declaration -> return_statement .)
    log10           reduce using rule 18 (declaration -> return_statement .)
    max             reduce using rule 18 (declaration -> return_statement .)
    min             reduce using rule 18 (declaration -> return_statement .)
    rand            reduce using rule 18 (declaration -> return_statement .)
    round           reduce using rule 18 (declaration -> return_statement .)
    sin             reduce using rule 18 (declaration -> return_statement .)
    sqrt            reduce using rule 18 (declaration -> return_statement .)
    unset           reduce using rule 18 (declaration -> return_statement .)
    CADENA          reduce using rule 18 (declaration -> return_statement .)
    $end            reduce using rule 18 (declaration -> return_statement .)
    RBLOCK          reduce using rule 18 (declaration -> return_statement .)
    endwhile        reduce using rule 18 (declaration -> return_statement .)
    private         reduce using rule 18 (declaration -> return_statement .)
    protected       reduce using rule 18 (declaration -> return_statement .)
    public          reduce using rule 18 (declaration -> return_statement .)
    var             reduce using rule 18 (declaration -> return_statement .)
    endfor          reduce using rule 18 (declaration -> return_statement .)
    endforeach      reduce using rule 18 (declaration -> return_statement .)
    break           reduce using rule 18 (declaration -> return_statement .)
    endswitch       reduce using rule 18 (declaration -> return_statement .)
    default         reduce using rule 18 (declaration -> return_statement .)
    case            reduce using rule 18 (declaration -> return_statement .)


state 19

    (19) declaration -> class_declaration .

    COMMENT         reduce using rule 19 (declaration -> class_declaration .)
    COMMENT_HASHTAG reduce using rule 19 (declaration -> class_declaration .)
    COMMENT_MULTI   reduce using rule 19 (declaration -> class_declaration .)
    empty           reduce using rule 19 (declaration -> class_declaration .)
    include         reduce using rule 19 (declaration -> class_declaration .)
    const           reduce using rule 19 (declaration -> class_declaration .)
    print           reduce using rule 19 (declaration -> class_declaration .)
    echo            reduce using rule 19 (declaration -> class_declaration .)
    while           reduce using rule 19 (declaration -> class_declaration .)
    do              reduce using rule 19 (declaration -> class_declaration .)
    if              reduce using rule 19 (declaration -> class_declaration .)
    function        reduce using rule 19 (declaration -> class_declaration .)
    ID              reduce using rule 19 (declaration -> class_declaration .)
    return          reduce using rule 19 (declaration -> class_declaration .)
    class           reduce using rule 19 (declaration -> class_declaration .)
    new             reduce using rule 19 (declaration -> class_declaration .)
    interface       reduce using rule 19 (declaration -> class_declaration .)
    trait           reduce using rule 19 (declaration -> class_declaration .)
    use             reduce using rule 19 (declaration -> class_declaration .)
    continue        reduce using rule 19 (declaration -> class_declaration .)
    CLOSE_TAG       reduce using rule 19 (declaration -> class_declaration .)
    for             reduce using rule 19 (declaration -> class_declaration .)
    foreach         reduce using rule 19 (declaration -> class_declaration .)
    switch          reduce using rule 19 (declaration -> class_declaration .)
    try             reduce using rule 19 (declaration -> class_declaration .)
    throw           reduce using rule 19 (declaration -> class_declaration .)
    exit            reduce using rule 19 (declaration -> class_declaration .)
    VARIABLE        reduce using rule 19 (declaration -> class_declaration .)
    array           reduce using rule 19 (declaration -> class_declaration .)
    pow             reduce using rule 19 (declaration -> class_declaration .)
    POW             reduce using rule 19 (declaration -> class_declaration .)
    abs             reduce using rule 19 (declaration -> class_declaration .)
    cos             reduce using rule 19 (declaration -> class_declaration .)
    deg2rad         reduce using rule 19 (declaration -> class_declaration .)
    rad2deg         reduce using rule 19 (declaration -> class_declaration .)
    die             reduce using rule 19 (declaration -> class_declaration .)
    exp             reduce using rule 19 (declaration -> class_declaration .)
    floor           reduce using rule 19 (declaration -> class_declaration .)
    isset           reduce using rule 19 (declaration -> class_declaration .)
    list            reduce using rule 19 (declaration -> class_declaration .)
    log             reduce using rule 19 (declaration -> class_declaration .)
    log10           reduce using rule 19 (declaration -> class_declaration .)
    max             reduce using rule 19 (declaration -> class_declaration .)
    min             reduce using rule 19 (declaration -> class_declaration .)
    rand            reduce using rule 19 (declaration -> class_declaration .)
    round           reduce using rule 19 (declaration -> class_declaration .)
    sin             reduce using rule 19 (declaration -> class_declaration .)
    sqrt            reduce using rule 19 (declaration -> class_declaration .)
    unset           reduce using rule 19 (declaration -> class_declaration .)
    CADENA          reduce using rule 19 (declaration -> class_declaration .)
    $end            reduce using rule 19 (declaration -> class_declaration .)
    RBLOCK          reduce using rule 19 (declaration -> class_declaration .)
    endwhile        reduce using rule 19 (declaration -> class_declaration .)
    private         reduce using rule 19 (declaration -> class_declaration .)
    protected       reduce using rule 19 (declaration -> class_declaration .)
    public          reduce using rule 19 (declaration -> class_declaration .)
    var             reduce using rule 19 (declaration -> class_declaration .)
    endfor          reduce using rule 19 (declaration -> class_declaration .)
    endforeach      reduce using rule 19 (declaration -> class_declaration .)
    break           reduce using rule 19 (declaration -> class_declaration .)
    endswitch       reduce using rule 19 (declaration -> class_declaration .)
    default         reduce using rule 19 (declaration -> class_declaration .)
    case            reduce using rule 19 (declaration -> class_declaration .)


state 20

    (20) declaration -> class_extension .

    COMMENT         reduce using rule 20 (declaration -> class_extension .)
    COMMENT_HASHTAG reduce using rule 20 (declaration -> class_extension .)
    COMMENT_MULTI   reduce using rule 20 (declaration -> class_extension .)
    empty           reduce using rule 20 (declaration -> class_extension .)
    include         reduce using rule 20 (declaration -> class_extension .)
    const           reduce using rule 20 (declaration -> class_extension .)
    print           reduce using rule 20 (declaration -> class_extension .)
    echo            reduce using rule 20 (declaration -> class_extension .)
    while           reduce using rule 20 (declaration -> class_extension .)
    do              reduce using rule 20 (declaration -> class_extension .)
    if              reduce using rule 20 (declaration -> class_extension .)
    function        reduce using rule 20 (declaration -> class_extension .)
    ID              reduce using rule 20 (declaration -> class_extension .)
    return          reduce using rule 20 (declaration -> class_extension .)
    class           reduce using rule 20 (declaration -> class_extension .)
    new             reduce using rule 20 (declaration -> class_extension .)
    interface       reduce using rule 20 (declaration -> class_extension .)
    trait           reduce using rule 20 (declaration -> class_extension .)
    use             reduce using rule 20 (declaration -> class_extension .)
    continue        reduce using rule 20 (declaration -> class_extension .)
    CLOSE_TAG       reduce using rule 20 (declaration -> class_extension .)
    for             reduce using rule 20 (declaration -> class_extension .)
    foreach         reduce using rule 20 (declaration -> class_extension .)
    switch          reduce using rule 20 (declaration -> class_extension .)
    try             reduce using rule 20 (declaration -> class_extension .)
    throw           reduce using rule 20 (declaration -> class_extension .)
    exit            reduce using rule 20 (declaration -> class_extension .)
    VARIABLE        reduce using rule 20 (declaration -> class_extension .)
    array           reduce using rule 20 (declaration -> class_extension .)
    pow             reduce using rule 20 (declaration -> class_extension .)
    POW             reduce using rule 20 (declaration -> class_extension .)
    abs             reduce using rule 20 (declaration -> class_extension .)
    cos             reduce using rule 20 (declaration -> class_extension .)
    deg2rad         reduce using rule 20 (declaration -> class_extension .)
    rad2deg         reduce using rule 20 (declaration -> class_extension .)
    die             reduce using rule 20 (declaration -> class_extension .)
    exp             reduce using rule 20 (declaration -> class_extension .)
    floor           reduce using rule 20 (declaration -> class_extension .)
    isset           reduce using rule 20 (declaration -> class_extension .)
    list            reduce using rule 20 (declaration -> class_extension .)
    log             reduce using rule 20 (declaration -> class_extension .)
    log10           reduce using rule 20 (declaration -> class_extension .)
    max             reduce using rule 20 (declaration -> class_extension .)
    min             reduce using rule 20 (declaration -> class_extension .)
    rand            reduce using rule 20 (declaration -> class_extension .)
    round           reduce using rule 20 (declaration -> class_extension .)
    sin             reduce using rule 20 (declaration -> class_extension .)
    sqrt            reduce using rule 20 (declaration -> class_extension .)
    unset           reduce using rule 20 (declaration -> class_extension .)
    CADENA          reduce using rule 20 (declaration -> class_extension .)
    $end            reduce using rule 20 (declaration -> class_extension .)
    RBLOCK          reduce using rule 20 (declaration -> class_extension .)
    endwhile        reduce using rule 20 (declaration -> class_extension .)
    private         reduce using rule 20 (declaration -> class_extension .)
    protected       reduce using rule 20 (declaration -> class_extension .)
    public          reduce using rule 20 (declaration -> class_extension .)
    var             reduce using rule 20 (declaration -> class_extension .)
    endfor          reduce using rule 20 (declaration -> class_extension .)
    endforeach      reduce using rule 20 (declaration -> class_extension .)
    break           reduce using rule 20 (declaration -> class_extension .)
    endswitch       reduce using rule 20 (declaration -> class_extension .)
    default         reduce using rule 20 (declaration -> class_extension .)
    case            reduce using rule 20 (declaration -> class_extension .)


state 21

    (21) declaration -> create_obj_declaration .

    COMMENT         reduce using rule 21 (declaration -> create_obj_declaration .)
    COMMENT_HASHTAG reduce using rule 21 (declaration -> create_obj_declaration .)
    COMMENT_MULTI   reduce using rule 21 (declaration -> create_obj_declaration .)
    empty           reduce using rule 21 (declaration -> create_obj_declaration .)
    include         reduce using rule 21 (declaration -> create_obj_declaration .)
    const           reduce using rule 21 (declaration -> create_obj_declaration .)
    print           reduce using rule 21 (declaration -> create_obj_declaration .)
    echo            reduce using rule 21 (declaration -> create_obj_declaration .)
    while           reduce using rule 21 (declaration -> create_obj_declaration .)
    do              reduce using rule 21 (declaration -> create_obj_declaration .)
    if              reduce using rule 21 (declaration -> create_obj_declaration .)
    function        reduce using rule 21 (declaration -> create_obj_declaration .)
    ID              reduce using rule 21 (declaration -> create_obj_declaration .)
    return          reduce using rule 21 (declaration -> create_obj_declaration .)
    class           reduce using rule 21 (declaration -> create_obj_declaration .)
    new             reduce using rule 21 (declaration -> create_obj_declaration .)
    interface       reduce using rule 21 (declaration -> create_obj_declaration .)
    trait           reduce using rule 21 (declaration -> create_obj_declaration .)
    use             reduce using rule 21 (declaration -> create_obj_declaration .)
    continue        reduce using rule 21 (declaration -> create_obj_declaration .)
    CLOSE_TAG       reduce using rule 21 (declaration -> create_obj_declaration .)
    for             reduce using rule 21 (declaration -> create_obj_declaration .)
    foreach         reduce using rule 21 (declaration -> create_obj_declaration .)
    switch          reduce using rule 21 (declaration -> create_obj_declaration .)
    try             reduce using rule 21 (declaration -> create_obj_declaration .)
    throw           reduce using rule 21 (declaration -> create_obj_declaration .)
    exit            reduce using rule 21 (declaration -> create_obj_declaration .)
    VARIABLE        reduce using rule 21 (declaration -> create_obj_declaration .)
    array           reduce using rule 21 (declaration -> create_obj_declaration .)
    pow             reduce using rule 21 (declaration -> create_obj_declaration .)
    POW             reduce using rule 21 (declaration -> create_obj_declaration .)
    abs             reduce using rule 21 (declaration -> create_obj_declaration .)
    cos             reduce using rule 21 (declaration -> create_obj_declaration .)
    deg2rad         reduce using rule 21 (declaration -> create_obj_declaration .)
    rad2deg         reduce using rule 21 (declaration -> create_obj_declaration .)
    die             reduce using rule 21 (declaration -> create_obj_declaration .)
    exp             reduce using rule 21 (declaration -> create_obj_declaration .)
    floor           reduce using rule 21 (declaration -> create_obj_declaration .)
    isset           reduce using rule 21 (declaration -> create_obj_declaration .)
    list            reduce using rule 21 (declaration -> create_obj_declaration .)
    log             reduce using rule 21 (declaration -> create_obj_declaration .)
    log10           reduce using rule 21 (declaration -> create_obj_declaration .)
    max             reduce using rule 21 (declaration -> create_obj_declaration .)
    min             reduce using rule 21 (declaration -> create_obj_declaration .)
    rand            reduce using rule 21 (declaration -> create_obj_declaration .)
    round           reduce using rule 21 (declaration -> create_obj_declaration .)
    sin             reduce using rule 21 (declaration -> create_obj_declaration .)
    sqrt            reduce using rule 21 (declaration -> create_obj_declaration .)
    unset           reduce using rule 21 (declaration -> create_obj_declaration .)
    CADENA          reduce using rule 21 (declaration -> create_obj_declaration .)
    $end            reduce using rule 21 (declaration -> create_obj_declaration .)
    RBLOCK          reduce using rule 21 (declaration -> create_obj_declaration .)
    endwhile        reduce using rule 21 (declaration -> create_obj_declaration .)
    private         reduce using rule 21 (declaration -> create_obj_declaration .)
    protected       reduce using rule 21 (declaration -> create_obj_declaration .)
    public          reduce using rule 21 (declaration -> create_obj_declaration .)
    var             reduce using rule 21 (declaration -> create_obj_declaration .)
    endfor          reduce using rule 21 (declaration -> create_obj_declaration .)
    endforeach      reduce using rule 21 (declaration -> create_obj_declaration .)
    break           reduce using rule 21 (declaration -> create_obj_declaration .)
    endswitch       reduce using rule 21 (declaration -> create_obj_declaration .)
    default         reduce using rule 21 (declaration -> create_obj_declaration .)
    case            reduce using rule 21 (declaration -> create_obj_declaration .)


state 22

    (22) declaration -> interface_declaration .

    COMMENT         reduce using rule 22 (declaration -> interface_declaration .)
    COMMENT_HASHTAG reduce using rule 22 (declaration -> interface_declaration .)
    COMMENT_MULTI   reduce using rule 22 (declaration -> interface_declaration .)
    empty           reduce using rule 22 (declaration -> interface_declaration .)
    include         reduce using rule 22 (declaration -> interface_declaration .)
    const           reduce using rule 22 (declaration -> interface_declaration .)
    print           reduce using rule 22 (declaration -> interface_declaration .)
    echo            reduce using rule 22 (declaration -> interface_declaration .)
    while           reduce using rule 22 (declaration -> interface_declaration .)
    do              reduce using rule 22 (declaration -> interface_declaration .)
    if              reduce using rule 22 (declaration -> interface_declaration .)
    function        reduce using rule 22 (declaration -> interface_declaration .)
    ID              reduce using rule 22 (declaration -> interface_declaration .)
    return          reduce using rule 22 (declaration -> interface_declaration .)
    class           reduce using rule 22 (declaration -> interface_declaration .)
    new             reduce using rule 22 (declaration -> interface_declaration .)
    interface       reduce using rule 22 (declaration -> interface_declaration .)
    trait           reduce using rule 22 (declaration -> interface_declaration .)
    use             reduce using rule 22 (declaration -> interface_declaration .)
    continue        reduce using rule 22 (declaration -> interface_declaration .)
    CLOSE_TAG       reduce using rule 22 (declaration -> interface_declaration .)
    for             reduce using rule 22 (declaration -> interface_declaration .)
    foreach         reduce using rule 22 (declaration -> interface_declaration .)
    switch          reduce using rule 22 (declaration -> interface_declaration .)
    try             reduce using rule 22 (declaration -> interface_declaration .)
    throw           reduce using rule 22 (declaration -> interface_declaration .)
    exit            reduce using rule 22 (declaration -> interface_declaration .)
    VARIABLE        reduce using rule 22 (declaration -> interface_declaration .)
    array           reduce using rule 22 (declaration -> interface_declaration .)
    pow             reduce using rule 22 (declaration -> interface_declaration .)
    POW             reduce using rule 22 (declaration -> interface_declaration .)
    abs             reduce using rule 22 (declaration -> interface_declaration .)
    cos             reduce using rule 22 (declaration -> interface_declaration .)
    deg2rad         reduce using rule 22 (declaration -> interface_declaration .)
    rad2deg         reduce using rule 22 (declaration -> interface_declaration .)
    die             reduce using rule 22 (declaration -> interface_declaration .)
    exp             reduce using rule 22 (declaration -> interface_declaration .)
    floor           reduce using rule 22 (declaration -> interface_declaration .)
    isset           reduce using rule 22 (declaration -> interface_declaration .)
    list            reduce using rule 22 (declaration -> interface_declaration .)
    log             reduce using rule 22 (declaration -> interface_declaration .)
    log10           reduce using rule 22 (declaration -> interface_declaration .)
    max             reduce using rule 22 (declaration -> interface_declaration .)
    min             reduce using rule 22 (declaration -> interface_declaration .)
    rand            reduce using rule 22 (declaration -> interface_declaration .)
    round           reduce using rule 22 (declaration -> interface_declaration .)
    sin             reduce using rule 22 (declaration -> interface_declaration .)
    sqrt            reduce using rule 22 (declaration -> interface_declaration .)
    unset           reduce using rule 22 (declaration -> interface_declaration .)
    CADENA          reduce using rule 22 (declaration -> interface_declaration .)
    $end            reduce using rule 22 (declaration -> interface_declaration .)
    RBLOCK          reduce using rule 22 (declaration -> interface_declaration .)
    endwhile        reduce using rule 22 (declaration -> interface_declaration .)
    private         reduce using rule 22 (declaration -> interface_declaration .)
    protected       reduce using rule 22 (declaration -> interface_declaration .)
    public          reduce using rule 22 (declaration -> interface_declaration .)
    var             reduce using rule 22 (declaration -> interface_declaration .)
    endfor          reduce using rule 22 (declaration -> interface_declaration .)
    endforeach      reduce using rule 22 (declaration -> interface_declaration .)
    break           reduce using rule 22 (declaration -> interface_declaration .)
    endswitch       reduce using rule 22 (declaration -> interface_declaration .)
    default         reduce using rule 22 (declaration -> interface_declaration .)
    case            reduce using rule 22 (declaration -> interface_declaration .)


state 23

    (23) declaration -> trait_declaration .

    COMMENT         reduce using rule 23 (declaration -> trait_declaration .)
    COMMENT_HASHTAG reduce using rule 23 (declaration -> trait_declaration .)
    COMMENT_MULTI   reduce using rule 23 (declaration -> trait_declaration .)
    empty           reduce using rule 23 (declaration -> trait_declaration .)
    include         reduce using rule 23 (declaration -> trait_declaration .)
    const           reduce using rule 23 (declaration -> trait_declaration .)
    print           reduce using rule 23 (declaration -> trait_declaration .)
    echo            reduce using rule 23 (declaration -> trait_declaration .)
    while           reduce using rule 23 (declaration -> trait_declaration .)
    do              reduce using rule 23 (declaration -> trait_declaration .)
    if              reduce using rule 23 (declaration -> trait_declaration .)
    function        reduce using rule 23 (declaration -> trait_declaration .)
    ID              reduce using rule 23 (declaration -> trait_declaration .)
    return          reduce using rule 23 (declaration -> trait_declaration .)
    class           reduce using rule 23 (declaration -> trait_declaration .)
    new             reduce using rule 23 (declaration -> trait_declaration .)
    interface       reduce using rule 23 (declaration -> trait_declaration .)
    trait           reduce using rule 23 (declaration -> trait_declaration .)
    use             reduce using rule 23 (declaration -> trait_declaration .)
    continue        reduce using rule 23 (declaration -> trait_declaration .)
    CLOSE_TAG       reduce using rule 23 (declaration -> trait_declaration .)
    for             reduce using rule 23 (declaration -> trait_declaration .)
    foreach         reduce using rule 23 (declaration -> trait_declaration .)
    switch          reduce using rule 23 (declaration -> trait_declaration .)
    try             reduce using rule 23 (declaration -> trait_declaration .)
    throw           reduce using rule 23 (declaration -> trait_declaration .)
    exit            reduce using rule 23 (declaration -> trait_declaration .)
    VARIABLE        reduce using rule 23 (declaration -> trait_declaration .)
    array           reduce using rule 23 (declaration -> trait_declaration .)
    pow             reduce using rule 23 (declaration -> trait_declaration .)
    POW             reduce using rule 23 (declaration -> trait_declaration .)
    abs             reduce using rule 23 (declaration -> trait_declaration .)
    cos             reduce using rule 23 (declaration -> trait_declaration .)
    deg2rad         reduce using rule 23 (declaration -> trait_declaration .)
    rad2deg         reduce using rule 23 (declaration -> trait_declaration .)
    die             reduce using rule 23 (declaration -> trait_declaration .)
    exp             reduce using rule 23 (declaration -> trait_declaration .)
    floor           reduce using rule 23 (declaration -> trait_declaration .)
    isset           reduce using rule 23 (declaration -> trait_declaration .)
    list            reduce using rule 23 (declaration -> trait_declaration .)
    log             reduce using rule 23 (declaration -> trait_declaration .)
    log10           reduce using rule 23 (declaration -> trait_declaration .)
    max             reduce using rule 23 (declaration -> trait_declaration .)
    min             reduce using rule 23 (declaration -> trait_declaration .)
    rand            reduce using rule 23 (declaration -> trait_declaration .)
    round           reduce using rule 23 (declaration -> trait_declaration .)
    sin             reduce using rule 23 (declaration -> trait_declaration .)
    sqrt            reduce using rule 23 (declaration -> trait_declaration .)
    unset           reduce using rule 23 (declaration -> trait_declaration .)
    CADENA          reduce using rule 23 (declaration -> trait_declaration .)
    $end            reduce using rule 23 (declaration -> trait_declaration .)
    RBLOCK          reduce using rule 23 (declaration -> trait_declaration .)
    endwhile        reduce using rule 23 (declaration -> trait_declaration .)
    private         reduce using rule 23 (declaration -> trait_declaration .)
    protected       reduce using rule 23 (declaration -> trait_declaration .)
    public          reduce using rule 23 (declaration -> trait_declaration .)
    var             reduce using rule 23 (declaration -> trait_declaration .)
    endfor          reduce using rule 23 (declaration -> trait_declaration .)
    endforeach      reduce using rule 23 (declaration -> trait_declaration .)
    break           reduce using rule 23 (declaration -> trait_declaration .)
    endswitch       reduce using rule 23 (declaration -> trait_declaration .)
    default         reduce using rule 23 (declaration -> trait_declaration .)
    case            reduce using rule 23 (declaration -> trait_declaration .)


state 24

    (24) declaration -> use_declaration .

    COMMENT         reduce using rule 24 (declaration -> use_declaration .)
    COMMENT_HASHTAG reduce using rule 24 (declaration -> use_declaration .)
    COMMENT_MULTI   reduce using rule 24 (declaration -> use_declaration .)
    empty           reduce using rule 24 (declaration -> use_declaration .)
    include         reduce using rule 24 (declaration -> use_declaration .)
    const           reduce using rule 24 (declaration -> use_declaration .)
    print           reduce using rule 24 (declaration -> use_declaration .)
    echo            reduce using rule 24 (declaration -> use_declaration .)
    while           reduce using rule 24 (declaration -> use_declaration .)
    do              reduce using rule 24 (declaration -> use_declaration .)
    if              reduce using rule 24 (declaration -> use_declaration .)
    function        reduce using rule 24 (declaration -> use_declaration .)
    ID              reduce using rule 24 (declaration -> use_declaration .)
    return          reduce using rule 24 (declaration -> use_declaration .)
    class           reduce using rule 24 (declaration -> use_declaration .)
    new             reduce using rule 24 (declaration -> use_declaration .)
    interface       reduce using rule 24 (declaration -> use_declaration .)
    trait           reduce using rule 24 (declaration -> use_declaration .)
    use             reduce using rule 24 (declaration -> use_declaration .)
    continue        reduce using rule 24 (declaration -> use_declaration .)
    CLOSE_TAG       reduce using rule 24 (declaration -> use_declaration .)
    for             reduce using rule 24 (declaration -> use_declaration .)
    foreach         reduce using rule 24 (declaration -> use_declaration .)
    switch          reduce using rule 24 (declaration -> use_declaration .)
    try             reduce using rule 24 (declaration -> use_declaration .)
    throw           reduce using rule 24 (declaration -> use_declaration .)
    exit            reduce using rule 24 (declaration -> use_declaration .)
    VARIABLE        reduce using rule 24 (declaration -> use_declaration .)
    array           reduce using rule 24 (declaration -> use_declaration .)
    pow             reduce using rule 24 (declaration -> use_declaration .)
    POW             reduce using rule 24 (declaration -> use_declaration .)
    abs             reduce using rule 24 (declaration -> use_declaration .)
    cos             reduce using rule 24 (declaration -> use_declaration .)
    deg2rad         reduce using rule 24 (declaration -> use_declaration .)
    rad2deg         reduce using rule 24 (declaration -> use_declaration .)
    die             reduce using rule 24 (declaration -> use_declaration .)
    exp             reduce using rule 24 (declaration -> use_declaration .)
    floor           reduce using rule 24 (declaration -> use_declaration .)
    isset           reduce using rule 24 (declaration -> use_declaration .)
    list            reduce using rule 24 (declaration -> use_declaration .)
    log             reduce using rule 24 (declaration -> use_declaration .)
    log10           reduce using rule 24 (declaration -> use_declaration .)
    max             reduce using rule 24 (declaration -> use_declaration .)
    min             reduce using rule 24 (declaration -> use_declaration .)
    rand            reduce using rule 24 (declaration -> use_declaration .)
    round           reduce using rule 24 (declaration -> use_declaration .)
    sin             reduce using rule 24 (declaration -> use_declaration .)
    sqrt            reduce using rule 24 (declaration -> use_declaration .)
    unset           reduce using rule 24 (declaration -> use_declaration .)
    CADENA          reduce using rule 24 (declaration -> use_declaration .)
    $end            reduce using rule 24 (declaration -> use_declaration .)
    RBLOCK          reduce using rule 24 (declaration -> use_declaration .)
    endwhile        reduce using rule 24 (declaration -> use_declaration .)
    private         reduce using rule 24 (declaration -> use_declaration .)
    protected       reduce using rule 24 (declaration -> use_declaration .)
    public          reduce using rule 24 (declaration -> use_declaration .)
    var             reduce using rule 24 (declaration -> use_declaration .)
    endfor          reduce using rule 24 (declaration -> use_declaration .)
    endforeach      reduce using rule 24 (declaration -> use_declaration .)
    break           reduce using rule 24 (declaration -> use_declaration .)
    endswitch       reduce using rule 24 (declaration -> use_declaration .)
    default         reduce using rule 24 (declaration -> use_declaration .)
    case            reduce using rule 24 (declaration -> use_declaration .)


state 25

    (25) declaration -> continue_declaration .

    COMMENT         reduce using rule 25 (declaration -> continue_declaration .)
    COMMENT_HASHTAG reduce using rule 25 (declaration -> continue_declaration .)
    COMMENT_MULTI   reduce using rule 25 (declaration -> continue_declaration .)
    empty           reduce using rule 25 (declaration -> continue_declaration .)
    include         reduce using rule 25 (declaration -> continue_declaration .)
    const           reduce using rule 25 (declaration -> continue_declaration .)
    print           reduce using rule 25 (declaration -> continue_declaration .)
    echo            reduce using rule 25 (declaration -> continue_declaration .)
    while           reduce using rule 25 (declaration -> continue_declaration .)
    do              reduce using rule 25 (declaration -> continue_declaration .)
    if              reduce using rule 25 (declaration -> continue_declaration .)
    function        reduce using rule 25 (declaration -> continue_declaration .)
    ID              reduce using rule 25 (declaration -> continue_declaration .)
    return          reduce using rule 25 (declaration -> continue_declaration .)
    class           reduce using rule 25 (declaration -> continue_declaration .)
    new             reduce using rule 25 (declaration -> continue_declaration .)
    interface       reduce using rule 25 (declaration -> continue_declaration .)
    trait           reduce using rule 25 (declaration -> continue_declaration .)
    use             reduce using rule 25 (declaration -> continue_declaration .)
    continue        reduce using rule 25 (declaration -> continue_declaration .)
    CLOSE_TAG       reduce using rule 25 (declaration -> continue_declaration .)
    for             reduce using rule 25 (declaration -> continue_declaration .)
    foreach         reduce using rule 25 (declaration -> continue_declaration .)
    switch          reduce using rule 25 (declaration -> continue_declaration .)
    try             reduce using rule 25 (declaration -> continue_declaration .)
    throw           reduce using rule 25 (declaration -> continue_declaration .)
    exit            reduce using rule 25 (declaration -> continue_declaration .)
    VARIABLE        reduce using rule 25 (declaration -> continue_declaration .)
    array           reduce using rule 25 (declaration -> continue_declaration .)
    pow             reduce using rule 25 (declaration -> continue_declaration .)
    POW             reduce using rule 25 (declaration -> continue_declaration .)
    abs             reduce using rule 25 (declaration -> continue_declaration .)
    cos             reduce using rule 25 (declaration -> continue_declaration .)
    deg2rad         reduce using rule 25 (declaration -> continue_declaration .)
    rad2deg         reduce using rule 25 (declaration -> continue_declaration .)
    die             reduce using rule 25 (declaration -> continue_declaration .)
    exp             reduce using rule 25 (declaration -> continue_declaration .)
    floor           reduce using rule 25 (declaration -> continue_declaration .)
    isset           reduce using rule 25 (declaration -> continue_declaration .)
    list            reduce using rule 25 (declaration -> continue_declaration .)
    log             reduce using rule 25 (declaration -> continue_declaration .)
    log10           reduce using rule 25 (declaration -> continue_declaration .)
    max             reduce using rule 25 (declaration -> continue_declaration .)
    min             reduce using rule 25 (declaration -> continue_declaration .)
    rand            reduce using rule 25 (declaration -> continue_declaration .)
    round           reduce using rule 25 (declaration -> continue_declaration .)
    sin             reduce using rule 25 (declaration -> continue_declaration .)
    sqrt            reduce using rule 25 (declaration -> continue_declaration .)
    unset           reduce using rule 25 (declaration -> continue_declaration .)
    CADENA          reduce using rule 25 (declaration -> continue_declaration .)
    $end            reduce using rule 25 (declaration -> continue_declaration .)
    RBLOCK          reduce using rule 25 (declaration -> continue_declaration .)
    endwhile        reduce using rule 25 (declaration -> continue_declaration .)
    private         reduce using rule 25 (declaration -> continue_declaration .)
    protected       reduce using rule 25 (declaration -> continue_declaration .)
    public          reduce using rule 25 (declaration -> continue_declaration .)
    var             reduce using rule 25 (declaration -> continue_declaration .)
    endfor          reduce using rule 25 (declaration -> continue_declaration .)
    endforeach      reduce using rule 25 (declaration -> continue_declaration .)
    break           reduce using rule 25 (declaration -> continue_declaration .)
    endswitch       reduce using rule 25 (declaration -> continue_declaration .)
    default         reduce using rule 25 (declaration -> continue_declaration .)
    case            reduce using rule 25 (declaration -> continue_declaration .)


state 26

    (26) declaration -> footer_declaration .

    COMMENT         reduce using rule 26 (declaration -> footer_declaration .)
    COMMENT_HASHTAG reduce using rule 26 (declaration -> footer_declaration .)
    COMMENT_MULTI   reduce using rule 26 (declaration -> footer_declaration .)
    empty           reduce using rule 26 (declaration -> footer_declaration .)
    include         reduce using rule 26 (declaration -> footer_declaration .)
    const           reduce using rule 26 (declaration -> footer_declaration .)
    print           reduce using rule 26 (declaration -> footer_declaration .)
    echo            reduce using rule 26 (declaration -> footer_declaration .)
    while           reduce using rule 26 (declaration -> footer_declaration .)
    do              reduce using rule 26 (declaration -> footer_declaration .)
    if              reduce using rule 26 (declaration -> footer_declaration .)
    function        reduce using rule 26 (declaration -> footer_declaration .)
    ID              reduce using rule 26 (declaration -> footer_declaration .)
    return          reduce using rule 26 (declaration -> footer_declaration .)
    class           reduce using rule 26 (declaration -> footer_declaration .)
    new             reduce using rule 26 (declaration -> footer_declaration .)
    interface       reduce using rule 26 (declaration -> footer_declaration .)
    trait           reduce using rule 26 (declaration -> footer_declaration .)
    use             reduce using rule 26 (declaration -> footer_declaration .)
    continue        reduce using rule 26 (declaration -> footer_declaration .)
    CLOSE_TAG       reduce using rule 26 (declaration -> footer_declaration .)
    for             reduce using rule 26 (declaration -> footer_declaration .)
    foreach         reduce using rule 26 (declaration -> footer_declaration .)
    switch          reduce using rule 26 (declaration -> footer_declaration .)
    try             reduce using rule 26 (declaration -> footer_declaration .)
    throw           reduce using rule 26 (declaration -> footer_declaration .)
    exit            reduce using rule 26 (declaration -> footer_declaration .)
    VARIABLE        reduce using rule 26 (declaration -> footer_declaration .)
    array           reduce using rule 26 (declaration -> footer_declaration .)
    pow             reduce using rule 26 (declaration -> footer_declaration .)
    POW             reduce using rule 26 (declaration -> footer_declaration .)
    abs             reduce using rule 26 (declaration -> footer_declaration .)
    cos             reduce using rule 26 (declaration -> footer_declaration .)
    deg2rad         reduce using rule 26 (declaration -> footer_declaration .)
    rad2deg         reduce using rule 26 (declaration -> footer_declaration .)
    die             reduce using rule 26 (declaration -> footer_declaration .)
    exp             reduce using rule 26 (declaration -> footer_declaration .)
    floor           reduce using rule 26 (declaration -> footer_declaration .)
    isset           reduce using rule 26 (declaration -> footer_declaration .)
    list            reduce using rule 26 (declaration -> footer_declaration .)
    log             reduce using rule 26 (declaration -> footer_declaration .)
    log10           reduce using rule 26 (declaration -> footer_declaration .)
    max             reduce using rule 26 (declaration -> footer_declaration .)
    min             reduce using rule 26 (declaration -> footer_declaration .)
    rand            reduce using rule 26 (declaration -> footer_declaration .)
    round           reduce using rule 26 (declaration -> footer_declaration .)
    sin             reduce using rule 26 (declaration -> footer_declaration .)
    sqrt            reduce using rule 26 (declaration -> footer_declaration .)
    unset           reduce using rule 26 (declaration -> footer_declaration .)
    CADENA          reduce using rule 26 (declaration -> footer_declaration .)
    $end            reduce using rule 26 (declaration -> footer_declaration .)
    RBLOCK          reduce using rule 26 (declaration -> footer_declaration .)
    endwhile        reduce using rule 26 (declaration -> footer_declaration .)
    private         reduce using rule 26 (declaration -> footer_declaration .)
    protected       reduce using rule 26 (declaration -> footer_declaration .)
    public          reduce using rule 26 (declaration -> footer_declaration .)
    var             reduce using rule 26 (declaration -> footer_declaration .)
    endfor          reduce using rule 26 (declaration -> footer_declaration .)
    endforeach      reduce using rule 26 (declaration -> footer_declaration .)
    break           reduce using rule 26 (declaration -> footer_declaration .)
    endswitch       reduce using rule 26 (declaration -> footer_declaration .)
    default         reduce using rule 26 (declaration -> footer_declaration .)
    case            reduce using rule 26 (declaration -> footer_declaration .)


state 27

    (27) declaration -> for_loop .

    COMMENT         reduce using rule 27 (declaration -> for_loop .)
    COMMENT_HASHTAG reduce using rule 27 (declaration -> for_loop .)
    COMMENT_MULTI   reduce using rule 27 (declaration -> for_loop .)
    empty           reduce using rule 27 (declaration -> for_loop .)
    include         reduce using rule 27 (declaration -> for_loop .)
    const           reduce using rule 27 (declaration -> for_loop .)
    print           reduce using rule 27 (declaration -> for_loop .)
    echo            reduce using rule 27 (declaration -> for_loop .)
    while           reduce using rule 27 (declaration -> for_loop .)
    do              reduce using rule 27 (declaration -> for_loop .)
    if              reduce using rule 27 (declaration -> for_loop .)
    function        reduce using rule 27 (declaration -> for_loop .)
    ID              reduce using rule 27 (declaration -> for_loop .)
    return          reduce using rule 27 (declaration -> for_loop .)
    class           reduce using rule 27 (declaration -> for_loop .)
    new             reduce using rule 27 (declaration -> for_loop .)
    interface       reduce using rule 27 (declaration -> for_loop .)
    trait           reduce using rule 27 (declaration -> for_loop .)
    use             reduce using rule 27 (declaration -> for_loop .)
    continue        reduce using rule 27 (declaration -> for_loop .)
    CLOSE_TAG       reduce using rule 27 (declaration -> for_loop .)
    for             reduce using rule 27 (declaration -> for_loop .)
    foreach         reduce using rule 27 (declaration -> for_loop .)
    switch          reduce using rule 27 (declaration -> for_loop .)
    try             reduce using rule 27 (declaration -> for_loop .)
    throw           reduce using rule 27 (declaration -> for_loop .)
    exit            reduce using rule 27 (declaration -> for_loop .)
    VARIABLE        reduce using rule 27 (declaration -> for_loop .)
    array           reduce using rule 27 (declaration -> for_loop .)
    pow             reduce using rule 27 (declaration -> for_loop .)
    POW             reduce using rule 27 (declaration -> for_loop .)
    abs             reduce using rule 27 (declaration -> for_loop .)
    cos             reduce using rule 27 (declaration -> for_loop .)
    deg2rad         reduce using rule 27 (declaration -> for_loop .)
    rad2deg         reduce using rule 27 (declaration -> for_loop .)
    die             reduce using rule 27 (declaration -> for_loop .)
    exp             reduce using rule 27 (declaration -> for_loop .)
    floor           reduce using rule 27 (declaration -> for_loop .)
    isset           reduce using rule 27 (declaration -> for_loop .)
    list            reduce using rule 27 (declaration -> for_loop .)
    log             reduce using rule 27 (declaration -> for_loop .)
    log10           reduce using rule 27 (declaration -> for_loop .)
    max             reduce using rule 27 (declaration -> for_loop .)
    min             reduce using rule 27 (declaration -> for_loop .)
    rand            reduce using rule 27 (declaration -> for_loop .)
    round           reduce using rule 27 (declaration -> for_loop .)
    sin             reduce using rule 27 (declaration -> for_loop .)
    sqrt            reduce using rule 27 (declaration -> for_loop .)
    unset           reduce using rule 27 (declaration -> for_loop .)
    CADENA          reduce using rule 27 (declaration -> for_loop .)
    $end            reduce using rule 27 (declaration -> for_loop .)
    RBLOCK          reduce using rule 27 (declaration -> for_loop .)
    endwhile        reduce using rule 27 (declaration -> for_loop .)
    private         reduce using rule 27 (declaration -> for_loop .)
    protected       reduce using rule 27 (declaration -> for_loop .)
    public          reduce using rule 27 (declaration -> for_loop .)
    var             reduce using rule 27 (declaration -> for_loop .)
    endfor          reduce using rule 27 (declaration -> for_loop .)
    endforeach      reduce using rule 27 (declaration -> for_loop .)
    break           reduce using rule 27 (declaration -> for_loop .)
    endswitch       reduce using rule 27 (declaration -> for_loop .)
    default         reduce using rule 27 (declaration -> for_loop .)
    case            reduce using rule 27 (declaration -> for_loop .)


state 28

    (28) declaration -> foreach_loop .

    COMMENT         reduce using rule 28 (declaration -> foreach_loop .)
    COMMENT_HASHTAG reduce using rule 28 (declaration -> foreach_loop .)
    COMMENT_MULTI   reduce using rule 28 (declaration -> foreach_loop .)
    empty           reduce using rule 28 (declaration -> foreach_loop .)
    include         reduce using rule 28 (declaration -> foreach_loop .)
    const           reduce using rule 28 (declaration -> foreach_loop .)
    print           reduce using rule 28 (declaration -> foreach_loop .)
    echo            reduce using rule 28 (declaration -> foreach_loop .)
    while           reduce using rule 28 (declaration -> foreach_loop .)
    do              reduce using rule 28 (declaration -> foreach_loop .)
    if              reduce using rule 28 (declaration -> foreach_loop .)
    function        reduce using rule 28 (declaration -> foreach_loop .)
    ID              reduce using rule 28 (declaration -> foreach_loop .)
    return          reduce using rule 28 (declaration -> foreach_loop .)
    class           reduce using rule 28 (declaration -> foreach_loop .)
    new             reduce using rule 28 (declaration -> foreach_loop .)
    interface       reduce using rule 28 (declaration -> foreach_loop .)
    trait           reduce using rule 28 (declaration -> foreach_loop .)
    use             reduce using rule 28 (declaration -> foreach_loop .)
    continue        reduce using rule 28 (declaration -> foreach_loop .)
    CLOSE_TAG       reduce using rule 28 (declaration -> foreach_loop .)
    for             reduce using rule 28 (declaration -> foreach_loop .)
    foreach         reduce using rule 28 (declaration -> foreach_loop .)
    switch          reduce using rule 28 (declaration -> foreach_loop .)
    try             reduce using rule 28 (declaration -> foreach_loop .)
    throw           reduce using rule 28 (declaration -> foreach_loop .)
    exit            reduce using rule 28 (declaration -> foreach_loop .)
    VARIABLE        reduce using rule 28 (declaration -> foreach_loop .)
    array           reduce using rule 28 (declaration -> foreach_loop .)
    pow             reduce using rule 28 (declaration -> foreach_loop .)
    POW             reduce using rule 28 (declaration -> foreach_loop .)
    abs             reduce using rule 28 (declaration -> foreach_loop .)
    cos             reduce using rule 28 (declaration -> foreach_loop .)
    deg2rad         reduce using rule 28 (declaration -> foreach_loop .)
    rad2deg         reduce using rule 28 (declaration -> foreach_loop .)
    die             reduce using rule 28 (declaration -> foreach_loop .)
    exp             reduce using rule 28 (declaration -> foreach_loop .)
    floor           reduce using rule 28 (declaration -> foreach_loop .)
    isset           reduce using rule 28 (declaration -> foreach_loop .)
    list            reduce using rule 28 (declaration -> foreach_loop .)
    log             reduce using rule 28 (declaration -> foreach_loop .)
    log10           reduce using rule 28 (declaration -> foreach_loop .)
    max             reduce using rule 28 (declaration -> foreach_loop .)
    min             reduce using rule 28 (declaration -> foreach_loop .)
    rand            reduce using rule 28 (declaration -> foreach_loop .)
    round           reduce using rule 28 (declaration -> foreach_loop .)
    sin             reduce using rule 28 (declaration -> foreach_loop .)
    sqrt            reduce using rule 28 (declaration -> foreach_loop .)
    unset           reduce using rule 28 (declaration -> foreach_loop .)
    CADENA          reduce using rule 28 (declaration -> foreach_loop .)
    $end            reduce using rule 28 (declaration -> foreach_loop .)
    RBLOCK          reduce using rule 28 (declaration -> foreach_loop .)
    endwhile        reduce using rule 28 (declaration -> foreach_loop .)
    private         reduce using rule 28 (declaration -> foreach_loop .)
    protected       reduce using rule 28 (declaration -> foreach_loop .)
    public          reduce using rule 28 (declaration -> foreach_loop .)
    var             reduce using rule 28 (declaration -> foreach_loop .)
    endfor          reduce using rule 28 (declaration -> foreach_loop .)
    endforeach      reduce using rule 28 (declaration -> foreach_loop .)
    break           reduce using rule 28 (declaration -> foreach_loop .)
    endswitch       reduce using rule 28 (declaration -> foreach_loop .)
    default         reduce using rule 28 (declaration -> foreach_loop .)
    case            reduce using rule 28 (declaration -> foreach_loop .)


state 29

    (29) declaration -> switch_statement .

    COMMENT         reduce using rule 29 (declaration -> switch_statement .)
    COMMENT_HASHTAG reduce using rule 29 (declaration -> switch_statement .)
    COMMENT_MULTI   reduce using rule 29 (declaration -> switch_statement .)
    empty           reduce using rule 29 (declaration -> switch_statement .)
    include         reduce using rule 29 (declaration -> switch_statement .)
    const           reduce using rule 29 (declaration -> switch_statement .)
    print           reduce using rule 29 (declaration -> switch_statement .)
    echo            reduce using rule 29 (declaration -> switch_statement .)
    while           reduce using rule 29 (declaration -> switch_statement .)
    do              reduce using rule 29 (declaration -> switch_statement .)
    if              reduce using rule 29 (declaration -> switch_statement .)
    function        reduce using rule 29 (declaration -> switch_statement .)
    ID              reduce using rule 29 (declaration -> switch_statement .)
    return          reduce using rule 29 (declaration -> switch_statement .)
    class           reduce using rule 29 (declaration -> switch_statement .)
    new             reduce using rule 29 (declaration -> switch_statement .)
    interface       reduce using rule 29 (declaration -> switch_statement .)
    trait           reduce using rule 29 (declaration -> switch_statement .)
    use             reduce using rule 29 (declaration -> switch_statement .)
    continue        reduce using rule 29 (declaration -> switch_statement .)
    CLOSE_TAG       reduce using rule 29 (declaration -> switch_statement .)
    for             reduce using rule 29 (declaration -> switch_statement .)
    foreach         reduce using rule 29 (declaration -> switch_statement .)
    switch          reduce using rule 29 (declaration -> switch_statement .)
    try             reduce using rule 29 (declaration -> switch_statement .)
    throw           reduce using rule 29 (declaration -> switch_statement .)
    exit            reduce using rule 29 (declaration -> switch_statement .)
    VARIABLE        reduce using rule 29 (declaration -> switch_statement .)
    array           reduce using rule 29 (declaration -> switch_statement .)
    pow             reduce using rule 29 (declaration -> switch_statement .)
    POW             reduce using rule 29 (declaration -> switch_statement .)
    abs             reduce using rule 29 (declaration -> switch_statement .)
    cos             reduce using rule 29 (declaration -> switch_statement .)
    deg2rad         reduce using rule 29 (declaration -> switch_statement .)
    rad2deg         reduce using rule 29 (declaration -> switch_statement .)
    die             reduce using rule 29 (declaration -> switch_statement .)
    exp             reduce using rule 29 (declaration -> switch_statement .)
    floor           reduce using rule 29 (declaration -> switch_statement .)
    isset           reduce using rule 29 (declaration -> switch_statement .)
    list            reduce using rule 29 (declaration -> switch_statement .)
    log             reduce using rule 29 (declaration -> switch_statement .)
    log10           reduce using rule 29 (declaration -> switch_statement .)
    max             reduce using rule 29 (declaration -> switch_statement .)
    min             reduce using rule 29 (declaration -> switch_statement .)
    rand            reduce using rule 29 (declaration -> switch_statement .)
    round           reduce using rule 29 (declaration -> switch_statement .)
    sin             reduce using rule 29 (declaration -> switch_statement .)
    sqrt            reduce using rule 29 (declaration -> switch_statement .)
    unset           reduce using rule 29 (declaration -> switch_statement .)
    CADENA          reduce using rule 29 (declaration -> switch_statement .)
    $end            reduce using rule 29 (declaration -> switch_statement .)
    RBLOCK          reduce using rule 29 (declaration -> switch_statement .)
    endwhile        reduce using rule 29 (declaration -> switch_statement .)
    private         reduce using rule 29 (declaration -> switch_statement .)
    protected       reduce using rule 29 (declaration -> switch_statement .)
    public          reduce using rule 29 (declaration -> switch_statement .)
    var             reduce using rule 29 (declaration -> switch_statement .)
    endfor          reduce using rule 29 (declaration -> switch_statement .)
    endforeach      reduce using rule 29 (declaration -> switch_statement .)
    break           reduce using rule 29 (declaration -> switch_statement .)
    endswitch       reduce using rule 29 (declaration -> switch_statement .)
    default         reduce using rule 29 (declaration -> switch_statement .)
    case            reduce using rule 29 (declaration -> switch_statement .)


state 30

    (30) declaration -> try_statement .

    COMMENT         reduce using rule 30 (declaration -> try_statement .)
    COMMENT_HASHTAG reduce using rule 30 (declaration -> try_statement .)
    COMMENT_MULTI   reduce using rule 30 (declaration -> try_statement .)
    empty           reduce using rule 30 (declaration -> try_statement .)
    include         reduce using rule 30 (declaration -> try_statement .)
    const           reduce using rule 30 (declaration -> try_statement .)
    print           reduce using rule 30 (declaration -> try_statement .)
    echo            reduce using rule 30 (declaration -> try_statement .)
    while           reduce using rule 30 (declaration -> try_statement .)
    do              reduce using rule 30 (declaration -> try_statement .)
    if              reduce using rule 30 (declaration -> try_statement .)
    function        reduce using rule 30 (declaration -> try_statement .)
    ID              reduce using rule 30 (declaration -> try_statement .)
    return          reduce using rule 30 (declaration -> try_statement .)
    class           reduce using rule 30 (declaration -> try_statement .)
    new             reduce using rule 30 (declaration -> try_statement .)
    interface       reduce using rule 30 (declaration -> try_statement .)
    trait           reduce using rule 30 (declaration -> try_statement .)
    use             reduce using rule 30 (declaration -> try_statement .)
    continue        reduce using rule 30 (declaration -> try_statement .)
    CLOSE_TAG       reduce using rule 30 (declaration -> try_statement .)
    for             reduce using rule 30 (declaration -> try_statement .)
    foreach         reduce using rule 30 (declaration -> try_statement .)
    switch          reduce using rule 30 (declaration -> try_statement .)
    try             reduce using rule 30 (declaration -> try_statement .)
    throw           reduce using rule 30 (declaration -> try_statement .)
    exit            reduce using rule 30 (declaration -> try_statement .)
    VARIABLE        reduce using rule 30 (declaration -> try_statement .)
    array           reduce using rule 30 (declaration -> try_statement .)
    pow             reduce using rule 30 (declaration -> try_statement .)
    POW             reduce using rule 30 (declaration -> try_statement .)
    abs             reduce using rule 30 (declaration -> try_statement .)
    cos             reduce using rule 30 (declaration -> try_statement .)
    deg2rad         reduce using rule 30 (declaration -> try_statement .)
    rad2deg         reduce using rule 30 (declaration -> try_statement .)
    die             reduce using rule 30 (declaration -> try_statement .)
    exp             reduce using rule 30 (declaration -> try_statement .)
    floor           reduce using rule 30 (declaration -> try_statement .)
    isset           reduce using rule 30 (declaration -> try_statement .)
    list            reduce using rule 30 (declaration -> try_statement .)
    log             reduce using rule 30 (declaration -> try_statement .)
    log10           reduce using rule 30 (declaration -> try_statement .)
    max             reduce using rule 30 (declaration -> try_statement .)
    min             reduce using rule 30 (declaration -> try_statement .)
    rand            reduce using rule 30 (declaration -> try_statement .)
    round           reduce using rule 30 (declaration -> try_statement .)
    sin             reduce using rule 30 (declaration -> try_statement .)
    sqrt            reduce using rule 30 (declaration -> try_statement .)
    unset           reduce using rule 30 (declaration -> try_statement .)
    CADENA          reduce using rule 30 (declaration -> try_statement .)
    $end            reduce using rule 30 (declaration -> try_statement .)
    RBLOCK          reduce using rule 30 (declaration -> try_statement .)
    endwhile        reduce using rule 30 (declaration -> try_statement .)
    private         reduce using rule 30 (declaration -> try_statement .)
    protected       reduce using rule 30 (declaration -> try_statement .)
    public          reduce using rule 30 (declaration -> try_statement .)
    var             reduce using rule 30 (declaration -> try_statement .)
    endfor          reduce using rule 30 (declaration -> try_statement .)
    endforeach      reduce using rule 30 (declaration -> try_statement .)
    break           reduce using rule 30 (declaration -> try_statement .)
    endswitch       reduce using rule 30 (declaration -> try_statement .)
    default         reduce using rule 30 (declaration -> try_statement .)
    case            reduce using rule 30 (declaration -> try_statement .)


state 31

    (31) declaration -> throw_statement .

    COMMENT         reduce using rule 31 (declaration -> throw_statement .)
    COMMENT_HASHTAG reduce using rule 31 (declaration -> throw_statement .)
    COMMENT_MULTI   reduce using rule 31 (declaration -> throw_statement .)
    empty           reduce using rule 31 (declaration -> throw_statement .)
    include         reduce using rule 31 (declaration -> throw_statement .)
    const           reduce using rule 31 (declaration -> throw_statement .)
    print           reduce using rule 31 (declaration -> throw_statement .)
    echo            reduce using rule 31 (declaration -> throw_statement .)
    while           reduce using rule 31 (declaration -> throw_statement .)
    do              reduce using rule 31 (declaration -> throw_statement .)
    if              reduce using rule 31 (declaration -> throw_statement .)
    function        reduce using rule 31 (declaration -> throw_statement .)
    ID              reduce using rule 31 (declaration -> throw_statement .)
    return          reduce using rule 31 (declaration -> throw_statement .)
    class           reduce using rule 31 (declaration -> throw_statement .)
    new             reduce using rule 31 (declaration -> throw_statement .)
    interface       reduce using rule 31 (declaration -> throw_statement .)
    trait           reduce using rule 31 (declaration -> throw_statement .)
    use             reduce using rule 31 (declaration -> throw_statement .)
    continue        reduce using rule 31 (declaration -> throw_statement .)
    CLOSE_TAG       reduce using rule 31 (declaration -> throw_statement .)
    for             reduce using rule 31 (declaration -> throw_statement .)
    foreach         reduce using rule 31 (declaration -> throw_statement .)
    switch          reduce using rule 31 (declaration -> throw_statement .)
    try             reduce using rule 31 (declaration -> throw_statement .)
    throw           reduce using rule 31 (declaration -> throw_statement .)
    exit            reduce using rule 31 (declaration -> throw_statement .)
    VARIABLE        reduce using rule 31 (declaration -> throw_statement .)
    array           reduce using rule 31 (declaration -> throw_statement .)
    pow             reduce using rule 31 (declaration -> throw_statement .)
    POW             reduce using rule 31 (declaration -> throw_statement .)
    abs             reduce using rule 31 (declaration -> throw_statement .)
    cos             reduce using rule 31 (declaration -> throw_statement .)
    deg2rad         reduce using rule 31 (declaration -> throw_statement .)
    rad2deg         reduce using rule 31 (declaration -> throw_statement .)
    die             reduce using rule 31 (declaration -> throw_statement .)
    exp             reduce using rule 31 (declaration -> throw_statement .)
    floor           reduce using rule 31 (declaration -> throw_statement .)
    isset           reduce using rule 31 (declaration -> throw_statement .)
    list            reduce using rule 31 (declaration -> throw_statement .)
    log             reduce using rule 31 (declaration -> throw_statement .)
    log10           reduce using rule 31 (declaration -> throw_statement .)
    max             reduce using rule 31 (declaration -> throw_statement .)
    min             reduce using rule 31 (declaration -> throw_statement .)
    rand            reduce using rule 31 (declaration -> throw_statement .)
    round           reduce using rule 31 (declaration -> throw_statement .)
    sin             reduce using rule 31 (declaration -> throw_statement .)
    sqrt            reduce using rule 31 (declaration -> throw_statement .)
    unset           reduce using rule 31 (declaration -> throw_statement .)
    CADENA          reduce using rule 31 (declaration -> throw_statement .)
    $end            reduce using rule 31 (declaration -> throw_statement .)
    RBLOCK          reduce using rule 31 (declaration -> throw_statement .)
    endwhile        reduce using rule 31 (declaration -> throw_statement .)
    private         reduce using rule 31 (declaration -> throw_statement .)
    protected       reduce using rule 31 (declaration -> throw_statement .)
    public          reduce using rule 31 (declaration -> throw_statement .)
    var             reduce using rule 31 (declaration -> throw_statement .)
    endfor          reduce using rule 31 (declaration -> throw_statement .)
    endforeach      reduce using rule 31 (declaration -> throw_statement .)
    break           reduce using rule 31 (declaration -> throw_statement .)
    endswitch       reduce using rule 31 (declaration -> throw_statement .)
    default         reduce using rule 31 (declaration -> throw_statement .)
    case            reduce using rule 31 (declaration -> throw_statement .)


state 32

    (32) declaration -> exit_statement .

    COMMENT         reduce using rule 32 (declaration -> exit_statement .)
    COMMENT_HASHTAG reduce using rule 32 (declaration -> exit_statement .)
    COMMENT_MULTI   reduce using rule 32 (declaration -> exit_statement .)
    empty           reduce using rule 32 (declaration -> exit_statement .)
    include         reduce using rule 32 (declaration -> exit_statement .)
    const           reduce using rule 32 (declaration -> exit_statement .)
    print           reduce using rule 32 (declaration -> exit_statement .)
    echo            reduce using rule 32 (declaration -> exit_statement .)
    while           reduce using rule 32 (declaration -> exit_statement .)
    do              reduce using rule 32 (declaration -> exit_statement .)
    if              reduce using rule 32 (declaration -> exit_statement .)
    function        reduce using rule 32 (declaration -> exit_statement .)
    ID              reduce using rule 32 (declaration -> exit_statement .)
    return          reduce using rule 32 (declaration -> exit_statement .)
    class           reduce using rule 32 (declaration -> exit_statement .)
    new             reduce using rule 32 (declaration -> exit_statement .)
    interface       reduce using rule 32 (declaration -> exit_statement .)
    trait           reduce using rule 32 (declaration -> exit_statement .)
    use             reduce using rule 32 (declaration -> exit_statement .)
    continue        reduce using rule 32 (declaration -> exit_statement .)
    CLOSE_TAG       reduce using rule 32 (declaration -> exit_statement .)
    for             reduce using rule 32 (declaration -> exit_statement .)
    foreach         reduce using rule 32 (declaration -> exit_statement .)
    switch          reduce using rule 32 (declaration -> exit_statement .)
    try             reduce using rule 32 (declaration -> exit_statement .)
    throw           reduce using rule 32 (declaration -> exit_statement .)
    exit            reduce using rule 32 (declaration -> exit_statement .)
    VARIABLE        reduce using rule 32 (declaration -> exit_statement .)
    array           reduce using rule 32 (declaration -> exit_statement .)
    pow             reduce using rule 32 (declaration -> exit_statement .)
    POW             reduce using rule 32 (declaration -> exit_statement .)
    abs             reduce using rule 32 (declaration -> exit_statement .)
    cos             reduce using rule 32 (declaration -> exit_statement .)
    deg2rad         reduce using rule 32 (declaration -> exit_statement .)
    rad2deg         reduce using rule 32 (declaration -> exit_statement .)
    die             reduce using rule 32 (declaration -> exit_statement .)
    exp             reduce using rule 32 (declaration -> exit_statement .)
    floor           reduce using rule 32 (declaration -> exit_statement .)
    isset           reduce using rule 32 (declaration -> exit_statement .)
    list            reduce using rule 32 (declaration -> exit_statement .)
    log             reduce using rule 32 (declaration -> exit_statement .)
    log10           reduce using rule 32 (declaration -> exit_statement .)
    max             reduce using rule 32 (declaration -> exit_statement .)
    min             reduce using rule 32 (declaration -> exit_statement .)
    rand            reduce using rule 32 (declaration -> exit_statement .)
    round           reduce using rule 32 (declaration -> exit_statement .)
    sin             reduce using rule 32 (declaration -> exit_statement .)
    sqrt            reduce using rule 32 (declaration -> exit_statement .)
    unset           reduce using rule 32 (declaration -> exit_statement .)
    CADENA          reduce using rule 32 (declaration -> exit_statement .)
    $end            reduce using rule 32 (declaration -> exit_statement .)
    RBLOCK          reduce using rule 32 (declaration -> exit_statement .)
    endwhile        reduce using rule 32 (declaration -> exit_statement .)
    private         reduce using rule 32 (declaration -> exit_statement .)
    protected       reduce using rule 32 (declaration -> exit_statement .)
    public          reduce using rule 32 (declaration -> exit_statement .)
    var             reduce using rule 32 (declaration -> exit_statement .)
    endfor          reduce using rule 32 (declaration -> exit_statement .)
    endforeach      reduce using rule 32 (declaration -> exit_statement .)
    break           reduce using rule 32 (declaration -> exit_statement .)
    endswitch       reduce using rule 32 (declaration -> exit_statement .)
    default         reduce using rule 32 (declaration -> exit_statement .)
    case            reduce using rule 32 (declaration -> exit_statement .)


state 33

    (33) declaration -> empty .

    COMMENT         reduce using rule 33 (declaration -> empty .)
    COMMENT_HASHTAG reduce using rule 33 (declaration -> empty .)
    COMMENT_MULTI   reduce using rule 33 (declaration -> empty .)
    empty           reduce using rule 33 (declaration -> empty .)
    include         reduce using rule 33 (declaration -> empty .)
    const           reduce using rule 33 (declaration -> empty .)
    print           reduce using rule 33 (declaration -> empty .)
    echo            reduce using rule 33 (declaration -> empty .)
    while           reduce using rule 33 (declaration -> empty .)
    do              reduce using rule 33 (declaration -> empty .)
    if              reduce using rule 33 (declaration -> empty .)
    function        reduce using rule 33 (declaration -> empty .)
    ID              reduce using rule 33 (declaration -> empty .)
    return          reduce using rule 33 (declaration -> empty .)
    class           reduce using rule 33 (declaration -> empty .)
    new             reduce using rule 33 (declaration -> empty .)
    interface       reduce using rule 33 (declaration -> empty .)
    trait           reduce using rule 33 (declaration -> empty .)
    use             reduce using rule 33 (declaration -> empty .)
    continue        reduce using rule 33 (declaration -> empty .)
    CLOSE_TAG       reduce using rule 33 (declaration -> empty .)
    for             reduce using rule 33 (declaration -> empty .)
    foreach         reduce using rule 33 (declaration -> empty .)
    switch          reduce using rule 33 (declaration -> empty .)
    try             reduce using rule 33 (declaration -> empty .)
    throw           reduce using rule 33 (declaration -> empty .)
    exit            reduce using rule 33 (declaration -> empty .)
    VARIABLE        reduce using rule 33 (declaration -> empty .)
    array           reduce using rule 33 (declaration -> empty .)
    pow             reduce using rule 33 (declaration -> empty .)
    POW             reduce using rule 33 (declaration -> empty .)
    abs             reduce using rule 33 (declaration -> empty .)
    cos             reduce using rule 33 (declaration -> empty .)
    deg2rad         reduce using rule 33 (declaration -> empty .)
    rad2deg         reduce using rule 33 (declaration -> empty .)
    die             reduce using rule 33 (declaration -> empty .)
    exp             reduce using rule 33 (declaration -> empty .)
    floor           reduce using rule 33 (declaration -> empty .)
    isset           reduce using rule 33 (declaration -> empty .)
    list            reduce using rule 33 (declaration -> empty .)
    log             reduce using rule 33 (declaration -> empty .)
    log10           reduce using rule 33 (declaration -> empty .)
    max             reduce using rule 33 (declaration -> empty .)
    min             reduce using rule 33 (declaration -> empty .)
    rand            reduce using rule 33 (declaration -> empty .)
    round           reduce using rule 33 (declaration -> empty .)
    sin             reduce using rule 33 (declaration -> empty .)
    sqrt            reduce using rule 33 (declaration -> empty .)
    unset           reduce using rule 33 (declaration -> empty .)
    CADENA          reduce using rule 33 (declaration -> empty .)
    $end            reduce using rule 33 (declaration -> empty .)
    RBLOCK          reduce using rule 33 (declaration -> empty .)
    endwhile        reduce using rule 33 (declaration -> empty .)
    private         reduce using rule 33 (declaration -> empty .)
    protected       reduce using rule 33 (declaration -> empty .)
    public          reduce using rule 33 (declaration -> empty .)
    var             reduce using rule 33 (declaration -> empty .)
    endfor          reduce using rule 33 (declaration -> empty .)
    endforeach      reduce using rule 33 (declaration -> empty .)
    break           reduce using rule 33 (declaration -> empty .)
    endswitch       reduce using rule 33 (declaration -> empty .)
    default         reduce using rule 33 (declaration -> empty .)
    case            reduce using rule 33 (declaration -> empty .)


state 34

    (34) header_declaration -> include . CADENA SEMICOLON

    CADENA          shift and go to state 84


state 35

    (225) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    DOT             shift and go to state 85


state 36

    (49) var_declaration -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 86


state 37

    (35) constant_declaration -> const . ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> const . ID EQUAL NUMBER SEMICOLON

    ID              shift and go to state 87


state 38

    (125) fun_call -> ID . LPAREN params RPAREN

    LPAREN          shift and go to state 88


state 39

    (37) print_declaration -> print . var_declaration2 SEMICOLON
    (38) print_declaration -> print . LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> print . LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> print . LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> print . NUMBER SEMICOLON
    (42) print_declaration -> print . CADENA SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    LPAREN          shift and go to state 90
    NUMBER          shift and go to state 91
    CADENA          shift and go to state 92
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    var_declaration2               shift and go to state 89
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 40

    (43) echo_declaration -> echo . var_declaration2 SEMICOLON
    (44) echo_declaration -> echo . LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> echo . LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> echo . LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> echo . NUMBER SEMICOLON
    (48) echo_declaration -> echo . CADENA SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    LPAREN          shift and go to state 94
    NUMBER          shift and go to state 95
    CADENA          shift and go to state 96
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    var_declaration2               shift and go to state 93
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 41

    (74) iteration_stmt -> while . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> while . LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON

    LPAREN          shift and go to state 97


state 42

    (76) iteration_stmt -> do . LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> do . COLON declaration_list endwhile SEMICOLON

    LBLOCK          shift and go to state 98
    COLON           shift and go to state 99


state 43

    (118) if_statement -> if . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 100


state 44

    (123) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> function . ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    ID              shift and go to state 101


state 45

    (126) return_statement -> return . expression SEMICOLON
    (127) return_statement -> return . params SEMICOLON
    (128) return_statement -> return . SEMICOLON
    (129) return_statement -> return . ID LPAREN expression RPAREN SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 103
    ID              shift and go to state 105
    NUMBER          shift and go to state 111
    CADENA          shift and go to state 112
    MINUS           shift and go to state 115
    VARIABLE        shift and go to state 118
    callable        shift and go to state 119
    COMMA           reduce using rule 236 (empty_function -> .)
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

  ! SEMICOLON       [ reduce using rule 236 (empty_function -> .) ]

    expression                     shift and go to state 102
    params                         shift and go to state 104
    additive_expression            shift and go to state 107
    single_param                   shift and go to state 108
    term                           shift and go to state 109
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 46

    (130) class_declaration -> class . ID LBLOCK class_body RBLOCK
    (131) class_extension -> class . ID extends ID LBLOCK RBLOCK
    (132) class_extension -> class . ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> class . ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> class . ID extends Error LBLOCK RBLOCK
    (135) class_extension -> class . ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> class . ID extends TypeError LBLOCK RBLOCK

    ID              shift and go to state 122


state 47

    (137) create_obj_declaration -> new . ID LPAREN params RPAREN

    ID              shift and go to state 123


state 48

    (144) interface_declaration -> interface . ID LBLOCK interface_body RBLOCK

    ID              shift and go to state 124


state 49

    (149) trait_declaration -> trait . ID LBLOCK trait_body RBLOCK

    ID              shift and go to state 125


state 50

    (155) use_declaration -> use . ID SEMICOLON

    ID              shift and go to state 126


state 51

    (160) continue_declaration -> continue . SEMICOLON

    SEMICOLON       shift and go to state 127


state 52

    (3) footer_declaration -> CLOSE_TAG .

    COMMENT         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_HASHTAG reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    COMMENT_MULTI   reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    empty           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    include         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    const           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    print           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    echo            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    while           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    do              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    if              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    function        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    ID              reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    return          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    class           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    new             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    interface       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    trait           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    use             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    continue        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CLOSE_TAG       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    for             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    foreach         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    switch          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    try             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    throw           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exit            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    VARIABLE        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    array           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    pow             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    POW             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    abs             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    cos             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    deg2rad         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    rad2deg         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    die             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    exp             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    floor           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    isset           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    list            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    log             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    log10           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    max             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    min             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    rand            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    round           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    sin             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    sqrt            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    unset           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    CADENA          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    $end            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    RBLOCK          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endwhile        reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    private         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    protected       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    public          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    var             reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endfor          reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endforeach      reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    break           reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    endswitch       reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    default         reduce using rule 3 (footer_declaration -> CLOSE_TAG .)
    case            reduce using rule 3 (footer_declaration -> CLOSE_TAG .)


state 53

    (169) for_loop -> for . LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> for . LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON

    LPAREN          shift and go to state 128


state 54

    (175) foreach_loop -> foreach . LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> foreach . LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON

    LPAREN          shift and go to state 129


state 55

    (177) switch_statement -> switch . LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> switch . LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON

    LPAREN          shift and go to state 130


state 56

    (187) try_statement -> try . LBLOCK statement_list RBLOCK catch_blocks

    LBLOCK          shift and go to state 131


state 57

    (197) throw_statement -> throw . create_obj_declaration SEMICOLON
    (198) throw_statement -> throw . new Exception LPAREN params RPAREN SEMICOLON
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN

    new             shift and go to state 133

    create_obj_declaration         shift and go to state 132

state 58

    (174) exit_statement -> exit . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 134


state 59

    (50) var_declaration2 -> VARIABLE .
    (51) var_declaration2 -> VARIABLE . expression
    (52) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (53) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (54) var_declaration2 -> VARIABLE . EQUAL CADENA
    (55) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (56) var_declaration2 -> VARIABLE . EQUAL expression
    (57) var_declaration2 -> VARIABLE . assignation VARIABLE
    (58) var_declaration2 -> VARIABLE . assignation NUMBER
    (61) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (66) var_declaration2 -> VARIABLE . assignment_tail
    (67) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (224) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (231) assignation -> . ASSIGN
    (232) assignation -> . SREQUAL
    (233) assignation -> . SLEQUAL
    (234) assignation -> . XOREQUAL
    (235) assignation -> . ANDEQUAL
    (68) assignment_tail -> . COMMA var_declaration2
    (69) assignment_tail -> . LBRACKET params RBRACKET
    (70) assignment_tail -> . LBLOCK params RBLOCK
    (71) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (72) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (73) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 50 (var_declaration2 -> VARIABLE .)
    RPAREN          reduce using rule 50 (var_declaration2 -> VARIABLE .)
    COLON           reduce using rule 50 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 50 (var_declaration2 -> VARIABLE .)
    RBLOCK          reduce using rule 50 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 137
    QUESTIONMARK    shift and go to state 140
    OBJ_OPERATOR    shift and go to state 141
    DOT             shift and go to state 143
    ASSIGN          shift and go to state 144
    SREQUAL         shift and go to state 145
    SLEQUAL         shift and go to state 146
    XOREQUAL        shift and go to state 147
    ANDEQUAL        shift and go to state 148
    COMMA           shift and go to state 149
    LBRACKET        shift and go to state 150
    LBLOCK          shift and go to state 151
    VARIABLE        shift and go to state 135
    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

  ! COMMA           [ reduce using rule 50 (var_declaration2 -> VARIABLE .) ]

    expression                     shift and go to state 136
    assignation                    shift and go to state 139
    assignment_tail                shift and go to state 142
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 60

    (59) var_declaration2 -> Built_In_Declaration .

    SEMICOLON       reduce using rule 59 (var_declaration2 -> Built_In_Declaration .)
    COMMA           reduce using rule 59 (var_declaration2 -> Built_In_Declaration .)
    RPAREN          reduce using rule 59 (var_declaration2 -> Built_In_Declaration .)
    COLON           reduce using rule 59 (var_declaration2 -> Built_In_Declaration .)
    RBRACKET        reduce using rule 59 (var_declaration2 -> Built_In_Declaration .)
    RBLOCK          reduce using rule 59 (var_declaration2 -> Built_In_Declaration .)


state 61

    (60) var_declaration2 -> Concatenar_Cadenas_declaration .

    SEMICOLON       reduce using rule 60 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    COMMA           reduce using rule 60 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RPAREN          reduce using rule 60 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    COLON           reduce using rule 60 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RBRACKET        reduce using rule 60 (var_declaration2 -> Concatenar_Cadenas_declaration .)
    RBLOCK          reduce using rule 60 (var_declaration2 -> Concatenar_Cadenas_declaration .)


state 62

    (203) Built_In_Declaration -> array . LPAREN params RPAREN

    LPAREN          shift and go to state 152


state 63

    (204) Built_In_Declaration -> pow . LPAREN params RPAREN

    LPAREN          shift and go to state 153


state 64

    (205) Built_In_Declaration -> POW . LPAREN params RPAREN

    LPAREN          shift and go to state 154


state 65

    (206) Built_In_Declaration -> abs . LPAREN params RPAREN

    LPAREN          shift and go to state 155


state 66

    (207) Built_In_Declaration -> cos . LPAREN params RPAREN

    LPAREN          shift and go to state 156


state 67

    (208) Built_In_Declaration -> deg2rad . LPAREN params RPAREN

    LPAREN          shift and go to state 157


state 68

    (209) Built_In_Declaration -> rad2deg . LPAREN params RPAREN

    LPAREN          shift and go to state 158


state 69

    (210) Built_In_Declaration -> die . LPAREN params RPAREN

    LPAREN          shift and go to state 159


state 70

    (211) Built_In_Declaration -> exp . LPAREN params RPAREN

    LPAREN          shift and go to state 160


state 71

    (212) Built_In_Declaration -> floor . LPAREN params RPAREN

    LPAREN          shift and go to state 161


state 72

    (213) Built_In_Declaration -> isset . LPAREN params RPAREN

    LPAREN          shift and go to state 162


state 73

    (214) Built_In_Declaration -> list . LPAREN params RPAREN

    LPAREN          shift and go to state 163


state 74

    (215) Built_In_Declaration -> log . LPAREN params RPAREN

    LPAREN          shift and go to state 164


state 75

    (216) Built_In_Declaration -> log10 . LPAREN params RPAREN

    LPAREN          shift and go to state 165


state 76

    (217) Built_In_Declaration -> max . LPAREN params RPAREN

    LPAREN          shift and go to state 166


state 77

    (218) Built_In_Declaration -> min . LPAREN params RPAREN

    LPAREN          shift and go to state 167


state 78

    (219) Built_In_Declaration -> rand . LPAREN params RPAREN

    LPAREN          shift and go to state 168


state 79

    (220) Built_In_Declaration -> round . LPAREN params RPAREN

    LPAREN          shift and go to state 169


state 80

    (221) Built_In_Declaration -> sin . LPAREN params RPAREN

    LPAREN          shift and go to state 170


state 81

    (222) Built_In_Declaration -> sqrt . LPAREN params RPAREN

    LPAREN          shift and go to state 171


state 82

    (223) Built_In_Declaration -> unset . LPAREN params RPAREN

    LPAREN          shift and go to state 172


state 83

    (5) declaration_list -> declaration_list declaration .

    COMMENT         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_HASHTAG reduce using rule 5 (declaration_list -> declaration_list declaration .)
    COMMENT_MULTI   reduce using rule 5 (declaration_list -> declaration_list declaration .)
    empty           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    include         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    const           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    print           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    echo            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    while           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    do              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    if              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    function        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration_list declaration .)
    return          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    class           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    new             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    interface       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    trait           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    use             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    continue        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration_list declaration .)
    for             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    foreach         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    switch          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    try             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    throw           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exit            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    VARIABLE        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    array           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    pow             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    POW             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    abs             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    cos             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    deg2rad         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    rad2deg         reduce using rule 5 (declaration_list -> declaration_list declaration .)
    die             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    exp             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    floor           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    isset           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    list            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    log             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    log10           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    max             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    min             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    rand            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    round           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    sin             reduce using rule 5 (declaration_list -> declaration_list declaration .)
    sqrt            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    unset           reduce using rule 5 (declaration_list -> declaration_list declaration .)
    CADENA          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 5 (declaration_list -> declaration_list declaration .)
    RBLOCK          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endwhile        reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endfor          reduce using rule 5 (declaration_list -> declaration_list declaration .)
    endforeach      reduce using rule 5 (declaration_list -> declaration_list declaration .)


state 84

    (34) header_declaration -> include CADENA . SEMICOLON

    SEMICOLON       shift and go to state 173


state 85

    (225) Concatenar_Cadenas_declaration -> CADENA DOT . CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA DOT . VARIABLE

    CADENA          shift and go to state 174
    VARIABLE        shift and go to state 175


state 86

    (49) var_declaration -> var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    empty           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    include         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    const           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    print           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    echo            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    while           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    do              reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    if              reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    function        reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    ID              reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    return          reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    class           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    new             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    interface       reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    trait           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    use             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    continue        reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    for             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    foreach         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    switch          reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    try             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    throw           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    exit            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    array           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    pow             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    POW             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    abs             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    cos             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    die             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    exp             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    floor           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    isset           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    list            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    log             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    log10           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    max             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    min             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    rand            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    round           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    sin             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    unset           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    $end            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    private         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    protected       reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    public          reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    var             reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    SEMICOLON       reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    endfor          reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    break           reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    default         reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)
    case            reduce using rule 49 (var_declaration -> var_declaration2 SEMICOLON .)


state 87

    (35) constant_declaration -> const ID . EQUAL CADENA SEMICOLON
    (36) constant_declaration -> const ID . EQUAL NUMBER SEMICOLON

    EQUAL           shift and go to state 176


state 88

    (125) fun_call -> ID LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 177
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 89

    (37) print_declaration -> print var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 179


state 90

    (38) print_declaration -> print LPAREN . var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> print LPAREN . NUMBER RPAREN SEMICOLON
    (40) print_declaration -> print LPAREN . CADENA RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 181
    CADENA          shift and go to state 182
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    var_declaration2               shift and go to state 180
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 91

    (41) print_declaration -> print NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 183


state 92

    (42) print_declaration -> print CADENA . SEMICOLON
    (225) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       shift and go to state 184
    DOT             shift and go to state 85


state 93

    (43) echo_declaration -> echo var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 185


state 94

    (44) echo_declaration -> echo LPAREN . var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> echo LPAREN . NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> echo LPAREN . CADENA RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 187
    CADENA          shift and go to state 188
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    var_declaration2               shift and go to state 186
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 95

    (47) echo_declaration -> echo NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 189


state 96

    (48) echo_declaration -> echo CADENA . SEMICOLON
    (225) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       shift and go to state 190
    DOT             shift and go to state 85


state 97

    (74) iteration_stmt -> while LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> while LPAREN . expression RPAREN COLON declaration_list endwhile SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 191
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 98

    (76) iteration_stmt -> do LBLOCK . declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 193
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 99

    (77) iteration_stmt -> do COLON . declaration_list endwhile SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 194
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 100

    (118) if_statement -> if LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 195
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 101

    (123) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> function ID . LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK

    LPAREN          shift and go to state 196


state 102

    (126) return_statement -> return expression . SEMICOLON

    SEMICOLON       shift and go to state 197


state 103

    (128) return_statement -> return SEMICOLON .

    COMMENT         reduce using rule 128 (return_statement -> return SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 128 (return_statement -> return SEMICOLON .)
    COMMENT_MULTI   reduce using rule 128 (return_statement -> return SEMICOLON .)
    empty           reduce using rule 128 (return_statement -> return SEMICOLON .)
    include         reduce using rule 128 (return_statement -> return SEMICOLON .)
    const           reduce using rule 128 (return_statement -> return SEMICOLON .)
    print           reduce using rule 128 (return_statement -> return SEMICOLON .)
    echo            reduce using rule 128 (return_statement -> return SEMICOLON .)
    while           reduce using rule 128 (return_statement -> return SEMICOLON .)
    do              reduce using rule 128 (return_statement -> return SEMICOLON .)
    if              reduce using rule 128 (return_statement -> return SEMICOLON .)
    function        reduce using rule 128 (return_statement -> return SEMICOLON .)
    ID              reduce using rule 128 (return_statement -> return SEMICOLON .)
    return          reduce using rule 128 (return_statement -> return SEMICOLON .)
    class           reduce using rule 128 (return_statement -> return SEMICOLON .)
    new             reduce using rule 128 (return_statement -> return SEMICOLON .)
    interface       reduce using rule 128 (return_statement -> return SEMICOLON .)
    trait           reduce using rule 128 (return_statement -> return SEMICOLON .)
    use             reduce using rule 128 (return_statement -> return SEMICOLON .)
    continue        reduce using rule 128 (return_statement -> return SEMICOLON .)
    CLOSE_TAG       reduce using rule 128 (return_statement -> return SEMICOLON .)
    for             reduce using rule 128 (return_statement -> return SEMICOLON .)
    foreach         reduce using rule 128 (return_statement -> return SEMICOLON .)
    switch          reduce using rule 128 (return_statement -> return SEMICOLON .)
    try             reduce using rule 128 (return_statement -> return SEMICOLON .)
    throw           reduce using rule 128 (return_statement -> return SEMICOLON .)
    exit            reduce using rule 128 (return_statement -> return SEMICOLON .)
    VARIABLE        reduce using rule 128 (return_statement -> return SEMICOLON .)
    array           reduce using rule 128 (return_statement -> return SEMICOLON .)
    pow             reduce using rule 128 (return_statement -> return SEMICOLON .)
    POW             reduce using rule 128 (return_statement -> return SEMICOLON .)
    abs             reduce using rule 128 (return_statement -> return SEMICOLON .)
    cos             reduce using rule 128 (return_statement -> return SEMICOLON .)
    deg2rad         reduce using rule 128 (return_statement -> return SEMICOLON .)
    rad2deg         reduce using rule 128 (return_statement -> return SEMICOLON .)
    die             reduce using rule 128 (return_statement -> return SEMICOLON .)
    exp             reduce using rule 128 (return_statement -> return SEMICOLON .)
    floor           reduce using rule 128 (return_statement -> return SEMICOLON .)
    isset           reduce using rule 128 (return_statement -> return SEMICOLON .)
    list            reduce using rule 128 (return_statement -> return SEMICOLON .)
    log             reduce using rule 128 (return_statement -> return SEMICOLON .)
    log10           reduce using rule 128 (return_statement -> return SEMICOLON .)
    max             reduce using rule 128 (return_statement -> return SEMICOLON .)
    min             reduce using rule 128 (return_statement -> return SEMICOLON .)
    rand            reduce using rule 128 (return_statement -> return SEMICOLON .)
    round           reduce using rule 128 (return_statement -> return SEMICOLON .)
    sin             reduce using rule 128 (return_statement -> return SEMICOLON .)
    sqrt            reduce using rule 128 (return_statement -> return SEMICOLON .)
    unset           reduce using rule 128 (return_statement -> return SEMICOLON .)
    CADENA          reduce using rule 128 (return_statement -> return SEMICOLON .)
    $end            reduce using rule 128 (return_statement -> return SEMICOLON .)
    RBLOCK          reduce using rule 128 (return_statement -> return SEMICOLON .)
    endwhile        reduce using rule 128 (return_statement -> return SEMICOLON .)
    private         reduce using rule 128 (return_statement -> return SEMICOLON .)
    protected       reduce using rule 128 (return_statement -> return SEMICOLON .)
    public          reduce using rule 128 (return_statement -> return SEMICOLON .)
    var             reduce using rule 128 (return_statement -> return SEMICOLON .)
    endfor          reduce using rule 128 (return_statement -> return SEMICOLON .)
    endforeach      reduce using rule 128 (return_statement -> return SEMICOLON .)
    break           reduce using rule 128 (return_statement -> return SEMICOLON .)
    endswitch       reduce using rule 128 (return_statement -> return SEMICOLON .)
    default         reduce using rule 128 (return_statement -> return SEMICOLON .)
    case            reduce using rule 128 (return_statement -> return SEMICOLON .)


state 104

    (127) return_statement -> return params . SEMICOLON
    (163) params -> params . COMMA single_param

    SEMICOLON       shift and go to state 198
    COMMA           shift and go to state 199


state 105

    (129) return_statement -> return ID . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 200


state 106

    (91) factor -> LPAREN . expression RPAREN
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 201
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 107

    (78) expression -> additive_expression .
    (79) expression -> additive_expression . logical_op additive_expression
    (80) expression -> additive_expression . comp_op additive_expression
    (81) expression -> additive_expression . comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> additive_expression . bits_op additive_expression
    (112) logical_op -> . BOOL_OR
    (113) logical_op -> . BOOL_AND
    (114) logical_op -> . NOT
    (115) logical_op -> . or
    (116) logical_op -> . and
    (117) logical_op -> . xor
    (102) comp_op -> . LESS
    (103) comp_op -> . LESSEQUAL
    (104) comp_op -> . GREATER
    (105) comp_op -> . GREATEREQUAL
    (106) comp_op -> . DEQUAL
    (107) comp_op -> . DISTINT
    (108) comp_op -> . DIVEQUAL
    (109) comp_op -> . ISEQUAL
    (110) comp_op -> . ISIDENTICAL
    (111) comp_op -> . ISNOTIDENTICAL
    (228) bits_op -> . AMPERSANT
    (229) bits_op -> . SR
    (230) bits_op -> . SL

    SEMICOLON       reduce using rule 78 (expression -> additive_expression .)
    RPAREN          reduce using rule 78 (expression -> additive_expression .)
    COMMA           reduce using rule 78 (expression -> additive_expression .)
    COLON           reduce using rule 78 (expression -> additive_expression .)
    RBRACKET        reduce using rule 78 (expression -> additive_expression .)
    RBLOCK          reduce using rule 78 (expression -> additive_expression .)
    as              reduce using rule 78 (expression -> additive_expression .)
    BOOL_OR         shift and go to state 205
    BOOL_AND        shift and go to state 206
    NOT             shift and go to state 207
    or              shift and go to state 208
    and             shift and go to state 209
    xor             shift and go to state 210
    LESS            shift and go to state 211
    LESSEQUAL       shift and go to state 212
    GREATER         shift and go to state 213
    GREATEREQUAL    shift and go to state 214
    DEQUAL          shift and go to state 215
    DISTINT         shift and go to state 216
    DIVEQUAL        shift and go to state 217
    ISEQUAL         shift and go to state 218
    ISIDENTICAL     shift and go to state 219
    ISNOTIDENTICAL  shift and go to state 220
    AMPERSANT       shift and go to state 221
    SR              shift and go to state 222
    SL              shift and go to state 223

    logical_op                     shift and go to state 202
    comp_op                        shift and go to state 203
    bits_op                        shift and go to state 204

state 108

    (162) params -> single_param .

    SEMICOLON       reduce using rule 162 (params -> single_param .)
    COMMA           reduce using rule 162 (params -> single_param .)
    RPAREN          reduce using rule 162 (params -> single_param .)
    RBRACKET        reduce using rule 162 (params -> single_param .)
    RBLOCK          reduce using rule 162 (params -> single_param .)
    COLON           reduce using rule 162 (params -> single_param .)


state 109

    (83) additive_expression -> term .
    (84) additive_expression -> term . math_op term
    (94) math_op -> . PLUS
    (95) math_op -> . MINUS
    (96) math_op -> . TIMES
    (97) math_op -> . DIVIDE
    (98) math_op -> . MULEQUAL
    (99) math_op -> . PLUSEQUAL
    (100) math_op -> . MINUSEQUAL
    (101) math_op -> . MOD

    BOOL_OR         reduce using rule 83 (additive_expression -> term .)
    BOOL_AND        reduce using rule 83 (additive_expression -> term .)
    NOT             reduce using rule 83 (additive_expression -> term .)
    or              reduce using rule 83 (additive_expression -> term .)
    and             reduce using rule 83 (additive_expression -> term .)
    xor             reduce using rule 83 (additive_expression -> term .)
    LESS            reduce using rule 83 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 83 (additive_expression -> term .)
    GREATER         reduce using rule 83 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 83 (additive_expression -> term .)
    DEQUAL          reduce using rule 83 (additive_expression -> term .)
    DISTINT         reduce using rule 83 (additive_expression -> term .)
    DIVEQUAL        reduce using rule 83 (additive_expression -> term .)
    ISEQUAL         reduce using rule 83 (additive_expression -> term .)
    ISIDENTICAL     reduce using rule 83 (additive_expression -> term .)
    ISNOTIDENTICAL  reduce using rule 83 (additive_expression -> term .)
    AMPERSANT       reduce using rule 83 (additive_expression -> term .)
    SR              reduce using rule 83 (additive_expression -> term .)
    SL              reduce using rule 83 (additive_expression -> term .)
    SEMICOLON       reduce using rule 83 (additive_expression -> term .)
    RPAREN          reduce using rule 83 (additive_expression -> term .)
    COMMA           reduce using rule 83 (additive_expression -> term .)
    COLON           reduce using rule 83 (additive_expression -> term .)
    RBRACKET        reduce using rule 83 (additive_expression -> term .)
    RBLOCK          reduce using rule 83 (additive_expression -> term .)
    as              reduce using rule 83 (additive_expression -> term .)
    PLUS            shift and go to state 225
    MINUS           shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228
    MULEQUAL        shift and go to state 229
    PLUSEQUAL       shift and go to state 230
    MINUSEQUAL      shift and go to state 231
    MOD             shift and go to state 232

    math_op                        shift and go to state 224

state 110

    (164) single_param -> var_declaration2 .

    SEMICOLON       reduce using rule 164 (single_param -> var_declaration2 .)
    COMMA           reduce using rule 164 (single_param -> var_declaration2 .)
    RPAREN          reduce using rule 164 (single_param -> var_declaration2 .)
    RBRACKET        reduce using rule 164 (single_param -> var_declaration2 .)
    RBLOCK          reduce using rule 164 (single_param -> var_declaration2 .)
    COLON           reduce using rule 164 (single_param -> var_declaration2 .)


state 111

    (165) single_param -> NUMBER .
    (89) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 89 (factor -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 89 (factor -> NUMBER .)
    RBRACKET        reduce using rule 165 (single_param -> NUMBER .)
    PLUSPLUS        reduce using rule 89 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 89 (factor -> NUMBER .)
    PLUS            reduce using rule 89 (factor -> NUMBER .)
    MINUS           reduce using rule 89 (factor -> NUMBER .)
    TIMES           reduce using rule 89 (factor -> NUMBER .)
    DIVIDE          reduce using rule 89 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 89 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 89 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 89 (factor -> NUMBER .)
    MOD             reduce using rule 89 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 89 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 89 (factor -> NUMBER .)
    NOT             reduce using rule 89 (factor -> NUMBER .)
    or              reduce using rule 89 (factor -> NUMBER .)
    and             reduce using rule 89 (factor -> NUMBER .)
    xor             reduce using rule 89 (factor -> NUMBER .)
    LESS            reduce using rule 89 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 89 (factor -> NUMBER .)
    GREATER         reduce using rule 89 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 89 (factor -> NUMBER .)
    DEQUAL          reduce using rule 89 (factor -> NUMBER .)
    DISTINT         reduce using rule 89 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 89 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 89 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 89 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 89 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 89 (factor -> NUMBER .)
    SR              reduce using rule 89 (factor -> NUMBER .)
    SL              reduce using rule 89 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 89 (factor -> NUMBER .)
    COMMA           reduce using rule 89 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 165 (single_param -> NUMBER .) ]
  ! COMMA           [ reduce using rule 165 (single_param -> NUMBER .) ]


state 112

    (166) single_param -> CADENA .
    (225) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    SEMICOLON       reduce using rule 166 (single_param -> CADENA .)
    COMMA           reduce using rule 166 (single_param -> CADENA .)
    RPAREN          reduce using rule 166 (single_param -> CADENA .)
    RBRACKET        reduce using rule 166 (single_param -> CADENA .)
    RBLOCK          reduce using rule 166 (single_param -> CADENA .)
    COLON           reduce using rule 166 (single_param -> CADENA .)
    DOT             shift and go to state 85


state 113

    (167) single_param -> callable_declaration .

    SEMICOLON       reduce using rule 167 (single_param -> callable_declaration .)
    COMMA           reduce using rule 167 (single_param -> callable_declaration .)
    RPAREN          reduce using rule 167 (single_param -> callable_declaration .)
    RBRACKET        reduce using rule 167 (single_param -> callable_declaration .)
    RBLOCK          reduce using rule 167 (single_param -> callable_declaration .)
    COLON           reduce using rule 167 (single_param -> callable_declaration .)


state 114

    (168) single_param -> empty_function .

    SEMICOLON       reduce using rule 168 (single_param -> empty_function .)
    COMMA           reduce using rule 168 (single_param -> empty_function .)
    RPAREN          reduce using rule 168 (single_param -> empty_function .)
    RBRACKET        reduce using rule 168 (single_param -> empty_function .)
    RBLOCK          reduce using rule 168 (single_param -> empty_function .)
    COLON           reduce using rule 168 (single_param -> empty_function .)


state 115

    (85) term -> MINUS . term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    term                           shift and go to state 233
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 116

    (86) term -> factor .
    (87) term -> factor . increment_decrement_op
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    PLUS            reduce using rule 86 (term -> factor .)
    MINUS           reduce using rule 86 (term -> factor .)
    TIMES           reduce using rule 86 (term -> factor .)
    DIVIDE          reduce using rule 86 (term -> factor .)
    MULEQUAL        reduce using rule 86 (term -> factor .)
    PLUSEQUAL       reduce using rule 86 (term -> factor .)
    MINUSEQUAL      reduce using rule 86 (term -> factor .)
    MOD             reduce using rule 86 (term -> factor .)
    BOOL_OR         reduce using rule 86 (term -> factor .)
    BOOL_AND        reduce using rule 86 (term -> factor .)
    NOT             reduce using rule 86 (term -> factor .)
    or              reduce using rule 86 (term -> factor .)
    and             reduce using rule 86 (term -> factor .)
    xor             reduce using rule 86 (term -> factor .)
    LESS            reduce using rule 86 (term -> factor .)
    LESSEQUAL       reduce using rule 86 (term -> factor .)
    GREATER         reduce using rule 86 (term -> factor .)
    GREATEREQUAL    reduce using rule 86 (term -> factor .)
    DEQUAL          reduce using rule 86 (term -> factor .)
    DISTINT         reduce using rule 86 (term -> factor .)
    DIVEQUAL        reduce using rule 86 (term -> factor .)
    ISEQUAL         reduce using rule 86 (term -> factor .)
    ISIDENTICAL     reduce using rule 86 (term -> factor .)
    ISNOTIDENTICAL  reduce using rule 86 (term -> factor .)
    AMPERSANT       reduce using rule 86 (term -> factor .)
    SR              reduce using rule 86 (term -> factor .)
    SL              reduce using rule 86 (term -> factor .)
    SEMICOLON       reduce using rule 86 (term -> factor .)
    RPAREN          reduce using rule 86 (term -> factor .)
    COMMA           reduce using rule 86 (term -> factor .)
    COLON           reduce using rule 86 (term -> factor .)
    RBRACKET        reduce using rule 86 (term -> factor .)
    RBLOCK          reduce using rule 86 (term -> factor .)
    as              reduce using rule 86 (term -> factor .)
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    increment_decrement_op         shift and go to state 234

state 117

    (88) term -> increment_decrement_op . factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106

    factor                         shift and go to state 235

state 118

    (50) var_declaration2 -> VARIABLE .
    (51) var_declaration2 -> VARIABLE . expression
    (52) var_declaration2 -> VARIABLE . EQUAL NUMBER
    (53) var_declaration2 -> VARIABLE . EQUAL VARIABLE
    (54) var_declaration2 -> VARIABLE . EQUAL CADENA
    (55) var_declaration2 -> VARIABLE . EQUAL Built_In_Declaration
    (56) var_declaration2 -> VARIABLE . EQUAL expression
    (57) var_declaration2 -> VARIABLE . assignation VARIABLE
    (58) var_declaration2 -> VARIABLE . assignation NUMBER
    (61) var_declaration2 -> VARIABLE . EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> VARIABLE . QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> VARIABLE . OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> VARIABLE . EQUAL create_obj_declaration
    (66) var_declaration2 -> VARIABLE . assignment_tail
    (67) var_declaration2 -> VARIABLE . EQUAL assignment_tail
    (90) factor -> VARIABLE .
    (224) Concatenar_Cadenas_declaration -> VARIABLE . DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> VARIABLE . DOT CADENA
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (231) assignation -> . ASSIGN
    (232) assignation -> . SREQUAL
    (233) assignation -> . SLEQUAL
    (234) assignation -> . XOREQUAL
    (235) assignation -> . ANDEQUAL
    (68) assignment_tail -> . COMMA var_declaration2
    (69) assignment_tail -> . LBRACKET params RBRACKET
    (70) assignment_tail -> . LBLOCK params RBLOCK
    (71) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (72) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (73) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

  ! reduce/reduce conflict for SEMICOLON resolved using rule 50 (var_declaration2 -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 50 (var_declaration2 -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
    SEMICOLON       reduce using rule 50 (var_declaration2 -> VARIABLE .)
    RBRACKET        reduce using rule 50 (var_declaration2 -> VARIABLE .)
    EQUAL           shift and go to state 137
    QUESTIONMARK    shift and go to state 140
    OBJ_OPERATOR    shift and go to state 141
    PLUS            reduce using rule 90 (factor -> VARIABLE .)
    TIMES           reduce using rule 90 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 90 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 90 (factor -> VARIABLE .)
    MOD             reduce using rule 90 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 90 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 90 (factor -> VARIABLE .)
    NOT             reduce using rule 90 (factor -> VARIABLE .)
    or              reduce using rule 90 (factor -> VARIABLE .)
    and             reduce using rule 90 (factor -> VARIABLE .)
    xor             reduce using rule 90 (factor -> VARIABLE .)
    LESS            reduce using rule 90 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    GREATER         reduce using rule 90 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 90 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 90 (factor -> VARIABLE .)
    DISTINT         reduce using rule 90 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 90 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 90 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 90 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 90 (factor -> VARIABLE .)
    SR              reduce using rule 90 (factor -> VARIABLE .)
    SL              reduce using rule 90 (factor -> VARIABLE .)
    DOT             shift and go to state 143
    ASSIGN          shift and go to state 144
    SREQUAL         shift and go to state 145
    SLEQUAL         shift and go to state 146
    XOREQUAL        shift and go to state 147
    ANDEQUAL        shift and go to state 148
    COMMA           shift and go to state 149
    LBRACKET        shift and go to state 150
    LBLOCK          shift and go to state 151
    VARIABLE        shift and go to state 135
    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

  ! COMMA           [ reduce using rule 50 (var_declaration2 -> VARIABLE .) ]
  ! PLUSPLUS        [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! MINUSMINUS      [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 90 (factor -> VARIABLE .) ]

    expression                     shift and go to state 136
    assignation                    shift and go to state 139
    assignment_tail                shift and go to state 142
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 119

    (161) callable_declaration -> callable . VARIABLE

    VARIABLE        shift and go to state 236


state 120

    (92) increment_decrement_op -> PLUSPLUS .

    NUMBER          reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    VARIABLE        reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    LPAREN          reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    PLUS            reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    MINUS           reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    TIMES           reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    DIVIDE          reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    MULEQUAL        reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    PLUSEQUAL       reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    MINUSEQUAL      reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    MOD             reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    BOOL_OR         reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    BOOL_AND        reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    NOT             reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    or              reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    and             reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    xor             reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    LESS            reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    LESSEQUAL       reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    GREATER         reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    GREATEREQUAL    reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    DEQUAL          reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    DISTINT         reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    DIVEQUAL        reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    ISEQUAL         reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    ISIDENTICAL     reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    ISNOTIDENTICAL  reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    AMPERSANT       reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    SR              reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    SL              reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    SEMICOLON       reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    RPAREN          reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    COMMA           reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    COLON           reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    RBRACKET        reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    RBLOCK          reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)
    as              reduce using rule 92 (increment_decrement_op -> PLUSPLUS .)


state 121

    (93) increment_decrement_op -> MINUSMINUS .

    NUMBER          reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    VARIABLE        reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    LPAREN          reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    PLUS            reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    MINUS           reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    TIMES           reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    DIVIDE          reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    MULEQUAL        reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    PLUSEQUAL       reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    MINUSEQUAL      reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    MOD             reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    BOOL_OR         reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    BOOL_AND        reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    NOT             reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    or              reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    and             reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    xor             reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    LESS            reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    LESSEQUAL       reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    GREATER         reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    GREATEREQUAL    reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    DEQUAL          reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    DISTINT         reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    DIVEQUAL        reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    ISEQUAL         reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    ISIDENTICAL     reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    ISNOTIDENTICAL  reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    AMPERSANT       reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    SR              reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    SL              reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    SEMICOLON       reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    RPAREN          reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    COMMA           reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    COLON           reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    RBRACKET        reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    RBLOCK          reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)
    as              reduce using rule 93 (increment_decrement_op -> MINUSMINUS .)


state 122

    (130) class_declaration -> class ID . LBLOCK class_body RBLOCK
    (131) class_extension -> class ID . extends ID LBLOCK RBLOCK
    (132) class_extension -> class ID . extends Exception LBLOCK RBLOCK
    (133) class_extension -> class ID . extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> class ID . extends Error LBLOCK RBLOCK
    (135) class_extension -> class ID . extends ParseError LBLOCK RBLOCK
    (136) class_extension -> class ID . extends TypeError LBLOCK RBLOCK

    LBLOCK          shift and go to state 237
    extends         shift and go to state 238


state 123

    (137) create_obj_declaration -> new ID . LPAREN params RPAREN

    LPAREN          shift and go to state 239


state 124

    (144) interface_declaration -> interface ID . LBLOCK interface_body RBLOCK

    LBLOCK          shift and go to state 240


state 125

    (149) trait_declaration -> trait ID . LBLOCK trait_body RBLOCK

    LBLOCK          shift and go to state 241


state 126

    (155) use_declaration -> use ID . SEMICOLON

    SEMICOLON       shift and go to state 242


state 127

    (160) continue_declaration -> continue SEMICOLON .

    COMMENT         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    COMMENT_MULTI   reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    empty           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    include         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    const           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    print           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    echo            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    while           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    do              reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    if              reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    function        reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    ID              reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    return          reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    class           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    new             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    interface       reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    trait           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    use             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    continue        reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    CLOSE_TAG       reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    for             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    foreach         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    switch          reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    try             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    throw           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    exit            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    VARIABLE        reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    array           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    pow             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    POW             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    abs             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    cos             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    deg2rad         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    rad2deg         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    die             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    exp             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    floor           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    isset           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    list            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    log             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    log10           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    max             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    min             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    rand            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    round           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    sin             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    sqrt            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    unset           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    CADENA          reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    $end            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    RBLOCK          reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    endwhile        reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    private         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    protected       reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    public          reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    var             reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    endfor          reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    endforeach      reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    break           reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    endswitch       reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    default         reduce using rule 160 (continue_declaration -> continue SEMICOLON .)
    case            reduce using rule 160 (continue_declaration -> continue SEMICOLON .)


state 128

    (169) for_loop -> for LPAREN . for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> for LPAREN . for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (171) for_init -> . var_declaration2 SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    for_init                       shift and go to state 243
    var_declaration2               shift and go to state 244
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 129

    (175) foreach_loop -> foreach LPAREN . expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> foreach LPAREN . expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 245
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 130

    (177) switch_statement -> switch LPAREN . expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> switch LPAREN . expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 246
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 131

    (187) try_statement -> try LBLOCK . statement_list RBLOCK catch_blocks
    (200) statement_list -> . declaration
    (201) statement_list -> . statement_list declaration
    (202) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (236) empty_function -> .
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    RBLOCK          reduce using rule 236 (empty_function -> .)
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

  ! COMMENT         [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 236 (empty_function -> .) ]
  ! empty           [ reduce using rule 236 (empty_function -> .) ]
  ! include         [ reduce using rule 236 (empty_function -> .) ]
  ! const           [ reduce using rule 236 (empty_function -> .) ]
  ! print           [ reduce using rule 236 (empty_function -> .) ]
  ! echo            [ reduce using rule 236 (empty_function -> .) ]
  ! while           [ reduce using rule 236 (empty_function -> .) ]
  ! do              [ reduce using rule 236 (empty_function -> .) ]
  ! if              [ reduce using rule 236 (empty_function -> .) ]
  ! function        [ reduce using rule 236 (empty_function -> .) ]
  ! ID              [ reduce using rule 236 (empty_function -> .) ]
  ! return          [ reduce using rule 236 (empty_function -> .) ]
  ! class           [ reduce using rule 236 (empty_function -> .) ]
  ! new             [ reduce using rule 236 (empty_function -> .) ]
  ! interface       [ reduce using rule 236 (empty_function -> .) ]
  ! trait           [ reduce using rule 236 (empty_function -> .) ]
  ! use             [ reduce using rule 236 (empty_function -> .) ]
  ! continue        [ reduce using rule 236 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 236 (empty_function -> .) ]
  ! for             [ reduce using rule 236 (empty_function -> .) ]
  ! foreach         [ reduce using rule 236 (empty_function -> .) ]
  ! switch          [ reduce using rule 236 (empty_function -> .) ]
  ! try             [ reduce using rule 236 (empty_function -> .) ]
  ! throw           [ reduce using rule 236 (empty_function -> .) ]
  ! exit            [ reduce using rule 236 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 236 (empty_function -> .) ]
  ! array           [ reduce using rule 236 (empty_function -> .) ]
  ! pow             [ reduce using rule 236 (empty_function -> .) ]
  ! POW             [ reduce using rule 236 (empty_function -> .) ]
  ! abs             [ reduce using rule 236 (empty_function -> .) ]
  ! cos             [ reduce using rule 236 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 236 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 236 (empty_function -> .) ]
  ! die             [ reduce using rule 236 (empty_function -> .) ]
  ! exp             [ reduce using rule 236 (empty_function -> .) ]
  ! floor           [ reduce using rule 236 (empty_function -> .) ]
  ! isset           [ reduce using rule 236 (empty_function -> .) ]
  ! list            [ reduce using rule 236 (empty_function -> .) ]
  ! log             [ reduce using rule 236 (empty_function -> .) ]
  ! log10           [ reduce using rule 236 (empty_function -> .) ]
  ! max             [ reduce using rule 236 (empty_function -> .) ]
  ! min             [ reduce using rule 236 (empty_function -> .) ]
  ! rand            [ reduce using rule 236 (empty_function -> .) ]
  ! round           [ reduce using rule 236 (empty_function -> .) ]
  ! sin             [ reduce using rule 236 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 236 (empty_function -> .) ]
  ! unset           [ reduce using rule 236 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 236 (empty_function -> .) ]

    statement_list                 shift and go to state 247
    declaration                    shift and go to state 248
    empty_function                 shift and go to state 249
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 132

    (197) throw_statement -> throw create_obj_declaration . SEMICOLON

    SEMICOLON       shift and go to state 250


state 133

    (198) throw_statement -> throw new . Exception LPAREN params RPAREN SEMICOLON
    (137) create_obj_declaration -> new . ID LPAREN params RPAREN

    Exception       shift and go to state 251
    ID              shift and go to state 123


state 134

    (174) exit_statement -> exit LPAREN . expression RPAREN SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 252
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 135

    (71) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (72) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (73) assignment_tail -> VARIABLE . LBLOCK params RBLOCK
    (90) factor -> VARIABLE .

    LBRACKET        shift and go to state 253
    LBLOCK          shift and go to state 254
    PLUSPLUS        reduce using rule 90 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 90 (factor -> VARIABLE .)
    PLUS            reduce using rule 90 (factor -> VARIABLE .)
    MINUS           reduce using rule 90 (factor -> VARIABLE .)
    TIMES           reduce using rule 90 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 90 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 90 (factor -> VARIABLE .)
    MOD             reduce using rule 90 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 90 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 90 (factor -> VARIABLE .)
    NOT             reduce using rule 90 (factor -> VARIABLE .)
    or              reduce using rule 90 (factor -> VARIABLE .)
    and             reduce using rule 90 (factor -> VARIABLE .)
    xor             reduce using rule 90 (factor -> VARIABLE .)
    LESS            reduce using rule 90 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    GREATER         reduce using rule 90 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 90 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 90 (factor -> VARIABLE .)
    DISTINT         reduce using rule 90 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 90 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 90 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 90 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 90 (factor -> VARIABLE .)
    SR              reduce using rule 90 (factor -> VARIABLE .)
    SL              reduce using rule 90 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 90 (factor -> VARIABLE .)
    RPAREN          reduce using rule 90 (factor -> VARIABLE .)
    COMMA           reduce using rule 90 (factor -> VARIABLE .)
    COLON           reduce using rule 90 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 90 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 90 (factor -> VARIABLE .)


state 136

    (51) var_declaration2 -> VARIABLE expression .

    SEMICOLON       reduce using rule 51 (var_declaration2 -> VARIABLE expression .)
    COMMA           reduce using rule 51 (var_declaration2 -> VARIABLE expression .)
    RPAREN          reduce using rule 51 (var_declaration2 -> VARIABLE expression .)
    COLON           reduce using rule 51 (var_declaration2 -> VARIABLE expression .)
    RBRACKET        reduce using rule 51 (var_declaration2 -> VARIABLE expression .)
    RBLOCK          reduce using rule 51 (var_declaration2 -> VARIABLE expression .)


state 137

    (52) var_declaration2 -> VARIABLE EQUAL . NUMBER
    (53) var_declaration2 -> VARIABLE EQUAL . VARIABLE
    (54) var_declaration2 -> VARIABLE EQUAL . CADENA
    (55) var_declaration2 -> VARIABLE EQUAL . Built_In_Declaration
    (56) var_declaration2 -> VARIABLE EQUAL . expression
    (61) var_declaration2 -> VARIABLE EQUAL . ID LPAREN params RPAREN
    (65) var_declaration2 -> VARIABLE EQUAL . create_obj_declaration
    (67) var_declaration2 -> VARIABLE EQUAL . assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (68) assignment_tail -> . COMMA var_declaration2
    (69) assignment_tail -> . LBRACKET params RBRACKET
    (70) assignment_tail -> . LBLOCK params RBLOCK
    (71) assignment_tail -> . VARIABLE LBRACKET expression COMMA params
    (72) assignment_tail -> . VARIABLE LBRACKET params RBRACKET
    (73) assignment_tail -> . VARIABLE LBLOCK params RBLOCK
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    NUMBER          shift and go to state 256
    VARIABLE        shift and go to state 255
    CADENA          shift and go to state 257
    ID              shift and go to state 260
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    new             shift and go to state 47
    COMMA           shift and go to state 149
    LBRACKET        shift and go to state 150
    LBLOCK          shift and go to state 151
    MINUS           shift and go to state 115
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    Built_In_Declaration           shift and go to state 258
    expression                     shift and go to state 259
    create_obj_declaration         shift and go to state 261
    assignment_tail                shift and go to state 262
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 138

    (89) factor -> NUMBER .

    PLUSPLUS        reduce using rule 89 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 89 (factor -> NUMBER .)
    PLUS            reduce using rule 89 (factor -> NUMBER .)
    MINUS           reduce using rule 89 (factor -> NUMBER .)
    TIMES           reduce using rule 89 (factor -> NUMBER .)
    DIVIDE          reduce using rule 89 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 89 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 89 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 89 (factor -> NUMBER .)
    MOD             reduce using rule 89 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 89 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 89 (factor -> NUMBER .)
    NOT             reduce using rule 89 (factor -> NUMBER .)
    or              reduce using rule 89 (factor -> NUMBER .)
    and             reduce using rule 89 (factor -> NUMBER .)
    xor             reduce using rule 89 (factor -> NUMBER .)
    LESS            reduce using rule 89 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 89 (factor -> NUMBER .)
    GREATER         reduce using rule 89 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 89 (factor -> NUMBER .)
    DEQUAL          reduce using rule 89 (factor -> NUMBER .)
    DISTINT         reduce using rule 89 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 89 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 89 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 89 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 89 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 89 (factor -> NUMBER .)
    SR              reduce using rule 89 (factor -> NUMBER .)
    SL              reduce using rule 89 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 89 (factor -> NUMBER .)
    RPAREN          reduce using rule 89 (factor -> NUMBER .)
    COMMA           reduce using rule 89 (factor -> NUMBER .)
    COLON           reduce using rule 89 (factor -> NUMBER .)
    RBRACKET        reduce using rule 89 (factor -> NUMBER .)
    RBLOCK          reduce using rule 89 (factor -> NUMBER .)
    as              reduce using rule 89 (factor -> NUMBER .)


state 139

    (57) var_declaration2 -> VARIABLE assignation . VARIABLE
    (58) var_declaration2 -> VARIABLE assignation . NUMBER

    VARIABLE        shift and go to state 263
    NUMBER          shift and go to state 264


state 140

    (62) var_declaration2 -> VARIABLE QUESTIONMARK . var_declaration2 COLON var_declaration2
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    var_declaration2               shift and go to state 265
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 141

    (63) var_declaration2 -> VARIABLE OBJ_OPERATOR . ID EQUAL expression
    (64) var_declaration2 -> VARIABLE OBJ_OPERATOR . ID LPAREN params RPAREN

    ID              shift and go to state 266


state 142

    (66) var_declaration2 -> VARIABLE assignment_tail .

    SEMICOLON       reduce using rule 66 (var_declaration2 -> VARIABLE assignment_tail .)
    COMMA           reduce using rule 66 (var_declaration2 -> VARIABLE assignment_tail .)
    RPAREN          reduce using rule 66 (var_declaration2 -> VARIABLE assignment_tail .)
    COLON           reduce using rule 66 (var_declaration2 -> VARIABLE assignment_tail .)
    RBRACKET        reduce using rule 66 (var_declaration2 -> VARIABLE assignment_tail .)
    RBLOCK          reduce using rule 66 (var_declaration2 -> VARIABLE assignment_tail .)


state 143

    (224) Concatenar_Cadenas_declaration -> VARIABLE DOT . VARIABLE
    (227) Concatenar_Cadenas_declaration -> VARIABLE DOT . CADENA

    VARIABLE        shift and go to state 267
    CADENA          shift and go to state 268


state 144

    (231) assignation -> ASSIGN .

    VARIABLE        reduce using rule 231 (assignation -> ASSIGN .)
    NUMBER          reduce using rule 231 (assignation -> ASSIGN .)


state 145

    (232) assignation -> SREQUAL .

    VARIABLE        reduce using rule 232 (assignation -> SREQUAL .)
    NUMBER          reduce using rule 232 (assignation -> SREQUAL .)


state 146

    (233) assignation -> SLEQUAL .

    VARIABLE        reduce using rule 233 (assignation -> SLEQUAL .)
    NUMBER          reduce using rule 233 (assignation -> SLEQUAL .)


state 147

    (234) assignation -> XOREQUAL .

    VARIABLE        reduce using rule 234 (assignation -> XOREQUAL .)
    NUMBER          reduce using rule 234 (assignation -> XOREQUAL .)


state 148

    (235) assignation -> ANDEQUAL .

    VARIABLE        reduce using rule 235 (assignation -> ANDEQUAL .)
    NUMBER          reduce using rule 235 (assignation -> ANDEQUAL .)


state 149

    (68) assignment_tail -> COMMA . var_declaration2
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    var_declaration2               shift and go to state 269
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 150

    (69) assignment_tail -> LBRACKET . params RBRACKET
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RBRACKET        reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 270
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 151

    (70) assignment_tail -> LBLOCK . params RBLOCK
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RBLOCK          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 271
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 152

    (203) Built_In_Declaration -> array LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 272
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 153

    (204) Built_In_Declaration -> pow LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 273
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 154

    (205) Built_In_Declaration -> POW LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 274
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 155

    (206) Built_In_Declaration -> abs LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 275
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 156

    (207) Built_In_Declaration -> cos LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 276
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 157

    (208) Built_In_Declaration -> deg2rad LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 277
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 158

    (209) Built_In_Declaration -> rad2deg LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 278
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 159

    (210) Built_In_Declaration -> die LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 279
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 160

    (211) Built_In_Declaration -> exp LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 280
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 161

    (212) Built_In_Declaration -> floor LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 281
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 162

    (213) Built_In_Declaration -> isset LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 282
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 163

    (214) Built_In_Declaration -> list LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 283
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 164

    (215) Built_In_Declaration -> log LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 284
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 165

    (216) Built_In_Declaration -> log10 LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 285
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 166

    (217) Built_In_Declaration -> max LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 286
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 167

    (218) Built_In_Declaration -> min LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 287
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 168

    (219) Built_In_Declaration -> rand LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 288
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 169

    (220) Built_In_Declaration -> round LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 289
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 170

    (221) Built_In_Declaration -> sin LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 290
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 171

    (222) Built_In_Declaration -> sqrt LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 291
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 172

    (223) Built_In_Declaration -> unset LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 292
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 173

    (34) header_declaration -> include CADENA SEMICOLON .

    COMMENT         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    empty           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    include         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    const           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    print           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    echo            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    while           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    do              reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    if              reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    function        reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    ID              reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    return          reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    class           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    new             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    interface       reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    trait           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    use             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    continue        reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    for             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    foreach         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    switch          reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    try             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    throw           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    exit            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    VARIABLE        reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    array           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    pow             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    POW             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    abs             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    cos             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    deg2rad         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    rad2deg         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    die             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    exp             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    floor           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    isset           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    list            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    log             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    log10           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    max             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    min             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    rand            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    round           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    sin             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    sqrt            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    unset           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    CADENA          reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    $end            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    RBLOCK          reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    endwhile        reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    private         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    protected       reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    public          reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    var             reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    endfor          reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    endforeach      reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    break           reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    endswitch       reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    default         reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)
    case            reduce using rule 34 (header_declaration -> include CADENA SEMICOLON .)


state 174

    (225) Concatenar_Cadenas_declaration -> CADENA DOT CADENA .

    SEMICOLON       reduce using rule 225 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    COMMA           reduce using rule 225 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RPAREN          reduce using rule 225 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    COLON           reduce using rule 225 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RBRACKET        reduce using rule 225 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)
    RBLOCK          reduce using rule 225 (Concatenar_Cadenas_declaration -> CADENA DOT CADENA .)


state 175

    (226) Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .

    SEMICOLON       reduce using rule 226 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    COMMA           reduce using rule 226 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RPAREN          reduce using rule 226 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    COLON           reduce using rule 226 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RBRACKET        reduce using rule 226 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)
    RBLOCK          reduce using rule 226 (Concatenar_Cadenas_declaration -> CADENA DOT VARIABLE .)


state 176

    (35) constant_declaration -> const ID EQUAL . CADENA SEMICOLON
    (36) constant_declaration -> const ID EQUAL . NUMBER SEMICOLON

    CADENA          shift and go to state 293
    NUMBER          shift and go to state 294


state 177

    (125) fun_call -> ID LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 295
    COMMA           shift and go to state 199


state 178

    (165) single_param -> NUMBER .

    RPAREN          reduce using rule 165 (single_param -> NUMBER .)
    COMMA           reduce using rule 165 (single_param -> NUMBER .)
    RBRACKET        reduce using rule 165 (single_param -> NUMBER .)
    RBLOCK          reduce using rule 165 (single_param -> NUMBER .)
    SEMICOLON       reduce using rule 165 (single_param -> NUMBER .)
    COLON           reduce using rule 165 (single_param -> NUMBER .)


state 179

    (37) print_declaration -> print var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    empty           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    include         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    const           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    print           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    echo            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    while           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    do              reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    if              reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    function        reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    ID              reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    return          reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    class           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    new             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    interface       reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    trait           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    use             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    continue        reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    for             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    foreach         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    switch          reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    try             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    throw           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    exit            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    array           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    pow             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    POW             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    abs             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    cos             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    die             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    exp             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    floor           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    isset           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    list            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    log             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    log10           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    max             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    min             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    rand            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    round           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    sin             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    unset           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    $end            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    private         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    protected       reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    public          reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    var             reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    endfor          reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    break           reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    default         reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)
    case            reduce using rule 37 (print_declaration -> print var_declaration2 SEMICOLON .)


state 180

    (38) print_declaration -> print LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 296


state 181

    (39) print_declaration -> print LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 297


state 182

    (40) print_declaration -> print LPAREN CADENA . RPAREN SEMICOLON
    (225) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    RPAREN          shift and go to state 298
    DOT             shift and go to state 85


state 183

    (41) print_declaration -> print NUMBER SEMICOLON .

    COMMENT         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    empty           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    include         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    const           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    print           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    echo            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    while           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    do              reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    if              reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    function        reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    ID              reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    return          reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    class           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    new             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    interface       reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    trait           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    use             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    continue        reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    for             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    foreach         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    switch          reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    try             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    throw           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    exit            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    array           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    pow             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    POW             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    abs             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    cos             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    deg2rad         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    rad2deg         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    die             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    exp             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    floor           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    isset           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    list            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    log             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    log10           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    max             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    min             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    rand            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    round           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    sin             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    sqrt            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    unset           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    CADENA          reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    $end            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    endwhile        reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    private         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    protected       reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    public          reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    var             reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    endfor          reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    endforeach      reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    break           reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    endswitch       reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    default         reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)
    case            reduce using rule 41 (print_declaration -> print NUMBER SEMICOLON .)


state 184

    (42) print_declaration -> print CADENA SEMICOLON .

    COMMENT         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    empty           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    include         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    const           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    print           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    echo            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    while           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    do              reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    if              reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    function        reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    ID              reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    return          reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    class           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    new             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    interface       reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    trait           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    use             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    continue        reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    for             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    foreach         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    switch          reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    try             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    throw           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    exit            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    VARIABLE        reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    array           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    pow             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    POW             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    abs             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    cos             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    deg2rad         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    rad2deg         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    die             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    exp             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    floor           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    isset           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    list            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    log             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    log10           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    max             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    min             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    rand            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    round           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    sin             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    sqrt            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    unset           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    CADENA          reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    $end            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    RBLOCK          reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    endwhile        reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    private         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    protected       reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    public          reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    var             reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    endfor          reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    endforeach      reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    break           reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    endswitch       reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    default         reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)
    case            reduce using rule 42 (print_declaration -> print CADENA SEMICOLON .)


state 185

    (43) echo_declaration -> echo var_declaration2 SEMICOLON .

    COMMENT         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    empty           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    include         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    const           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    print           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    echo            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    while           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    do              reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    if              reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    function        reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    ID              reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    return          reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    class           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    new             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    interface       reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    trait           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    use             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    continue        reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    for             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    foreach         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    switch          reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    try             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    throw           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exit            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    array           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    pow             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    POW             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    abs             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    cos             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    die             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    exp             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    floor           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    isset           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    list            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    log             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    log10           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    max             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    min             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    rand            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    round           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    sin             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    unset           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    $end            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    RBLOCK          reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endwhile        reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    private         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    protected       reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    public          reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    var             reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endfor          reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endforeach      reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    break           reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    endswitch       reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    default         reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)
    case            reduce using rule 43 (echo_declaration -> echo var_declaration2 SEMICOLON .)


state 186

    (44) echo_declaration -> echo LPAREN var_declaration2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 299


state 187

    (45) echo_declaration -> echo LPAREN NUMBER . RPAREN SEMICOLON

    RPAREN          shift and go to state 300


state 188

    (46) echo_declaration -> echo LPAREN CADENA . RPAREN SEMICOLON
    (225) Concatenar_Cadenas_declaration -> CADENA . DOT CADENA
    (226) Concatenar_Cadenas_declaration -> CADENA . DOT VARIABLE

    RPAREN          shift and go to state 301
    DOT             shift and go to state 85


state 189

    (47) echo_declaration -> echo NUMBER SEMICOLON .

    COMMENT         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    empty           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    include         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    const           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    print           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    echo            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    while           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    do              reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    if              reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    function        reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    ID              reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    return          reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    class           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    new             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    interface       reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    trait           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    use             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    continue        reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    for             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    foreach         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    switch          reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    try             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    throw           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    exit            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    array           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    pow             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    POW             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    abs             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    cos             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    deg2rad         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    rad2deg         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    die             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    exp             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    floor           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    isset           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    list            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    log             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    log10           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    max             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    min             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    rand            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    round           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    sin             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    sqrt            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    unset           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    CADENA          reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    $end            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    endwhile        reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    private         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    protected       reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    public          reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    var             reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    endfor          reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    endforeach      reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    break           reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    endswitch       reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    default         reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)
    case            reduce using rule 47 (echo_declaration -> echo NUMBER SEMICOLON .)


state 190

    (48) echo_declaration -> echo CADENA SEMICOLON .

    COMMENT         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    empty           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    include         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    const           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    print           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    echo            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    while           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    do              reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    if              reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    function        reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    ID              reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    return          reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    class           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    new             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    interface       reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    trait           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    use             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    continue        reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    for             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    foreach         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    switch          reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    try             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    throw           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    exit            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    VARIABLE        reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    array           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    pow             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    POW             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    abs             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    cos             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    deg2rad         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    rad2deg         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    die             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    exp             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    floor           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    isset           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    list            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    log             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    log10           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    max             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    min             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    rand            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    round           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    sin             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    sqrt            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    unset           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    CADENA          reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    $end            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    RBLOCK          reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    endwhile        reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    private         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    protected       reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    public          reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    var             reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    endfor          reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    endforeach      reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    break           reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    endswitch       reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    default         reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)
    case            reduce using rule 48 (echo_declaration -> echo CADENA SEMICOLON .)


state 191

    (74) iteration_stmt -> while LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> while LPAREN expression . RPAREN COLON declaration_list endwhile SEMICOLON

    RPAREN          shift and go to state 302


state 192

    (90) factor -> VARIABLE .

    PLUSPLUS        reduce using rule 90 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 90 (factor -> VARIABLE .)
    PLUS            reduce using rule 90 (factor -> VARIABLE .)
    MINUS           reduce using rule 90 (factor -> VARIABLE .)
    TIMES           reduce using rule 90 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 90 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 90 (factor -> VARIABLE .)
    MOD             reduce using rule 90 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 90 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 90 (factor -> VARIABLE .)
    NOT             reduce using rule 90 (factor -> VARIABLE .)
    or              reduce using rule 90 (factor -> VARIABLE .)
    and             reduce using rule 90 (factor -> VARIABLE .)
    xor             reduce using rule 90 (factor -> VARIABLE .)
    LESS            reduce using rule 90 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    GREATER         reduce using rule 90 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 90 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 90 (factor -> VARIABLE .)
    DISTINT         reduce using rule 90 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 90 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 90 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 90 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 90 (factor -> VARIABLE .)
    SR              reduce using rule 90 (factor -> VARIABLE .)
    SL              reduce using rule 90 (factor -> VARIABLE .)
    RPAREN          reduce using rule 90 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 90 (factor -> VARIABLE .)
    COMMA           reduce using rule 90 (factor -> VARIABLE .)
    COLON           reduce using rule 90 (factor -> VARIABLE .)
    RBRACKET        reduce using rule 90 (factor -> VARIABLE .)
    RBLOCK          reduce using rule 90 (factor -> VARIABLE .)
    as              reduce using rule 90 (factor -> VARIABLE .)


state 193

    (76) iteration_stmt -> do LBLOCK declaration_list . RBLOCK while LPAREN expression RPAREN SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 303
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 194

    (77) iteration_stmt -> do COLON declaration_list . endwhile SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endwhile        shift and go to state 304
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 195

    (118) if_statement -> if LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 305


state 196

    (123) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> function ID LPAREN . params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 306
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 197

    (126) return_statement -> return expression SEMICOLON .

    COMMENT         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    COMMENT_MULTI   reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    empty           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    include         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    const           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    print           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    echo            reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    while           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    do              reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    if              reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    function        reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    ID              reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    return          reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    class           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    new             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    interface       reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    trait           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    use             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    continue        reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    for             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    foreach         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    switch          reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    try             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    throw           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    exit            reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    VARIABLE        reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    array           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    pow             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    POW             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    abs             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    cos             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    deg2rad         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    rad2deg         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    die             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    exp             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    floor           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    isset           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    list            reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    log             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    log10           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    max             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    min             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    rand            reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    round           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    sin             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    sqrt            reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    unset           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    CADENA          reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    $end            reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    RBLOCK          reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    endwhile        reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    private         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    protected       reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    public          reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    var             reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    endfor          reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    endforeach      reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    break           reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    endswitch       reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    default         reduce using rule 126 (return_statement -> return expression SEMICOLON .)
    case            reduce using rule 126 (return_statement -> return expression SEMICOLON .)


state 198

    (127) return_statement -> return params SEMICOLON .

    COMMENT         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 127 (return_statement -> return params SEMICOLON .)
    COMMENT_MULTI   reduce using rule 127 (return_statement -> return params SEMICOLON .)
    empty           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    include         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    const           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    print           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    echo            reduce using rule 127 (return_statement -> return params SEMICOLON .)
    while           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    do              reduce using rule 127 (return_statement -> return params SEMICOLON .)
    if              reduce using rule 127 (return_statement -> return params SEMICOLON .)
    function        reduce using rule 127 (return_statement -> return params SEMICOLON .)
    ID              reduce using rule 127 (return_statement -> return params SEMICOLON .)
    return          reduce using rule 127 (return_statement -> return params SEMICOLON .)
    class           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    new             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    interface       reduce using rule 127 (return_statement -> return params SEMICOLON .)
    trait           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    use             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    continue        reduce using rule 127 (return_statement -> return params SEMICOLON .)
    CLOSE_TAG       reduce using rule 127 (return_statement -> return params SEMICOLON .)
    for             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    foreach         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    switch          reduce using rule 127 (return_statement -> return params SEMICOLON .)
    try             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    throw           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    exit            reduce using rule 127 (return_statement -> return params SEMICOLON .)
    VARIABLE        reduce using rule 127 (return_statement -> return params SEMICOLON .)
    array           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    pow             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    POW             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    abs             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    cos             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    deg2rad         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    rad2deg         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    die             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    exp             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    floor           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    isset           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    list            reduce using rule 127 (return_statement -> return params SEMICOLON .)
    log             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    log10           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    max             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    min             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    rand            reduce using rule 127 (return_statement -> return params SEMICOLON .)
    round           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    sin             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    sqrt            reduce using rule 127 (return_statement -> return params SEMICOLON .)
    unset           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    CADENA          reduce using rule 127 (return_statement -> return params SEMICOLON .)
    $end            reduce using rule 127 (return_statement -> return params SEMICOLON .)
    RBLOCK          reduce using rule 127 (return_statement -> return params SEMICOLON .)
    endwhile        reduce using rule 127 (return_statement -> return params SEMICOLON .)
    private         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    protected       reduce using rule 127 (return_statement -> return params SEMICOLON .)
    public          reduce using rule 127 (return_statement -> return params SEMICOLON .)
    var             reduce using rule 127 (return_statement -> return params SEMICOLON .)
    endfor          reduce using rule 127 (return_statement -> return params SEMICOLON .)
    endforeach      reduce using rule 127 (return_statement -> return params SEMICOLON .)
    break           reduce using rule 127 (return_statement -> return params SEMICOLON .)
    endswitch       reduce using rule 127 (return_statement -> return params SEMICOLON .)
    default         reduce using rule 127 (return_statement -> return params SEMICOLON .)
    case            reduce using rule 127 (return_statement -> return params SEMICOLON .)


state 199

    (163) params -> params COMMA . single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    SEMICOLON       reduce using rule 236 (empty_function -> .)
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    COLON           reduce using rule 236 (empty_function -> .)
    RBRACKET        reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    single_param                   shift and go to state 307
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 200

    (129) return_statement -> return ID LPAREN . expression RPAREN SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 308
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 201

    (91) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 309


state 202

    (79) expression -> additive_expression logical_op . additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    additive_expression            shift and go to state 310
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 203

    (80) expression -> additive_expression comp_op . additive_expression
    (81) expression -> additive_expression comp_op . additive_expression logical_op additive_expression comp_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    additive_expression            shift and go to state 311
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 204

    (82) expression -> additive_expression bits_op . additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    additive_expression            shift and go to state 312
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 205

    (112) logical_op -> BOOL_OR .

    MINUS           reduce using rule 112 (logical_op -> BOOL_OR .)
    NUMBER          reduce using rule 112 (logical_op -> BOOL_OR .)
    VARIABLE        reduce using rule 112 (logical_op -> BOOL_OR .)
    LPAREN          reduce using rule 112 (logical_op -> BOOL_OR .)
    PLUSPLUS        reduce using rule 112 (logical_op -> BOOL_OR .)
    MINUSMINUS      reduce using rule 112 (logical_op -> BOOL_OR .)


state 206

    (113) logical_op -> BOOL_AND .

    MINUS           reduce using rule 113 (logical_op -> BOOL_AND .)
    NUMBER          reduce using rule 113 (logical_op -> BOOL_AND .)
    VARIABLE        reduce using rule 113 (logical_op -> BOOL_AND .)
    LPAREN          reduce using rule 113 (logical_op -> BOOL_AND .)
    PLUSPLUS        reduce using rule 113 (logical_op -> BOOL_AND .)
    MINUSMINUS      reduce using rule 113 (logical_op -> BOOL_AND .)


state 207

    (114) logical_op -> NOT .

    MINUS           reduce using rule 114 (logical_op -> NOT .)
    NUMBER          reduce using rule 114 (logical_op -> NOT .)
    VARIABLE        reduce using rule 114 (logical_op -> NOT .)
    LPAREN          reduce using rule 114 (logical_op -> NOT .)
    PLUSPLUS        reduce using rule 114 (logical_op -> NOT .)
    MINUSMINUS      reduce using rule 114 (logical_op -> NOT .)


state 208

    (115) logical_op -> or .

    MINUS           reduce using rule 115 (logical_op -> or .)
    NUMBER          reduce using rule 115 (logical_op -> or .)
    VARIABLE        reduce using rule 115 (logical_op -> or .)
    LPAREN          reduce using rule 115 (logical_op -> or .)
    PLUSPLUS        reduce using rule 115 (logical_op -> or .)
    MINUSMINUS      reduce using rule 115 (logical_op -> or .)


state 209

    (116) logical_op -> and .

    MINUS           reduce using rule 116 (logical_op -> and .)
    NUMBER          reduce using rule 116 (logical_op -> and .)
    VARIABLE        reduce using rule 116 (logical_op -> and .)
    LPAREN          reduce using rule 116 (logical_op -> and .)
    PLUSPLUS        reduce using rule 116 (logical_op -> and .)
    MINUSMINUS      reduce using rule 116 (logical_op -> and .)


state 210

    (117) logical_op -> xor .

    MINUS           reduce using rule 117 (logical_op -> xor .)
    NUMBER          reduce using rule 117 (logical_op -> xor .)
    VARIABLE        reduce using rule 117 (logical_op -> xor .)
    LPAREN          reduce using rule 117 (logical_op -> xor .)
    PLUSPLUS        reduce using rule 117 (logical_op -> xor .)
    MINUSMINUS      reduce using rule 117 (logical_op -> xor .)


state 211

    (102) comp_op -> LESS .

    MINUS           reduce using rule 102 (comp_op -> LESS .)
    NUMBER          reduce using rule 102 (comp_op -> LESS .)
    VARIABLE        reduce using rule 102 (comp_op -> LESS .)
    LPAREN          reduce using rule 102 (comp_op -> LESS .)
    PLUSPLUS        reduce using rule 102 (comp_op -> LESS .)
    MINUSMINUS      reduce using rule 102 (comp_op -> LESS .)


state 212

    (103) comp_op -> LESSEQUAL .

    MINUS           reduce using rule 103 (comp_op -> LESSEQUAL .)
    NUMBER          reduce using rule 103 (comp_op -> LESSEQUAL .)
    VARIABLE        reduce using rule 103 (comp_op -> LESSEQUAL .)
    LPAREN          reduce using rule 103 (comp_op -> LESSEQUAL .)
    PLUSPLUS        reduce using rule 103 (comp_op -> LESSEQUAL .)
    MINUSMINUS      reduce using rule 103 (comp_op -> LESSEQUAL .)


state 213

    (104) comp_op -> GREATER .

    MINUS           reduce using rule 104 (comp_op -> GREATER .)
    NUMBER          reduce using rule 104 (comp_op -> GREATER .)
    VARIABLE        reduce using rule 104 (comp_op -> GREATER .)
    LPAREN          reduce using rule 104 (comp_op -> GREATER .)
    PLUSPLUS        reduce using rule 104 (comp_op -> GREATER .)
    MINUSMINUS      reduce using rule 104 (comp_op -> GREATER .)


state 214

    (105) comp_op -> GREATEREQUAL .

    MINUS           reduce using rule 105 (comp_op -> GREATEREQUAL .)
    NUMBER          reduce using rule 105 (comp_op -> GREATEREQUAL .)
    VARIABLE        reduce using rule 105 (comp_op -> GREATEREQUAL .)
    LPAREN          reduce using rule 105 (comp_op -> GREATEREQUAL .)
    PLUSPLUS        reduce using rule 105 (comp_op -> GREATEREQUAL .)
    MINUSMINUS      reduce using rule 105 (comp_op -> GREATEREQUAL .)


state 215

    (106) comp_op -> DEQUAL .

    MINUS           reduce using rule 106 (comp_op -> DEQUAL .)
    NUMBER          reduce using rule 106 (comp_op -> DEQUAL .)
    VARIABLE        reduce using rule 106 (comp_op -> DEQUAL .)
    LPAREN          reduce using rule 106 (comp_op -> DEQUAL .)
    PLUSPLUS        reduce using rule 106 (comp_op -> DEQUAL .)
    MINUSMINUS      reduce using rule 106 (comp_op -> DEQUAL .)


state 216

    (107) comp_op -> DISTINT .

    MINUS           reduce using rule 107 (comp_op -> DISTINT .)
    NUMBER          reduce using rule 107 (comp_op -> DISTINT .)
    VARIABLE        reduce using rule 107 (comp_op -> DISTINT .)
    LPAREN          reduce using rule 107 (comp_op -> DISTINT .)
    PLUSPLUS        reduce using rule 107 (comp_op -> DISTINT .)
    MINUSMINUS      reduce using rule 107 (comp_op -> DISTINT .)


state 217

    (108) comp_op -> DIVEQUAL .

    MINUS           reduce using rule 108 (comp_op -> DIVEQUAL .)
    NUMBER          reduce using rule 108 (comp_op -> DIVEQUAL .)
    VARIABLE        reduce using rule 108 (comp_op -> DIVEQUAL .)
    LPAREN          reduce using rule 108 (comp_op -> DIVEQUAL .)
    PLUSPLUS        reduce using rule 108 (comp_op -> DIVEQUAL .)
    MINUSMINUS      reduce using rule 108 (comp_op -> DIVEQUAL .)


state 218

    (109) comp_op -> ISEQUAL .

    MINUS           reduce using rule 109 (comp_op -> ISEQUAL .)
    NUMBER          reduce using rule 109 (comp_op -> ISEQUAL .)
    VARIABLE        reduce using rule 109 (comp_op -> ISEQUAL .)
    LPAREN          reduce using rule 109 (comp_op -> ISEQUAL .)
    PLUSPLUS        reduce using rule 109 (comp_op -> ISEQUAL .)
    MINUSMINUS      reduce using rule 109 (comp_op -> ISEQUAL .)


state 219

    (110) comp_op -> ISIDENTICAL .

    MINUS           reduce using rule 110 (comp_op -> ISIDENTICAL .)
    NUMBER          reduce using rule 110 (comp_op -> ISIDENTICAL .)
    VARIABLE        reduce using rule 110 (comp_op -> ISIDENTICAL .)
    LPAREN          reduce using rule 110 (comp_op -> ISIDENTICAL .)
    PLUSPLUS        reduce using rule 110 (comp_op -> ISIDENTICAL .)
    MINUSMINUS      reduce using rule 110 (comp_op -> ISIDENTICAL .)


state 220

    (111) comp_op -> ISNOTIDENTICAL .

    MINUS           reduce using rule 111 (comp_op -> ISNOTIDENTICAL .)
    NUMBER          reduce using rule 111 (comp_op -> ISNOTIDENTICAL .)
    VARIABLE        reduce using rule 111 (comp_op -> ISNOTIDENTICAL .)
    LPAREN          reduce using rule 111 (comp_op -> ISNOTIDENTICAL .)
    PLUSPLUS        reduce using rule 111 (comp_op -> ISNOTIDENTICAL .)
    MINUSMINUS      reduce using rule 111 (comp_op -> ISNOTIDENTICAL .)


state 221

    (228) bits_op -> AMPERSANT .

    MINUS           reduce using rule 228 (bits_op -> AMPERSANT .)
    NUMBER          reduce using rule 228 (bits_op -> AMPERSANT .)
    VARIABLE        reduce using rule 228 (bits_op -> AMPERSANT .)
    LPAREN          reduce using rule 228 (bits_op -> AMPERSANT .)
    PLUSPLUS        reduce using rule 228 (bits_op -> AMPERSANT .)
    MINUSMINUS      reduce using rule 228 (bits_op -> AMPERSANT .)


state 222

    (229) bits_op -> SR .

    MINUS           reduce using rule 229 (bits_op -> SR .)
    NUMBER          reduce using rule 229 (bits_op -> SR .)
    VARIABLE        reduce using rule 229 (bits_op -> SR .)
    LPAREN          reduce using rule 229 (bits_op -> SR .)
    PLUSPLUS        reduce using rule 229 (bits_op -> SR .)
    MINUSMINUS      reduce using rule 229 (bits_op -> SR .)


state 223

    (230) bits_op -> SL .

    MINUS           reduce using rule 230 (bits_op -> SL .)
    NUMBER          reduce using rule 230 (bits_op -> SL .)
    VARIABLE        reduce using rule 230 (bits_op -> SL .)
    LPAREN          reduce using rule 230 (bits_op -> SL .)
    PLUSPLUS        reduce using rule 230 (bits_op -> SL .)
    MINUSMINUS      reduce using rule 230 (bits_op -> SL .)


state 224

    (84) additive_expression -> term math_op . term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    term                           shift and go to state 313
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 225

    (94) math_op -> PLUS .

    MINUS           reduce using rule 94 (math_op -> PLUS .)
    NUMBER          reduce using rule 94 (math_op -> PLUS .)
    VARIABLE        reduce using rule 94 (math_op -> PLUS .)
    LPAREN          reduce using rule 94 (math_op -> PLUS .)
    PLUSPLUS        reduce using rule 94 (math_op -> PLUS .)
    MINUSMINUS      reduce using rule 94 (math_op -> PLUS .)


state 226

    (95) math_op -> MINUS .

    MINUS           reduce using rule 95 (math_op -> MINUS .)
    NUMBER          reduce using rule 95 (math_op -> MINUS .)
    VARIABLE        reduce using rule 95 (math_op -> MINUS .)
    LPAREN          reduce using rule 95 (math_op -> MINUS .)
    PLUSPLUS        reduce using rule 95 (math_op -> MINUS .)
    MINUSMINUS      reduce using rule 95 (math_op -> MINUS .)


state 227

    (96) math_op -> TIMES .

    MINUS           reduce using rule 96 (math_op -> TIMES .)
    NUMBER          reduce using rule 96 (math_op -> TIMES .)
    VARIABLE        reduce using rule 96 (math_op -> TIMES .)
    LPAREN          reduce using rule 96 (math_op -> TIMES .)
    PLUSPLUS        reduce using rule 96 (math_op -> TIMES .)
    MINUSMINUS      reduce using rule 96 (math_op -> TIMES .)


state 228

    (97) math_op -> DIVIDE .

    MINUS           reduce using rule 97 (math_op -> DIVIDE .)
    NUMBER          reduce using rule 97 (math_op -> DIVIDE .)
    VARIABLE        reduce using rule 97 (math_op -> DIVIDE .)
    LPAREN          reduce using rule 97 (math_op -> DIVIDE .)
    PLUSPLUS        reduce using rule 97 (math_op -> DIVIDE .)
    MINUSMINUS      reduce using rule 97 (math_op -> DIVIDE .)


state 229

    (98) math_op -> MULEQUAL .

    MINUS           reduce using rule 98 (math_op -> MULEQUAL .)
    NUMBER          reduce using rule 98 (math_op -> MULEQUAL .)
    VARIABLE        reduce using rule 98 (math_op -> MULEQUAL .)
    LPAREN          reduce using rule 98 (math_op -> MULEQUAL .)
    PLUSPLUS        reduce using rule 98 (math_op -> MULEQUAL .)
    MINUSMINUS      reduce using rule 98 (math_op -> MULEQUAL .)


state 230

    (99) math_op -> PLUSEQUAL .

    MINUS           reduce using rule 99 (math_op -> PLUSEQUAL .)
    NUMBER          reduce using rule 99 (math_op -> PLUSEQUAL .)
    VARIABLE        reduce using rule 99 (math_op -> PLUSEQUAL .)
    LPAREN          reduce using rule 99 (math_op -> PLUSEQUAL .)
    PLUSPLUS        reduce using rule 99 (math_op -> PLUSEQUAL .)
    MINUSMINUS      reduce using rule 99 (math_op -> PLUSEQUAL .)


state 231

    (100) math_op -> MINUSEQUAL .

    MINUS           reduce using rule 100 (math_op -> MINUSEQUAL .)
    NUMBER          reduce using rule 100 (math_op -> MINUSEQUAL .)
    VARIABLE        reduce using rule 100 (math_op -> MINUSEQUAL .)
    LPAREN          reduce using rule 100 (math_op -> MINUSEQUAL .)
    PLUSPLUS        reduce using rule 100 (math_op -> MINUSEQUAL .)
    MINUSMINUS      reduce using rule 100 (math_op -> MINUSEQUAL .)


state 232

    (101) math_op -> MOD .

    MINUS           reduce using rule 101 (math_op -> MOD .)
    NUMBER          reduce using rule 101 (math_op -> MOD .)
    VARIABLE        reduce using rule 101 (math_op -> MOD .)
    LPAREN          reduce using rule 101 (math_op -> MOD .)
    PLUSPLUS        reduce using rule 101 (math_op -> MOD .)
    MINUSMINUS      reduce using rule 101 (math_op -> MOD .)


state 233

    (85) term -> MINUS term .

    PLUS            reduce using rule 85 (term -> MINUS term .)
    MINUS           reduce using rule 85 (term -> MINUS term .)
    TIMES           reduce using rule 85 (term -> MINUS term .)
    DIVIDE          reduce using rule 85 (term -> MINUS term .)
    MULEQUAL        reduce using rule 85 (term -> MINUS term .)
    PLUSEQUAL       reduce using rule 85 (term -> MINUS term .)
    MINUSEQUAL      reduce using rule 85 (term -> MINUS term .)
    MOD             reduce using rule 85 (term -> MINUS term .)
    BOOL_OR         reduce using rule 85 (term -> MINUS term .)
    BOOL_AND        reduce using rule 85 (term -> MINUS term .)
    NOT             reduce using rule 85 (term -> MINUS term .)
    or              reduce using rule 85 (term -> MINUS term .)
    and             reduce using rule 85 (term -> MINUS term .)
    xor             reduce using rule 85 (term -> MINUS term .)
    LESS            reduce using rule 85 (term -> MINUS term .)
    LESSEQUAL       reduce using rule 85 (term -> MINUS term .)
    GREATER         reduce using rule 85 (term -> MINUS term .)
    GREATEREQUAL    reduce using rule 85 (term -> MINUS term .)
    DEQUAL          reduce using rule 85 (term -> MINUS term .)
    DISTINT         reduce using rule 85 (term -> MINUS term .)
    DIVEQUAL        reduce using rule 85 (term -> MINUS term .)
    ISEQUAL         reduce using rule 85 (term -> MINUS term .)
    ISIDENTICAL     reduce using rule 85 (term -> MINUS term .)
    ISNOTIDENTICAL  reduce using rule 85 (term -> MINUS term .)
    AMPERSANT       reduce using rule 85 (term -> MINUS term .)
    SR              reduce using rule 85 (term -> MINUS term .)
    SL              reduce using rule 85 (term -> MINUS term .)
    SEMICOLON       reduce using rule 85 (term -> MINUS term .)
    RPAREN          reduce using rule 85 (term -> MINUS term .)
    COMMA           reduce using rule 85 (term -> MINUS term .)
    COLON           reduce using rule 85 (term -> MINUS term .)
    RBRACKET        reduce using rule 85 (term -> MINUS term .)
    RBLOCK          reduce using rule 85 (term -> MINUS term .)
    as              reduce using rule 85 (term -> MINUS term .)


state 234

    (87) term -> factor increment_decrement_op .

    PLUS            reduce using rule 87 (term -> factor increment_decrement_op .)
    MINUS           reduce using rule 87 (term -> factor increment_decrement_op .)
    TIMES           reduce using rule 87 (term -> factor increment_decrement_op .)
    DIVIDE          reduce using rule 87 (term -> factor increment_decrement_op .)
    MULEQUAL        reduce using rule 87 (term -> factor increment_decrement_op .)
    PLUSEQUAL       reduce using rule 87 (term -> factor increment_decrement_op .)
    MINUSEQUAL      reduce using rule 87 (term -> factor increment_decrement_op .)
    MOD             reduce using rule 87 (term -> factor increment_decrement_op .)
    BOOL_OR         reduce using rule 87 (term -> factor increment_decrement_op .)
    BOOL_AND        reduce using rule 87 (term -> factor increment_decrement_op .)
    NOT             reduce using rule 87 (term -> factor increment_decrement_op .)
    or              reduce using rule 87 (term -> factor increment_decrement_op .)
    and             reduce using rule 87 (term -> factor increment_decrement_op .)
    xor             reduce using rule 87 (term -> factor increment_decrement_op .)
    LESS            reduce using rule 87 (term -> factor increment_decrement_op .)
    LESSEQUAL       reduce using rule 87 (term -> factor increment_decrement_op .)
    GREATER         reduce using rule 87 (term -> factor increment_decrement_op .)
    GREATEREQUAL    reduce using rule 87 (term -> factor increment_decrement_op .)
    DEQUAL          reduce using rule 87 (term -> factor increment_decrement_op .)
    DISTINT         reduce using rule 87 (term -> factor increment_decrement_op .)
    DIVEQUAL        reduce using rule 87 (term -> factor increment_decrement_op .)
    ISEQUAL         reduce using rule 87 (term -> factor increment_decrement_op .)
    ISIDENTICAL     reduce using rule 87 (term -> factor increment_decrement_op .)
    ISNOTIDENTICAL  reduce using rule 87 (term -> factor increment_decrement_op .)
    AMPERSANT       reduce using rule 87 (term -> factor increment_decrement_op .)
    SR              reduce using rule 87 (term -> factor increment_decrement_op .)
    SL              reduce using rule 87 (term -> factor increment_decrement_op .)
    SEMICOLON       reduce using rule 87 (term -> factor increment_decrement_op .)
    RPAREN          reduce using rule 87 (term -> factor increment_decrement_op .)
    COMMA           reduce using rule 87 (term -> factor increment_decrement_op .)
    COLON           reduce using rule 87 (term -> factor increment_decrement_op .)
    RBRACKET        reduce using rule 87 (term -> factor increment_decrement_op .)
    RBLOCK          reduce using rule 87 (term -> factor increment_decrement_op .)
    as              reduce using rule 87 (term -> factor increment_decrement_op .)


state 235

    (88) term -> increment_decrement_op factor .

    PLUS            reduce using rule 88 (term -> increment_decrement_op factor .)
    MINUS           reduce using rule 88 (term -> increment_decrement_op factor .)
    TIMES           reduce using rule 88 (term -> increment_decrement_op factor .)
    DIVIDE          reduce using rule 88 (term -> increment_decrement_op factor .)
    MULEQUAL        reduce using rule 88 (term -> increment_decrement_op factor .)
    PLUSEQUAL       reduce using rule 88 (term -> increment_decrement_op factor .)
    MINUSEQUAL      reduce using rule 88 (term -> increment_decrement_op factor .)
    MOD             reduce using rule 88 (term -> increment_decrement_op factor .)
    BOOL_OR         reduce using rule 88 (term -> increment_decrement_op factor .)
    BOOL_AND        reduce using rule 88 (term -> increment_decrement_op factor .)
    NOT             reduce using rule 88 (term -> increment_decrement_op factor .)
    or              reduce using rule 88 (term -> increment_decrement_op factor .)
    and             reduce using rule 88 (term -> increment_decrement_op factor .)
    xor             reduce using rule 88 (term -> increment_decrement_op factor .)
    LESS            reduce using rule 88 (term -> increment_decrement_op factor .)
    LESSEQUAL       reduce using rule 88 (term -> increment_decrement_op factor .)
    GREATER         reduce using rule 88 (term -> increment_decrement_op factor .)
    GREATEREQUAL    reduce using rule 88 (term -> increment_decrement_op factor .)
    DEQUAL          reduce using rule 88 (term -> increment_decrement_op factor .)
    DISTINT         reduce using rule 88 (term -> increment_decrement_op factor .)
    DIVEQUAL        reduce using rule 88 (term -> increment_decrement_op factor .)
    ISEQUAL         reduce using rule 88 (term -> increment_decrement_op factor .)
    ISIDENTICAL     reduce using rule 88 (term -> increment_decrement_op factor .)
    ISNOTIDENTICAL  reduce using rule 88 (term -> increment_decrement_op factor .)
    AMPERSANT       reduce using rule 88 (term -> increment_decrement_op factor .)
    SR              reduce using rule 88 (term -> increment_decrement_op factor .)
    SL              reduce using rule 88 (term -> increment_decrement_op factor .)
    SEMICOLON       reduce using rule 88 (term -> increment_decrement_op factor .)
    RPAREN          reduce using rule 88 (term -> increment_decrement_op factor .)
    COMMA           reduce using rule 88 (term -> increment_decrement_op factor .)
    COLON           reduce using rule 88 (term -> increment_decrement_op factor .)
    RBRACKET        reduce using rule 88 (term -> increment_decrement_op factor .)
    RBLOCK          reduce using rule 88 (term -> increment_decrement_op factor .)
    as              reduce using rule 88 (term -> increment_decrement_op factor .)


state 236

    (161) callable_declaration -> callable VARIABLE .

    SEMICOLON       reduce using rule 161 (callable_declaration -> callable VARIABLE .)
    COMMA           reduce using rule 161 (callable_declaration -> callable VARIABLE .)
    RPAREN          reduce using rule 161 (callable_declaration -> callable VARIABLE .)
    RBRACKET        reduce using rule 161 (callable_declaration -> callable VARIABLE .)
    RBLOCK          reduce using rule 161 (callable_declaration -> callable VARIABLE .)
    COLON           reduce using rule 161 (callable_declaration -> callable VARIABLE .)


state 237

    (130) class_declaration -> class ID LBLOCK . class_body RBLOCK
    (138) class_body -> . class_body_element
    (139) class_body -> . class_body class_body_element
    (140) class_body -> . empty_function
    (141) class_body_element -> . visibility var_declaration2 SEMICOLON
    (142) class_body_element -> . visibility fun_declaration
    (143) class_body_element -> . declaration
    (236) empty_function -> .
    (156) visibility -> . private
    (157) visibility -> . protected
    (158) visibility -> . public
    (159) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    RBLOCK          reduce using rule 236 (empty_function -> .)
    private         shift and go to state 319
    protected       shift and go to state 320
    public          shift and go to state 321
    var             shift and go to state 322
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

  ! private         [ reduce using rule 236 (empty_function -> .) ]
  ! protected       [ reduce using rule 236 (empty_function -> .) ]
  ! public          [ reduce using rule 236 (empty_function -> .) ]
  ! var             [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT         [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 236 (empty_function -> .) ]
  ! empty           [ reduce using rule 236 (empty_function -> .) ]
  ! include         [ reduce using rule 236 (empty_function -> .) ]
  ! const           [ reduce using rule 236 (empty_function -> .) ]
  ! print           [ reduce using rule 236 (empty_function -> .) ]
  ! echo            [ reduce using rule 236 (empty_function -> .) ]
  ! while           [ reduce using rule 236 (empty_function -> .) ]
  ! do              [ reduce using rule 236 (empty_function -> .) ]
  ! if              [ reduce using rule 236 (empty_function -> .) ]
  ! function        [ reduce using rule 236 (empty_function -> .) ]
  ! ID              [ reduce using rule 236 (empty_function -> .) ]
  ! return          [ reduce using rule 236 (empty_function -> .) ]
  ! class           [ reduce using rule 236 (empty_function -> .) ]
  ! new             [ reduce using rule 236 (empty_function -> .) ]
  ! interface       [ reduce using rule 236 (empty_function -> .) ]
  ! trait           [ reduce using rule 236 (empty_function -> .) ]
  ! use             [ reduce using rule 236 (empty_function -> .) ]
  ! continue        [ reduce using rule 236 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 236 (empty_function -> .) ]
  ! for             [ reduce using rule 236 (empty_function -> .) ]
  ! foreach         [ reduce using rule 236 (empty_function -> .) ]
  ! switch          [ reduce using rule 236 (empty_function -> .) ]
  ! try             [ reduce using rule 236 (empty_function -> .) ]
  ! throw           [ reduce using rule 236 (empty_function -> .) ]
  ! exit            [ reduce using rule 236 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 236 (empty_function -> .) ]
  ! array           [ reduce using rule 236 (empty_function -> .) ]
  ! pow             [ reduce using rule 236 (empty_function -> .) ]
  ! POW             [ reduce using rule 236 (empty_function -> .) ]
  ! abs             [ reduce using rule 236 (empty_function -> .) ]
  ! cos             [ reduce using rule 236 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 236 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 236 (empty_function -> .) ]
  ! die             [ reduce using rule 236 (empty_function -> .) ]
  ! exp             [ reduce using rule 236 (empty_function -> .) ]
  ! floor           [ reduce using rule 236 (empty_function -> .) ]
  ! isset           [ reduce using rule 236 (empty_function -> .) ]
  ! list            [ reduce using rule 236 (empty_function -> .) ]
  ! log             [ reduce using rule 236 (empty_function -> .) ]
  ! log10           [ reduce using rule 236 (empty_function -> .) ]
  ! max             [ reduce using rule 236 (empty_function -> .) ]
  ! min             [ reduce using rule 236 (empty_function -> .) ]
  ! rand            [ reduce using rule 236 (empty_function -> .) ]
  ! round           [ reduce using rule 236 (empty_function -> .) ]
  ! sin             [ reduce using rule 236 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 236 (empty_function -> .) ]
  ! unset           [ reduce using rule 236 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 236 (empty_function -> .) ]

    class_body                     shift and go to state 314
    class_body_element             shift and go to state 315
    empty_function                 shift and go to state 316
    visibility                     shift and go to state 317
    var_declaration2               shift and go to state 36
    fun_declaration                shift and go to state 16
    declaration                    shift and go to state 318
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 238

    (131) class_extension -> class ID extends . ID LBLOCK RBLOCK
    (132) class_extension -> class ID extends . Exception LBLOCK RBLOCK
    (133) class_extension -> class ID extends . ErrorException LBLOCK RBLOCK
    (134) class_extension -> class ID extends . Error LBLOCK RBLOCK
    (135) class_extension -> class ID extends . ParseError LBLOCK RBLOCK
    (136) class_extension -> class ID extends . TypeError LBLOCK RBLOCK

    ID              shift and go to state 323
    Exception       shift and go to state 324
    ErrorException  shift and go to state 325
    Error           shift and go to state 326
    ParseError      shift and go to state 327
    TypeError       shift and go to state 328


state 239

    (137) create_obj_declaration -> new ID LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 329
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 240

    (144) interface_declaration -> interface ID LBLOCK . interface_body RBLOCK
    (145) interface_body -> . interface_method_declaration
    (146) interface_body -> . interface_body interface_method_declaration
    (147) interface_body -> . empty_function
    (148) interface_method_declaration -> . visibility function ID LPAREN params RPAREN SEMICOLON
    (236) empty_function -> .
    (156) visibility -> . private
    (157) visibility -> . protected
    (158) visibility -> . public
    (159) visibility -> . var

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
    RBLOCK          reduce using rule 236 (empty_function -> .)
    private         shift and go to state 319
    protected       shift and go to state 320
    public          shift and go to state 321
    var             shift and go to state 322

  ! private         [ reduce using rule 236 (empty_function -> .) ]
  ! protected       [ reduce using rule 236 (empty_function -> .) ]
  ! public          [ reduce using rule 236 (empty_function -> .) ]
  ! var             [ reduce using rule 236 (empty_function -> .) ]

    interface_body                 shift and go to state 330
    interface_method_declaration   shift and go to state 331
    empty_function                 shift and go to state 332
    visibility                     shift and go to state 333

state 241

    (149) trait_declaration -> trait ID LBLOCK . trait_body RBLOCK
    (150) trait_body -> . trait_element
    (151) trait_body -> . trait_body trait_element
    (152) trait_body -> . empty_function
    (153) trait_element -> . visibility var_declaration SEMICOLON
    (154) trait_element -> . visibility fun_declaration
    (236) empty_function -> .
    (156) visibility -> . private
    (157) visibility -> . protected
    (158) visibility -> . public
    (159) visibility -> . var

  ! shift/reduce conflict for private resolved as shift
  ! shift/reduce conflict for protected resolved as shift
  ! shift/reduce conflict for public resolved as shift
  ! shift/reduce conflict for var resolved as shift
    RBLOCK          reduce using rule 236 (empty_function -> .)
    private         shift and go to state 319
    protected       shift and go to state 320
    public          shift and go to state 321
    var             shift and go to state 322

  ! private         [ reduce using rule 236 (empty_function -> .) ]
  ! protected       [ reduce using rule 236 (empty_function -> .) ]
  ! public          [ reduce using rule 236 (empty_function -> .) ]
  ! var             [ reduce using rule 236 (empty_function -> .) ]

    trait_body                     shift and go to state 334
    trait_element                  shift and go to state 335
    empty_function                 shift and go to state 336
    visibility                     shift and go to state 337

state 242

    (155) use_declaration -> use ID SEMICOLON .

    COMMENT         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    COMMENT_MULTI   reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    empty           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    include         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    const           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    print           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    echo            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    while           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    do              reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    if              reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    function        reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    ID              reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    return          reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    class           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    new             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    interface       reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    trait           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    use             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    continue        reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    for             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    foreach         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    switch          reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    try             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    throw           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    exit            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    VARIABLE        reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    array           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    pow             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    POW             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    abs             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    cos             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    deg2rad         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    rad2deg         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    die             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    exp             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    floor           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    isset           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    list            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    log             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    log10           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    max             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    min             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    rand            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    round           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    sin             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    sqrt            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    unset           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    CADENA          reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    $end            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    RBLOCK          reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    endwhile        reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    private         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    protected       reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    public          reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    var             reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    endfor          reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    endforeach      reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    break           reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    endswitch       reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    default         reduce using rule 155 (use_declaration -> use ID SEMICOLON .)
    case            reduce using rule 155 (use_declaration -> use ID SEMICOLON .)


state 243

    (169) for_loop -> for LPAREN for_init . for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> for LPAREN for_init . for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (172) for_expr -> . expression SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    for_expr                       shift and go to state 338
    expression                     shift and go to state 339
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 244

    (171) for_init -> var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 340


state 245

    (175) foreach_loop -> foreach LPAREN expression . as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> foreach LPAREN expression . as expression RPAREN COLON declaration_list endforeach SEMICOLON

    as              shift and go to state 341


state 246

    (177) switch_statement -> switch LPAREN expression . RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> switch LPAREN expression . RPAREN COLON case_blocks default_block endswitch SEMICOLON

    RPAREN          shift and go to state 342


state 247

    (187) try_statement -> try LBLOCK statement_list . RBLOCK catch_blocks
    (201) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 343
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 344
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 248

    (200) statement_list -> declaration .

    RBLOCK          reduce using rule 200 (statement_list -> declaration .)
    COMMENT         reduce using rule 200 (statement_list -> declaration .)
    COMMENT_HASHTAG reduce using rule 200 (statement_list -> declaration .)
    COMMENT_MULTI   reduce using rule 200 (statement_list -> declaration .)
    empty           reduce using rule 200 (statement_list -> declaration .)
    include         reduce using rule 200 (statement_list -> declaration .)
    const           reduce using rule 200 (statement_list -> declaration .)
    print           reduce using rule 200 (statement_list -> declaration .)
    echo            reduce using rule 200 (statement_list -> declaration .)
    while           reduce using rule 200 (statement_list -> declaration .)
    do              reduce using rule 200 (statement_list -> declaration .)
    if              reduce using rule 200 (statement_list -> declaration .)
    function        reduce using rule 200 (statement_list -> declaration .)
    ID              reduce using rule 200 (statement_list -> declaration .)
    return          reduce using rule 200 (statement_list -> declaration .)
    class           reduce using rule 200 (statement_list -> declaration .)
    new             reduce using rule 200 (statement_list -> declaration .)
    interface       reduce using rule 200 (statement_list -> declaration .)
    trait           reduce using rule 200 (statement_list -> declaration .)
    use             reduce using rule 200 (statement_list -> declaration .)
    continue        reduce using rule 200 (statement_list -> declaration .)
    CLOSE_TAG       reduce using rule 200 (statement_list -> declaration .)
    for             reduce using rule 200 (statement_list -> declaration .)
    foreach         reduce using rule 200 (statement_list -> declaration .)
    switch          reduce using rule 200 (statement_list -> declaration .)
    try             reduce using rule 200 (statement_list -> declaration .)
    throw           reduce using rule 200 (statement_list -> declaration .)
    exit            reduce using rule 200 (statement_list -> declaration .)
    VARIABLE        reduce using rule 200 (statement_list -> declaration .)
    array           reduce using rule 200 (statement_list -> declaration .)
    pow             reduce using rule 200 (statement_list -> declaration .)
    POW             reduce using rule 200 (statement_list -> declaration .)
    abs             reduce using rule 200 (statement_list -> declaration .)
    cos             reduce using rule 200 (statement_list -> declaration .)
    deg2rad         reduce using rule 200 (statement_list -> declaration .)
    rad2deg         reduce using rule 200 (statement_list -> declaration .)
    die             reduce using rule 200 (statement_list -> declaration .)
    exp             reduce using rule 200 (statement_list -> declaration .)
    floor           reduce using rule 200 (statement_list -> declaration .)
    isset           reduce using rule 200 (statement_list -> declaration .)
    list            reduce using rule 200 (statement_list -> declaration .)
    log             reduce using rule 200 (statement_list -> declaration .)
    log10           reduce using rule 200 (statement_list -> declaration .)
    max             reduce using rule 200 (statement_list -> declaration .)
    min             reduce using rule 200 (statement_list -> declaration .)
    rand            reduce using rule 200 (statement_list -> declaration .)
    round           reduce using rule 200 (statement_list -> declaration .)
    sin             reduce using rule 200 (statement_list -> declaration .)
    sqrt            reduce using rule 200 (statement_list -> declaration .)
    unset           reduce using rule 200 (statement_list -> declaration .)
    CADENA          reduce using rule 200 (statement_list -> declaration .)
    break           reduce using rule 200 (statement_list -> declaration .)
    endswitch       reduce using rule 200 (statement_list -> declaration .)
    default         reduce using rule 200 (statement_list -> declaration .)
    case            reduce using rule 200 (statement_list -> declaration .)


state 249

    (202) statement_list -> empty_function .

    RBLOCK          reduce using rule 202 (statement_list -> empty_function .)
    COMMENT         reduce using rule 202 (statement_list -> empty_function .)
    COMMENT_HASHTAG reduce using rule 202 (statement_list -> empty_function .)
    COMMENT_MULTI   reduce using rule 202 (statement_list -> empty_function .)
    empty           reduce using rule 202 (statement_list -> empty_function .)
    include         reduce using rule 202 (statement_list -> empty_function .)
    const           reduce using rule 202 (statement_list -> empty_function .)
    print           reduce using rule 202 (statement_list -> empty_function .)
    echo            reduce using rule 202 (statement_list -> empty_function .)
    while           reduce using rule 202 (statement_list -> empty_function .)
    do              reduce using rule 202 (statement_list -> empty_function .)
    if              reduce using rule 202 (statement_list -> empty_function .)
    function        reduce using rule 202 (statement_list -> empty_function .)
    ID              reduce using rule 202 (statement_list -> empty_function .)
    return          reduce using rule 202 (statement_list -> empty_function .)
    class           reduce using rule 202 (statement_list -> empty_function .)
    new             reduce using rule 202 (statement_list -> empty_function .)
    interface       reduce using rule 202 (statement_list -> empty_function .)
    trait           reduce using rule 202 (statement_list -> empty_function .)
    use             reduce using rule 202 (statement_list -> empty_function .)
    continue        reduce using rule 202 (statement_list -> empty_function .)
    CLOSE_TAG       reduce using rule 202 (statement_list -> empty_function .)
    for             reduce using rule 202 (statement_list -> empty_function .)
    foreach         reduce using rule 202 (statement_list -> empty_function .)
    switch          reduce using rule 202 (statement_list -> empty_function .)
    try             reduce using rule 202 (statement_list -> empty_function .)
    throw           reduce using rule 202 (statement_list -> empty_function .)
    exit            reduce using rule 202 (statement_list -> empty_function .)
    VARIABLE        reduce using rule 202 (statement_list -> empty_function .)
    array           reduce using rule 202 (statement_list -> empty_function .)
    pow             reduce using rule 202 (statement_list -> empty_function .)
    POW             reduce using rule 202 (statement_list -> empty_function .)
    abs             reduce using rule 202 (statement_list -> empty_function .)
    cos             reduce using rule 202 (statement_list -> empty_function .)
    deg2rad         reduce using rule 202 (statement_list -> empty_function .)
    rad2deg         reduce using rule 202 (statement_list -> empty_function .)
    die             reduce using rule 202 (statement_list -> empty_function .)
    exp             reduce using rule 202 (statement_list -> empty_function .)
    floor           reduce using rule 202 (statement_list -> empty_function .)
    isset           reduce using rule 202 (statement_list -> empty_function .)
    list            reduce using rule 202 (statement_list -> empty_function .)
    log             reduce using rule 202 (statement_list -> empty_function .)
    log10           reduce using rule 202 (statement_list -> empty_function .)
    max             reduce using rule 202 (statement_list -> empty_function .)
    min             reduce using rule 202 (statement_list -> empty_function .)
    rand            reduce using rule 202 (statement_list -> empty_function .)
    round           reduce using rule 202 (statement_list -> empty_function .)
    sin             reduce using rule 202 (statement_list -> empty_function .)
    sqrt            reduce using rule 202 (statement_list -> empty_function .)
    unset           reduce using rule 202 (statement_list -> empty_function .)
    CADENA          reduce using rule 202 (statement_list -> empty_function .)
    break           reduce using rule 202 (statement_list -> empty_function .)
    endswitch       reduce using rule 202 (statement_list -> empty_function .)
    default         reduce using rule 202 (statement_list -> empty_function .)
    case            reduce using rule 202 (statement_list -> empty_function .)


state 250

    (197) throw_statement -> throw create_obj_declaration SEMICOLON .

    COMMENT         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    COMMENT_MULTI   reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    empty           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    include         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    const           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    print           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    echo            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    while           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    do              reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    if              reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    function        reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    ID              reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    return          reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    class           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    new             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    interface       reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    trait           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    use             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    continue        reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    CLOSE_TAG       reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    for             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    foreach         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    switch          reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    try             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    throw           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    exit            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    VARIABLE        reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    array           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    pow             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    POW             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    abs             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    cos             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    deg2rad         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    rad2deg         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    die             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    exp             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    floor           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    isset           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    list            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    log             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    log10           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    max             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    min             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    rand            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    round           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    sin             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    sqrt            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    unset           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    CADENA          reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    $end            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    RBLOCK          reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endwhile        reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    private         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    protected       reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    public          reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    var             reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endfor          reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endforeach      reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    break           reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    endswitch       reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    default         reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)
    case            reduce using rule 197 (throw_statement -> throw create_obj_declaration SEMICOLON .)


state 251

    (198) throw_statement -> throw new Exception . LPAREN params RPAREN SEMICOLON

    LPAREN          shift and go to state 345


state 252

    (174) exit_statement -> exit LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 346


state 253

    (71) assignment_tail -> VARIABLE LBRACKET . expression COMMA params
    (72) assignment_tail -> VARIABLE LBRACKET . params RBRACKET
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 111
    CADENA          shift and go to state 112
    MINUS           shift and go to state 115
    VARIABLE        shift and go to state 118
    callable        shift and go to state 119
    RBRACKET        reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    expression                     shift and go to state 347
    params                         shift and go to state 348
    additive_expression            shift and go to state 107
    single_param                   shift and go to state 108
    term                           shift and go to state 109
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 254

    (73) assignment_tail -> VARIABLE LBLOCK . params RBLOCK
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RBLOCK          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 349
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 255

    (53) var_declaration2 -> VARIABLE EQUAL VARIABLE .
    (71) assignment_tail -> VARIABLE . LBRACKET expression COMMA params
    (72) assignment_tail -> VARIABLE . LBRACKET params RBRACKET
    (73) assignment_tail -> VARIABLE . LBLOCK params RBLOCK
    (90) factor -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    SEMICOLON       reduce using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COMMA           reduce using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RPAREN          reduce using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    COLON           reduce using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBRACKET        reduce using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    RBLOCK          reduce using rule 53 (var_declaration2 -> VARIABLE EQUAL VARIABLE .)
    LBRACKET        shift and go to state 253
    LBLOCK          shift and go to state 254
    PLUSPLUS        reduce using rule 90 (factor -> VARIABLE .)
    MINUSMINUS      reduce using rule 90 (factor -> VARIABLE .)
    PLUS            reduce using rule 90 (factor -> VARIABLE .)
    MINUS           reduce using rule 90 (factor -> VARIABLE .)
    TIMES           reduce using rule 90 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 90 (factor -> VARIABLE .)
    MULEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    PLUSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    MINUSEQUAL      reduce using rule 90 (factor -> VARIABLE .)
    MOD             reduce using rule 90 (factor -> VARIABLE .)
    BOOL_OR         reduce using rule 90 (factor -> VARIABLE .)
    BOOL_AND        reduce using rule 90 (factor -> VARIABLE .)
    NOT             reduce using rule 90 (factor -> VARIABLE .)
    or              reduce using rule 90 (factor -> VARIABLE .)
    and             reduce using rule 90 (factor -> VARIABLE .)
    xor             reduce using rule 90 (factor -> VARIABLE .)
    LESS            reduce using rule 90 (factor -> VARIABLE .)
    LESSEQUAL       reduce using rule 90 (factor -> VARIABLE .)
    GREATER         reduce using rule 90 (factor -> VARIABLE .)
    GREATEREQUAL    reduce using rule 90 (factor -> VARIABLE .)
    DEQUAL          reduce using rule 90 (factor -> VARIABLE .)
    DISTINT         reduce using rule 90 (factor -> VARIABLE .)
    DIVEQUAL        reduce using rule 90 (factor -> VARIABLE .)
    ISEQUAL         reduce using rule 90 (factor -> VARIABLE .)
    ISIDENTICAL     reduce using rule 90 (factor -> VARIABLE .)
    ISNOTIDENTICAL  reduce using rule 90 (factor -> VARIABLE .)
    AMPERSANT       reduce using rule 90 (factor -> VARIABLE .)
    SR              reduce using rule 90 (factor -> VARIABLE .)
    SL              reduce using rule 90 (factor -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! RBRACKET        [ reduce using rule 90 (factor -> VARIABLE .) ]
  ! RBLOCK          [ reduce using rule 90 (factor -> VARIABLE .) ]


state 256

    (52) var_declaration2 -> VARIABLE EQUAL NUMBER .
    (89) factor -> NUMBER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    SEMICOLON       reduce using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COMMA           reduce using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RPAREN          reduce using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    COLON           reduce using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBRACKET        reduce using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    RBLOCK          reduce using rule 52 (var_declaration2 -> VARIABLE EQUAL NUMBER .)
    PLUSPLUS        reduce using rule 89 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 89 (factor -> NUMBER .)
    PLUS            reduce using rule 89 (factor -> NUMBER .)
    MINUS           reduce using rule 89 (factor -> NUMBER .)
    TIMES           reduce using rule 89 (factor -> NUMBER .)
    DIVIDE          reduce using rule 89 (factor -> NUMBER .)
    MULEQUAL        reduce using rule 89 (factor -> NUMBER .)
    PLUSEQUAL       reduce using rule 89 (factor -> NUMBER .)
    MINUSEQUAL      reduce using rule 89 (factor -> NUMBER .)
    MOD             reduce using rule 89 (factor -> NUMBER .)
    BOOL_OR         reduce using rule 89 (factor -> NUMBER .)
    BOOL_AND        reduce using rule 89 (factor -> NUMBER .)
    NOT             reduce using rule 89 (factor -> NUMBER .)
    or              reduce using rule 89 (factor -> NUMBER .)
    and             reduce using rule 89 (factor -> NUMBER .)
    xor             reduce using rule 89 (factor -> NUMBER .)
    LESS            reduce using rule 89 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 89 (factor -> NUMBER .)
    GREATER         reduce using rule 89 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 89 (factor -> NUMBER .)
    DEQUAL          reduce using rule 89 (factor -> NUMBER .)
    DISTINT         reduce using rule 89 (factor -> NUMBER .)
    DIVEQUAL        reduce using rule 89 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 89 (factor -> NUMBER .)
    ISIDENTICAL     reduce using rule 89 (factor -> NUMBER .)
    ISNOTIDENTICAL  reduce using rule 89 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 89 (factor -> NUMBER .)
    SR              reduce using rule 89 (factor -> NUMBER .)
    SL              reduce using rule 89 (factor -> NUMBER .)

  ! SEMICOLON       [ reduce using rule 89 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 89 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 89 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 89 (factor -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 89 (factor -> NUMBER .) ]
  ! RBLOCK          [ reduce using rule 89 (factor -> NUMBER .) ]


state 257

    (54) var_declaration2 -> VARIABLE EQUAL CADENA .

    SEMICOLON       reduce using rule 54 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COMMA           reduce using rule 54 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RPAREN          reduce using rule 54 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    COLON           reduce using rule 54 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBRACKET        reduce using rule 54 (var_declaration2 -> VARIABLE EQUAL CADENA .)
    RBLOCK          reduce using rule 54 (var_declaration2 -> VARIABLE EQUAL CADENA .)


state 258

    (55) var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .

    SEMICOLON       reduce using rule 55 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    COMMA           reduce using rule 55 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RPAREN          reduce using rule 55 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    COLON           reduce using rule 55 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RBRACKET        reduce using rule 55 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)
    RBLOCK          reduce using rule 55 (var_declaration2 -> VARIABLE EQUAL Built_In_Declaration .)


state 259

    (56) var_declaration2 -> VARIABLE EQUAL expression .

    SEMICOLON       reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL expression .)
    COMMA           reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL expression .)
    RPAREN          reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL expression .)
    COLON           reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBRACKET        reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL expression .)
    RBLOCK          reduce using rule 56 (var_declaration2 -> VARIABLE EQUAL expression .)


state 260

    (61) var_declaration2 -> VARIABLE EQUAL ID . LPAREN params RPAREN

    LPAREN          shift and go to state 350


state 261

    (65) var_declaration2 -> VARIABLE EQUAL create_obj_declaration .

    SEMICOLON       reduce using rule 65 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    COMMA           reduce using rule 65 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RPAREN          reduce using rule 65 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    COLON           reduce using rule 65 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RBRACKET        reduce using rule 65 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)
    RBLOCK          reduce using rule 65 (var_declaration2 -> VARIABLE EQUAL create_obj_declaration .)


state 262

    (67) var_declaration2 -> VARIABLE EQUAL assignment_tail .

    SEMICOLON       reduce using rule 67 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COMMA           reduce using rule 67 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RPAREN          reduce using rule 67 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    COLON           reduce using rule 67 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBRACKET        reduce using rule 67 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)
    RBLOCK          reduce using rule 67 (var_declaration2 -> VARIABLE EQUAL assignment_tail .)


state 263

    (57) var_declaration2 -> VARIABLE assignation VARIABLE .

    SEMICOLON       reduce using rule 57 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    COMMA           reduce using rule 57 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RPAREN          reduce using rule 57 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    COLON           reduce using rule 57 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RBRACKET        reduce using rule 57 (var_declaration2 -> VARIABLE assignation VARIABLE .)
    RBLOCK          reduce using rule 57 (var_declaration2 -> VARIABLE assignation VARIABLE .)


state 264

    (58) var_declaration2 -> VARIABLE assignation NUMBER .

    SEMICOLON       reduce using rule 58 (var_declaration2 -> VARIABLE assignation NUMBER .)
    COMMA           reduce using rule 58 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RPAREN          reduce using rule 58 (var_declaration2 -> VARIABLE assignation NUMBER .)
    COLON           reduce using rule 58 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RBRACKET        reduce using rule 58 (var_declaration2 -> VARIABLE assignation NUMBER .)
    RBLOCK          reduce using rule 58 (var_declaration2 -> VARIABLE assignation NUMBER .)


state 265

    (62) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 . COLON var_declaration2

    COLON           shift and go to state 351


state 266

    (63) var_declaration2 -> VARIABLE OBJ_OPERATOR ID . EQUAL expression
    (64) var_declaration2 -> VARIABLE OBJ_OPERATOR ID . LPAREN params RPAREN

    EQUAL           shift and go to state 352
    LPAREN          shift and go to state 353


state 267

    (224) Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .

    SEMICOLON       reduce using rule 224 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    COMMA           reduce using rule 224 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RPAREN          reduce using rule 224 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    COLON           reduce using rule 224 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RBRACKET        reduce using rule 224 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)
    RBLOCK          reduce using rule 224 (Concatenar_Cadenas_declaration -> VARIABLE DOT VARIABLE .)


state 268

    (227) Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .

    SEMICOLON       reduce using rule 227 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    COMMA           reduce using rule 227 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RPAREN          reduce using rule 227 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    COLON           reduce using rule 227 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RBRACKET        reduce using rule 227 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)
    RBLOCK          reduce using rule 227 (Concatenar_Cadenas_declaration -> VARIABLE DOT CADENA .)


state 269

    (68) assignment_tail -> COMMA var_declaration2 .

    SEMICOLON       reduce using rule 68 (assignment_tail -> COMMA var_declaration2 .)
    RPAREN          reduce using rule 68 (assignment_tail -> COMMA var_declaration2 .)
    COMMA           reduce using rule 68 (assignment_tail -> COMMA var_declaration2 .)
    COLON           reduce using rule 68 (assignment_tail -> COMMA var_declaration2 .)
    RBRACKET        reduce using rule 68 (assignment_tail -> COMMA var_declaration2 .)
    RBLOCK          reduce using rule 68 (assignment_tail -> COMMA var_declaration2 .)


state 270

    (69) assignment_tail -> LBRACKET params . RBRACKET
    (163) params -> params . COMMA single_param

    RBRACKET        shift and go to state 354
    COMMA           shift and go to state 199


state 271

    (70) assignment_tail -> LBLOCK params . RBLOCK
    (163) params -> params . COMMA single_param

    RBLOCK          shift and go to state 355
    COMMA           shift and go to state 199


state 272

    (203) Built_In_Declaration -> array LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 356
    COMMA           shift and go to state 199


state 273

    (204) Built_In_Declaration -> pow LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 357
    COMMA           shift and go to state 199


state 274

    (205) Built_In_Declaration -> POW LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 358
    COMMA           shift and go to state 199


state 275

    (206) Built_In_Declaration -> abs LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 359
    COMMA           shift and go to state 199


state 276

    (207) Built_In_Declaration -> cos LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 360
    COMMA           shift and go to state 199


state 277

    (208) Built_In_Declaration -> deg2rad LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 361
    COMMA           shift and go to state 199


state 278

    (209) Built_In_Declaration -> rad2deg LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 362
    COMMA           shift and go to state 199


state 279

    (210) Built_In_Declaration -> die LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 363
    COMMA           shift and go to state 199


state 280

    (211) Built_In_Declaration -> exp LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 364
    COMMA           shift and go to state 199


state 281

    (212) Built_In_Declaration -> floor LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 365
    COMMA           shift and go to state 199


state 282

    (213) Built_In_Declaration -> isset LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 366
    COMMA           shift and go to state 199


state 283

    (214) Built_In_Declaration -> list LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 367
    COMMA           shift and go to state 199


state 284

    (215) Built_In_Declaration -> log LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 368
    COMMA           shift and go to state 199


state 285

    (216) Built_In_Declaration -> log10 LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 369
    COMMA           shift and go to state 199


state 286

    (217) Built_In_Declaration -> max LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 370
    COMMA           shift and go to state 199


state 287

    (218) Built_In_Declaration -> min LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 371
    COMMA           shift and go to state 199


state 288

    (219) Built_In_Declaration -> rand LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 372
    COMMA           shift and go to state 199


state 289

    (220) Built_In_Declaration -> round LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 373
    COMMA           shift and go to state 199


state 290

    (221) Built_In_Declaration -> sin LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 374
    COMMA           shift and go to state 199


state 291

    (222) Built_In_Declaration -> sqrt LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 375
    COMMA           shift and go to state 199


state 292

    (223) Built_In_Declaration -> unset LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 376
    COMMA           shift and go to state 199


state 293

    (35) constant_declaration -> const ID EQUAL CADENA . SEMICOLON

    SEMICOLON       shift and go to state 377


state 294

    (36) constant_declaration -> const ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 378


state 295

    (125) fun_call -> ID LPAREN params RPAREN .

    COMMENT         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    empty           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    include         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    const           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    print           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    echo            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    while           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    do              reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    if              reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    function        reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    return          reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    class           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    new             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    interface       reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    trait           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    use             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    continue        reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    for             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    foreach         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    switch          reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    try             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    throw           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    exit            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    array           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    pow             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    POW             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    abs             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    cos             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    deg2rad         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    rad2deg         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    die             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    exp             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    floor           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    isset           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    list            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    log             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    log10           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    max             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    min             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    rand            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    round           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    sin             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    sqrt            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    unset           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    CADENA          reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    endwhile        reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    private         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    protected       reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    public          reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    var             reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    endfor          reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    endforeach      reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    break           reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    endswitch       reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    default         reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)
    case            reduce using rule 125 (fun_call -> ID LPAREN params RPAREN .)


state 296

    (38) print_declaration -> print LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 379


state 297

    (39) print_declaration -> print LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 380


state 298

    (40) print_declaration -> print LPAREN CADENA RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 381


state 299

    (44) echo_declaration -> echo LPAREN var_declaration2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 382


state 300

    (45) echo_declaration -> echo LPAREN NUMBER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 383


state 301

    (46) echo_declaration -> echo LPAREN CADENA RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 384


state 302

    (74) iteration_stmt -> while LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> while LPAREN expression RPAREN . COLON declaration_list endwhile SEMICOLON

    LBLOCK          shift and go to state 385
    COLON           shift and go to state 386


state 303

    (76) iteration_stmt -> do LBLOCK declaration_list RBLOCK . while LPAREN expression RPAREN SEMICOLON

    while           shift and go to state 387


state 304

    (77) iteration_stmt -> do COLON declaration_list endwhile . SEMICOLON

    SEMICOLON       shift and go to state 388


state 305

    (118) if_statement -> if LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 389


state 306

    (123) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> function ID LPAREN params . RPAREN LBLOCK declaration_list return_statement RBLOCK
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 390
    COMMA           shift and go to state 199


state 307

    (163) params -> params COMMA single_param .

    SEMICOLON       reduce using rule 163 (params -> params COMMA single_param .)
    COMMA           reduce using rule 163 (params -> params COMMA single_param .)
    RPAREN          reduce using rule 163 (params -> params COMMA single_param .)
    RBRACKET        reduce using rule 163 (params -> params COMMA single_param .)
    RBLOCK          reduce using rule 163 (params -> params COMMA single_param .)
    COLON           reduce using rule 163 (params -> params COMMA single_param .)


state 308

    (129) return_statement -> return ID LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 391


state 309

    (91) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    MULEQUAL        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    BOOL_OR         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    BOOL_AND        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    or              reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    and             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    xor             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ISIDENTICAL     reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ISNOTIDENTICAL  reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    SR              reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    SL              reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    as              reduce using rule 91 (factor -> LPAREN expression RPAREN .)


state 310

    (79) expression -> additive_expression logical_op additive_expression .

    SEMICOLON       reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)
    RPAREN          reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)
    COMMA           reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)
    COLON           reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)
    RBRACKET        reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)
    RBLOCK          reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)
    as              reduce using rule 79 (expression -> additive_expression logical_op additive_expression .)


state 311

    (80) expression -> additive_expression comp_op additive_expression .
    (81) expression -> additive_expression comp_op additive_expression . logical_op additive_expression comp_op additive_expression
    (112) logical_op -> . BOOL_OR
    (113) logical_op -> . BOOL_AND
    (114) logical_op -> . NOT
    (115) logical_op -> . or
    (116) logical_op -> . and
    (117) logical_op -> . xor

    SEMICOLON       reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    COLON           reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    as              reduce using rule 80 (expression -> additive_expression comp_op additive_expression .)
    BOOL_OR         shift and go to state 205
    BOOL_AND        shift and go to state 206
    NOT             shift and go to state 207
    or              shift and go to state 208
    and             shift and go to state 209
    xor             shift and go to state 210

    logical_op                     shift and go to state 392

state 312

    (82) expression -> additive_expression bits_op additive_expression .

    SEMICOLON       reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)
    RPAREN          reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)
    COMMA           reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)
    COLON           reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)
    RBRACKET        reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)
    RBLOCK          reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)
    as              reduce using rule 82 (expression -> additive_expression bits_op additive_expression .)


state 313

    (84) additive_expression -> term math_op term .

    BOOL_OR         reduce using rule 84 (additive_expression -> term math_op term .)
    BOOL_AND        reduce using rule 84 (additive_expression -> term math_op term .)
    NOT             reduce using rule 84 (additive_expression -> term math_op term .)
    or              reduce using rule 84 (additive_expression -> term math_op term .)
    and             reduce using rule 84 (additive_expression -> term math_op term .)
    xor             reduce using rule 84 (additive_expression -> term math_op term .)
    LESS            reduce using rule 84 (additive_expression -> term math_op term .)
    LESSEQUAL       reduce using rule 84 (additive_expression -> term math_op term .)
    GREATER         reduce using rule 84 (additive_expression -> term math_op term .)
    GREATEREQUAL    reduce using rule 84 (additive_expression -> term math_op term .)
    DEQUAL          reduce using rule 84 (additive_expression -> term math_op term .)
    DISTINT         reduce using rule 84 (additive_expression -> term math_op term .)
    DIVEQUAL        reduce using rule 84 (additive_expression -> term math_op term .)
    ISEQUAL         reduce using rule 84 (additive_expression -> term math_op term .)
    ISIDENTICAL     reduce using rule 84 (additive_expression -> term math_op term .)
    ISNOTIDENTICAL  reduce using rule 84 (additive_expression -> term math_op term .)
    AMPERSANT       reduce using rule 84 (additive_expression -> term math_op term .)
    SR              reduce using rule 84 (additive_expression -> term math_op term .)
    SL              reduce using rule 84 (additive_expression -> term math_op term .)
    SEMICOLON       reduce using rule 84 (additive_expression -> term math_op term .)
    RPAREN          reduce using rule 84 (additive_expression -> term math_op term .)
    COMMA           reduce using rule 84 (additive_expression -> term math_op term .)
    COLON           reduce using rule 84 (additive_expression -> term math_op term .)
    RBRACKET        reduce using rule 84 (additive_expression -> term math_op term .)
    RBLOCK          reduce using rule 84 (additive_expression -> term math_op term .)
    as              reduce using rule 84 (additive_expression -> term math_op term .)


state 314

    (130) class_declaration -> class ID LBLOCK class_body . RBLOCK
    (139) class_body -> class_body . class_body_element
    (141) class_body_element -> . visibility var_declaration2 SEMICOLON
    (142) class_body_element -> . visibility fun_declaration
    (143) class_body_element -> . declaration
    (156) visibility -> . private
    (157) visibility -> . protected
    (158) visibility -> . public
    (159) visibility -> . var
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 393
    private         shift and go to state 319
    protected       shift and go to state 320
    public          shift and go to state 321
    var             shift and go to state 322
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    class_body_element             shift and go to state 394
    visibility                     shift and go to state 317
    var_declaration2               shift and go to state 36
    fun_declaration                shift and go to state 16
    declaration                    shift and go to state 318
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 315

    (138) class_body -> class_body_element .

    RBLOCK          reduce using rule 138 (class_body -> class_body_element .)
    private         reduce using rule 138 (class_body -> class_body_element .)
    protected       reduce using rule 138 (class_body -> class_body_element .)
    public          reduce using rule 138 (class_body -> class_body_element .)
    var             reduce using rule 138 (class_body -> class_body_element .)
    COMMENT         reduce using rule 138 (class_body -> class_body_element .)
    COMMENT_HASHTAG reduce using rule 138 (class_body -> class_body_element .)
    COMMENT_MULTI   reduce using rule 138 (class_body -> class_body_element .)
    empty           reduce using rule 138 (class_body -> class_body_element .)
    include         reduce using rule 138 (class_body -> class_body_element .)
    const           reduce using rule 138 (class_body -> class_body_element .)
    print           reduce using rule 138 (class_body -> class_body_element .)
    echo            reduce using rule 138 (class_body -> class_body_element .)
    while           reduce using rule 138 (class_body -> class_body_element .)
    do              reduce using rule 138 (class_body -> class_body_element .)
    if              reduce using rule 138 (class_body -> class_body_element .)
    function        reduce using rule 138 (class_body -> class_body_element .)
    ID              reduce using rule 138 (class_body -> class_body_element .)
    return          reduce using rule 138 (class_body -> class_body_element .)
    class           reduce using rule 138 (class_body -> class_body_element .)
    new             reduce using rule 138 (class_body -> class_body_element .)
    interface       reduce using rule 138 (class_body -> class_body_element .)
    trait           reduce using rule 138 (class_body -> class_body_element .)
    use             reduce using rule 138 (class_body -> class_body_element .)
    continue        reduce using rule 138 (class_body -> class_body_element .)
    CLOSE_TAG       reduce using rule 138 (class_body -> class_body_element .)
    for             reduce using rule 138 (class_body -> class_body_element .)
    foreach         reduce using rule 138 (class_body -> class_body_element .)
    switch          reduce using rule 138 (class_body -> class_body_element .)
    try             reduce using rule 138 (class_body -> class_body_element .)
    throw           reduce using rule 138 (class_body -> class_body_element .)
    exit            reduce using rule 138 (class_body -> class_body_element .)
    VARIABLE        reduce using rule 138 (class_body -> class_body_element .)
    array           reduce using rule 138 (class_body -> class_body_element .)
    pow             reduce using rule 138 (class_body -> class_body_element .)
    POW             reduce using rule 138 (class_body -> class_body_element .)
    abs             reduce using rule 138 (class_body -> class_body_element .)
    cos             reduce using rule 138 (class_body -> class_body_element .)
    deg2rad         reduce using rule 138 (class_body -> class_body_element .)
    rad2deg         reduce using rule 138 (class_body -> class_body_element .)
    die             reduce using rule 138 (class_body -> class_body_element .)
    exp             reduce using rule 138 (class_body -> class_body_element .)
    floor           reduce using rule 138 (class_body -> class_body_element .)
    isset           reduce using rule 138 (class_body -> class_body_element .)
    list            reduce using rule 138 (class_body -> class_body_element .)
    log             reduce using rule 138 (class_body -> class_body_element .)
    log10           reduce using rule 138 (class_body -> class_body_element .)
    max             reduce using rule 138 (class_body -> class_body_element .)
    min             reduce using rule 138 (class_body -> class_body_element .)
    rand            reduce using rule 138 (class_body -> class_body_element .)
    round           reduce using rule 138 (class_body -> class_body_element .)
    sin             reduce using rule 138 (class_body -> class_body_element .)
    sqrt            reduce using rule 138 (class_body -> class_body_element .)
    unset           reduce using rule 138 (class_body -> class_body_element .)
    CADENA          reduce using rule 138 (class_body -> class_body_element .)


state 316

    (140) class_body -> empty_function .

    RBLOCK          reduce using rule 140 (class_body -> empty_function .)
    private         reduce using rule 140 (class_body -> empty_function .)
    protected       reduce using rule 140 (class_body -> empty_function .)
    public          reduce using rule 140 (class_body -> empty_function .)
    var             reduce using rule 140 (class_body -> empty_function .)
    COMMENT         reduce using rule 140 (class_body -> empty_function .)
    COMMENT_HASHTAG reduce using rule 140 (class_body -> empty_function .)
    COMMENT_MULTI   reduce using rule 140 (class_body -> empty_function .)
    empty           reduce using rule 140 (class_body -> empty_function .)
    include         reduce using rule 140 (class_body -> empty_function .)
    const           reduce using rule 140 (class_body -> empty_function .)
    print           reduce using rule 140 (class_body -> empty_function .)
    echo            reduce using rule 140 (class_body -> empty_function .)
    while           reduce using rule 140 (class_body -> empty_function .)
    do              reduce using rule 140 (class_body -> empty_function .)
    if              reduce using rule 140 (class_body -> empty_function .)
    function        reduce using rule 140 (class_body -> empty_function .)
    ID              reduce using rule 140 (class_body -> empty_function .)
    return          reduce using rule 140 (class_body -> empty_function .)
    class           reduce using rule 140 (class_body -> empty_function .)
    new             reduce using rule 140 (class_body -> empty_function .)
    interface       reduce using rule 140 (class_body -> empty_function .)
    trait           reduce using rule 140 (class_body -> empty_function .)
    use             reduce using rule 140 (class_body -> empty_function .)
    continue        reduce using rule 140 (class_body -> empty_function .)
    CLOSE_TAG       reduce using rule 140 (class_body -> empty_function .)
    for             reduce using rule 140 (class_body -> empty_function .)
    foreach         reduce using rule 140 (class_body -> empty_function .)
    switch          reduce using rule 140 (class_body -> empty_function .)
    try             reduce using rule 140 (class_body -> empty_function .)
    throw           reduce using rule 140 (class_body -> empty_function .)
    exit            reduce using rule 140 (class_body -> empty_function .)
    VARIABLE        reduce using rule 140 (class_body -> empty_function .)
    array           reduce using rule 140 (class_body -> empty_function .)
    pow             reduce using rule 140 (class_body -> empty_function .)
    POW             reduce using rule 140 (class_body -> empty_function .)
    abs             reduce using rule 140 (class_body -> empty_function .)
    cos             reduce using rule 140 (class_body -> empty_function .)
    deg2rad         reduce using rule 140 (class_body -> empty_function .)
    rad2deg         reduce using rule 140 (class_body -> empty_function .)
    die             reduce using rule 140 (class_body -> empty_function .)
    exp             reduce using rule 140 (class_body -> empty_function .)
    floor           reduce using rule 140 (class_body -> empty_function .)
    isset           reduce using rule 140 (class_body -> empty_function .)
    list            reduce using rule 140 (class_body -> empty_function .)
    log             reduce using rule 140 (class_body -> empty_function .)
    log10           reduce using rule 140 (class_body -> empty_function .)
    max             reduce using rule 140 (class_body -> empty_function .)
    min             reduce using rule 140 (class_body -> empty_function .)
    rand            reduce using rule 140 (class_body -> empty_function .)
    round           reduce using rule 140 (class_body -> empty_function .)
    sin             reduce using rule 140 (class_body -> empty_function .)
    sqrt            reduce using rule 140 (class_body -> empty_function .)
    unset           reduce using rule 140 (class_body -> empty_function .)
    CADENA          reduce using rule 140 (class_body -> empty_function .)


state 317

    (141) class_body_element -> visibility . var_declaration2 SEMICOLON
    (142) class_body_element -> visibility . fun_declaration
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 59
    function        shift and go to state 44
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    var_declaration2               shift and go to state 395
    fun_declaration                shift and go to state 396
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 318

    (143) class_body_element -> declaration .

    RBLOCK          reduce using rule 143 (class_body_element -> declaration .)
    private         reduce using rule 143 (class_body_element -> declaration .)
    protected       reduce using rule 143 (class_body_element -> declaration .)
    public          reduce using rule 143 (class_body_element -> declaration .)
    var             reduce using rule 143 (class_body_element -> declaration .)
    COMMENT         reduce using rule 143 (class_body_element -> declaration .)
    COMMENT_HASHTAG reduce using rule 143 (class_body_element -> declaration .)
    COMMENT_MULTI   reduce using rule 143 (class_body_element -> declaration .)
    empty           reduce using rule 143 (class_body_element -> declaration .)
    include         reduce using rule 143 (class_body_element -> declaration .)
    const           reduce using rule 143 (class_body_element -> declaration .)
    print           reduce using rule 143 (class_body_element -> declaration .)
    echo            reduce using rule 143 (class_body_element -> declaration .)
    while           reduce using rule 143 (class_body_element -> declaration .)
    do              reduce using rule 143 (class_body_element -> declaration .)
    if              reduce using rule 143 (class_body_element -> declaration .)
    function        reduce using rule 143 (class_body_element -> declaration .)
    ID              reduce using rule 143 (class_body_element -> declaration .)
    return          reduce using rule 143 (class_body_element -> declaration .)
    class           reduce using rule 143 (class_body_element -> declaration .)
    new             reduce using rule 143 (class_body_element -> declaration .)
    interface       reduce using rule 143 (class_body_element -> declaration .)
    trait           reduce using rule 143 (class_body_element -> declaration .)
    use             reduce using rule 143 (class_body_element -> declaration .)
    continue        reduce using rule 143 (class_body_element -> declaration .)
    CLOSE_TAG       reduce using rule 143 (class_body_element -> declaration .)
    for             reduce using rule 143 (class_body_element -> declaration .)
    foreach         reduce using rule 143 (class_body_element -> declaration .)
    switch          reduce using rule 143 (class_body_element -> declaration .)
    try             reduce using rule 143 (class_body_element -> declaration .)
    throw           reduce using rule 143 (class_body_element -> declaration .)
    exit            reduce using rule 143 (class_body_element -> declaration .)
    VARIABLE        reduce using rule 143 (class_body_element -> declaration .)
    array           reduce using rule 143 (class_body_element -> declaration .)
    pow             reduce using rule 143 (class_body_element -> declaration .)
    POW             reduce using rule 143 (class_body_element -> declaration .)
    abs             reduce using rule 143 (class_body_element -> declaration .)
    cos             reduce using rule 143 (class_body_element -> declaration .)
    deg2rad         reduce using rule 143 (class_body_element -> declaration .)
    rad2deg         reduce using rule 143 (class_body_element -> declaration .)
    die             reduce using rule 143 (class_body_element -> declaration .)
    exp             reduce using rule 143 (class_body_element -> declaration .)
    floor           reduce using rule 143 (class_body_element -> declaration .)
    isset           reduce using rule 143 (class_body_element -> declaration .)
    list            reduce using rule 143 (class_body_element -> declaration .)
    log             reduce using rule 143 (class_body_element -> declaration .)
    log10           reduce using rule 143 (class_body_element -> declaration .)
    max             reduce using rule 143 (class_body_element -> declaration .)
    min             reduce using rule 143 (class_body_element -> declaration .)
    rand            reduce using rule 143 (class_body_element -> declaration .)
    round           reduce using rule 143 (class_body_element -> declaration .)
    sin             reduce using rule 143 (class_body_element -> declaration .)
    sqrt            reduce using rule 143 (class_body_element -> declaration .)
    unset           reduce using rule 143 (class_body_element -> declaration .)
    CADENA          reduce using rule 143 (class_body_element -> declaration .)


state 319

    (156) visibility -> private .

    VARIABLE        reduce using rule 156 (visibility -> private .)
    function        reduce using rule 156 (visibility -> private .)
    array           reduce using rule 156 (visibility -> private .)
    pow             reduce using rule 156 (visibility -> private .)
    POW             reduce using rule 156 (visibility -> private .)
    abs             reduce using rule 156 (visibility -> private .)
    cos             reduce using rule 156 (visibility -> private .)
    deg2rad         reduce using rule 156 (visibility -> private .)
    rad2deg         reduce using rule 156 (visibility -> private .)
    die             reduce using rule 156 (visibility -> private .)
    exp             reduce using rule 156 (visibility -> private .)
    floor           reduce using rule 156 (visibility -> private .)
    isset           reduce using rule 156 (visibility -> private .)
    list            reduce using rule 156 (visibility -> private .)
    log             reduce using rule 156 (visibility -> private .)
    log10           reduce using rule 156 (visibility -> private .)
    max             reduce using rule 156 (visibility -> private .)
    min             reduce using rule 156 (visibility -> private .)
    rand            reduce using rule 156 (visibility -> private .)
    round           reduce using rule 156 (visibility -> private .)
    sin             reduce using rule 156 (visibility -> private .)
    sqrt            reduce using rule 156 (visibility -> private .)
    unset           reduce using rule 156 (visibility -> private .)
    CADENA          reduce using rule 156 (visibility -> private .)


state 320

    (157) visibility -> protected .

    VARIABLE        reduce using rule 157 (visibility -> protected .)
    function        reduce using rule 157 (visibility -> protected .)
    array           reduce using rule 157 (visibility -> protected .)
    pow             reduce using rule 157 (visibility -> protected .)
    POW             reduce using rule 157 (visibility -> protected .)
    abs             reduce using rule 157 (visibility -> protected .)
    cos             reduce using rule 157 (visibility -> protected .)
    deg2rad         reduce using rule 157 (visibility -> protected .)
    rad2deg         reduce using rule 157 (visibility -> protected .)
    die             reduce using rule 157 (visibility -> protected .)
    exp             reduce using rule 157 (visibility -> protected .)
    floor           reduce using rule 157 (visibility -> protected .)
    isset           reduce using rule 157 (visibility -> protected .)
    list            reduce using rule 157 (visibility -> protected .)
    log             reduce using rule 157 (visibility -> protected .)
    log10           reduce using rule 157 (visibility -> protected .)
    max             reduce using rule 157 (visibility -> protected .)
    min             reduce using rule 157 (visibility -> protected .)
    rand            reduce using rule 157 (visibility -> protected .)
    round           reduce using rule 157 (visibility -> protected .)
    sin             reduce using rule 157 (visibility -> protected .)
    sqrt            reduce using rule 157 (visibility -> protected .)
    unset           reduce using rule 157 (visibility -> protected .)
    CADENA          reduce using rule 157 (visibility -> protected .)


state 321

    (158) visibility -> public .

    VARIABLE        reduce using rule 158 (visibility -> public .)
    function        reduce using rule 158 (visibility -> public .)
    array           reduce using rule 158 (visibility -> public .)
    pow             reduce using rule 158 (visibility -> public .)
    POW             reduce using rule 158 (visibility -> public .)
    abs             reduce using rule 158 (visibility -> public .)
    cos             reduce using rule 158 (visibility -> public .)
    deg2rad         reduce using rule 158 (visibility -> public .)
    rad2deg         reduce using rule 158 (visibility -> public .)
    die             reduce using rule 158 (visibility -> public .)
    exp             reduce using rule 158 (visibility -> public .)
    floor           reduce using rule 158 (visibility -> public .)
    isset           reduce using rule 158 (visibility -> public .)
    list            reduce using rule 158 (visibility -> public .)
    log             reduce using rule 158 (visibility -> public .)
    log10           reduce using rule 158 (visibility -> public .)
    max             reduce using rule 158 (visibility -> public .)
    min             reduce using rule 158 (visibility -> public .)
    rand            reduce using rule 158 (visibility -> public .)
    round           reduce using rule 158 (visibility -> public .)
    sin             reduce using rule 158 (visibility -> public .)
    sqrt            reduce using rule 158 (visibility -> public .)
    unset           reduce using rule 158 (visibility -> public .)
    CADENA          reduce using rule 158 (visibility -> public .)


state 322

    (159) visibility -> var .

    VARIABLE        reduce using rule 159 (visibility -> var .)
    function        reduce using rule 159 (visibility -> var .)
    array           reduce using rule 159 (visibility -> var .)
    pow             reduce using rule 159 (visibility -> var .)
    POW             reduce using rule 159 (visibility -> var .)
    abs             reduce using rule 159 (visibility -> var .)
    cos             reduce using rule 159 (visibility -> var .)
    deg2rad         reduce using rule 159 (visibility -> var .)
    rad2deg         reduce using rule 159 (visibility -> var .)
    die             reduce using rule 159 (visibility -> var .)
    exp             reduce using rule 159 (visibility -> var .)
    floor           reduce using rule 159 (visibility -> var .)
    isset           reduce using rule 159 (visibility -> var .)
    list            reduce using rule 159 (visibility -> var .)
    log             reduce using rule 159 (visibility -> var .)
    log10           reduce using rule 159 (visibility -> var .)
    max             reduce using rule 159 (visibility -> var .)
    min             reduce using rule 159 (visibility -> var .)
    rand            reduce using rule 159 (visibility -> var .)
    round           reduce using rule 159 (visibility -> var .)
    sin             reduce using rule 159 (visibility -> var .)
    sqrt            reduce using rule 159 (visibility -> var .)
    unset           reduce using rule 159 (visibility -> var .)
    CADENA          reduce using rule 159 (visibility -> var .)


state 323

    (131) class_extension -> class ID extends ID . LBLOCK RBLOCK

    LBLOCK          shift and go to state 397


state 324

    (132) class_extension -> class ID extends Exception . LBLOCK RBLOCK

    LBLOCK          shift and go to state 398


state 325

    (133) class_extension -> class ID extends ErrorException . LBLOCK RBLOCK

    LBLOCK          shift and go to state 399


state 326

    (134) class_extension -> class ID extends Error . LBLOCK RBLOCK

    LBLOCK          shift and go to state 400


state 327

    (135) class_extension -> class ID extends ParseError . LBLOCK RBLOCK

    LBLOCK          shift and go to state 401


state 328

    (136) class_extension -> class ID extends TypeError . LBLOCK RBLOCK

    LBLOCK          shift and go to state 402


state 329

    (137) create_obj_declaration -> new ID LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 403
    COMMA           shift and go to state 199


state 330

    (144) interface_declaration -> interface ID LBLOCK interface_body . RBLOCK
    (146) interface_body -> interface_body . interface_method_declaration
    (148) interface_method_declaration -> . visibility function ID LPAREN params RPAREN SEMICOLON
    (156) visibility -> . private
    (157) visibility -> . protected
    (158) visibility -> . public
    (159) visibility -> . var

    RBLOCK          shift and go to state 404
    private         shift and go to state 319
    protected       shift and go to state 320
    public          shift and go to state 321
    var             shift and go to state 322

    interface_method_declaration   shift and go to state 405
    visibility                     shift and go to state 333

state 331

    (145) interface_body -> interface_method_declaration .

    RBLOCK          reduce using rule 145 (interface_body -> interface_method_declaration .)
    private         reduce using rule 145 (interface_body -> interface_method_declaration .)
    protected       reduce using rule 145 (interface_body -> interface_method_declaration .)
    public          reduce using rule 145 (interface_body -> interface_method_declaration .)
    var             reduce using rule 145 (interface_body -> interface_method_declaration .)


state 332

    (147) interface_body -> empty_function .

    RBLOCK          reduce using rule 147 (interface_body -> empty_function .)
    private         reduce using rule 147 (interface_body -> empty_function .)
    protected       reduce using rule 147 (interface_body -> empty_function .)
    public          reduce using rule 147 (interface_body -> empty_function .)
    var             reduce using rule 147 (interface_body -> empty_function .)


state 333

    (148) interface_method_declaration -> visibility . function ID LPAREN params RPAREN SEMICOLON

    function        shift and go to state 406


state 334

    (149) trait_declaration -> trait ID LBLOCK trait_body . RBLOCK
    (151) trait_body -> trait_body . trait_element
    (153) trait_element -> . visibility var_declaration SEMICOLON
    (154) trait_element -> . visibility fun_declaration
    (156) visibility -> . private
    (157) visibility -> . protected
    (158) visibility -> . public
    (159) visibility -> . var

    RBLOCK          shift and go to state 407
    private         shift and go to state 319
    protected       shift and go to state 320
    public          shift and go to state 321
    var             shift and go to state 322

    trait_element                  shift and go to state 408
    visibility                     shift and go to state 337

state 335

    (150) trait_body -> trait_element .

    RBLOCK          reduce using rule 150 (trait_body -> trait_element .)
    private         reduce using rule 150 (trait_body -> trait_element .)
    protected       reduce using rule 150 (trait_body -> trait_element .)
    public          reduce using rule 150 (trait_body -> trait_element .)
    var             reduce using rule 150 (trait_body -> trait_element .)


state 336

    (152) trait_body -> empty_function .

    RBLOCK          reduce using rule 152 (trait_body -> empty_function .)
    private         reduce using rule 152 (trait_body -> empty_function .)
    protected       reduce using rule 152 (trait_body -> empty_function .)
    public          reduce using rule 152 (trait_body -> empty_function .)
    var             reduce using rule 152 (trait_body -> empty_function .)


state 337

    (153) trait_element -> visibility . var_declaration SEMICOLON
    (154) trait_element -> visibility . fun_declaration
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    function        shift and go to state 44
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    var_declaration                shift and go to state 409
    fun_declaration                shift and go to state 410
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 338

    (169) for_loop -> for LPAREN for_init for_expr . for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> for LPAREN for_init for_expr . for_update RPAREN COLON declaration_list endfor SEMICOLON
    (173) for_update -> . expression
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    for_update                     shift and go to state 411
    expression                     shift and go to state 412
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 339

    (172) for_expr -> expression . SEMICOLON

    SEMICOLON       shift and go to state 413


state 340

    (171) for_init -> var_declaration2 SEMICOLON .

    MINUS           reduce using rule 171 (for_init -> var_declaration2 SEMICOLON .)
    NUMBER          reduce using rule 171 (for_init -> var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 171 (for_init -> var_declaration2 SEMICOLON .)
    LPAREN          reduce using rule 171 (for_init -> var_declaration2 SEMICOLON .)
    PLUSPLUS        reduce using rule 171 (for_init -> var_declaration2 SEMICOLON .)
    MINUSMINUS      reduce using rule 171 (for_init -> var_declaration2 SEMICOLON .)


state 341

    (175) foreach_loop -> foreach LPAREN expression as . expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> foreach LPAREN expression as . expression RPAREN COLON declaration_list endforeach SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 414
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 342

    (177) switch_statement -> switch LPAREN expression RPAREN . LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> switch LPAREN expression RPAREN . COLON case_blocks default_block endswitch SEMICOLON

    LBLOCK          shift and go to state 415
    COLON           shift and go to state 416


state 343

    (187) try_statement -> try LBLOCK statement_list RBLOCK . catch_blocks
    (188) catch_blocks -> . catch_blocks catch_block
    (189) catch_blocks -> . catch_block
    (190) catch_blocks -> . catch_blocks finally_block
    (191) catch_blocks -> . finally_block
    (192) catch_block -> . catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK
    (199) finally_block -> . finally LBLOCK statement_list RBLOCK

    catch           shift and go to state 420
    finally         shift and go to state 421

    catch_blocks                   shift and go to state 417
    catch_block                    shift and go to state 418
    finally_block                  shift and go to state 419

state 344

    (201) statement_list -> statement_list declaration .

    RBLOCK          reduce using rule 201 (statement_list -> statement_list declaration .)
    COMMENT         reduce using rule 201 (statement_list -> statement_list declaration .)
    COMMENT_HASHTAG reduce using rule 201 (statement_list -> statement_list declaration .)
    COMMENT_MULTI   reduce using rule 201 (statement_list -> statement_list declaration .)
    empty           reduce using rule 201 (statement_list -> statement_list declaration .)
    include         reduce using rule 201 (statement_list -> statement_list declaration .)
    const           reduce using rule 201 (statement_list -> statement_list declaration .)
    print           reduce using rule 201 (statement_list -> statement_list declaration .)
    echo            reduce using rule 201 (statement_list -> statement_list declaration .)
    while           reduce using rule 201 (statement_list -> statement_list declaration .)
    do              reduce using rule 201 (statement_list -> statement_list declaration .)
    if              reduce using rule 201 (statement_list -> statement_list declaration .)
    function        reduce using rule 201 (statement_list -> statement_list declaration .)
    ID              reduce using rule 201 (statement_list -> statement_list declaration .)
    return          reduce using rule 201 (statement_list -> statement_list declaration .)
    class           reduce using rule 201 (statement_list -> statement_list declaration .)
    new             reduce using rule 201 (statement_list -> statement_list declaration .)
    interface       reduce using rule 201 (statement_list -> statement_list declaration .)
    trait           reduce using rule 201 (statement_list -> statement_list declaration .)
    use             reduce using rule 201 (statement_list -> statement_list declaration .)
    continue        reduce using rule 201 (statement_list -> statement_list declaration .)
    CLOSE_TAG       reduce using rule 201 (statement_list -> statement_list declaration .)
    for             reduce using rule 201 (statement_list -> statement_list declaration .)
    foreach         reduce using rule 201 (statement_list -> statement_list declaration .)
    switch          reduce using rule 201 (statement_list -> statement_list declaration .)
    try             reduce using rule 201 (statement_list -> statement_list declaration .)
    throw           reduce using rule 201 (statement_list -> statement_list declaration .)
    exit            reduce using rule 201 (statement_list -> statement_list declaration .)
    VARIABLE        reduce using rule 201 (statement_list -> statement_list declaration .)
    array           reduce using rule 201 (statement_list -> statement_list declaration .)
    pow             reduce using rule 201 (statement_list -> statement_list declaration .)
    POW             reduce using rule 201 (statement_list -> statement_list declaration .)
    abs             reduce using rule 201 (statement_list -> statement_list declaration .)
    cos             reduce using rule 201 (statement_list -> statement_list declaration .)
    deg2rad         reduce using rule 201 (statement_list -> statement_list declaration .)
    rad2deg         reduce using rule 201 (statement_list -> statement_list declaration .)
    die             reduce using rule 201 (statement_list -> statement_list declaration .)
    exp             reduce using rule 201 (statement_list -> statement_list declaration .)
    floor           reduce using rule 201 (statement_list -> statement_list declaration .)
    isset           reduce using rule 201 (statement_list -> statement_list declaration .)
    list            reduce using rule 201 (statement_list -> statement_list declaration .)
    log             reduce using rule 201 (statement_list -> statement_list declaration .)
    log10           reduce using rule 201 (statement_list -> statement_list declaration .)
    max             reduce using rule 201 (statement_list -> statement_list declaration .)
    min             reduce using rule 201 (statement_list -> statement_list declaration .)
    rand            reduce using rule 201 (statement_list -> statement_list declaration .)
    round           reduce using rule 201 (statement_list -> statement_list declaration .)
    sin             reduce using rule 201 (statement_list -> statement_list declaration .)
    sqrt            reduce using rule 201 (statement_list -> statement_list declaration .)
    unset           reduce using rule 201 (statement_list -> statement_list declaration .)
    CADENA          reduce using rule 201 (statement_list -> statement_list declaration .)
    break           reduce using rule 201 (statement_list -> statement_list declaration .)
    endswitch       reduce using rule 201 (statement_list -> statement_list declaration .)
    default         reduce using rule 201 (statement_list -> statement_list declaration .)
    case            reduce using rule 201 (statement_list -> statement_list declaration .)


state 345

    (198) throw_statement -> throw new Exception LPAREN . params RPAREN SEMICOLON
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 422
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 346

    (174) exit_statement -> exit LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 423


state 347

    (71) assignment_tail -> VARIABLE LBRACKET expression . COMMA params

    COMMA           shift and go to state 424


state 348

    (72) assignment_tail -> VARIABLE LBRACKET params . RBRACKET
    (163) params -> params . COMMA single_param

    RBRACKET        shift and go to state 425
    COMMA           shift and go to state 199


state 349

    (73) assignment_tail -> VARIABLE LBLOCK params . RBLOCK
    (163) params -> params . COMMA single_param

    RBLOCK          shift and go to state 426
    COMMA           shift and go to state 199


state 350

    (61) var_declaration2 -> VARIABLE EQUAL ID LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 427
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 351

    (62) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON . var_declaration2
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    var_declaration2               shift and go to state 428
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 352

    (63) var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL . expression
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 429
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 353

    (64) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN . params RPAREN
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 430
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 354

    (69) assignment_tail -> LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 69 (assignment_tail -> LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 69 (assignment_tail -> LBRACKET params RBRACKET .)
    COMMA           reduce using rule 69 (assignment_tail -> LBRACKET params RBRACKET .)
    COLON           reduce using rule 69 (assignment_tail -> LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 69 (assignment_tail -> LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 69 (assignment_tail -> LBRACKET params RBRACKET .)


state 355

    (70) assignment_tail -> LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 70 (assignment_tail -> LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 70 (assignment_tail -> LBLOCK params RBLOCK .)
    COMMA           reduce using rule 70 (assignment_tail -> LBLOCK params RBLOCK .)
    COLON           reduce using rule 70 (assignment_tail -> LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 70 (assignment_tail -> LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 70 (assignment_tail -> LBLOCK params RBLOCK .)


state 356

    (203) Built_In_Declaration -> array LPAREN params RPAREN .

    SEMICOLON       reduce using rule 203 (Built_In_Declaration -> array LPAREN params RPAREN .)
    COMMA           reduce using rule 203 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RPAREN          reduce using rule 203 (Built_In_Declaration -> array LPAREN params RPAREN .)
    COLON           reduce using rule 203 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RBRACKET        reduce using rule 203 (Built_In_Declaration -> array LPAREN params RPAREN .)
    RBLOCK          reduce using rule 203 (Built_In_Declaration -> array LPAREN params RPAREN .)


state 357

    (204) Built_In_Declaration -> pow LPAREN params RPAREN .

    SEMICOLON       reduce using rule 204 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    COMMA           reduce using rule 204 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RPAREN          reduce using rule 204 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    COLON           reduce using rule 204 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RBRACKET        reduce using rule 204 (Built_In_Declaration -> pow LPAREN params RPAREN .)
    RBLOCK          reduce using rule 204 (Built_In_Declaration -> pow LPAREN params RPAREN .)


state 358

    (205) Built_In_Declaration -> POW LPAREN params RPAREN .

    SEMICOLON       reduce using rule 205 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    COMMA           reduce using rule 205 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RPAREN          reduce using rule 205 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    COLON           reduce using rule 205 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RBRACKET        reduce using rule 205 (Built_In_Declaration -> POW LPAREN params RPAREN .)
    RBLOCK          reduce using rule 205 (Built_In_Declaration -> POW LPAREN params RPAREN .)


state 359

    (206) Built_In_Declaration -> abs LPAREN params RPAREN .

    SEMICOLON       reduce using rule 206 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    COMMA           reduce using rule 206 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RPAREN          reduce using rule 206 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    COLON           reduce using rule 206 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RBRACKET        reduce using rule 206 (Built_In_Declaration -> abs LPAREN params RPAREN .)
    RBLOCK          reduce using rule 206 (Built_In_Declaration -> abs LPAREN params RPAREN .)


state 360

    (207) Built_In_Declaration -> cos LPAREN params RPAREN .

    SEMICOLON       reduce using rule 207 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    COMMA           reduce using rule 207 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RPAREN          reduce using rule 207 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    COLON           reduce using rule 207 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RBRACKET        reduce using rule 207 (Built_In_Declaration -> cos LPAREN params RPAREN .)
    RBLOCK          reduce using rule 207 (Built_In_Declaration -> cos LPAREN params RPAREN .)


state 361

    (208) Built_In_Declaration -> deg2rad LPAREN params RPAREN .

    SEMICOLON       reduce using rule 208 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    COMMA           reduce using rule 208 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RPAREN          reduce using rule 208 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    COLON           reduce using rule 208 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RBRACKET        reduce using rule 208 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)
    RBLOCK          reduce using rule 208 (Built_In_Declaration -> deg2rad LPAREN params RPAREN .)


state 362

    (209) Built_In_Declaration -> rad2deg LPAREN params RPAREN .

    SEMICOLON       reduce using rule 209 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    COMMA           reduce using rule 209 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RPAREN          reduce using rule 209 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    COLON           reduce using rule 209 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RBRACKET        reduce using rule 209 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)
    RBLOCK          reduce using rule 209 (Built_In_Declaration -> rad2deg LPAREN params RPAREN .)


state 363

    (210) Built_In_Declaration -> die LPAREN params RPAREN .

    SEMICOLON       reduce using rule 210 (Built_In_Declaration -> die LPAREN params RPAREN .)
    COMMA           reduce using rule 210 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RPAREN          reduce using rule 210 (Built_In_Declaration -> die LPAREN params RPAREN .)
    COLON           reduce using rule 210 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RBRACKET        reduce using rule 210 (Built_In_Declaration -> die LPAREN params RPAREN .)
    RBLOCK          reduce using rule 210 (Built_In_Declaration -> die LPAREN params RPAREN .)


state 364

    (211) Built_In_Declaration -> exp LPAREN params RPAREN .

    SEMICOLON       reduce using rule 211 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    COMMA           reduce using rule 211 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RPAREN          reduce using rule 211 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    COLON           reduce using rule 211 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RBRACKET        reduce using rule 211 (Built_In_Declaration -> exp LPAREN params RPAREN .)
    RBLOCK          reduce using rule 211 (Built_In_Declaration -> exp LPAREN params RPAREN .)


state 365

    (212) Built_In_Declaration -> floor LPAREN params RPAREN .

    SEMICOLON       reduce using rule 212 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    COMMA           reduce using rule 212 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RPAREN          reduce using rule 212 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    COLON           reduce using rule 212 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RBRACKET        reduce using rule 212 (Built_In_Declaration -> floor LPAREN params RPAREN .)
    RBLOCK          reduce using rule 212 (Built_In_Declaration -> floor LPAREN params RPAREN .)


state 366

    (213) Built_In_Declaration -> isset LPAREN params RPAREN .

    SEMICOLON       reduce using rule 213 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    COMMA           reduce using rule 213 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RPAREN          reduce using rule 213 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    COLON           reduce using rule 213 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RBRACKET        reduce using rule 213 (Built_In_Declaration -> isset LPAREN params RPAREN .)
    RBLOCK          reduce using rule 213 (Built_In_Declaration -> isset LPAREN params RPAREN .)


state 367

    (214) Built_In_Declaration -> list LPAREN params RPAREN .

    SEMICOLON       reduce using rule 214 (Built_In_Declaration -> list LPAREN params RPAREN .)
    COMMA           reduce using rule 214 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RPAREN          reduce using rule 214 (Built_In_Declaration -> list LPAREN params RPAREN .)
    COLON           reduce using rule 214 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RBRACKET        reduce using rule 214 (Built_In_Declaration -> list LPAREN params RPAREN .)
    RBLOCK          reduce using rule 214 (Built_In_Declaration -> list LPAREN params RPAREN .)


state 368

    (215) Built_In_Declaration -> log LPAREN params RPAREN .

    SEMICOLON       reduce using rule 215 (Built_In_Declaration -> log LPAREN params RPAREN .)
    COMMA           reduce using rule 215 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RPAREN          reduce using rule 215 (Built_In_Declaration -> log LPAREN params RPAREN .)
    COLON           reduce using rule 215 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RBRACKET        reduce using rule 215 (Built_In_Declaration -> log LPAREN params RPAREN .)
    RBLOCK          reduce using rule 215 (Built_In_Declaration -> log LPAREN params RPAREN .)


state 369

    (216) Built_In_Declaration -> log10 LPAREN params RPAREN .

    SEMICOLON       reduce using rule 216 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    COMMA           reduce using rule 216 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RPAREN          reduce using rule 216 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    COLON           reduce using rule 216 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RBRACKET        reduce using rule 216 (Built_In_Declaration -> log10 LPAREN params RPAREN .)
    RBLOCK          reduce using rule 216 (Built_In_Declaration -> log10 LPAREN params RPAREN .)


state 370

    (217) Built_In_Declaration -> max LPAREN params RPAREN .

    SEMICOLON       reduce using rule 217 (Built_In_Declaration -> max LPAREN params RPAREN .)
    COMMA           reduce using rule 217 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RPAREN          reduce using rule 217 (Built_In_Declaration -> max LPAREN params RPAREN .)
    COLON           reduce using rule 217 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RBRACKET        reduce using rule 217 (Built_In_Declaration -> max LPAREN params RPAREN .)
    RBLOCK          reduce using rule 217 (Built_In_Declaration -> max LPAREN params RPAREN .)


state 371

    (218) Built_In_Declaration -> min LPAREN params RPAREN .

    SEMICOLON       reduce using rule 218 (Built_In_Declaration -> min LPAREN params RPAREN .)
    COMMA           reduce using rule 218 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RPAREN          reduce using rule 218 (Built_In_Declaration -> min LPAREN params RPAREN .)
    COLON           reduce using rule 218 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RBRACKET        reduce using rule 218 (Built_In_Declaration -> min LPAREN params RPAREN .)
    RBLOCK          reduce using rule 218 (Built_In_Declaration -> min LPAREN params RPAREN .)


state 372

    (219) Built_In_Declaration -> rand LPAREN params RPAREN .

    SEMICOLON       reduce using rule 219 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    COMMA           reduce using rule 219 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RPAREN          reduce using rule 219 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    COLON           reduce using rule 219 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RBRACKET        reduce using rule 219 (Built_In_Declaration -> rand LPAREN params RPAREN .)
    RBLOCK          reduce using rule 219 (Built_In_Declaration -> rand LPAREN params RPAREN .)


state 373

    (220) Built_In_Declaration -> round LPAREN params RPAREN .

    SEMICOLON       reduce using rule 220 (Built_In_Declaration -> round LPAREN params RPAREN .)
    COMMA           reduce using rule 220 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RPAREN          reduce using rule 220 (Built_In_Declaration -> round LPAREN params RPAREN .)
    COLON           reduce using rule 220 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RBRACKET        reduce using rule 220 (Built_In_Declaration -> round LPAREN params RPAREN .)
    RBLOCK          reduce using rule 220 (Built_In_Declaration -> round LPAREN params RPAREN .)


state 374

    (221) Built_In_Declaration -> sin LPAREN params RPAREN .

    SEMICOLON       reduce using rule 221 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    COMMA           reduce using rule 221 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RPAREN          reduce using rule 221 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    COLON           reduce using rule 221 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RBRACKET        reduce using rule 221 (Built_In_Declaration -> sin LPAREN params RPAREN .)
    RBLOCK          reduce using rule 221 (Built_In_Declaration -> sin LPAREN params RPAREN .)


state 375

    (222) Built_In_Declaration -> sqrt LPAREN params RPAREN .

    SEMICOLON       reduce using rule 222 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    COMMA           reduce using rule 222 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RPAREN          reduce using rule 222 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    COLON           reduce using rule 222 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RBRACKET        reduce using rule 222 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)
    RBLOCK          reduce using rule 222 (Built_In_Declaration -> sqrt LPAREN params RPAREN .)


state 376

    (223) Built_In_Declaration -> unset LPAREN params RPAREN .

    SEMICOLON       reduce using rule 223 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    COMMA           reduce using rule 223 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RPAREN          reduce using rule 223 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    COLON           reduce using rule 223 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RBRACKET        reduce using rule 223 (Built_In_Declaration -> unset LPAREN params RPAREN .)
    RBLOCK          reduce using rule 223 (Built_In_Declaration -> unset LPAREN params RPAREN .)


state 377

    (35) constant_declaration -> const ID EQUAL CADENA SEMICOLON .

    COMMENT         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    COMMENT_MULTI   reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    empty           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    include         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    const           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    print           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    echo            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    while           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    do              reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    if              reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    function        reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    ID              reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    return          reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    class           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    new             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    interface       reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    trait           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    use             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    continue        reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    CLOSE_TAG       reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    for             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    foreach         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    switch          reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    try             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    throw           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    exit            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    VARIABLE        reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    array           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    pow             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    POW             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    abs             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    cos             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    deg2rad         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    rad2deg         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    die             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    exp             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    floor           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    isset           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    list            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    log             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    log10           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    max             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    min             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    rand            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    round           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    sin             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    sqrt            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    unset           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    CADENA          reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    $end            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    RBLOCK          reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endwhile        reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    private         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    protected       reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    public          reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    var             reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endfor          reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endforeach      reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    break           reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    endswitch       reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    default         reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)
    case            reduce using rule 35 (constant_declaration -> const ID EQUAL CADENA SEMICOLON .)


state 378

    (36) constant_declaration -> const ID EQUAL NUMBER SEMICOLON .

    COMMENT         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    COMMENT_MULTI   reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    empty           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    include         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    const           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    print           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    echo            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    while           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    do              reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    if              reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    function        reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    return          reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    class           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    new             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    interface       reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    trait           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    use             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    continue        reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    for             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    foreach         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    switch          reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    try             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    throw           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    exit            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    VARIABLE        reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    array           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    pow             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    POW             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    abs             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    cos             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    deg2rad         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    rad2deg         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    die             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    exp             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    floor           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    isset           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    list            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    log             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    log10           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    max             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    min             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    rand            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    round           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    sin             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    sqrt            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    unset           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    CADENA          reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    $end            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endwhile        reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    private         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    protected       reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    public          reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    var             reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endfor          reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endforeach      reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    break           reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    endswitch       reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    default         reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)
    case            reduce using rule 36 (constant_declaration -> const ID EQUAL NUMBER SEMICOLON .)


state 379

    (38) print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    do              reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    return          reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    interface       reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    trait           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    use             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    continue        reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    switch          reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    try             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    throw           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    array           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    pow             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    POW             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    abs             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    cos             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    deg2rad         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    rad2deg         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    die             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    exp             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    floor           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    isset           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    list            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    log             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    log10           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    max             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    min             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    rand            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    round           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    sin             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    sqrt            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    unset           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endwhile        reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    private         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    protected       reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    public          reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    var             reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endfor          reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endforeach      reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    break           reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    endswitch       reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    default         reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)
    case            reduce using rule 38 (print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON .)


state 380

    (39) print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .

    COMMENT         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    empty           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    include         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    const           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    print           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    echo            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    while           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    do              reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    if              reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    function        reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    return          reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    class           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    new             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    interface       reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    trait           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    use             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    continue        reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    for             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    foreach         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    switch          reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    try             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    throw           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    exit            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    array           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    pow             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    POW             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    abs             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    cos             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    deg2rad         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    rad2deg         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    die             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    exp             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    floor           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    isset           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    list            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    log             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    log10           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    max             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    min             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    rand            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    round           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    sin             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    sqrt            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    unset           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    CADENA          reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endwhile        reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    private         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    protected       reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    public          reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    var             reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endfor          reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endforeach      reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    break           reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    endswitch       reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    default         reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)
    case            reduce using rule 39 (print_declaration -> print LPAREN NUMBER RPAREN SEMICOLON .)


state 381

    (40) print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .

    COMMENT         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    empty           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    include         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    const           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    print           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    echo            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    while           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    do              reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    if              reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    function        reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    ID              reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    return          reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    class           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    new             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    interface       reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    trait           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    use             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    continue        reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    for             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    foreach         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    switch          reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    try             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    throw           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    exit            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    array           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    pow             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    POW             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    abs             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    cos             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    deg2rad         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    rad2deg         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    die             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    exp             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    floor           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    isset           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    list            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    log             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    log10           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    max             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    min             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    rand            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    round           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    sin             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    sqrt            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    unset           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    CADENA          reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    $end            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endwhile        reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    private         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    protected       reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    public          reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    var             reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endfor          reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endforeach      reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    break           reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    endswitch       reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    default         reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)
    case            reduce using rule 40 (print_declaration -> print LPAREN CADENA RPAREN SEMICOLON .)


state 382

    (44) echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .

    COMMENT         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    empty           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    include         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    const           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    print           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    echo            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    while           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    do              reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    if              reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    function        reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    ID              reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    return          reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    class           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    new             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    interface       reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    trait           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    use             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    continue        reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    for             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    foreach         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    switch          reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    try             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    throw           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exit            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    array           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    pow             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    POW             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    abs             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    cos             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    deg2rad         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    rad2deg         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    die             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    exp             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    floor           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    isset           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    list            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    log             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    log10           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    max             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    min             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    rand            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    round           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    sin             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    sqrt            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    unset           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    CADENA          reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    $end            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endwhile        reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    private         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    protected       reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    public          reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    var             reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endfor          reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endforeach      reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    break           reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    endswitch       reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    default         reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)
    case            reduce using rule 44 (echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON .)


state 383

    (45) echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .

    COMMENT         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    empty           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    include         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    const           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    print           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    echo            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    while           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    do              reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    if              reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    function        reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    ID              reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    return          reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    class           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    new             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    interface       reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    trait           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    use             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    continue        reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    for             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    foreach         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    switch          reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    try             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    throw           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    exit            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    array           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    pow             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    POW             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    abs             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    cos             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    deg2rad         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    rad2deg         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    die             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    exp             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    floor           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    isset           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    list            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    log             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    log10           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    max             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    min             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    rand            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    round           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    sin             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    sqrt            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    unset           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    CADENA          reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    $end            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endwhile        reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    private         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    protected       reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    public          reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    var             reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endfor          reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endforeach      reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    break           reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    endswitch       reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    default         reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)
    case            reduce using rule 45 (echo_declaration -> echo LPAREN NUMBER RPAREN SEMICOLON .)


state 384

    (46) echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .

    COMMENT         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    empty           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    include         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    const           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    print           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    echo            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    while           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    do              reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    if              reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    function        reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    ID              reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    return          reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    class           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    new             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    interface       reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    trait           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    use             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    continue        reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    for             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    foreach         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    switch          reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    try             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    throw           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    exit            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    array           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    pow             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    POW             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    abs             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    cos             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    deg2rad         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    rad2deg         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    die             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    exp             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    floor           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    isset           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    list            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    log             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    log10           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    max             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    min             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    rand            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    round           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    sin             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    sqrt            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    unset           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    CADENA          reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    $end            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endwhile        reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    private         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    protected       reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    public          reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    var             reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endfor          reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endforeach      reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    break           reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    endswitch       reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    default         reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)
    case            reduce using rule 46 (echo_declaration -> echo LPAREN CADENA RPAREN SEMICOLON .)


state 385

    (74) iteration_stmt -> while LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 431
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 386

    (75) iteration_stmt -> while LPAREN expression RPAREN COLON . declaration_list endwhile SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 432
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 387

    (76) iteration_stmt -> do LBLOCK declaration_list RBLOCK while . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 433


state 388

    (77) iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .

    COMMENT         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    COMMENT_MULTI   reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    empty           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    include         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    const           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    print           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    echo            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    while           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    do              reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    if              reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    function        reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    ID              reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    return          reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    class           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    new             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    interface       reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    trait           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    use             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    continue        reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    CLOSE_TAG       reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    for             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    foreach         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    switch          reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    try             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    throw           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    exit            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    VARIABLE        reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    array           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    pow             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    POW             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    abs             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    cos             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    deg2rad         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    rad2deg         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    die             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    exp             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    floor           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    isset           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    list            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    log             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    log10           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    max             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    min             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    rand            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    round           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    sin             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    sqrt            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    unset           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    CADENA          reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    $end            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    RBLOCK          reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endwhile        reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    private         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    protected       reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    public          reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    var             reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endfor          reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endforeach      reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    break           reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    endswitch       reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    default         reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)
    case            reduce using rule 77 (iteration_stmt -> do COLON declaration_list endwhile SEMICOLON .)


state 389

    (118) if_statement -> if LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 434
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 390

    (123) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> function ID LPAREN params RPAREN . LBLOCK declaration_list return_statement RBLOCK

    LBLOCK          shift and go to state 435


state 391

    (129) return_statement -> return ID LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 436


state 392

    (81) expression -> additive_expression comp_op additive_expression logical_op . additive_expression comp_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    additive_expression            shift and go to state 437
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 393

    (130) class_declaration -> class ID LBLOCK class_body RBLOCK .

    COMMENT         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    empty           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    include         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    const           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    print           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    echo            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    while           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    do              reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    if              reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    function        reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    ID              reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    return          reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    class           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    new             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    interface       reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    trait           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    use             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    continue        reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    CLOSE_TAG       reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    for             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    foreach         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    switch          reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    try             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    throw           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    exit            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    VARIABLE        reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    array           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    pow             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    POW             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    abs             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    cos             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    deg2rad         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    rad2deg         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    die             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    exp             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    floor           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    isset           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    list            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    log             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    log10           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    max             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    min             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    rand            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    round           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    sin             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    sqrt            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    unset           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    CADENA          reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    $end            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    RBLOCK          reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endwhile        reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    private         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    protected       reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    public          reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    var             reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endfor          reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endforeach      reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    break           reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    endswitch       reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    default         reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)
    case            reduce using rule 130 (class_declaration -> class ID LBLOCK class_body RBLOCK .)


state 394

    (139) class_body -> class_body class_body_element .

    RBLOCK          reduce using rule 139 (class_body -> class_body class_body_element .)
    private         reduce using rule 139 (class_body -> class_body class_body_element .)
    protected       reduce using rule 139 (class_body -> class_body class_body_element .)
    public          reduce using rule 139 (class_body -> class_body class_body_element .)
    var             reduce using rule 139 (class_body -> class_body class_body_element .)
    COMMENT         reduce using rule 139 (class_body -> class_body class_body_element .)
    COMMENT_HASHTAG reduce using rule 139 (class_body -> class_body class_body_element .)
    COMMENT_MULTI   reduce using rule 139 (class_body -> class_body class_body_element .)
    empty           reduce using rule 139 (class_body -> class_body class_body_element .)
    include         reduce using rule 139 (class_body -> class_body class_body_element .)
    const           reduce using rule 139 (class_body -> class_body class_body_element .)
    print           reduce using rule 139 (class_body -> class_body class_body_element .)
    echo            reduce using rule 139 (class_body -> class_body class_body_element .)
    while           reduce using rule 139 (class_body -> class_body class_body_element .)
    do              reduce using rule 139 (class_body -> class_body class_body_element .)
    if              reduce using rule 139 (class_body -> class_body class_body_element .)
    function        reduce using rule 139 (class_body -> class_body class_body_element .)
    ID              reduce using rule 139 (class_body -> class_body class_body_element .)
    return          reduce using rule 139 (class_body -> class_body class_body_element .)
    class           reduce using rule 139 (class_body -> class_body class_body_element .)
    new             reduce using rule 139 (class_body -> class_body class_body_element .)
    interface       reduce using rule 139 (class_body -> class_body class_body_element .)
    trait           reduce using rule 139 (class_body -> class_body class_body_element .)
    use             reduce using rule 139 (class_body -> class_body class_body_element .)
    continue        reduce using rule 139 (class_body -> class_body class_body_element .)
    CLOSE_TAG       reduce using rule 139 (class_body -> class_body class_body_element .)
    for             reduce using rule 139 (class_body -> class_body class_body_element .)
    foreach         reduce using rule 139 (class_body -> class_body class_body_element .)
    switch          reduce using rule 139 (class_body -> class_body class_body_element .)
    try             reduce using rule 139 (class_body -> class_body class_body_element .)
    throw           reduce using rule 139 (class_body -> class_body class_body_element .)
    exit            reduce using rule 139 (class_body -> class_body class_body_element .)
    VARIABLE        reduce using rule 139 (class_body -> class_body class_body_element .)
    array           reduce using rule 139 (class_body -> class_body class_body_element .)
    pow             reduce using rule 139 (class_body -> class_body class_body_element .)
    POW             reduce using rule 139 (class_body -> class_body class_body_element .)
    abs             reduce using rule 139 (class_body -> class_body class_body_element .)
    cos             reduce using rule 139 (class_body -> class_body class_body_element .)
    deg2rad         reduce using rule 139 (class_body -> class_body class_body_element .)
    rad2deg         reduce using rule 139 (class_body -> class_body class_body_element .)
    die             reduce using rule 139 (class_body -> class_body class_body_element .)
    exp             reduce using rule 139 (class_body -> class_body class_body_element .)
    floor           reduce using rule 139 (class_body -> class_body class_body_element .)
    isset           reduce using rule 139 (class_body -> class_body class_body_element .)
    list            reduce using rule 139 (class_body -> class_body class_body_element .)
    log             reduce using rule 139 (class_body -> class_body class_body_element .)
    log10           reduce using rule 139 (class_body -> class_body class_body_element .)
    max             reduce using rule 139 (class_body -> class_body class_body_element .)
    min             reduce using rule 139 (class_body -> class_body class_body_element .)
    rand            reduce using rule 139 (class_body -> class_body class_body_element .)
    round           reduce using rule 139 (class_body -> class_body class_body_element .)
    sin             reduce using rule 139 (class_body -> class_body class_body_element .)
    sqrt            reduce using rule 139 (class_body -> class_body class_body_element .)
    unset           reduce using rule 139 (class_body -> class_body class_body_element .)
    CADENA          reduce using rule 139 (class_body -> class_body class_body_element .)


state 395

    (141) class_body_element -> visibility var_declaration2 . SEMICOLON

    SEMICOLON       shift and go to state 438


state 396

    (142) class_body_element -> visibility fun_declaration .

    RBLOCK          reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    private         reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    protected       reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    public          reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    var             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    COMMENT         reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    COMMENT_HASHTAG reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    COMMENT_MULTI   reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    empty           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    include         reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    const           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    print           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    echo            reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    while           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    do              reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    if              reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    function        reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    ID              reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    return          reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    class           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    new             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    interface       reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    trait           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    use             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    continue        reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    CLOSE_TAG       reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    for             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    foreach         reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    switch          reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    try             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    throw           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    exit            reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    VARIABLE        reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    array           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    pow             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    POW             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    abs             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    cos             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    deg2rad         reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    rad2deg         reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    die             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    exp             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    floor           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    isset           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    list            reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    log             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    log10           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    max             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    min             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    rand            reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    round           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    sin             reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    sqrt            reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    unset           reduce using rule 142 (class_body_element -> visibility fun_declaration .)
    CADENA          reduce using rule 142 (class_body_element -> visibility fun_declaration .)


state 397

    (131) class_extension -> class ID extends ID LBLOCK . RBLOCK

    RBLOCK          shift and go to state 439


state 398

    (132) class_extension -> class ID extends Exception LBLOCK . RBLOCK

    RBLOCK          shift and go to state 440


state 399

    (133) class_extension -> class ID extends ErrorException LBLOCK . RBLOCK

    RBLOCK          shift and go to state 441


state 400

    (134) class_extension -> class ID extends Error LBLOCK . RBLOCK

    RBLOCK          shift and go to state 442


state 401

    (135) class_extension -> class ID extends ParseError LBLOCK . RBLOCK

    RBLOCK          shift and go to state 443


state 402

    (136) class_extension -> class ID extends TypeError LBLOCK . RBLOCK

    RBLOCK          shift and go to state 444


state 403

    (137) create_obj_declaration -> new ID LPAREN params RPAREN .

    COMMENT         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_HASHTAG reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMENT_MULTI   reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    empty           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    include         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    const           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    print           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    echo            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    while           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    do              reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    if              reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    function        reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    ID              reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    return          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    class           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    new             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    interface       reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    trait           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    use             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    continue        reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CLOSE_TAG       reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    for             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    foreach         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    switch          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    try             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    throw           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exit            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    VARIABLE        reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    array           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    pow             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    POW             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    abs             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    cos             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    deg2rad         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    rad2deg         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    die             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    exp             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    floor           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    isset           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    list            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    log             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    log10           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    max             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    min             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    rand            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    round           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    sin             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    sqrt            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    unset           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    CADENA          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    $end            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endwhile        reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COMMA           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    COLON           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    private         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    protected       reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    public          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    var             reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endfor          reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endforeach      reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    break           reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    endswitch       reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    default         reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)
    case            reduce using rule 137 (create_obj_declaration -> new ID LPAREN params RPAREN .)


state 404

    (144) interface_declaration -> interface ID LBLOCK interface_body RBLOCK .

    COMMENT         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    empty           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    include         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    const           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    print           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    echo            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    while           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    do              reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    if              reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    function        reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    ID              reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    return          reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    class           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    new             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    interface       reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    trait           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    use             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    continue        reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    CLOSE_TAG       reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    for             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    foreach         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    switch          reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    try             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    throw           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    exit            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    VARIABLE        reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    array           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    pow             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    POW             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    abs             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    cos             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    deg2rad         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    rad2deg         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    die             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    exp             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    floor           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    isset           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    list            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    log             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    log10           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    max             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    min             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    rand            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    round           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    sin             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    sqrt            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    unset           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    CADENA          reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    $end            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    RBLOCK          reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endwhile        reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    private         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    protected       reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    public          reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    var             reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endfor          reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endforeach      reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    break           reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    endswitch       reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    default         reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)
    case            reduce using rule 144 (interface_declaration -> interface ID LBLOCK interface_body RBLOCK .)


state 405

    (146) interface_body -> interface_body interface_method_declaration .

    RBLOCK          reduce using rule 146 (interface_body -> interface_body interface_method_declaration .)
    private         reduce using rule 146 (interface_body -> interface_body interface_method_declaration .)
    protected       reduce using rule 146 (interface_body -> interface_body interface_method_declaration .)
    public          reduce using rule 146 (interface_body -> interface_body interface_method_declaration .)
    var             reduce using rule 146 (interface_body -> interface_body interface_method_declaration .)


state 406

    (148) interface_method_declaration -> visibility function . ID LPAREN params RPAREN SEMICOLON

    ID              shift and go to state 445


state 407

    (149) trait_declaration -> trait ID LBLOCK trait_body RBLOCK .

    COMMENT         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    COMMENT_HASHTAG reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    COMMENT_MULTI   reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    empty           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    include         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    const           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    print           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    echo            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    while           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    do              reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    if              reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    function        reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    ID              reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    return          reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    class           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    new             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    interface       reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    trait           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    use             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    continue        reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    CLOSE_TAG       reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    for             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    foreach         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    switch          reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    try             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    throw           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    exit            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    VARIABLE        reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    array           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    pow             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    POW             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    abs             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    cos             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    deg2rad         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    rad2deg         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    die             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    exp             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    floor           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    isset           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    list            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    log             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    log10           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    max             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    min             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    rand            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    round           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    sin             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    sqrt            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    unset           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    CADENA          reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    $end            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    RBLOCK          reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endwhile        reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    private         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    protected       reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    public          reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    var             reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endfor          reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endforeach      reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    break           reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    endswitch       reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    default         reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)
    case            reduce using rule 149 (trait_declaration -> trait ID LBLOCK trait_body RBLOCK .)


state 408

    (151) trait_body -> trait_body trait_element .

    RBLOCK          reduce using rule 151 (trait_body -> trait_body trait_element .)
    private         reduce using rule 151 (trait_body -> trait_body trait_element .)
    protected       reduce using rule 151 (trait_body -> trait_body trait_element .)
    public          reduce using rule 151 (trait_body -> trait_body trait_element .)
    var             reduce using rule 151 (trait_body -> trait_body trait_element .)


state 409

    (153) trait_element -> visibility var_declaration . SEMICOLON

    SEMICOLON       shift and go to state 446


state 410

    (154) trait_element -> visibility fun_declaration .

    RBLOCK          reduce using rule 154 (trait_element -> visibility fun_declaration .)
    private         reduce using rule 154 (trait_element -> visibility fun_declaration .)
    protected       reduce using rule 154 (trait_element -> visibility fun_declaration .)
    public          reduce using rule 154 (trait_element -> visibility fun_declaration .)
    var             reduce using rule 154 (trait_element -> visibility fun_declaration .)


state 411

    (169) for_loop -> for LPAREN for_init for_expr for_update . RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> for LPAREN for_init for_expr for_update . RPAREN COLON declaration_list endfor SEMICOLON

    RPAREN          shift and go to state 447


state 412

    (173) for_update -> expression .

    RPAREN          reduce using rule 173 (for_update -> expression .)


state 413

    (172) for_expr -> expression SEMICOLON .

    MINUS           reduce using rule 172 (for_expr -> expression SEMICOLON .)
    NUMBER          reduce using rule 172 (for_expr -> expression SEMICOLON .)
    VARIABLE        reduce using rule 172 (for_expr -> expression SEMICOLON .)
    LPAREN          reduce using rule 172 (for_expr -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 172 (for_expr -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 172 (for_expr -> expression SEMICOLON .)


state 414

    (175) foreach_loop -> foreach LPAREN expression as expression . RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> foreach LPAREN expression as expression . RPAREN COLON declaration_list endforeach SEMICOLON

    RPAREN          shift and go to state 448


state 415

    (177) switch_statement -> switch LPAREN expression RPAREN LBLOCK . case_blocks default_block RBLOCK
    (179) case_blocks -> . case_blocks case_block
    (180) case_blocks -> . case_block
    (181) case_blocks -> . empty_function
    (182) case_block -> . case expression COLON statement_list
    (183) case_block -> . case expression COLON statement_list break SEMICOLON
    (236) empty_function -> .

  ! shift/reduce conflict for case resolved as shift
    case            shift and go to state 452
    default         reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)

  ! case            [ reduce using rule 236 (empty_function -> .) ]

    case_blocks                    shift and go to state 449
    case_block                     shift and go to state 450
    empty_function                 shift and go to state 451

state 416

    (178) switch_statement -> switch LPAREN expression RPAREN COLON . case_blocks default_block endswitch SEMICOLON
    (179) case_blocks -> . case_blocks case_block
    (180) case_blocks -> . case_block
    (181) case_blocks -> . empty_function
    (182) case_block -> . case expression COLON statement_list
    (183) case_block -> . case expression COLON statement_list break SEMICOLON
    (236) empty_function -> .

  ! shift/reduce conflict for case resolved as shift
    case            shift and go to state 452
    default         reduce using rule 236 (empty_function -> .)
    endswitch       reduce using rule 236 (empty_function -> .)

  ! case            [ reduce using rule 236 (empty_function -> .) ]

    case_blocks                    shift and go to state 453
    case_block                     shift and go to state 450
    empty_function                 shift and go to state 451

state 417

    (187) try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .
    (188) catch_blocks -> catch_blocks . catch_block
    (190) catch_blocks -> catch_blocks . finally_block
    (192) catch_block -> . catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK
    (199) finally_block -> . finally LBLOCK statement_list RBLOCK

    COMMENT         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    COMMENT_HASHTAG reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    COMMENT_MULTI   reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    empty           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    include         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    const           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    print           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    echo            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    while           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    do              reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    if              reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    function        reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    ID              reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    return          reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    class           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    new             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    interface       reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    trait           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    use             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    continue        reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    CLOSE_TAG       reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    for             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    foreach         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    switch          reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    try             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    throw           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    exit            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    VARIABLE        reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    array           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    pow             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    POW             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    abs             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    cos             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    deg2rad         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    rad2deg         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    die             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    exp             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    floor           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    isset           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    list            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    log             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    log10           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    max             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    min             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    rand            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    round           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    sin             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    sqrt            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    unset           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    CADENA          reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    $end            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    RBLOCK          reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endwhile        reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    private         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    protected       reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    public          reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    var             reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endfor          reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endforeach      reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    break           reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    endswitch       reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    default         reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    case            reduce using rule 187 (try_statement -> try LBLOCK statement_list RBLOCK catch_blocks .)
    catch           shift and go to state 420
    finally         shift and go to state 421

    catch_block                    shift and go to state 454
    finally_block                  shift and go to state 455

state 418

    (189) catch_blocks -> catch_block .

    catch           reduce using rule 189 (catch_blocks -> catch_block .)
    finally         reduce using rule 189 (catch_blocks -> catch_block .)
    COMMENT         reduce using rule 189 (catch_blocks -> catch_block .)
    COMMENT_HASHTAG reduce using rule 189 (catch_blocks -> catch_block .)
    COMMENT_MULTI   reduce using rule 189 (catch_blocks -> catch_block .)
    empty           reduce using rule 189 (catch_blocks -> catch_block .)
    include         reduce using rule 189 (catch_blocks -> catch_block .)
    const           reduce using rule 189 (catch_blocks -> catch_block .)
    print           reduce using rule 189 (catch_blocks -> catch_block .)
    echo            reduce using rule 189 (catch_blocks -> catch_block .)
    while           reduce using rule 189 (catch_blocks -> catch_block .)
    do              reduce using rule 189 (catch_blocks -> catch_block .)
    if              reduce using rule 189 (catch_blocks -> catch_block .)
    function        reduce using rule 189 (catch_blocks -> catch_block .)
    ID              reduce using rule 189 (catch_blocks -> catch_block .)
    return          reduce using rule 189 (catch_blocks -> catch_block .)
    class           reduce using rule 189 (catch_blocks -> catch_block .)
    new             reduce using rule 189 (catch_blocks -> catch_block .)
    interface       reduce using rule 189 (catch_blocks -> catch_block .)
    trait           reduce using rule 189 (catch_blocks -> catch_block .)
    use             reduce using rule 189 (catch_blocks -> catch_block .)
    continue        reduce using rule 189 (catch_blocks -> catch_block .)
    CLOSE_TAG       reduce using rule 189 (catch_blocks -> catch_block .)
    for             reduce using rule 189 (catch_blocks -> catch_block .)
    foreach         reduce using rule 189 (catch_blocks -> catch_block .)
    switch          reduce using rule 189 (catch_blocks -> catch_block .)
    try             reduce using rule 189 (catch_blocks -> catch_block .)
    throw           reduce using rule 189 (catch_blocks -> catch_block .)
    exit            reduce using rule 189 (catch_blocks -> catch_block .)
    VARIABLE        reduce using rule 189 (catch_blocks -> catch_block .)
    array           reduce using rule 189 (catch_blocks -> catch_block .)
    pow             reduce using rule 189 (catch_blocks -> catch_block .)
    POW             reduce using rule 189 (catch_blocks -> catch_block .)
    abs             reduce using rule 189 (catch_blocks -> catch_block .)
    cos             reduce using rule 189 (catch_blocks -> catch_block .)
    deg2rad         reduce using rule 189 (catch_blocks -> catch_block .)
    rad2deg         reduce using rule 189 (catch_blocks -> catch_block .)
    die             reduce using rule 189 (catch_blocks -> catch_block .)
    exp             reduce using rule 189 (catch_blocks -> catch_block .)
    floor           reduce using rule 189 (catch_blocks -> catch_block .)
    isset           reduce using rule 189 (catch_blocks -> catch_block .)
    list            reduce using rule 189 (catch_blocks -> catch_block .)
    log             reduce using rule 189 (catch_blocks -> catch_block .)
    log10           reduce using rule 189 (catch_blocks -> catch_block .)
    max             reduce using rule 189 (catch_blocks -> catch_block .)
    min             reduce using rule 189 (catch_blocks -> catch_block .)
    rand            reduce using rule 189 (catch_blocks -> catch_block .)
    round           reduce using rule 189 (catch_blocks -> catch_block .)
    sin             reduce using rule 189 (catch_blocks -> catch_block .)
    sqrt            reduce using rule 189 (catch_blocks -> catch_block .)
    unset           reduce using rule 189 (catch_blocks -> catch_block .)
    CADENA          reduce using rule 189 (catch_blocks -> catch_block .)
    $end            reduce using rule 189 (catch_blocks -> catch_block .)
    RBLOCK          reduce using rule 189 (catch_blocks -> catch_block .)
    endwhile        reduce using rule 189 (catch_blocks -> catch_block .)
    private         reduce using rule 189 (catch_blocks -> catch_block .)
    protected       reduce using rule 189 (catch_blocks -> catch_block .)
    public          reduce using rule 189 (catch_blocks -> catch_block .)
    var             reduce using rule 189 (catch_blocks -> catch_block .)
    endfor          reduce using rule 189 (catch_blocks -> catch_block .)
    endforeach      reduce using rule 189 (catch_blocks -> catch_block .)
    break           reduce using rule 189 (catch_blocks -> catch_block .)
    endswitch       reduce using rule 189 (catch_blocks -> catch_block .)
    default         reduce using rule 189 (catch_blocks -> catch_block .)
    case            reduce using rule 189 (catch_blocks -> catch_block .)


state 419

    (191) catch_blocks -> finally_block .

    catch           reduce using rule 191 (catch_blocks -> finally_block .)
    finally         reduce using rule 191 (catch_blocks -> finally_block .)
    COMMENT         reduce using rule 191 (catch_blocks -> finally_block .)
    COMMENT_HASHTAG reduce using rule 191 (catch_blocks -> finally_block .)
    COMMENT_MULTI   reduce using rule 191 (catch_blocks -> finally_block .)
    empty           reduce using rule 191 (catch_blocks -> finally_block .)
    include         reduce using rule 191 (catch_blocks -> finally_block .)
    const           reduce using rule 191 (catch_blocks -> finally_block .)
    print           reduce using rule 191 (catch_blocks -> finally_block .)
    echo            reduce using rule 191 (catch_blocks -> finally_block .)
    while           reduce using rule 191 (catch_blocks -> finally_block .)
    do              reduce using rule 191 (catch_blocks -> finally_block .)
    if              reduce using rule 191 (catch_blocks -> finally_block .)
    function        reduce using rule 191 (catch_blocks -> finally_block .)
    ID              reduce using rule 191 (catch_blocks -> finally_block .)
    return          reduce using rule 191 (catch_blocks -> finally_block .)
    class           reduce using rule 191 (catch_blocks -> finally_block .)
    new             reduce using rule 191 (catch_blocks -> finally_block .)
    interface       reduce using rule 191 (catch_blocks -> finally_block .)
    trait           reduce using rule 191 (catch_blocks -> finally_block .)
    use             reduce using rule 191 (catch_blocks -> finally_block .)
    continue        reduce using rule 191 (catch_blocks -> finally_block .)
    CLOSE_TAG       reduce using rule 191 (catch_blocks -> finally_block .)
    for             reduce using rule 191 (catch_blocks -> finally_block .)
    foreach         reduce using rule 191 (catch_blocks -> finally_block .)
    switch          reduce using rule 191 (catch_blocks -> finally_block .)
    try             reduce using rule 191 (catch_blocks -> finally_block .)
    throw           reduce using rule 191 (catch_blocks -> finally_block .)
    exit            reduce using rule 191 (catch_blocks -> finally_block .)
    VARIABLE        reduce using rule 191 (catch_blocks -> finally_block .)
    array           reduce using rule 191 (catch_blocks -> finally_block .)
    pow             reduce using rule 191 (catch_blocks -> finally_block .)
    POW             reduce using rule 191 (catch_blocks -> finally_block .)
    abs             reduce using rule 191 (catch_blocks -> finally_block .)
    cos             reduce using rule 191 (catch_blocks -> finally_block .)
    deg2rad         reduce using rule 191 (catch_blocks -> finally_block .)
    rad2deg         reduce using rule 191 (catch_blocks -> finally_block .)
    die             reduce using rule 191 (catch_blocks -> finally_block .)
    exp             reduce using rule 191 (catch_blocks -> finally_block .)
    floor           reduce using rule 191 (catch_blocks -> finally_block .)
    isset           reduce using rule 191 (catch_blocks -> finally_block .)
    list            reduce using rule 191 (catch_blocks -> finally_block .)
    log             reduce using rule 191 (catch_blocks -> finally_block .)
    log10           reduce using rule 191 (catch_blocks -> finally_block .)
    max             reduce using rule 191 (catch_blocks -> finally_block .)
    min             reduce using rule 191 (catch_blocks -> finally_block .)
    rand            reduce using rule 191 (catch_blocks -> finally_block .)
    round           reduce using rule 191 (catch_blocks -> finally_block .)
    sin             reduce using rule 191 (catch_blocks -> finally_block .)
    sqrt            reduce using rule 191 (catch_blocks -> finally_block .)
    unset           reduce using rule 191 (catch_blocks -> finally_block .)
    CADENA          reduce using rule 191 (catch_blocks -> finally_block .)
    $end            reduce using rule 191 (catch_blocks -> finally_block .)
    RBLOCK          reduce using rule 191 (catch_blocks -> finally_block .)
    endwhile        reduce using rule 191 (catch_blocks -> finally_block .)
    private         reduce using rule 191 (catch_blocks -> finally_block .)
    protected       reduce using rule 191 (catch_blocks -> finally_block .)
    public          reduce using rule 191 (catch_blocks -> finally_block .)
    var             reduce using rule 191 (catch_blocks -> finally_block .)
    endfor          reduce using rule 191 (catch_blocks -> finally_block .)
    endforeach      reduce using rule 191 (catch_blocks -> finally_block .)
    break           reduce using rule 191 (catch_blocks -> finally_block .)
    endswitch       reduce using rule 191 (catch_blocks -> finally_block .)
    default         reduce using rule 191 (catch_blocks -> finally_block .)
    case            reduce using rule 191 (catch_blocks -> finally_block .)


state 420

    (192) catch_block -> catch . LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK

    LPAREN          shift and go to state 456


state 421

    (199) finally_block -> finally . LBLOCK statement_list RBLOCK

    LBLOCK          shift and go to state 457


state 422

    (198) throw_statement -> throw new Exception LPAREN params . RPAREN SEMICOLON
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 458
    COMMA           shift and go to state 199


state 423

    (174) exit_statement -> exit LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    use             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    continue        reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    try             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    throw           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 174 (exit_statement -> exit LPAREN expression RPAREN SEMICOLON .)


state 424

    (71) assignment_tail -> VARIABLE LBRACKET expression COMMA . params
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    SEMICOLON       reduce using rule 236 (empty_function -> .)
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    COLON           reduce using rule 236 (empty_function -> .)
    RBRACKET        reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 459
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 425

    (72) assignment_tail -> VARIABLE LBRACKET params RBRACKET .

    SEMICOLON       reduce using rule 72 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RPAREN          reduce using rule 72 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COMMA           reduce using rule 72 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    COLON           reduce using rule 72 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBRACKET        reduce using rule 72 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)
    RBLOCK          reduce using rule 72 (assignment_tail -> VARIABLE LBRACKET params RBRACKET .)


state 426

    (73) assignment_tail -> VARIABLE LBLOCK params RBLOCK .

    SEMICOLON       reduce using rule 73 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RPAREN          reduce using rule 73 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COMMA           reduce using rule 73 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    COLON           reduce using rule 73 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBRACKET        reduce using rule 73 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)
    RBLOCK          reduce using rule 73 (assignment_tail -> VARIABLE LBLOCK params RBLOCK .)


state 427

    (61) var_declaration2 -> VARIABLE EQUAL ID LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 460
    COMMA           shift and go to state 199


state 428

    (62) var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .

    SEMICOLON       reduce using rule 62 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    COMMA           reduce using rule 62 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RPAREN          reduce using rule 62 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    COLON           reduce using rule 62 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RBRACKET        reduce using rule 62 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)
    RBLOCK          reduce using rule 62 (var_declaration2 -> VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2 .)


state 429

    (63) var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .

    SEMICOLON       reduce using rule 63 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    COMMA           reduce using rule 63 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RPAREN          reduce using rule 63 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    COLON           reduce using rule 63 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RBRACKET        reduce using rule 63 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)
    RBLOCK          reduce using rule 63 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID EQUAL expression .)


state 430

    (64) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params . RPAREN
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 461
    COMMA           shift and go to state 199


state 431

    (74) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 462
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 432

    (75) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list . endwhile SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endwhile        shift and go to state 463
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 433

    (76) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN . expression RPAREN SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 464
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 434

    (118) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 465
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 435

    (123) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration_list RBLOCK
    (124) fun_declaration -> function ID LPAREN params RPAREN LBLOCK . declaration_list return_statement RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 466
    return_statement               shift and go to state 18
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 436

    (129) return_statement -> return ID LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    use             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    continue        reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    try             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    throw           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 129 (return_statement -> return ID LPAREN expression RPAREN SEMICOLON .)


state 437

    (81) expression -> additive_expression comp_op additive_expression logical_op additive_expression . comp_op additive_expression
    (102) comp_op -> . LESS
    (103) comp_op -> . LESSEQUAL
    (104) comp_op -> . GREATER
    (105) comp_op -> . GREATEREQUAL
    (106) comp_op -> . DEQUAL
    (107) comp_op -> . DISTINT
    (108) comp_op -> . DIVEQUAL
    (109) comp_op -> . ISEQUAL
    (110) comp_op -> . ISIDENTICAL
    (111) comp_op -> . ISNOTIDENTICAL

    LESS            shift and go to state 211
    LESSEQUAL       shift and go to state 212
    GREATER         shift and go to state 213
    GREATEREQUAL    shift and go to state 214
    DEQUAL          shift and go to state 215
    DISTINT         shift and go to state 216
    DIVEQUAL        shift and go to state 217
    ISEQUAL         shift and go to state 218
    ISIDENTICAL     shift and go to state 219
    ISNOTIDENTICAL  shift and go to state 220

    comp_op                        shift and go to state 467

state 438

    (141) class_body_element -> visibility var_declaration2 SEMICOLON .

    RBLOCK          reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    private         reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    protected       reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    public          reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    var             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT         reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    COMMENT_MULTI   reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    empty           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    include         reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    const           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    print           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    echo            reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    while           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    do              reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    if              reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    function        reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    ID              reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    return          reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    class           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    new             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    interface       reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    trait           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    use             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    continue        reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    CLOSE_TAG       reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    for             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    foreach         reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    switch          reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    try             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    throw           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    exit            reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    VARIABLE        reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    array           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    pow             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    POW             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    abs             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    cos             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    deg2rad         reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    rad2deg         reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    die             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    exp             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    floor           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    isset           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    list            reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    log             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    log10           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    max             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    min             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    rand            reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    round           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    sin             reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    sqrt            reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    unset           reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)
    CADENA          reduce using rule 141 (class_body_element -> visibility var_declaration2 SEMICOLON .)


state 439

    (131) class_extension -> class ID extends ID LBLOCK RBLOCK .

    COMMENT         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    empty           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    include         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    const           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    print           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    echo            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    while           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    do              reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    if              reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    function        reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    ID              reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    return          reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    class           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    new             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    interface       reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    trait           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    use             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    continue        reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    for             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    foreach         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    switch          reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    try             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    throw           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    exit            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    array           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    pow             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    POW             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    abs             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    cos             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    deg2rad         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    rad2deg         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    die             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    exp             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    floor           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    isset           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    list            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    log             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    log10           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    max             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    min             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    rand            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    round           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    sin             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    sqrt            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    unset           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    CADENA          reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    $end            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endwhile        reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    private         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    protected       reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    public          reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    var             reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endfor          reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endforeach      reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    break           reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    endswitch       reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    default         reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)
    case            reduce using rule 131 (class_extension -> class ID extends ID LBLOCK RBLOCK .)


state 440

    (132) class_extension -> class ID extends Exception LBLOCK RBLOCK .

    COMMENT         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    empty           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    include         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    const           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    print           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    echo            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    while           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    do              reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    if              reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    function        reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    ID              reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    return          reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    class           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    new             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    interface       reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    trait           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    use             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    continue        reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    for             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    foreach         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    switch          reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    try             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    throw           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    exit            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    array           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    pow             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    POW             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    abs             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    cos             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    deg2rad         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    rad2deg         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    die             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    exp             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    floor           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    isset           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    list            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    log             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    log10           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    max             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    min             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    rand            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    round           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    sin             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    sqrt            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    unset           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    CADENA          reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    $end            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endwhile        reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    private         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    protected       reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    public          reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    var             reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endfor          reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endforeach      reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    break           reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    endswitch       reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    default         reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)
    case            reduce using rule 132 (class_extension -> class ID extends Exception LBLOCK RBLOCK .)


state 441

    (133) class_extension -> class ID extends ErrorException LBLOCK RBLOCK .

    COMMENT         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    empty           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    include         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    const           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    print           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    echo            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    while           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    do              reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    if              reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    function        reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    ID              reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    return          reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    class           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    new             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    interface       reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    trait           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    use             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    continue        reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    for             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    foreach         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    switch          reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    try             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    throw           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    exit            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    array           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    pow             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    POW             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    abs             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    cos             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    deg2rad         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    rad2deg         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    die             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    exp             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    floor           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    isset           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    list            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    log             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    log10           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    max             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    min             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    rand            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    round           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    sin             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    sqrt            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    unset           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    CADENA          reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    $end            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endwhile        reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    private         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    protected       reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    public          reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    var             reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endfor          reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endforeach      reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    break           reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    endswitch       reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    default         reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)
    case            reduce using rule 133 (class_extension -> class ID extends ErrorException LBLOCK RBLOCK .)


state 442

    (134) class_extension -> class ID extends Error LBLOCK RBLOCK .

    COMMENT         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    empty           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    include         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    const           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    print           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    echo            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    while           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    do              reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    if              reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    function        reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    ID              reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    return          reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    class           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    new             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    interface       reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    trait           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    use             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    continue        reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    for             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    foreach         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    switch          reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    try             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    throw           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    exit            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    array           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    pow             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    POW             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    abs             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    cos             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    deg2rad         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    rad2deg         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    die             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    exp             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    floor           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    isset           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    list            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    log             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    log10           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    max             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    min             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    rand            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    round           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    sin             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    sqrt            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    unset           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    CADENA          reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    $end            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endwhile        reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    private         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    protected       reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    public          reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    var             reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endfor          reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endforeach      reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    break           reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    endswitch       reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    default         reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)
    case            reduce using rule 134 (class_extension -> class ID extends Error LBLOCK RBLOCK .)


state 443

    (135) class_extension -> class ID extends ParseError LBLOCK RBLOCK .

    COMMENT         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    empty           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    include         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    const           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    print           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    echo            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    while           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    do              reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    if              reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    function        reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    ID              reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    return          reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    class           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    new             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    interface       reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    trait           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    use             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    continue        reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    for             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    foreach         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    switch          reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    try             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    throw           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    exit            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    array           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    pow             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    POW             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    abs             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    cos             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    deg2rad         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    rad2deg         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    die             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    exp             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    floor           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    isset           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    list            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    log             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    log10           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    max             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    min             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    rand            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    round           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    sin             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    sqrt            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    unset           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    CADENA          reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    $end            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endwhile        reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    private         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    protected       reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    public          reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    var             reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endfor          reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endforeach      reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    break           reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    endswitch       reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    default         reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)
    case            reduce using rule 135 (class_extension -> class ID extends ParseError LBLOCK RBLOCK .)


state 444

    (136) class_extension -> class ID extends TypeError LBLOCK RBLOCK .

    COMMENT         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    COMMENT_HASHTAG reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    COMMENT_MULTI   reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    empty           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    include         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    const           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    print           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    echo            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    while           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    do              reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    if              reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    function        reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    ID              reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    return          reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    class           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    new             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    interface       reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    trait           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    use             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    continue        reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    CLOSE_TAG       reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    for             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    foreach         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    switch          reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    try             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    throw           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    exit            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    VARIABLE        reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    array           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    pow             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    POW             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    abs             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    cos             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    deg2rad         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    rad2deg         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    die             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    exp             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    floor           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    isset           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    list            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    log             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    log10           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    max             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    min             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    rand            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    round           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    sin             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    sqrt            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    unset           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    CADENA          reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    $end            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    RBLOCK          reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endwhile        reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    private         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    protected       reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    public          reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    var             reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endfor          reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endforeach      reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    break           reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    endswitch       reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    default         reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)
    case            reduce using rule 136 (class_extension -> class ID extends TypeError LBLOCK RBLOCK .)


state 445

    (148) interface_method_declaration -> visibility function ID . LPAREN params RPAREN SEMICOLON

    LPAREN          shift and go to state 468


state 446

    (153) trait_element -> visibility var_declaration SEMICOLON .

    RBLOCK          reduce using rule 153 (trait_element -> visibility var_declaration SEMICOLON .)
    private         reduce using rule 153 (trait_element -> visibility var_declaration SEMICOLON .)
    protected       reduce using rule 153 (trait_element -> visibility var_declaration SEMICOLON .)
    public          reduce using rule 153 (trait_element -> visibility var_declaration SEMICOLON .)
    var             reduce using rule 153 (trait_element -> visibility var_declaration SEMICOLON .)


state 447

    (169) for_loop -> for LPAREN for_init for_expr for_update RPAREN . LBLOCK declaration_list RBLOCK
    (170) for_loop -> for LPAREN for_init for_expr for_update RPAREN . COLON declaration_list endfor SEMICOLON

    LBLOCK          shift and go to state 469
    COLON           shift and go to state 470


state 448

    (175) foreach_loop -> foreach LPAREN expression as expression RPAREN . LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> foreach LPAREN expression as expression RPAREN . COLON declaration_list endforeach SEMICOLON

    LBLOCK          shift and go to state 471
    COLON           shift and go to state 472


state 449

    (177) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks . default_block RBLOCK
    (179) case_blocks -> case_blocks . case_block
    (184) default_block -> . default COLON statement_list
    (185) default_block -> . default COLON statement_list break SEMICOLON
    (186) default_block -> . empty_function
    (182) case_block -> . case expression COLON statement_list
    (183) case_block -> . case expression COLON statement_list break SEMICOLON
    (236) empty_function -> .

    default         shift and go to state 475
    case            shift and go to state 452
    RBLOCK          reduce using rule 236 (empty_function -> .)

    default_block                  shift and go to state 473
    case_block                     shift and go to state 474
    empty_function                 shift and go to state 476

state 450

    (180) case_blocks -> case_block .

    default         reduce using rule 180 (case_blocks -> case_block .)
    case            reduce using rule 180 (case_blocks -> case_block .)
    RBLOCK          reduce using rule 180 (case_blocks -> case_block .)
    endswitch       reduce using rule 180 (case_blocks -> case_block .)


state 451

    (181) case_blocks -> empty_function .

    default         reduce using rule 181 (case_blocks -> empty_function .)
    case            reduce using rule 181 (case_blocks -> empty_function .)
    RBLOCK          reduce using rule 181 (case_blocks -> empty_function .)
    endswitch       reduce using rule 181 (case_blocks -> empty_function .)


state 452

    (182) case_block -> case . expression COLON statement_list
    (183) case_block -> case . expression COLON statement_list break SEMICOLON
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 477
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 453

    (178) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks . default_block endswitch SEMICOLON
    (179) case_blocks -> case_blocks . case_block
    (184) default_block -> . default COLON statement_list
    (185) default_block -> . default COLON statement_list break SEMICOLON
    (186) default_block -> . empty_function
    (182) case_block -> . case expression COLON statement_list
    (183) case_block -> . case expression COLON statement_list break SEMICOLON
    (236) empty_function -> .

    default         shift and go to state 475
    case            shift and go to state 452
    endswitch       reduce using rule 236 (empty_function -> .)

    default_block                  shift and go to state 478
    case_block                     shift and go to state 474
    empty_function                 shift and go to state 476

state 454

    (188) catch_blocks -> catch_blocks catch_block .

    catch           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    finally         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    COMMENT         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    COMMENT_HASHTAG reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    COMMENT_MULTI   reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    empty           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    include         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    const           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    print           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    echo            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    while           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    do              reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    if              reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    function        reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    ID              reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    return          reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    class           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    new             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    interface       reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    trait           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    use             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    continue        reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    CLOSE_TAG       reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    for             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    foreach         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    switch          reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    try             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    throw           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    exit            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    VARIABLE        reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    array           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    pow             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    POW             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    abs             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    cos             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    deg2rad         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    rad2deg         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    die             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    exp             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    floor           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    isset           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    list            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    log             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    log10           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    max             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    min             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    rand            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    round           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    sin             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    sqrt            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    unset           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    CADENA          reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    $end            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    RBLOCK          reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    endwhile        reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    private         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    protected       reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    public          reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    var             reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    endfor          reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    endforeach      reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    break           reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    endswitch       reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    default         reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)
    case            reduce using rule 188 (catch_blocks -> catch_blocks catch_block .)


state 455

    (190) catch_blocks -> catch_blocks finally_block .

    catch           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    finally         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    COMMENT         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    COMMENT_HASHTAG reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    COMMENT_MULTI   reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    empty           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    include         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    const           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    print           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    echo            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    while           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    do              reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    if              reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    function        reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    ID              reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    return          reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    class           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    new             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    interface       reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    trait           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    use             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    continue        reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    CLOSE_TAG       reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    for             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    foreach         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    switch          reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    try             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    throw           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    exit            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    VARIABLE        reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    array           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    pow             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    POW             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    abs             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    cos             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    deg2rad         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    rad2deg         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    die             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    exp             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    floor           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    isset           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    list            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    log             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    log10           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    max             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    min             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    rand            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    round           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    sin             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    sqrt            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    unset           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    CADENA          reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    $end            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    RBLOCK          reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    endwhile        reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    private         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    protected       reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    public          reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    var             reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    endfor          reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    endforeach      reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    break           reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    endswitch       reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    default         reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)
    case            reduce using rule 190 (catch_blocks -> catch_blocks finally_block .)


state 456

    (192) catch_block -> catch LPAREN . list_exception RPAREN LBLOCK statement_list RBLOCK
    (193) list_exception -> . list_exception PIPE exception_statement
    (194) list_exception -> . exception_statement
    (195) exception_statement -> . Exception VARIABLE
    (196) exception_statement -> . ID VARIABLE

    Exception       shift and go to state 481
    ID              shift and go to state 482

    list_exception                 shift and go to state 479
    exception_statement            shift and go to state 480

state 457

    (199) finally_block -> finally LBLOCK . statement_list RBLOCK
    (200) statement_list -> . declaration
    (201) statement_list -> . statement_list declaration
    (202) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (236) empty_function -> .
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    RBLOCK          reduce using rule 236 (empty_function -> .)
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

  ! COMMENT         [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 236 (empty_function -> .) ]
  ! empty           [ reduce using rule 236 (empty_function -> .) ]
  ! include         [ reduce using rule 236 (empty_function -> .) ]
  ! const           [ reduce using rule 236 (empty_function -> .) ]
  ! print           [ reduce using rule 236 (empty_function -> .) ]
  ! echo            [ reduce using rule 236 (empty_function -> .) ]
  ! while           [ reduce using rule 236 (empty_function -> .) ]
  ! do              [ reduce using rule 236 (empty_function -> .) ]
  ! if              [ reduce using rule 236 (empty_function -> .) ]
  ! function        [ reduce using rule 236 (empty_function -> .) ]
  ! ID              [ reduce using rule 236 (empty_function -> .) ]
  ! return          [ reduce using rule 236 (empty_function -> .) ]
  ! class           [ reduce using rule 236 (empty_function -> .) ]
  ! new             [ reduce using rule 236 (empty_function -> .) ]
  ! interface       [ reduce using rule 236 (empty_function -> .) ]
  ! trait           [ reduce using rule 236 (empty_function -> .) ]
  ! use             [ reduce using rule 236 (empty_function -> .) ]
  ! continue        [ reduce using rule 236 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 236 (empty_function -> .) ]
  ! for             [ reduce using rule 236 (empty_function -> .) ]
  ! foreach         [ reduce using rule 236 (empty_function -> .) ]
  ! switch          [ reduce using rule 236 (empty_function -> .) ]
  ! try             [ reduce using rule 236 (empty_function -> .) ]
  ! throw           [ reduce using rule 236 (empty_function -> .) ]
  ! exit            [ reduce using rule 236 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 236 (empty_function -> .) ]
  ! array           [ reduce using rule 236 (empty_function -> .) ]
  ! pow             [ reduce using rule 236 (empty_function -> .) ]
  ! POW             [ reduce using rule 236 (empty_function -> .) ]
  ! abs             [ reduce using rule 236 (empty_function -> .) ]
  ! cos             [ reduce using rule 236 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 236 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 236 (empty_function -> .) ]
  ! die             [ reduce using rule 236 (empty_function -> .) ]
  ! exp             [ reduce using rule 236 (empty_function -> .) ]
  ! floor           [ reduce using rule 236 (empty_function -> .) ]
  ! isset           [ reduce using rule 236 (empty_function -> .) ]
  ! list            [ reduce using rule 236 (empty_function -> .) ]
  ! log             [ reduce using rule 236 (empty_function -> .) ]
  ! log10           [ reduce using rule 236 (empty_function -> .) ]
  ! max             [ reduce using rule 236 (empty_function -> .) ]
  ! min             [ reduce using rule 236 (empty_function -> .) ]
  ! rand            [ reduce using rule 236 (empty_function -> .) ]
  ! round           [ reduce using rule 236 (empty_function -> .) ]
  ! sin             [ reduce using rule 236 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 236 (empty_function -> .) ]
  ! unset           [ reduce using rule 236 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 236 (empty_function -> .) ]

    statement_list                 shift and go to state 483
    declaration                    shift and go to state 248
    empty_function                 shift and go to state 249
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 458

    (198) throw_statement -> throw new Exception LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 484


state 459

    (71) assignment_tail -> VARIABLE LBRACKET expression COMMA params .
    (163) params -> params . COMMA single_param

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 71 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RPAREN          reduce using rule 71 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COLON           reduce using rule 71 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBRACKET        reduce using rule 71 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    RBLOCK          reduce using rule 71 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .)
    COMMA           shift and go to state 199

  ! COMMA           [ reduce using rule 71 (assignment_tail -> VARIABLE LBRACKET expression COMMA params .) ]


state 460

    (61) var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .

    SEMICOLON       reduce using rule 61 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    COMMA           reduce using rule 61 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 61 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    COLON           reduce using rule 61 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 61 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 61 (var_declaration2 -> VARIABLE EQUAL ID LPAREN params RPAREN .)


state 461

    (64) var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .

    SEMICOLON       reduce using rule 64 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    COMMA           reduce using rule 64 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 64 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    COLON           reduce using rule 64 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RBRACKET        reduce using rule 64 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)
    RBLOCK          reduce using rule 64 (var_declaration2 -> VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN .)


state 462

    (74) iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 74 (iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK .)


state 463

    (75) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile . SEMICOLON

    SEMICOLON       shift and go to state 485


state 464

    (76) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression . RPAREN SEMICOLON

    RPAREN          shift and go to state 486


state 465

    (118) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (119) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (120) else_part -> . else LBLOCK declaration_list RBLOCK
    (121) else_part -> . endif
    (122) else_part -> . empty_function
    (236) empty_function -> .

    elseif          shift and go to state 488
    else            shift and go to state 489
    endif           shift and go to state 490
    COMMENT         reduce using rule 236 (empty_function -> .)
    COMMENT_HASHTAG reduce using rule 236 (empty_function -> .)
    COMMENT_MULTI   reduce using rule 236 (empty_function -> .)
    empty           reduce using rule 236 (empty_function -> .)
    include         reduce using rule 236 (empty_function -> .)
    const           reduce using rule 236 (empty_function -> .)
    print           reduce using rule 236 (empty_function -> .)
    echo            reduce using rule 236 (empty_function -> .)
    while           reduce using rule 236 (empty_function -> .)
    do              reduce using rule 236 (empty_function -> .)
    if              reduce using rule 236 (empty_function -> .)
    function        reduce using rule 236 (empty_function -> .)
    ID              reduce using rule 236 (empty_function -> .)
    return          reduce using rule 236 (empty_function -> .)
    class           reduce using rule 236 (empty_function -> .)
    new             reduce using rule 236 (empty_function -> .)
    interface       reduce using rule 236 (empty_function -> .)
    trait           reduce using rule 236 (empty_function -> .)
    use             reduce using rule 236 (empty_function -> .)
    continue        reduce using rule 236 (empty_function -> .)
    CLOSE_TAG       reduce using rule 236 (empty_function -> .)
    for             reduce using rule 236 (empty_function -> .)
    foreach         reduce using rule 236 (empty_function -> .)
    switch          reduce using rule 236 (empty_function -> .)
    try             reduce using rule 236 (empty_function -> .)
    throw           reduce using rule 236 (empty_function -> .)
    exit            reduce using rule 236 (empty_function -> .)
    VARIABLE        reduce using rule 236 (empty_function -> .)
    array           reduce using rule 236 (empty_function -> .)
    pow             reduce using rule 236 (empty_function -> .)
    POW             reduce using rule 236 (empty_function -> .)
    abs             reduce using rule 236 (empty_function -> .)
    cos             reduce using rule 236 (empty_function -> .)
    deg2rad         reduce using rule 236 (empty_function -> .)
    rad2deg         reduce using rule 236 (empty_function -> .)
    die             reduce using rule 236 (empty_function -> .)
    exp             reduce using rule 236 (empty_function -> .)
    floor           reduce using rule 236 (empty_function -> .)
    isset           reduce using rule 236 (empty_function -> .)
    list            reduce using rule 236 (empty_function -> .)
    log             reduce using rule 236 (empty_function -> .)
    log10           reduce using rule 236 (empty_function -> .)
    max             reduce using rule 236 (empty_function -> .)
    min             reduce using rule 236 (empty_function -> .)
    rand            reduce using rule 236 (empty_function -> .)
    round           reduce using rule 236 (empty_function -> .)
    sin             reduce using rule 236 (empty_function -> .)
    sqrt            reduce using rule 236 (empty_function -> .)
    unset           reduce using rule 236 (empty_function -> .)
    CADENA          reduce using rule 236 (empty_function -> .)
    $end            reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)
    endwhile        reduce using rule 236 (empty_function -> .)
    private         reduce using rule 236 (empty_function -> .)
    protected       reduce using rule 236 (empty_function -> .)
    public          reduce using rule 236 (empty_function -> .)
    var             reduce using rule 236 (empty_function -> .)
    endfor          reduce using rule 236 (empty_function -> .)
    endforeach      reduce using rule 236 (empty_function -> .)
    break           reduce using rule 236 (empty_function -> .)
    endswitch       reduce using rule 236 (empty_function -> .)
    default         reduce using rule 236 (empty_function -> .)
    case            reduce using rule 236 (empty_function -> .)

    else_part                      shift and go to state 487
    empty_function                 shift and go to state 491

state 466

    (123) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list . RBLOCK
    (124) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list . return_statement RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 492
    return          shift and go to state 45
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    return_statement               shift and go to state 493
    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 467

    (81) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op . additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    additive_expression            shift and go to state 494
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 468

    (148) interface_method_declaration -> visibility function ID LPAREN . params RPAREN SEMICOLON
    (162) params -> . single_param
    (163) params -> . params COMMA single_param
    (164) single_param -> . var_declaration2
    (165) single_param -> . NUMBER
    (166) single_param -> . CADENA
    (167) single_param -> . callable_declaration
    (168) single_param -> . empty_function
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (161) callable_declaration -> . callable VARIABLE
    (236) empty_function -> .
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    NUMBER          shift and go to state 178
    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 59
    callable        shift and go to state 119
    RPAREN          reduce using rule 236 (empty_function -> .)
    COMMA           reduce using rule 236 (empty_function -> .)
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82

    params                         shift and go to state 495
    single_param                   shift and go to state 108
    var_declaration2               shift and go to state 110
    callable_declaration           shift and go to state 113
    empty_function                 shift and go to state 114
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 469

    (169) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 496
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 470

    (170) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON . declaration_list endfor SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 497
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 471

    (175) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 498
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 472

    (176) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON . declaration_list endforeach SEMICOLON
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 499
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 473

    (177) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block . RBLOCK

    RBLOCK          shift and go to state 500


state 474

    (179) case_blocks -> case_blocks case_block .

    default         reduce using rule 179 (case_blocks -> case_blocks case_block .)
    case            reduce using rule 179 (case_blocks -> case_blocks case_block .)
    RBLOCK          reduce using rule 179 (case_blocks -> case_blocks case_block .)
    endswitch       reduce using rule 179 (case_blocks -> case_blocks case_block .)


state 475

    (184) default_block -> default . COLON statement_list
    (185) default_block -> default . COLON statement_list break SEMICOLON

    COLON           shift and go to state 501


state 476

    (186) default_block -> empty_function .

    RBLOCK          reduce using rule 186 (default_block -> empty_function .)
    endswitch       reduce using rule 186 (default_block -> empty_function .)


state 477

    (182) case_block -> case expression . COLON statement_list
    (183) case_block -> case expression . COLON statement_list break SEMICOLON

    COLON           shift and go to state 502


state 478

    (178) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block . endswitch SEMICOLON

    endswitch       shift and go to state 503


state 479

    (192) catch_block -> catch LPAREN list_exception . RPAREN LBLOCK statement_list RBLOCK
    (193) list_exception -> list_exception . PIPE exception_statement

    RPAREN          shift and go to state 504
    PIPE            shift and go to state 505


state 480

    (194) list_exception -> exception_statement .

    RPAREN          reduce using rule 194 (list_exception -> exception_statement .)
    PIPE            reduce using rule 194 (list_exception -> exception_statement .)


state 481

    (195) exception_statement -> Exception . VARIABLE

    VARIABLE        shift and go to state 506


state 482

    (196) exception_statement -> ID . VARIABLE

    VARIABLE        shift and go to state 507


state 483

    (199) finally_block -> finally LBLOCK statement_list . RBLOCK
    (201) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 508
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 344
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 484

    (198) throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .

    COMMENT         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    empty           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    include         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    const           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    print           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    echo            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    while           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    do              reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    if              reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    function        reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    ID              reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    return          reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    class           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    new             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    interface       reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    trait           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    use             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    continue        reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    for             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    foreach         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    switch          reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    try             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    throw           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    exit            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    array           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    pow             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    POW             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    abs             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    cos             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    deg2rad         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    rad2deg         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    die             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    exp             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    floor           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    isset           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    list            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    log             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    log10           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    max             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    min             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    rand            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    round           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    sin             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    sqrt            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    unset           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    CADENA          reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    $end            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endwhile        reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    private         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    protected       reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    public          reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    var             reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endfor          reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endforeach      reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    break           reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    endswitch       reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    default         reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)
    case            reduce using rule 198 (throw_statement -> throw new Exception LPAREN params RPAREN SEMICOLON .)


state 485

    (75) iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .

    COMMENT         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    COMMENT_MULTI   reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    empty           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    include         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    const           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    print           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    echo            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    while           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    do              reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    if              reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    function        reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    ID              reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    return          reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    class           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    new             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    interface       reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    trait           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    use             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    continue        reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    CLOSE_TAG       reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    for             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    foreach         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    switch          reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    try             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    throw           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    exit            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    VARIABLE        reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    array           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    pow             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    POW             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    abs             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    cos             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    deg2rad         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    rad2deg         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    die             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    exp             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    floor           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    isset           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    list            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    log             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    log10           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    max             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    min             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    rand            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    round           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    sin             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    sqrt            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    unset           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    CADENA          reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    $end            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    RBLOCK          reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endwhile        reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    private         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    protected       reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    public          reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    var             reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endfor          reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endforeach      reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    break           reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    endswitch       reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    default         reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)
    case            reduce using rule 75 (iteration_stmt -> while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON .)


state 486

    (76) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 509


state 487

    (118) if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    do              reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    return          reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    interface       reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    trait           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    use             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    continue        reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    switch          reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    try             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    throw           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    array           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    pow             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    POW             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    abs             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    cos             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    deg2rad         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rad2deg         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    die             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exp             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    floor           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    isset           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    list            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log10           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    max             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    min             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rand            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    round           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sin             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sqrt            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    unset           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CADENA          reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endwhile        reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    private         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    protected       reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    public          reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    var             reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endfor          reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endforeach      reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    break           reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endswitch       reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    default         reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    case            reduce using rule 118 (if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)


state 488

    (119) else_part -> elseif . LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part

    LPAREN          shift and go to state 510


state 489

    (120) else_part -> else . LBLOCK declaration_list RBLOCK

    LBLOCK          shift and go to state 511


state 490

    (121) else_part -> endif .

    COMMENT         reduce using rule 121 (else_part -> endif .)
    COMMENT_HASHTAG reduce using rule 121 (else_part -> endif .)
    COMMENT_MULTI   reduce using rule 121 (else_part -> endif .)
    empty           reduce using rule 121 (else_part -> endif .)
    include         reduce using rule 121 (else_part -> endif .)
    const           reduce using rule 121 (else_part -> endif .)
    print           reduce using rule 121 (else_part -> endif .)
    echo            reduce using rule 121 (else_part -> endif .)
    while           reduce using rule 121 (else_part -> endif .)
    do              reduce using rule 121 (else_part -> endif .)
    if              reduce using rule 121 (else_part -> endif .)
    function        reduce using rule 121 (else_part -> endif .)
    ID              reduce using rule 121 (else_part -> endif .)
    return          reduce using rule 121 (else_part -> endif .)
    class           reduce using rule 121 (else_part -> endif .)
    new             reduce using rule 121 (else_part -> endif .)
    interface       reduce using rule 121 (else_part -> endif .)
    trait           reduce using rule 121 (else_part -> endif .)
    use             reduce using rule 121 (else_part -> endif .)
    continue        reduce using rule 121 (else_part -> endif .)
    CLOSE_TAG       reduce using rule 121 (else_part -> endif .)
    for             reduce using rule 121 (else_part -> endif .)
    foreach         reduce using rule 121 (else_part -> endif .)
    switch          reduce using rule 121 (else_part -> endif .)
    try             reduce using rule 121 (else_part -> endif .)
    throw           reduce using rule 121 (else_part -> endif .)
    exit            reduce using rule 121 (else_part -> endif .)
    VARIABLE        reduce using rule 121 (else_part -> endif .)
    array           reduce using rule 121 (else_part -> endif .)
    pow             reduce using rule 121 (else_part -> endif .)
    POW             reduce using rule 121 (else_part -> endif .)
    abs             reduce using rule 121 (else_part -> endif .)
    cos             reduce using rule 121 (else_part -> endif .)
    deg2rad         reduce using rule 121 (else_part -> endif .)
    rad2deg         reduce using rule 121 (else_part -> endif .)
    die             reduce using rule 121 (else_part -> endif .)
    exp             reduce using rule 121 (else_part -> endif .)
    floor           reduce using rule 121 (else_part -> endif .)
    isset           reduce using rule 121 (else_part -> endif .)
    list            reduce using rule 121 (else_part -> endif .)
    log             reduce using rule 121 (else_part -> endif .)
    log10           reduce using rule 121 (else_part -> endif .)
    max             reduce using rule 121 (else_part -> endif .)
    min             reduce using rule 121 (else_part -> endif .)
    rand            reduce using rule 121 (else_part -> endif .)
    round           reduce using rule 121 (else_part -> endif .)
    sin             reduce using rule 121 (else_part -> endif .)
    sqrt            reduce using rule 121 (else_part -> endif .)
    unset           reduce using rule 121 (else_part -> endif .)
    CADENA          reduce using rule 121 (else_part -> endif .)
    $end            reduce using rule 121 (else_part -> endif .)
    RBLOCK          reduce using rule 121 (else_part -> endif .)
    endwhile        reduce using rule 121 (else_part -> endif .)
    private         reduce using rule 121 (else_part -> endif .)
    protected       reduce using rule 121 (else_part -> endif .)
    public          reduce using rule 121 (else_part -> endif .)
    var             reduce using rule 121 (else_part -> endif .)
    endfor          reduce using rule 121 (else_part -> endif .)
    endforeach      reduce using rule 121 (else_part -> endif .)
    break           reduce using rule 121 (else_part -> endif .)
    endswitch       reduce using rule 121 (else_part -> endif .)
    default         reduce using rule 121 (else_part -> endif .)
    case            reduce using rule 121 (else_part -> endif .)


state 491

    (122) else_part -> empty_function .

    COMMENT         reduce using rule 122 (else_part -> empty_function .)
    COMMENT_HASHTAG reduce using rule 122 (else_part -> empty_function .)
    COMMENT_MULTI   reduce using rule 122 (else_part -> empty_function .)
    empty           reduce using rule 122 (else_part -> empty_function .)
    include         reduce using rule 122 (else_part -> empty_function .)
    const           reduce using rule 122 (else_part -> empty_function .)
    print           reduce using rule 122 (else_part -> empty_function .)
    echo            reduce using rule 122 (else_part -> empty_function .)
    while           reduce using rule 122 (else_part -> empty_function .)
    do              reduce using rule 122 (else_part -> empty_function .)
    if              reduce using rule 122 (else_part -> empty_function .)
    function        reduce using rule 122 (else_part -> empty_function .)
    ID              reduce using rule 122 (else_part -> empty_function .)
    return          reduce using rule 122 (else_part -> empty_function .)
    class           reduce using rule 122 (else_part -> empty_function .)
    new             reduce using rule 122 (else_part -> empty_function .)
    interface       reduce using rule 122 (else_part -> empty_function .)
    trait           reduce using rule 122 (else_part -> empty_function .)
    use             reduce using rule 122 (else_part -> empty_function .)
    continue        reduce using rule 122 (else_part -> empty_function .)
    CLOSE_TAG       reduce using rule 122 (else_part -> empty_function .)
    for             reduce using rule 122 (else_part -> empty_function .)
    foreach         reduce using rule 122 (else_part -> empty_function .)
    switch          reduce using rule 122 (else_part -> empty_function .)
    try             reduce using rule 122 (else_part -> empty_function .)
    throw           reduce using rule 122 (else_part -> empty_function .)
    exit            reduce using rule 122 (else_part -> empty_function .)
    VARIABLE        reduce using rule 122 (else_part -> empty_function .)
    array           reduce using rule 122 (else_part -> empty_function .)
    pow             reduce using rule 122 (else_part -> empty_function .)
    POW             reduce using rule 122 (else_part -> empty_function .)
    abs             reduce using rule 122 (else_part -> empty_function .)
    cos             reduce using rule 122 (else_part -> empty_function .)
    deg2rad         reduce using rule 122 (else_part -> empty_function .)
    rad2deg         reduce using rule 122 (else_part -> empty_function .)
    die             reduce using rule 122 (else_part -> empty_function .)
    exp             reduce using rule 122 (else_part -> empty_function .)
    floor           reduce using rule 122 (else_part -> empty_function .)
    isset           reduce using rule 122 (else_part -> empty_function .)
    list            reduce using rule 122 (else_part -> empty_function .)
    log             reduce using rule 122 (else_part -> empty_function .)
    log10           reduce using rule 122 (else_part -> empty_function .)
    max             reduce using rule 122 (else_part -> empty_function .)
    min             reduce using rule 122 (else_part -> empty_function .)
    rand            reduce using rule 122 (else_part -> empty_function .)
    round           reduce using rule 122 (else_part -> empty_function .)
    sin             reduce using rule 122 (else_part -> empty_function .)
    sqrt            reduce using rule 122 (else_part -> empty_function .)
    unset           reduce using rule 122 (else_part -> empty_function .)
    CADENA          reduce using rule 122 (else_part -> empty_function .)
    $end            reduce using rule 122 (else_part -> empty_function .)
    RBLOCK          reduce using rule 122 (else_part -> empty_function .)
    endwhile        reduce using rule 122 (else_part -> empty_function .)
    private         reduce using rule 122 (else_part -> empty_function .)
    protected       reduce using rule 122 (else_part -> empty_function .)
    public          reduce using rule 122 (else_part -> empty_function .)
    var             reduce using rule 122 (else_part -> empty_function .)
    endfor          reduce using rule 122 (else_part -> empty_function .)
    endforeach      reduce using rule 122 (else_part -> empty_function .)
    break           reduce using rule 122 (else_part -> empty_function .)
    endswitch       reduce using rule 122 (else_part -> empty_function .)
    default         reduce using rule 122 (else_part -> empty_function .)
    case            reduce using rule 122 (else_part -> empty_function .)


state 492

    (123) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 123 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK .)


state 493

    (124) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement . RBLOCK
    (18) declaration -> return_statement .

  ! shift/reduce conflict for RBLOCK resolved as shift
    RBLOCK          shift and go to state 512
    return          reduce using rule 18 (declaration -> return_statement .)
    COMMENT         reduce using rule 18 (declaration -> return_statement .)
    COMMENT_HASHTAG reduce using rule 18 (declaration -> return_statement .)
    COMMENT_MULTI   reduce using rule 18 (declaration -> return_statement .)
    empty           reduce using rule 18 (declaration -> return_statement .)
    include         reduce using rule 18 (declaration -> return_statement .)
    const           reduce using rule 18 (declaration -> return_statement .)
    print           reduce using rule 18 (declaration -> return_statement .)
    echo            reduce using rule 18 (declaration -> return_statement .)
    while           reduce using rule 18 (declaration -> return_statement .)
    do              reduce using rule 18 (declaration -> return_statement .)
    if              reduce using rule 18 (declaration -> return_statement .)
    function        reduce using rule 18 (declaration -> return_statement .)
    ID              reduce using rule 18 (declaration -> return_statement .)
    class           reduce using rule 18 (declaration -> return_statement .)
    new             reduce using rule 18 (declaration -> return_statement .)
    interface       reduce using rule 18 (declaration -> return_statement .)
    trait           reduce using rule 18 (declaration -> return_statement .)
    use             reduce using rule 18 (declaration -> return_statement .)
    continue        reduce using rule 18 (declaration -> return_statement .)
    CLOSE_TAG       reduce using rule 18 (declaration -> return_statement .)
    for             reduce using rule 18 (declaration -> return_statement .)
    foreach         reduce using rule 18 (declaration -> return_statement .)
    switch          reduce using rule 18 (declaration -> return_statement .)
    try             reduce using rule 18 (declaration -> return_statement .)
    throw           reduce using rule 18 (declaration -> return_statement .)
    exit            reduce using rule 18 (declaration -> return_statement .)
    VARIABLE        reduce using rule 18 (declaration -> return_statement .)
    array           reduce using rule 18 (declaration -> return_statement .)
    pow             reduce using rule 18 (declaration -> return_statement .)
    POW             reduce using rule 18 (declaration -> return_statement .)
    abs             reduce using rule 18 (declaration -> return_statement .)
    cos             reduce using rule 18 (declaration -> return_statement .)
    deg2rad         reduce using rule 18 (declaration -> return_statement .)
    rad2deg         reduce using rule 18 (declaration -> return_statement .)
    die             reduce using rule 18 (declaration -> return_statement .)
    exp             reduce using rule 18 (declaration -> return_statement .)
    floor           reduce using rule 18 (declaration -> return_statement .)
    isset           reduce using rule 18 (declaration -> return_statement .)
    list            reduce using rule 18 (declaration -> return_statement .)
    log             reduce using rule 18 (declaration -> return_statement .)
    log10           reduce using rule 18 (declaration -> return_statement .)
    max             reduce using rule 18 (declaration -> return_statement .)
    min             reduce using rule 18 (declaration -> return_statement .)
    rand            reduce using rule 18 (declaration -> return_statement .)
    round           reduce using rule 18 (declaration -> return_statement .)
    sin             reduce using rule 18 (declaration -> return_statement .)
    sqrt            reduce using rule 18 (declaration -> return_statement .)
    unset           reduce using rule 18 (declaration -> return_statement .)
    CADENA          reduce using rule 18 (declaration -> return_statement .)

  ! RBLOCK          [ reduce using rule 18 (declaration -> return_statement .) ]


state 494

    (81) expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .

    SEMICOLON       reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RPAREN          reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COMMA           reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    COLON           reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBRACKET        reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    RBLOCK          reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)
    as              reduce using rule 81 (expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression .)


state 495

    (148) interface_method_declaration -> visibility function ID LPAREN params . RPAREN SEMICOLON
    (163) params -> params . COMMA single_param

    RPAREN          shift and go to state 513
    COMMA           shift and go to state 199


state 496

    (169) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 514
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 497

    (170) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list . endfor SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endfor          shift and go to state 515
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 498

    (175) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 516
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 499

    (176) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list . endforeach SEMICOLON
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    endforeach      shift and go to state 517
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 500

    (177) switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .

    COMMENT         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    COMMENT_HASHTAG reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    COMMENT_MULTI   reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    empty           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    include         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    const           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    print           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    echo            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    while           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    do              reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    if              reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    function        reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    ID              reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    return          reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    class           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    new             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    interface       reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    trait           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    use             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    continue        reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    CLOSE_TAG       reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    for             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    foreach         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    switch          reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    try             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    throw           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    exit            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    VARIABLE        reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    array           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    pow             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    POW             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    abs             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    cos             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    deg2rad         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    rad2deg         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    die             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    exp             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    floor           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    isset           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    list            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    log             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    log10           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    max             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    min             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    rand            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    round           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    sin             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    sqrt            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    unset           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    CADENA          reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    $end            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    RBLOCK          reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endwhile        reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    private         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    protected       reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    public          reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    var             reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endfor          reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endforeach      reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    break           reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    endswitch       reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    default         reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)
    case            reduce using rule 177 (switch_statement -> switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK .)


state 501

    (184) default_block -> default COLON . statement_list
    (185) default_block -> default COLON . statement_list break SEMICOLON
    (200) statement_list -> . declaration
    (201) statement_list -> . statement_list declaration
    (202) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (236) empty_function -> .
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    break           reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)
    endswitch       reduce using rule 236 (empty_function -> .)
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

  ! COMMENT         [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 236 (empty_function -> .) ]
  ! empty           [ reduce using rule 236 (empty_function -> .) ]
  ! include         [ reduce using rule 236 (empty_function -> .) ]
  ! const           [ reduce using rule 236 (empty_function -> .) ]
  ! print           [ reduce using rule 236 (empty_function -> .) ]
  ! echo            [ reduce using rule 236 (empty_function -> .) ]
  ! while           [ reduce using rule 236 (empty_function -> .) ]
  ! do              [ reduce using rule 236 (empty_function -> .) ]
  ! if              [ reduce using rule 236 (empty_function -> .) ]
  ! function        [ reduce using rule 236 (empty_function -> .) ]
  ! ID              [ reduce using rule 236 (empty_function -> .) ]
  ! return          [ reduce using rule 236 (empty_function -> .) ]
  ! class           [ reduce using rule 236 (empty_function -> .) ]
  ! new             [ reduce using rule 236 (empty_function -> .) ]
  ! interface       [ reduce using rule 236 (empty_function -> .) ]
  ! trait           [ reduce using rule 236 (empty_function -> .) ]
  ! use             [ reduce using rule 236 (empty_function -> .) ]
  ! continue        [ reduce using rule 236 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 236 (empty_function -> .) ]
  ! for             [ reduce using rule 236 (empty_function -> .) ]
  ! foreach         [ reduce using rule 236 (empty_function -> .) ]
  ! switch          [ reduce using rule 236 (empty_function -> .) ]
  ! try             [ reduce using rule 236 (empty_function -> .) ]
  ! throw           [ reduce using rule 236 (empty_function -> .) ]
  ! exit            [ reduce using rule 236 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 236 (empty_function -> .) ]
  ! array           [ reduce using rule 236 (empty_function -> .) ]
  ! pow             [ reduce using rule 236 (empty_function -> .) ]
  ! POW             [ reduce using rule 236 (empty_function -> .) ]
  ! abs             [ reduce using rule 236 (empty_function -> .) ]
  ! cos             [ reduce using rule 236 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 236 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 236 (empty_function -> .) ]
  ! die             [ reduce using rule 236 (empty_function -> .) ]
  ! exp             [ reduce using rule 236 (empty_function -> .) ]
  ! floor           [ reduce using rule 236 (empty_function -> .) ]
  ! isset           [ reduce using rule 236 (empty_function -> .) ]
  ! list            [ reduce using rule 236 (empty_function -> .) ]
  ! log             [ reduce using rule 236 (empty_function -> .) ]
  ! log10           [ reduce using rule 236 (empty_function -> .) ]
  ! max             [ reduce using rule 236 (empty_function -> .) ]
  ! min             [ reduce using rule 236 (empty_function -> .) ]
  ! rand            [ reduce using rule 236 (empty_function -> .) ]
  ! round           [ reduce using rule 236 (empty_function -> .) ]
  ! sin             [ reduce using rule 236 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 236 (empty_function -> .) ]
  ! unset           [ reduce using rule 236 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 236 (empty_function -> .) ]

    statement_list                 shift and go to state 518
    declaration                    shift and go to state 248
    empty_function                 shift and go to state 249
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 502

    (182) case_block -> case expression COLON . statement_list
    (183) case_block -> case expression COLON . statement_list break SEMICOLON
    (200) statement_list -> . declaration
    (201) statement_list -> . statement_list declaration
    (202) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (236) empty_function -> .
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    break           reduce using rule 236 (empty_function -> .)
    default         reduce using rule 236 (empty_function -> .)
    case            reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)
    endswitch       reduce using rule 236 (empty_function -> .)
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

  ! COMMENT         [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 236 (empty_function -> .) ]
  ! empty           [ reduce using rule 236 (empty_function -> .) ]
  ! include         [ reduce using rule 236 (empty_function -> .) ]
  ! const           [ reduce using rule 236 (empty_function -> .) ]
  ! print           [ reduce using rule 236 (empty_function -> .) ]
  ! echo            [ reduce using rule 236 (empty_function -> .) ]
  ! while           [ reduce using rule 236 (empty_function -> .) ]
  ! do              [ reduce using rule 236 (empty_function -> .) ]
  ! if              [ reduce using rule 236 (empty_function -> .) ]
  ! function        [ reduce using rule 236 (empty_function -> .) ]
  ! ID              [ reduce using rule 236 (empty_function -> .) ]
  ! return          [ reduce using rule 236 (empty_function -> .) ]
  ! class           [ reduce using rule 236 (empty_function -> .) ]
  ! new             [ reduce using rule 236 (empty_function -> .) ]
  ! interface       [ reduce using rule 236 (empty_function -> .) ]
  ! trait           [ reduce using rule 236 (empty_function -> .) ]
  ! use             [ reduce using rule 236 (empty_function -> .) ]
  ! continue        [ reduce using rule 236 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 236 (empty_function -> .) ]
  ! for             [ reduce using rule 236 (empty_function -> .) ]
  ! foreach         [ reduce using rule 236 (empty_function -> .) ]
  ! switch          [ reduce using rule 236 (empty_function -> .) ]
  ! try             [ reduce using rule 236 (empty_function -> .) ]
  ! throw           [ reduce using rule 236 (empty_function -> .) ]
  ! exit            [ reduce using rule 236 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 236 (empty_function -> .) ]
  ! array           [ reduce using rule 236 (empty_function -> .) ]
  ! pow             [ reduce using rule 236 (empty_function -> .) ]
  ! POW             [ reduce using rule 236 (empty_function -> .) ]
  ! abs             [ reduce using rule 236 (empty_function -> .) ]
  ! cos             [ reduce using rule 236 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 236 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 236 (empty_function -> .) ]
  ! die             [ reduce using rule 236 (empty_function -> .) ]
  ! exp             [ reduce using rule 236 (empty_function -> .) ]
  ! floor           [ reduce using rule 236 (empty_function -> .) ]
  ! isset           [ reduce using rule 236 (empty_function -> .) ]
  ! list            [ reduce using rule 236 (empty_function -> .) ]
  ! log             [ reduce using rule 236 (empty_function -> .) ]
  ! log10           [ reduce using rule 236 (empty_function -> .) ]
  ! max             [ reduce using rule 236 (empty_function -> .) ]
  ! min             [ reduce using rule 236 (empty_function -> .) ]
  ! rand            [ reduce using rule 236 (empty_function -> .) ]
  ! round           [ reduce using rule 236 (empty_function -> .) ]
  ! sin             [ reduce using rule 236 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 236 (empty_function -> .) ]
  ! unset           [ reduce using rule 236 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 236 (empty_function -> .) ]

    statement_list                 shift and go to state 519
    declaration                    shift and go to state 248
    empty_function                 shift and go to state 249
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 503

    (178) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch . SEMICOLON

    SEMICOLON       shift and go to state 520


state 504

    (192) catch_block -> catch LPAREN list_exception RPAREN . LBLOCK statement_list RBLOCK

    LBLOCK          shift and go to state 521


state 505

    (193) list_exception -> list_exception PIPE . exception_statement
    (195) exception_statement -> . Exception VARIABLE
    (196) exception_statement -> . ID VARIABLE

    Exception       shift and go to state 481
    ID              shift and go to state 482

    exception_statement            shift and go to state 522

state 506

    (195) exception_statement -> Exception VARIABLE .

    RPAREN          reduce using rule 195 (exception_statement -> Exception VARIABLE .)
    PIPE            reduce using rule 195 (exception_statement -> Exception VARIABLE .)


state 507

    (196) exception_statement -> ID VARIABLE .

    RPAREN          reduce using rule 196 (exception_statement -> ID VARIABLE .)
    PIPE            reduce using rule 196 (exception_statement -> ID VARIABLE .)


state 508

    (199) finally_block -> finally LBLOCK statement_list RBLOCK .

    catch           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    finally         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    COMMENT         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    empty           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    include         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    const           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    print           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    echo            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    while           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    do              reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    if              reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    function        reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    ID              reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    return          reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    class           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    new             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    interface       reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    trait           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    use             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    continue        reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    CLOSE_TAG       reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    for             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    foreach         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    switch          reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    try             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    throw           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    exit            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    VARIABLE        reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    array           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    pow             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    POW             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    abs             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    cos             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    deg2rad         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    rad2deg         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    die             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    exp             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    floor           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    isset           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    list            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    log             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    log10           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    max             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    min             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    rand            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    round           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    sin             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    sqrt            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    unset           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    CADENA          reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    $end            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    RBLOCK          reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endwhile        reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    private         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    protected       reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    public          reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    var             reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endfor          reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endforeach      reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    break           reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    endswitch       reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    default         reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)
    case            reduce using rule 199 (finally_block -> finally LBLOCK statement_list RBLOCK .)


state 509

    (76) iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .

    COMMENT         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    COMMENT_MULTI   reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    empty           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    include         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    const           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    print           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    echo            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    while           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    do              reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    if              reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    function        reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    ID              reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    return          reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    class           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    new             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    interface       reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    trait           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    use             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    continue        reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    CLOSE_TAG       reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    for             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    foreach         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    switch          reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    try             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    throw           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    exit            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    VARIABLE        reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    array           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    pow             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    POW             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    abs             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    cos             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    deg2rad         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    rad2deg         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    die             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    exp             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    floor           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    isset           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    list            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    log             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    log10           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    max             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    min             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    rand            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    round           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    sin             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    sqrt            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    unset           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    CADENA          reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    RBLOCK          reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endwhile        reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    private         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    protected       reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    public          reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    var             reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endfor          reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endforeach      reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    break           reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    endswitch       reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    default         reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)
    case            reduce using rule 76 (iteration_stmt -> do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON .)


state 510

    (119) else_part -> elseif LPAREN . expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (78) expression -> . additive_expression
    (79) expression -> . additive_expression logical_op additive_expression
    (80) expression -> . additive_expression comp_op additive_expression
    (81) expression -> . additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression
    (82) expression -> . additive_expression bits_op additive_expression
    (83) additive_expression -> . term
    (84) additive_expression -> . term math_op term
    (85) term -> . MINUS term
    (86) term -> . factor
    (87) term -> . factor increment_decrement_op
    (88) term -> . increment_decrement_op factor
    (89) factor -> . NUMBER
    (90) factor -> . VARIABLE
    (91) factor -> . LPAREN expression RPAREN
    (92) increment_decrement_op -> . PLUSPLUS
    (93) increment_decrement_op -> . MINUSMINUS

    MINUS           shift and go to state 115
    NUMBER          shift and go to state 138
    VARIABLE        shift and go to state 192
    LPAREN          shift and go to state 106
    PLUSPLUS        shift and go to state 120
    MINUSMINUS      shift and go to state 121

    expression                     shift and go to state 523
    additive_expression            shift and go to state 107
    term                           shift and go to state 109
    factor                         shift and go to state 116
    increment_decrement_op         shift and go to state 117

state 511

    (120) else_part -> else LBLOCK . declaration_list RBLOCK
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 524
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 512

    (124) fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .

    COMMENT         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_HASHTAG reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    COMMENT_MULTI   reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    empty           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    include         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    const           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    print           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    echo            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    while           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    do              reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    if              reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    function        reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    ID              reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    return          reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    class           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    new             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    interface       reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    trait           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    use             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    continue        reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CLOSE_TAG       reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    for             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    foreach         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    switch          reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    try             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    throw           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exit            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    VARIABLE        reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    array           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    pow             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    POW             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    abs             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    cos             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    deg2rad         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rad2deg         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    die             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    exp             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    floor           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    isset           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    list            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    log10           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    max             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    min             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    rand            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    round           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sin             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    sqrt            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    unset           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    CADENA          reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    $end            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    RBLOCK          reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endwhile        reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    private         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    protected       reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    public          reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    var             reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endfor          reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endforeach      reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    break           reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    endswitch       reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    default         reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)
    case            reduce using rule 124 (fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK .)


state 513

    (148) interface_method_declaration -> visibility function ID LPAREN params RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 525


state 514

    (169) for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 169 (for_loop -> for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK .)


state 515

    (170) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor . SEMICOLON

    SEMICOLON       shift and go to state 526


state 516

    (175) foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 175 (foreach_loop -> foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK .)


state 517

    (176) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach . SEMICOLON

    SEMICOLON       shift and go to state 527


state 518

    (184) default_block -> default COLON statement_list .
    (185) default_block -> default COLON statement_list . break SEMICOLON
    (201) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          reduce using rule 184 (default_block -> default COLON statement_list .)
    endswitch       reduce using rule 184 (default_block -> default COLON statement_list .)
    break           shift and go to state 528
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 344
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 519

    (182) case_block -> case expression COLON statement_list .
    (183) case_block -> case expression COLON statement_list . break SEMICOLON
    (201) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    default         reduce using rule 182 (case_block -> case expression COLON statement_list .)
    case            reduce using rule 182 (case_block -> case expression COLON statement_list .)
    RBLOCK          reduce using rule 182 (case_block -> case expression COLON statement_list .)
    endswitch       reduce using rule 182 (case_block -> case expression COLON statement_list .)
    break           shift and go to state 529
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 344
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 520

    (178) switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .

    COMMENT         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    COMMENT_MULTI   reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    empty           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    include         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    const           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    print           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    echo            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    while           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    do              reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    if              reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    function        reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    ID              reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    return          reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    class           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    new             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    interface       reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    trait           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    use             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    continue        reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    CLOSE_TAG       reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    for             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    foreach         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    switch          reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    try             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    throw           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    exit            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    VARIABLE        reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    array           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    pow             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    POW             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    abs             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    cos             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    deg2rad         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    rad2deg         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    die             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    exp             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    floor           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    isset           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    list            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    log             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    log10           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    max             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    min             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    rand            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    round           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    sin             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    sqrt            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    unset           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    CADENA          reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    $end            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    RBLOCK          reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endwhile        reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    private         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    protected       reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    public          reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    var             reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endfor          reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endforeach      reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    break           reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    endswitch       reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    default         reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)
    case            reduce using rule 178 (switch_statement -> switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON .)


state 521

    (192) catch_block -> catch LPAREN list_exception RPAREN LBLOCK . statement_list RBLOCK
    (200) statement_list -> . declaration
    (201) statement_list -> . statement_list declaration
    (202) statement_list -> . empty_function
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (236) empty_function -> .
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for COMMENT_HASHTAG resolved as shift
  ! shift/reduce conflict for COMMENT_MULTI resolved as shift
  ! shift/reduce conflict for empty resolved as shift
  ! shift/reduce conflict for include resolved as shift
  ! shift/reduce conflict for const resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for echo resolved as shift
  ! shift/reduce conflict for while resolved as shift
  ! shift/reduce conflict for do resolved as shift
  ! shift/reduce conflict for if resolved as shift
  ! shift/reduce conflict for function resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for class resolved as shift
  ! shift/reduce conflict for new resolved as shift
  ! shift/reduce conflict for interface resolved as shift
  ! shift/reduce conflict for trait resolved as shift
  ! shift/reduce conflict for use resolved as shift
  ! shift/reduce conflict for continue resolved as shift
  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for for resolved as shift
  ! shift/reduce conflict for foreach resolved as shift
  ! shift/reduce conflict for switch resolved as shift
  ! shift/reduce conflict for try resolved as shift
  ! shift/reduce conflict for throw resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for array resolved as shift
  ! shift/reduce conflict for pow resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for abs resolved as shift
  ! shift/reduce conflict for cos resolved as shift
  ! shift/reduce conflict for deg2rad resolved as shift
  ! shift/reduce conflict for rad2deg resolved as shift
  ! shift/reduce conflict for die resolved as shift
  ! shift/reduce conflict for exp resolved as shift
  ! shift/reduce conflict for floor resolved as shift
  ! shift/reduce conflict for isset resolved as shift
  ! shift/reduce conflict for list resolved as shift
  ! shift/reduce conflict for log resolved as shift
  ! shift/reduce conflict for log10 resolved as shift
  ! shift/reduce conflict for max resolved as shift
  ! shift/reduce conflict for min resolved as shift
  ! shift/reduce conflict for rand resolved as shift
  ! shift/reduce conflict for round resolved as shift
  ! shift/reduce conflict for sin resolved as shift
  ! shift/reduce conflict for sqrt resolved as shift
  ! shift/reduce conflict for unset resolved as shift
  ! shift/reduce conflict for CADENA resolved as shift
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    RBLOCK          reduce using rule 236 (empty_function -> .)
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

  ! COMMENT         [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_HASHTAG [ reduce using rule 236 (empty_function -> .) ]
  ! COMMENT_MULTI   [ reduce using rule 236 (empty_function -> .) ]
  ! empty           [ reduce using rule 236 (empty_function -> .) ]
  ! include         [ reduce using rule 236 (empty_function -> .) ]
  ! const           [ reduce using rule 236 (empty_function -> .) ]
  ! print           [ reduce using rule 236 (empty_function -> .) ]
  ! echo            [ reduce using rule 236 (empty_function -> .) ]
  ! while           [ reduce using rule 236 (empty_function -> .) ]
  ! do              [ reduce using rule 236 (empty_function -> .) ]
  ! if              [ reduce using rule 236 (empty_function -> .) ]
  ! function        [ reduce using rule 236 (empty_function -> .) ]
  ! ID              [ reduce using rule 236 (empty_function -> .) ]
  ! return          [ reduce using rule 236 (empty_function -> .) ]
  ! class           [ reduce using rule 236 (empty_function -> .) ]
  ! new             [ reduce using rule 236 (empty_function -> .) ]
  ! interface       [ reduce using rule 236 (empty_function -> .) ]
  ! trait           [ reduce using rule 236 (empty_function -> .) ]
  ! use             [ reduce using rule 236 (empty_function -> .) ]
  ! continue        [ reduce using rule 236 (empty_function -> .) ]
  ! CLOSE_TAG       [ reduce using rule 236 (empty_function -> .) ]
  ! for             [ reduce using rule 236 (empty_function -> .) ]
  ! foreach         [ reduce using rule 236 (empty_function -> .) ]
  ! switch          [ reduce using rule 236 (empty_function -> .) ]
  ! try             [ reduce using rule 236 (empty_function -> .) ]
  ! throw           [ reduce using rule 236 (empty_function -> .) ]
  ! exit            [ reduce using rule 236 (empty_function -> .) ]
  ! VARIABLE        [ reduce using rule 236 (empty_function -> .) ]
  ! array           [ reduce using rule 236 (empty_function -> .) ]
  ! pow             [ reduce using rule 236 (empty_function -> .) ]
  ! POW             [ reduce using rule 236 (empty_function -> .) ]
  ! abs             [ reduce using rule 236 (empty_function -> .) ]
  ! cos             [ reduce using rule 236 (empty_function -> .) ]
  ! deg2rad         [ reduce using rule 236 (empty_function -> .) ]
  ! rad2deg         [ reduce using rule 236 (empty_function -> .) ]
  ! die             [ reduce using rule 236 (empty_function -> .) ]
  ! exp             [ reduce using rule 236 (empty_function -> .) ]
  ! floor           [ reduce using rule 236 (empty_function -> .) ]
  ! isset           [ reduce using rule 236 (empty_function -> .) ]
  ! list            [ reduce using rule 236 (empty_function -> .) ]
  ! log             [ reduce using rule 236 (empty_function -> .) ]
  ! log10           [ reduce using rule 236 (empty_function -> .) ]
  ! max             [ reduce using rule 236 (empty_function -> .) ]
  ! min             [ reduce using rule 236 (empty_function -> .) ]
  ! rand            [ reduce using rule 236 (empty_function -> .) ]
  ! round           [ reduce using rule 236 (empty_function -> .) ]
  ! sin             [ reduce using rule 236 (empty_function -> .) ]
  ! sqrt            [ reduce using rule 236 (empty_function -> .) ]
  ! unset           [ reduce using rule 236 (empty_function -> .) ]
  ! CADENA          [ reduce using rule 236 (empty_function -> .) ]

    statement_list                 shift and go to state 530
    declaration                    shift and go to state 248
    empty_function                 shift and go to state 249
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 522

    (193) list_exception -> list_exception PIPE exception_statement .

    RPAREN          reduce using rule 193 (list_exception -> list_exception PIPE exception_statement .)
    PIPE            reduce using rule 193 (list_exception -> list_exception PIPE exception_statement .)


state 523

    (119) else_part -> elseif LPAREN expression . RPAREN LBLOCK declaration_list RBLOCK else_part

    RPAREN          shift and go to state 531


state 524

    (120) else_part -> else LBLOCK declaration_list . RBLOCK
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 532
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 525

    (148) interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .

    RBLOCK          reduce using rule 148 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    private         reduce using rule 148 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    protected       reduce using rule 148 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    public          reduce using rule 148 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)
    var             reduce using rule 148 (interface_method_declaration -> visibility function ID LPAREN params RPAREN SEMICOLON .)


state 526

    (170) for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .

    COMMENT         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    COMMENT_MULTI   reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    empty           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    include         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    const           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    print           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    echo            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    while           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    do              reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    if              reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    function        reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    ID              reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    return          reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    class           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    new             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    interface       reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    trait           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    use             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    continue        reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    CLOSE_TAG       reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    for             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    foreach         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    switch          reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    try             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    throw           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    exit            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    VARIABLE        reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    array           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    pow             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    POW             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    abs             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    cos             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    deg2rad         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    rad2deg         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    die             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    exp             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    floor           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    isset           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    list            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    log             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    log10           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    max             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    min             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    rand            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    round           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    sin             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    sqrt            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    unset           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    CADENA          reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    $end            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    RBLOCK          reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endwhile        reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    private         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    protected       reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    public          reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    var             reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endfor          reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endforeach      reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    break           reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    endswitch       reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    default         reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)
    case            reduce using rule 170 (for_loop -> for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON .)


state 527

    (176) foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .

    COMMENT         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    COMMENT_HASHTAG reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    COMMENT_MULTI   reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    empty           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    include         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    const           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    print           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    echo            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    while           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    do              reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    if              reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    function        reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    ID              reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    return          reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    class           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    new             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    interface       reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    trait           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    use             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    continue        reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    CLOSE_TAG       reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    for             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    foreach         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    switch          reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    try             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    throw           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    exit            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    VARIABLE        reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    array           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    pow             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    POW             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    abs             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    cos             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    deg2rad         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    rad2deg         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    die             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    exp             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    floor           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    isset           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    list            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    log             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    log10           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    max             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    min             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    rand            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    round           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    sin             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    sqrt            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    unset           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    CADENA          reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    $end            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    RBLOCK          reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endwhile        reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    private         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    protected       reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    public          reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    var             reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endfor          reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endforeach      reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    break           reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    endswitch       reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    default         reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)
    case            reduce using rule 176 (foreach_loop -> foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON .)


state 528

    (185) default_block -> default COLON statement_list break . SEMICOLON

    SEMICOLON       shift and go to state 533


state 529

    (183) case_block -> case expression COLON statement_list break . SEMICOLON

    SEMICOLON       shift and go to state 534


state 530

    (192) catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list . RBLOCK
    (201) statement_list -> statement_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 535
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 344
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 531

    (119) else_part -> elseif LPAREN expression RPAREN . LBLOCK declaration_list RBLOCK else_part

    LBLOCK          shift and go to state 536


state 532

    (120) else_part -> else LBLOCK declaration_list RBLOCK .

    COMMENT         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    empty           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    include         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    const           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    print           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    echo            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    while           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    do              reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    if              reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    function        reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    ID              reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    return          reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    class           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    new             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    interface       reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    trait           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    use             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    continue        reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CLOSE_TAG       reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    for             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    foreach         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    switch          reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    try             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    throw           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exit            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    VARIABLE        reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    array           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    pow             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    POW             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    abs             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    cos             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    deg2rad         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    rad2deg         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    die             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    exp             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    floor           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    isset           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    list            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    log             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    log10           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    max             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    min             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    rand            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    round           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    sin             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    sqrt            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    unset           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    CADENA          reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    $end            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    RBLOCK          reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endwhile        reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    private         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    protected       reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    public          reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    var             reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endfor          reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endforeach      reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    break           reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    endswitch       reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    default         reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)
    case            reduce using rule 120 (else_part -> else LBLOCK declaration_list RBLOCK .)


state 533

    (185) default_block -> default COLON statement_list break SEMICOLON .

    RBLOCK          reduce using rule 185 (default_block -> default COLON statement_list break SEMICOLON .)
    endswitch       reduce using rule 185 (default_block -> default COLON statement_list break SEMICOLON .)


state 534

    (183) case_block -> case expression COLON statement_list break SEMICOLON .

    default         reduce using rule 183 (case_block -> case expression COLON statement_list break SEMICOLON .)
    case            reduce using rule 183 (case_block -> case expression COLON statement_list break SEMICOLON .)
    RBLOCK          reduce using rule 183 (case_block -> case expression COLON statement_list break SEMICOLON .)
    endswitch       reduce using rule 183 (case_block -> case expression COLON statement_list break SEMICOLON .)


state 535

    (192) catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .

    catch           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    finally         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    COMMENT         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    COMMENT_HASHTAG reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    COMMENT_MULTI   reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    empty           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    include         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    const           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    print           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    echo            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    while           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    do              reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    if              reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    function        reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    ID              reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    return          reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    class           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    new             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    interface       reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    trait           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    use             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    continue        reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    CLOSE_TAG       reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    for             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    foreach         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    switch          reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    try             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    throw           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    exit            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    VARIABLE        reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    array           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    pow             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    POW             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    abs             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    cos             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    deg2rad         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    rad2deg         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    die             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    exp             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    floor           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    isset           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    list            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    log             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    log10           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    max             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    min             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    rand            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    round           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    sin             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    sqrt            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    unset           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    CADENA          reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    $end            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    RBLOCK          reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endwhile        reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    private         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    protected       reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    public          reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    var             reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endfor          reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endforeach      reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    break           reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    endswitch       reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    default         reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)
    case            reduce using rule 192 (catch_block -> catch LPAREN list_exception RPAREN LBLOCK statement_list RBLOCK .)


state 536

    (119) else_part -> elseif LPAREN expression RPAREN LBLOCK . declaration_list RBLOCK else_part
    (4) declaration_list -> . declaration
    (5) declaration_list -> . declaration_list declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration_list               shift and go to state 537
    declaration                    shift and go to state 5
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 537

    (119) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list . RBLOCK else_part
    (5) declaration_list -> declaration_list . declaration
    (6) declaration -> . COMMENT
    (7) declaration -> . COMMENT_HASHTAG
    (8) declaration -> . COMMENT_MULTI
    (9) declaration -> . header_declaration
    (10) declaration -> . var_declaration
    (11) declaration -> . constant_declaration
    (12) declaration -> . print_declaration
    (13) declaration -> . echo_declaration
    (14) declaration -> . iteration_stmt
    (15) declaration -> . if_statement
    (16) declaration -> . fun_declaration
    (17) declaration -> . fun_call
    (18) declaration -> . return_statement
    (19) declaration -> . class_declaration
    (20) declaration -> . class_extension
    (21) declaration -> . create_obj_declaration
    (22) declaration -> . interface_declaration
    (23) declaration -> . trait_declaration
    (24) declaration -> . use_declaration
    (25) declaration -> . continue_declaration
    (26) declaration -> . footer_declaration
    (27) declaration -> . for_loop
    (28) declaration -> . foreach_loop
    (29) declaration -> . switch_statement
    (30) declaration -> . try_statement
    (31) declaration -> . throw_statement
    (32) declaration -> . exit_statement
    (33) declaration -> . empty
    (34) header_declaration -> . include CADENA SEMICOLON
    (49) var_declaration -> . var_declaration2 SEMICOLON
    (35) constant_declaration -> . const ID EQUAL CADENA SEMICOLON
    (36) constant_declaration -> . const ID EQUAL NUMBER SEMICOLON
    (37) print_declaration -> . print var_declaration2 SEMICOLON
    (38) print_declaration -> . print LPAREN var_declaration2 RPAREN SEMICOLON
    (39) print_declaration -> . print LPAREN NUMBER RPAREN SEMICOLON
    (40) print_declaration -> . print LPAREN CADENA RPAREN SEMICOLON
    (41) print_declaration -> . print NUMBER SEMICOLON
    (42) print_declaration -> . print CADENA SEMICOLON
    (43) echo_declaration -> . echo var_declaration2 SEMICOLON
    (44) echo_declaration -> . echo LPAREN var_declaration2 RPAREN SEMICOLON
    (45) echo_declaration -> . echo LPAREN NUMBER RPAREN SEMICOLON
    (46) echo_declaration -> . echo LPAREN CADENA RPAREN SEMICOLON
    (47) echo_declaration -> . echo NUMBER SEMICOLON
    (48) echo_declaration -> . echo CADENA SEMICOLON
    (74) iteration_stmt -> . while LPAREN expression RPAREN LBLOCK declaration_list RBLOCK
    (75) iteration_stmt -> . while LPAREN expression RPAREN COLON declaration_list endwhile SEMICOLON
    (76) iteration_stmt -> . do LBLOCK declaration_list RBLOCK while LPAREN expression RPAREN SEMICOLON
    (77) iteration_stmt -> . do COLON declaration_list endwhile SEMICOLON
    (118) if_statement -> . if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (123) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list RBLOCK
    (124) fun_declaration -> . function ID LPAREN params RPAREN LBLOCK declaration_list return_statement RBLOCK
    (125) fun_call -> . ID LPAREN params RPAREN
    (126) return_statement -> . return expression SEMICOLON
    (127) return_statement -> . return params SEMICOLON
    (128) return_statement -> . return SEMICOLON
    (129) return_statement -> . return ID LPAREN expression RPAREN SEMICOLON
    (130) class_declaration -> . class ID LBLOCK class_body RBLOCK
    (131) class_extension -> . class ID extends ID LBLOCK RBLOCK
    (132) class_extension -> . class ID extends Exception LBLOCK RBLOCK
    (133) class_extension -> . class ID extends ErrorException LBLOCK RBLOCK
    (134) class_extension -> . class ID extends Error LBLOCK RBLOCK
    (135) class_extension -> . class ID extends ParseError LBLOCK RBLOCK
    (136) class_extension -> . class ID extends TypeError LBLOCK RBLOCK
    (137) create_obj_declaration -> . new ID LPAREN params RPAREN
    (144) interface_declaration -> . interface ID LBLOCK interface_body RBLOCK
    (149) trait_declaration -> . trait ID LBLOCK trait_body RBLOCK
    (155) use_declaration -> . use ID SEMICOLON
    (160) continue_declaration -> . continue SEMICOLON
    (3) footer_declaration -> . CLOSE_TAG
    (169) for_loop -> . for LPAREN for_init for_expr for_update RPAREN LBLOCK declaration_list RBLOCK
    (170) for_loop -> . for LPAREN for_init for_expr for_update RPAREN COLON declaration_list endfor SEMICOLON
    (175) foreach_loop -> . foreach LPAREN expression as expression RPAREN LBLOCK declaration_list RBLOCK
    (176) foreach_loop -> . foreach LPAREN expression as expression RPAREN COLON declaration_list endforeach SEMICOLON
    (177) switch_statement -> . switch LPAREN expression RPAREN LBLOCK case_blocks default_block RBLOCK
    (178) switch_statement -> . switch LPAREN expression RPAREN COLON case_blocks default_block endswitch SEMICOLON
    (187) try_statement -> . try LBLOCK statement_list RBLOCK catch_blocks
    (197) throw_statement -> . throw create_obj_declaration SEMICOLON
    (198) throw_statement -> . throw new Exception LPAREN params RPAREN SEMICOLON
    (174) exit_statement -> . exit LPAREN expression RPAREN SEMICOLON
    (50) var_declaration2 -> . VARIABLE
    (51) var_declaration2 -> . VARIABLE expression
    (52) var_declaration2 -> . VARIABLE EQUAL NUMBER
    (53) var_declaration2 -> . VARIABLE EQUAL VARIABLE
    (54) var_declaration2 -> . VARIABLE EQUAL CADENA
    (55) var_declaration2 -> . VARIABLE EQUAL Built_In_Declaration
    (56) var_declaration2 -> . VARIABLE EQUAL expression
    (57) var_declaration2 -> . VARIABLE assignation VARIABLE
    (58) var_declaration2 -> . VARIABLE assignation NUMBER
    (59) var_declaration2 -> . Built_In_Declaration
    (60) var_declaration2 -> . Concatenar_Cadenas_declaration
    (61) var_declaration2 -> . VARIABLE EQUAL ID LPAREN params RPAREN
    (62) var_declaration2 -> . VARIABLE QUESTIONMARK var_declaration2 COLON var_declaration2
    (63) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID EQUAL expression
    (64) var_declaration2 -> . VARIABLE OBJ_OPERATOR ID LPAREN params RPAREN
    (65) var_declaration2 -> . VARIABLE EQUAL create_obj_declaration
    (66) var_declaration2 -> . VARIABLE assignment_tail
    (67) var_declaration2 -> . VARIABLE EQUAL assignment_tail
    (203) Built_In_Declaration -> . array LPAREN params RPAREN
    (204) Built_In_Declaration -> . pow LPAREN params RPAREN
    (205) Built_In_Declaration -> . POW LPAREN params RPAREN
    (206) Built_In_Declaration -> . abs LPAREN params RPAREN
    (207) Built_In_Declaration -> . cos LPAREN params RPAREN
    (208) Built_In_Declaration -> . deg2rad LPAREN params RPAREN
    (209) Built_In_Declaration -> . rad2deg LPAREN params RPAREN
    (210) Built_In_Declaration -> . die LPAREN params RPAREN
    (211) Built_In_Declaration -> . exp LPAREN params RPAREN
    (212) Built_In_Declaration -> . floor LPAREN params RPAREN
    (213) Built_In_Declaration -> . isset LPAREN params RPAREN
    (214) Built_In_Declaration -> . list LPAREN params RPAREN
    (215) Built_In_Declaration -> . log LPAREN params RPAREN
    (216) Built_In_Declaration -> . log10 LPAREN params RPAREN
    (217) Built_In_Declaration -> . max LPAREN params RPAREN
    (218) Built_In_Declaration -> . min LPAREN params RPAREN
    (219) Built_In_Declaration -> . rand LPAREN params RPAREN
    (220) Built_In_Declaration -> . round LPAREN params RPAREN
    (221) Built_In_Declaration -> . sin LPAREN params RPAREN
    (222) Built_In_Declaration -> . sqrt LPAREN params RPAREN
    (223) Built_In_Declaration -> . unset LPAREN params RPAREN
    (224) Concatenar_Cadenas_declaration -> . VARIABLE DOT VARIABLE
    (225) Concatenar_Cadenas_declaration -> . CADENA DOT CADENA
    (226) Concatenar_Cadenas_declaration -> . CADENA DOT VARIABLE
    (227) Concatenar_Cadenas_declaration -> . VARIABLE DOT CADENA

    RBLOCK          shift and go to state 538
    COMMENT         shift and go to state 6
    COMMENT_HASHTAG shift and go to state 7
    COMMENT_MULTI   shift and go to state 8
    empty           shift and go to state 33
    include         shift and go to state 34
    const           shift and go to state 37
    print           shift and go to state 39
    echo            shift and go to state 40
    while           shift and go to state 41
    do              shift and go to state 42
    if              shift and go to state 43
    function        shift and go to state 44
    ID              shift and go to state 38
    return          shift and go to state 45
    class           shift and go to state 46
    new             shift and go to state 47
    interface       shift and go to state 48
    trait           shift and go to state 49
    use             shift and go to state 50
    continue        shift and go to state 51
    CLOSE_TAG       shift and go to state 52
    for             shift and go to state 53
    foreach         shift and go to state 54
    switch          shift and go to state 55
    try             shift and go to state 56
    throw           shift and go to state 57
    exit            shift and go to state 58
    VARIABLE        shift and go to state 59
    array           shift and go to state 62
    pow             shift and go to state 63
    POW             shift and go to state 64
    abs             shift and go to state 65
    cos             shift and go to state 66
    deg2rad         shift and go to state 67
    rad2deg         shift and go to state 68
    die             shift and go to state 69
    exp             shift and go to state 70
    floor           shift and go to state 71
    isset           shift and go to state 72
    list            shift and go to state 73
    log             shift and go to state 74
    log10           shift and go to state 75
    max             shift and go to state 76
    min             shift and go to state 77
    rand            shift and go to state 78
    round           shift and go to state 79
    sin             shift and go to state 80
    sqrt            shift and go to state 81
    unset           shift and go to state 82
    CADENA          shift and go to state 35

    declaration                    shift and go to state 83
    header_declaration             shift and go to state 9
    var_declaration                shift and go to state 10
    constant_declaration           shift and go to state 11
    print_declaration              shift and go to state 12
    echo_declaration               shift and go to state 13
    iteration_stmt                 shift and go to state 14
    if_statement                   shift and go to state 15
    fun_declaration                shift and go to state 16
    fun_call                       shift and go to state 17
    return_statement               shift and go to state 18
    class_declaration              shift and go to state 19
    class_extension                shift and go to state 20
    create_obj_declaration         shift and go to state 21
    interface_declaration          shift and go to state 22
    trait_declaration              shift and go to state 23
    use_declaration                shift and go to state 24
    continue_declaration           shift and go to state 25
    footer_declaration             shift and go to state 26
    for_loop                       shift and go to state 27
    foreach_loop                   shift and go to state 28
    switch_statement               shift and go to state 29
    try_statement                  shift and go to state 30
    throw_statement                shift and go to state 31
    exit_statement                 shift and go to state 32
    var_declaration2               shift and go to state 36
    Built_In_Declaration           shift and go to state 60
    Concatenar_Cadenas_declaration shift and go to state 61

state 538

    (119) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK . else_part
    (119) else_part -> . elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part
    (120) else_part -> . else LBLOCK declaration_list RBLOCK
    (121) else_part -> . endif
    (122) else_part -> . empty_function
    (236) empty_function -> .

    elseif          shift and go to state 488
    else            shift and go to state 489
    endif           shift and go to state 490
    COMMENT         reduce using rule 236 (empty_function -> .)
    COMMENT_HASHTAG reduce using rule 236 (empty_function -> .)
    COMMENT_MULTI   reduce using rule 236 (empty_function -> .)
    empty           reduce using rule 236 (empty_function -> .)
    include         reduce using rule 236 (empty_function -> .)
    const           reduce using rule 236 (empty_function -> .)
    print           reduce using rule 236 (empty_function -> .)
    echo            reduce using rule 236 (empty_function -> .)
    while           reduce using rule 236 (empty_function -> .)
    do              reduce using rule 236 (empty_function -> .)
    if              reduce using rule 236 (empty_function -> .)
    function        reduce using rule 236 (empty_function -> .)
    ID              reduce using rule 236 (empty_function -> .)
    return          reduce using rule 236 (empty_function -> .)
    class           reduce using rule 236 (empty_function -> .)
    new             reduce using rule 236 (empty_function -> .)
    interface       reduce using rule 236 (empty_function -> .)
    trait           reduce using rule 236 (empty_function -> .)
    use             reduce using rule 236 (empty_function -> .)
    continue        reduce using rule 236 (empty_function -> .)
    CLOSE_TAG       reduce using rule 236 (empty_function -> .)
    for             reduce using rule 236 (empty_function -> .)
    foreach         reduce using rule 236 (empty_function -> .)
    switch          reduce using rule 236 (empty_function -> .)
    try             reduce using rule 236 (empty_function -> .)
    throw           reduce using rule 236 (empty_function -> .)
    exit            reduce using rule 236 (empty_function -> .)
    VARIABLE        reduce using rule 236 (empty_function -> .)
    array           reduce using rule 236 (empty_function -> .)
    pow             reduce using rule 236 (empty_function -> .)
    POW             reduce using rule 236 (empty_function -> .)
    abs             reduce using rule 236 (empty_function -> .)
    cos             reduce using rule 236 (empty_function -> .)
    deg2rad         reduce using rule 236 (empty_function -> .)
    rad2deg         reduce using rule 236 (empty_function -> .)
    die             reduce using rule 236 (empty_function -> .)
    exp             reduce using rule 236 (empty_function -> .)
    floor           reduce using rule 236 (empty_function -> .)
    isset           reduce using rule 236 (empty_function -> .)
    list            reduce using rule 236 (empty_function -> .)
    log             reduce using rule 236 (empty_function -> .)
    log10           reduce using rule 236 (empty_function -> .)
    max             reduce using rule 236 (empty_function -> .)
    min             reduce using rule 236 (empty_function -> .)
    rand            reduce using rule 236 (empty_function -> .)
    round           reduce using rule 236 (empty_function -> .)
    sin             reduce using rule 236 (empty_function -> .)
    sqrt            reduce using rule 236 (empty_function -> .)
    unset           reduce using rule 236 (empty_function -> .)
    CADENA          reduce using rule 236 (empty_function -> .)
    $end            reduce using rule 236 (empty_function -> .)
    RBLOCK          reduce using rule 236 (empty_function -> .)
    endwhile        reduce using rule 236 (empty_function -> .)
    private         reduce using rule 236 (empty_function -> .)
    protected       reduce using rule 236 (empty_function -> .)
    public          reduce using rule 236 (empty_function -> .)
    var             reduce using rule 236 (empty_function -> .)
    endfor          reduce using rule 236 (empty_function -> .)
    endforeach      reduce using rule 236 (empty_function -> .)
    break           reduce using rule 236 (empty_function -> .)
    endswitch       reduce using rule 236 (empty_function -> .)
    default         reduce using rule 236 (empty_function -> .)
    case            reduce using rule 236 (empty_function -> .)

    else_part                      shift and go to state 539
    empty_function                 shift and go to state 491

state 539

    (119) else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .

    COMMENT         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_HASHTAG reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    COMMENT_MULTI   reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    empty           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    include         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    const           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    print           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    echo            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    while           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    do              reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    if              reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    function        reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    ID              reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    return          reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    class           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    new             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    interface       reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    trait           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    use             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    continue        reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CLOSE_TAG       reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    for             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    foreach         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    switch          reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    try             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    throw           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exit            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    VARIABLE        reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    array           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    pow             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    POW             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    abs             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    cos             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    deg2rad         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rad2deg         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    die             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    exp             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    floor           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    isset           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    list            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    log10           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    max             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    min             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    rand            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    round           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sin             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    sqrt            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    unset           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    CADENA          reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    $end            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    RBLOCK          reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endwhile        reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    private         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    protected       reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    public          reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    var             reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endfor          reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endforeach      reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    break           reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    endswitch       reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    default         reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)
    case            reduce using rule 119 (else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 45 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 59 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 131 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 131 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 131 resolved as shift
WARNING: shift/reduce conflict for empty in state 131 resolved as shift
WARNING: shift/reduce conflict for include in state 131 resolved as shift
WARNING: shift/reduce conflict for const in state 131 resolved as shift
WARNING: shift/reduce conflict for print in state 131 resolved as shift
WARNING: shift/reduce conflict for echo in state 131 resolved as shift
WARNING: shift/reduce conflict for while in state 131 resolved as shift
WARNING: shift/reduce conflict for do in state 131 resolved as shift
WARNING: shift/reduce conflict for if in state 131 resolved as shift
WARNING: shift/reduce conflict for function in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for return in state 131 resolved as shift
WARNING: shift/reduce conflict for class in state 131 resolved as shift
WARNING: shift/reduce conflict for new in state 131 resolved as shift
WARNING: shift/reduce conflict for interface in state 131 resolved as shift
WARNING: shift/reduce conflict for trait in state 131 resolved as shift
WARNING: shift/reduce conflict for use in state 131 resolved as shift
WARNING: shift/reduce conflict for continue in state 131 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 131 resolved as shift
WARNING: shift/reduce conflict for for in state 131 resolved as shift
WARNING: shift/reduce conflict for foreach in state 131 resolved as shift
WARNING: shift/reduce conflict for switch in state 131 resolved as shift
WARNING: shift/reduce conflict for try in state 131 resolved as shift
WARNING: shift/reduce conflict for throw in state 131 resolved as shift
WARNING: shift/reduce conflict for exit in state 131 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 131 resolved as shift
WARNING: shift/reduce conflict for array in state 131 resolved as shift
WARNING: shift/reduce conflict for pow in state 131 resolved as shift
WARNING: shift/reduce conflict for POW in state 131 resolved as shift
WARNING: shift/reduce conflict for abs in state 131 resolved as shift
WARNING: shift/reduce conflict for cos in state 131 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 131 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 131 resolved as shift
WARNING: shift/reduce conflict for die in state 131 resolved as shift
WARNING: shift/reduce conflict for exp in state 131 resolved as shift
WARNING: shift/reduce conflict for floor in state 131 resolved as shift
WARNING: shift/reduce conflict for isset in state 131 resolved as shift
WARNING: shift/reduce conflict for list in state 131 resolved as shift
WARNING: shift/reduce conflict for log in state 131 resolved as shift
WARNING: shift/reduce conflict for log10 in state 131 resolved as shift
WARNING: shift/reduce conflict for max in state 131 resolved as shift
WARNING: shift/reduce conflict for min in state 131 resolved as shift
WARNING: shift/reduce conflict for rand in state 131 resolved as shift
WARNING: shift/reduce conflict for round in state 131 resolved as shift
WARNING: shift/reduce conflict for sin in state 131 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 131 resolved as shift
WARNING: shift/reduce conflict for unset in state 131 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 131 resolved as shift
WARNING: shift/reduce conflict for private in state 237 resolved as shift
WARNING: shift/reduce conflict for protected in state 237 resolved as shift
WARNING: shift/reduce conflict for public in state 237 resolved as shift
WARNING: shift/reduce conflict for var in state 237 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 237 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 237 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 237 resolved as shift
WARNING: shift/reduce conflict for empty in state 237 resolved as shift
WARNING: shift/reduce conflict for include in state 237 resolved as shift
WARNING: shift/reduce conflict for const in state 237 resolved as shift
WARNING: shift/reduce conflict for print in state 237 resolved as shift
WARNING: shift/reduce conflict for echo in state 237 resolved as shift
WARNING: shift/reduce conflict for while in state 237 resolved as shift
WARNING: shift/reduce conflict for do in state 237 resolved as shift
WARNING: shift/reduce conflict for if in state 237 resolved as shift
WARNING: shift/reduce conflict for function in state 237 resolved as shift
WARNING: shift/reduce conflict for ID in state 237 resolved as shift
WARNING: shift/reduce conflict for return in state 237 resolved as shift
WARNING: shift/reduce conflict for class in state 237 resolved as shift
WARNING: shift/reduce conflict for new in state 237 resolved as shift
WARNING: shift/reduce conflict for interface in state 237 resolved as shift
WARNING: shift/reduce conflict for trait in state 237 resolved as shift
WARNING: shift/reduce conflict for use in state 237 resolved as shift
WARNING: shift/reduce conflict for continue in state 237 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 237 resolved as shift
WARNING: shift/reduce conflict for for in state 237 resolved as shift
WARNING: shift/reduce conflict for foreach in state 237 resolved as shift
WARNING: shift/reduce conflict for switch in state 237 resolved as shift
WARNING: shift/reduce conflict for try in state 237 resolved as shift
WARNING: shift/reduce conflict for throw in state 237 resolved as shift
WARNING: shift/reduce conflict for exit in state 237 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 237 resolved as shift
WARNING: shift/reduce conflict for array in state 237 resolved as shift
WARNING: shift/reduce conflict for pow in state 237 resolved as shift
WARNING: shift/reduce conflict for POW in state 237 resolved as shift
WARNING: shift/reduce conflict for abs in state 237 resolved as shift
WARNING: shift/reduce conflict for cos in state 237 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 237 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 237 resolved as shift
WARNING: shift/reduce conflict for die in state 237 resolved as shift
WARNING: shift/reduce conflict for exp in state 237 resolved as shift
WARNING: shift/reduce conflict for floor in state 237 resolved as shift
WARNING: shift/reduce conflict for isset in state 237 resolved as shift
WARNING: shift/reduce conflict for list in state 237 resolved as shift
WARNING: shift/reduce conflict for log in state 237 resolved as shift
WARNING: shift/reduce conflict for log10 in state 237 resolved as shift
WARNING: shift/reduce conflict for max in state 237 resolved as shift
WARNING: shift/reduce conflict for min in state 237 resolved as shift
WARNING: shift/reduce conflict for rand in state 237 resolved as shift
WARNING: shift/reduce conflict for round in state 237 resolved as shift
WARNING: shift/reduce conflict for sin in state 237 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 237 resolved as shift
WARNING: shift/reduce conflict for unset in state 237 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 237 resolved as shift
WARNING: shift/reduce conflict for private in state 240 resolved as shift
WARNING: shift/reduce conflict for protected in state 240 resolved as shift
WARNING: shift/reduce conflict for public in state 240 resolved as shift
WARNING: shift/reduce conflict for var in state 240 resolved as shift
WARNING: shift/reduce conflict for private in state 241 resolved as shift
WARNING: shift/reduce conflict for protected in state 241 resolved as shift
WARNING: shift/reduce conflict for public in state 241 resolved as shift
WARNING: shift/reduce conflict for var in state 241 resolved as shift
WARNING: shift/reduce conflict for case in state 415 resolved as shift
WARNING: shift/reduce conflict for case in state 416 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 457 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 457 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 457 resolved as shift
WARNING: shift/reduce conflict for empty in state 457 resolved as shift
WARNING: shift/reduce conflict for include in state 457 resolved as shift
WARNING: shift/reduce conflict for const in state 457 resolved as shift
WARNING: shift/reduce conflict for print in state 457 resolved as shift
WARNING: shift/reduce conflict for echo in state 457 resolved as shift
WARNING: shift/reduce conflict for while in state 457 resolved as shift
WARNING: shift/reduce conflict for do in state 457 resolved as shift
WARNING: shift/reduce conflict for if in state 457 resolved as shift
WARNING: shift/reduce conflict for function in state 457 resolved as shift
WARNING: shift/reduce conflict for ID in state 457 resolved as shift
WARNING: shift/reduce conflict for return in state 457 resolved as shift
WARNING: shift/reduce conflict for class in state 457 resolved as shift
WARNING: shift/reduce conflict for new in state 457 resolved as shift
WARNING: shift/reduce conflict for interface in state 457 resolved as shift
WARNING: shift/reduce conflict for trait in state 457 resolved as shift
WARNING: shift/reduce conflict for use in state 457 resolved as shift
WARNING: shift/reduce conflict for continue in state 457 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 457 resolved as shift
WARNING: shift/reduce conflict for for in state 457 resolved as shift
WARNING: shift/reduce conflict for foreach in state 457 resolved as shift
WARNING: shift/reduce conflict for switch in state 457 resolved as shift
WARNING: shift/reduce conflict for try in state 457 resolved as shift
WARNING: shift/reduce conflict for throw in state 457 resolved as shift
WARNING: shift/reduce conflict for exit in state 457 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 457 resolved as shift
WARNING: shift/reduce conflict for array in state 457 resolved as shift
WARNING: shift/reduce conflict for pow in state 457 resolved as shift
WARNING: shift/reduce conflict for POW in state 457 resolved as shift
WARNING: shift/reduce conflict for abs in state 457 resolved as shift
WARNING: shift/reduce conflict for cos in state 457 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 457 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 457 resolved as shift
WARNING: shift/reduce conflict for die in state 457 resolved as shift
WARNING: shift/reduce conflict for exp in state 457 resolved as shift
WARNING: shift/reduce conflict for floor in state 457 resolved as shift
WARNING: shift/reduce conflict for isset in state 457 resolved as shift
WARNING: shift/reduce conflict for list in state 457 resolved as shift
WARNING: shift/reduce conflict for log in state 457 resolved as shift
WARNING: shift/reduce conflict for log10 in state 457 resolved as shift
WARNING: shift/reduce conflict for max in state 457 resolved as shift
WARNING: shift/reduce conflict for min in state 457 resolved as shift
WARNING: shift/reduce conflict for rand in state 457 resolved as shift
WARNING: shift/reduce conflict for round in state 457 resolved as shift
WARNING: shift/reduce conflict for sin in state 457 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 457 resolved as shift
WARNING: shift/reduce conflict for unset in state 457 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 457 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 459 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 493 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 501 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 501 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 501 resolved as shift
WARNING: shift/reduce conflict for empty in state 501 resolved as shift
WARNING: shift/reduce conflict for include in state 501 resolved as shift
WARNING: shift/reduce conflict for const in state 501 resolved as shift
WARNING: shift/reduce conflict for print in state 501 resolved as shift
WARNING: shift/reduce conflict for echo in state 501 resolved as shift
WARNING: shift/reduce conflict for while in state 501 resolved as shift
WARNING: shift/reduce conflict for do in state 501 resolved as shift
WARNING: shift/reduce conflict for if in state 501 resolved as shift
WARNING: shift/reduce conflict for function in state 501 resolved as shift
WARNING: shift/reduce conflict for ID in state 501 resolved as shift
WARNING: shift/reduce conflict for return in state 501 resolved as shift
WARNING: shift/reduce conflict for class in state 501 resolved as shift
WARNING: shift/reduce conflict for new in state 501 resolved as shift
WARNING: shift/reduce conflict for interface in state 501 resolved as shift
WARNING: shift/reduce conflict for trait in state 501 resolved as shift
WARNING: shift/reduce conflict for use in state 501 resolved as shift
WARNING: shift/reduce conflict for continue in state 501 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 501 resolved as shift
WARNING: shift/reduce conflict for for in state 501 resolved as shift
WARNING: shift/reduce conflict for foreach in state 501 resolved as shift
WARNING: shift/reduce conflict for switch in state 501 resolved as shift
WARNING: shift/reduce conflict for try in state 501 resolved as shift
WARNING: shift/reduce conflict for throw in state 501 resolved as shift
WARNING: shift/reduce conflict for exit in state 501 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 501 resolved as shift
WARNING: shift/reduce conflict for array in state 501 resolved as shift
WARNING: shift/reduce conflict for pow in state 501 resolved as shift
WARNING: shift/reduce conflict for POW in state 501 resolved as shift
WARNING: shift/reduce conflict for abs in state 501 resolved as shift
WARNING: shift/reduce conflict for cos in state 501 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 501 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 501 resolved as shift
WARNING: shift/reduce conflict for die in state 501 resolved as shift
WARNING: shift/reduce conflict for exp in state 501 resolved as shift
WARNING: shift/reduce conflict for floor in state 501 resolved as shift
WARNING: shift/reduce conflict for isset in state 501 resolved as shift
WARNING: shift/reduce conflict for list in state 501 resolved as shift
WARNING: shift/reduce conflict for log in state 501 resolved as shift
WARNING: shift/reduce conflict for log10 in state 501 resolved as shift
WARNING: shift/reduce conflict for max in state 501 resolved as shift
WARNING: shift/reduce conflict for min in state 501 resolved as shift
WARNING: shift/reduce conflict for rand in state 501 resolved as shift
WARNING: shift/reduce conflict for round in state 501 resolved as shift
WARNING: shift/reduce conflict for sin in state 501 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 501 resolved as shift
WARNING: shift/reduce conflict for unset in state 501 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 501 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 502 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 502 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 502 resolved as shift
WARNING: shift/reduce conflict for empty in state 502 resolved as shift
WARNING: shift/reduce conflict for include in state 502 resolved as shift
WARNING: shift/reduce conflict for const in state 502 resolved as shift
WARNING: shift/reduce conflict for print in state 502 resolved as shift
WARNING: shift/reduce conflict for echo in state 502 resolved as shift
WARNING: shift/reduce conflict for while in state 502 resolved as shift
WARNING: shift/reduce conflict for do in state 502 resolved as shift
WARNING: shift/reduce conflict for if in state 502 resolved as shift
WARNING: shift/reduce conflict for function in state 502 resolved as shift
WARNING: shift/reduce conflict for ID in state 502 resolved as shift
WARNING: shift/reduce conflict for return in state 502 resolved as shift
WARNING: shift/reduce conflict for class in state 502 resolved as shift
WARNING: shift/reduce conflict for new in state 502 resolved as shift
WARNING: shift/reduce conflict for interface in state 502 resolved as shift
WARNING: shift/reduce conflict for trait in state 502 resolved as shift
WARNING: shift/reduce conflict for use in state 502 resolved as shift
WARNING: shift/reduce conflict for continue in state 502 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 502 resolved as shift
WARNING: shift/reduce conflict for for in state 502 resolved as shift
WARNING: shift/reduce conflict for foreach in state 502 resolved as shift
WARNING: shift/reduce conflict for switch in state 502 resolved as shift
WARNING: shift/reduce conflict for try in state 502 resolved as shift
WARNING: shift/reduce conflict for throw in state 502 resolved as shift
WARNING: shift/reduce conflict for exit in state 502 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 502 resolved as shift
WARNING: shift/reduce conflict for array in state 502 resolved as shift
WARNING: shift/reduce conflict for pow in state 502 resolved as shift
WARNING: shift/reduce conflict for POW in state 502 resolved as shift
WARNING: shift/reduce conflict for abs in state 502 resolved as shift
WARNING: shift/reduce conflict for cos in state 502 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 502 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 502 resolved as shift
WARNING: shift/reduce conflict for die in state 502 resolved as shift
WARNING: shift/reduce conflict for exp in state 502 resolved as shift
WARNING: shift/reduce conflict for floor in state 502 resolved as shift
WARNING: shift/reduce conflict for isset in state 502 resolved as shift
WARNING: shift/reduce conflict for list in state 502 resolved as shift
WARNING: shift/reduce conflict for log in state 502 resolved as shift
WARNING: shift/reduce conflict for log10 in state 502 resolved as shift
WARNING: shift/reduce conflict for max in state 502 resolved as shift
WARNING: shift/reduce conflict for min in state 502 resolved as shift
WARNING: shift/reduce conflict for rand in state 502 resolved as shift
WARNING: shift/reduce conflict for round in state 502 resolved as shift
WARNING: shift/reduce conflict for sin in state 502 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 502 resolved as shift
WARNING: shift/reduce conflict for unset in state 502 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 502 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 521 resolved as shift
WARNING: shift/reduce conflict for COMMENT_HASHTAG in state 521 resolved as shift
WARNING: shift/reduce conflict for COMMENT_MULTI in state 521 resolved as shift
WARNING: shift/reduce conflict for empty in state 521 resolved as shift
WARNING: shift/reduce conflict for include in state 521 resolved as shift
WARNING: shift/reduce conflict for const in state 521 resolved as shift
WARNING: shift/reduce conflict for print in state 521 resolved as shift
WARNING: shift/reduce conflict for echo in state 521 resolved as shift
WARNING: shift/reduce conflict for while in state 521 resolved as shift
WARNING: shift/reduce conflict for do in state 521 resolved as shift
WARNING: shift/reduce conflict for if in state 521 resolved as shift
WARNING: shift/reduce conflict for function in state 521 resolved as shift
WARNING: shift/reduce conflict for ID in state 521 resolved as shift
WARNING: shift/reduce conflict for return in state 521 resolved as shift
WARNING: shift/reduce conflict for class in state 521 resolved as shift
WARNING: shift/reduce conflict for new in state 521 resolved as shift
WARNING: shift/reduce conflict for interface in state 521 resolved as shift
WARNING: shift/reduce conflict for trait in state 521 resolved as shift
WARNING: shift/reduce conflict for use in state 521 resolved as shift
WARNING: shift/reduce conflict for continue in state 521 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 521 resolved as shift
WARNING: shift/reduce conflict for for in state 521 resolved as shift
WARNING: shift/reduce conflict for foreach in state 521 resolved as shift
WARNING: shift/reduce conflict for switch in state 521 resolved as shift
WARNING: shift/reduce conflict for try in state 521 resolved as shift
WARNING: shift/reduce conflict for throw in state 521 resolved as shift
WARNING: shift/reduce conflict for exit in state 521 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 521 resolved as shift
WARNING: shift/reduce conflict for array in state 521 resolved as shift
WARNING: shift/reduce conflict for pow in state 521 resolved as shift
WARNING: shift/reduce conflict for POW in state 521 resolved as shift
WARNING: shift/reduce conflict for abs in state 521 resolved as shift
WARNING: shift/reduce conflict for cos in state 521 resolved as shift
WARNING: shift/reduce conflict for deg2rad in state 521 resolved as shift
WARNING: shift/reduce conflict for rad2deg in state 521 resolved as shift
WARNING: shift/reduce conflict for die in state 521 resolved as shift
WARNING: shift/reduce conflict for exp in state 521 resolved as shift
WARNING: shift/reduce conflict for floor in state 521 resolved as shift
WARNING: shift/reduce conflict for isset in state 521 resolved as shift
WARNING: shift/reduce conflict for list in state 521 resolved as shift
WARNING: shift/reduce conflict for log in state 521 resolved as shift
WARNING: shift/reduce conflict for log10 in state 521 resolved as shift
WARNING: shift/reduce conflict for max in state 521 resolved as shift
WARNING: shift/reduce conflict for min in state 521 resolved as shift
WARNING: shift/reduce conflict for rand in state 521 resolved as shift
WARNING: shift/reduce conflict for round in state 521 resolved as shift
WARNING: shift/reduce conflict for sin in state 521 resolved as shift
WARNING: shift/reduce conflict for sqrt in state 521 resolved as shift
WARNING: shift/reduce conflict for unset in state 521 resolved as shift
WARNING: shift/reduce conflict for CADENA in state 521 resolved as shift
WARNING: reduce/reduce conflict in state 111 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (single_param -> NUMBER) in state 111
WARNING: reduce/reduce conflict in state 118 resolved using rule (var_declaration2 -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 118
WARNING: reduce/reduce conflict in state 255 resolved using rule (var_declaration2 -> VARIABLE EQUAL VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 255
WARNING: reduce/reduce conflict in state 256 resolved using rule (var_declaration2 -> VARIABLE EQUAL NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 256
