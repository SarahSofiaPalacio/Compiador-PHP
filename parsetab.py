
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftBOOL_ORorleftBOOL_ANDandleftEQUALleftPLUSMINUSleftTIMESDIVIDEAMPERSANT ANDEQUAL ASSIGN BACKSLASH BOOL_AND BOOL_OR CADENA CLOSE_TAG COLON COMILLASDOBLES COMILLASIMPLE COMMA COMMENT COMMENT_HASHTAG COMMENT_MULTI DEQUAL DISTINT DIVEQUAL DIVIDE DOT EQUAL GREATER GREATEREQUAL HASHTAG ID INVALID_NUMBER_SEQUENCE INVALID_VARIABLE ISEQUAL ISIDENTICAL ISNOTIDENTICAL LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS MINUSEQUAL MINUSMINUS MOD MULEQUAL NOT NUMBER OPEN_TAG PLUS PLUSEQUAL PLUSPLUS POW QUESTIONMARK RBLOCK RBRACKET RPAREN SEMICOLON SL SLEQUAL SR SREQUAL TIMES VARIABLE XOREQUAL abs abstract and array as break callable case catch ceil class clone const continue cos declare default deg2rad die do echo else elseif empty endclare endfor endforeach endif endswitch endwhile eval exit exp extends final finally floor for foreach function global goto if implements include include_once instanceof insteadof interface isset list log log10 match max min namespace new objectoperator or php pow print private protected public rad2deg rand readonly require require_once return round sin sqrt static switch throw trait try unset use var while xorprogram : header declaration_listheader : OPEN_TAGfooter_declaration : CLOSE_TAGdeclaration_list : declaration \n\t\t\t\t\t\t| declaration_list declarationdeclaration : COMMENT\n                   | COMMENT_HASHTAG\n                   | COMMENT_MULTI\n                   | header_declaration\n\t\t\t\t   | var_declaration\n\t\t\t\t   | constant_declaration\n\t\t\t\t   | print_declaration\n\t\t\t\t   | echo_declaration\n\t\t\t\t   | iteration_stmt\n\t\t\t\t   | if_statement\n\t\t\t\t   | fun_declaration\n\t\t\t\t   | fun_call\n\t\t\t\t   | obj_declaration\n\t\t\t\t   | create_obj_declaration\n\t\t\t\t   | footer_declaration\n                   | emptydata_type\t: NUMBER\n\t\t\t\t\t| CADENAheader_declaration : include CADENA SEMICOLONconstant_declaration : const ID EQUAL data_type SEMICOLONprint_declaration : print var_declaration2 SEMICOLON\n\t\t\t\t\t\t| print LPAREN var_declaration2 RPAREN SEMICOLON\n\t\t\t\t\t\t| print LPAREN data_type RPAREN SEMICOLON\n\t\t\t\t\t\t| print data_type SEMICOLONecho_declaration : echo var_declaration2 SEMICOLON\n\t\t\t\t\t\t| echo LPAREN var_declaration2 RPAREN SEMICOLON\n\t\t\t\t\t\t| echo LPAREN data_type RPAREN SEMICOLON\n\t\t\t\t\t\t| echo data_type SEMICOLONvar_declaration : var_declaration2 SEMICOLONvar_declaration2 : VARIABLE assignment_tailassignment_tail : EQUAL expression\n                       | EQUAL NUMBER COMMA var_declaration2\n                       | EQUAL VARIABLE COMMA var_declaration2\n                       | EQUAL CADENA\n                       | COMMA var_declaration2\n                       | EQUAL LBRACKET expression COMMA var_declaration2\n                       | EQUAL LBRACKET data_type COMMA var_declaration2\n                       | RBRACKETiteration_stmt : while LPAREN expression RPAREN LBLOCK declaration RBLOCKexpression : additive_expression\n \t\t\t\t\t| additive_expression logical_op additive_expression\n\t\t\t\t\t| additive_expression comp_op additive_expression\n     \t\t\t\t| additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expressionadditive_expression : term\n                           | term math_op termterm : factor\n            | factor increment_decrement_op\n            | increment_decrement_op factorfactor : NUMBER\n              | VARIABLE\n              | LPAREN expression RPARENincrement_decrement_op : PLUSPLUS\n                              | MINUSMINUSmath_op : PLUS \n\t\t\t\t| MINUS\n\t\t\t\t| TIMES\n\t\t\t\t| DIVIDE\n\tcomp_op : LESS \n\t\t\t| LESSEQUAL\n\t\t\t| GREATER\n\t\t\t| GREATEREQUAL\n\t\t\t| DEQUAL\n\t\t\t| DISTINT\n\t\t\t| ISEQUAL\n\tlogical_op : BOOL_OR\n                    | BOOL_AND\n                    | NOT\n                    | or\n                    | and if_statement : if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_partelse_part : elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part\n                 | else LBLOCK declaration_list RBLOCK\n                 | endif\n                 | emptyfun_declaration : function ID LPAREN params RPAREN LBLOCK declaration RBLOCKfun_call : ID LPAREN params RPARENobj_declaration : class ID LBLOCK declaration RBLOCKcreate_obj_declaration : new ID LPAREN params RPARENparams : single_param\n              | params COMMA single_paramsingle_param : var_declaration2\n                    | empty_functionempty_function :'
    
_lr_action_items = {'OPEN_TAG':([0,],[3,]),'$end':([1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,92,130,132,133,134,135,143,144,155,160,163,164,165,172,176,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,-81,-25,-27,-28,-31,-32,-82,-83,-44,-75,-78,-79,-80,-77,-76,]),'COMMENT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[6,-2,6,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,6,-81,-25,-27,-28,-31,-32,6,6,-82,-83,6,6,-44,-75,-78,-79,-80,6,6,-77,6,6,-76,]),'COMMENT_HASHTAG':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[7,-2,7,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,7,-81,-25,-27,-28,-31,-32,7,7,-82,-83,7,7,-44,-75,-78,-79,-80,7,7,-77,7,7,-76,]),'COMMENT_MULTI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[8,-2,8,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,8,-81,-25,-27,-28,-31,-32,8,8,-82,-83,8,8,-44,-75,-78,-79,-80,8,8,-77,8,8,-76,]),'empty':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,157,160,163,164,165,168,170,172,173,174,175,176,],[21,-2,21,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,21,-81,-25,-27,-28,-31,-32,21,21,-82,-83,21,21,-44,164,-75,-78,-79,-80,21,21,-77,21,21,164,-76,]),'include':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[22,-2,22,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,22,-81,-25,-27,-28,-31,-32,22,22,-82,-83,22,22,-44,-75,-78,-79,-80,22,22,-77,22,22,-76,]),'const':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[24,-2,24,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,24,-81,-25,-27,-28,-31,-32,24,24,-82,-83,24,24,-44,-75,-78,-79,-80,24,24,-77,24,24,-76,]),'print':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[26,-2,26,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,26,-81,-25,-27,-28,-31,-32,26,26,-82,-83,26,26,-44,-75,-78,-79,-80,26,26,-77,26,26,-76,]),'echo':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[27,-2,27,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,27,-81,-25,-27,-28,-31,-32,27,27,-82,-83,27,27,-44,-75,-78,-79,-80,27,27,-77,27,27,-76,]),'while':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[28,-2,28,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,28,-81,-25,-27,-28,-31,-32,28,28,-82,-83,28,28,-44,-75,-78,-79,-80,28,28,-77,28,28,-76,]),'if':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[29,-2,29,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,29,-81,-25,-27,-28,-31,-32,29,29,-82,-83,29,29,-44,-75,-78,-79,-80,29,29,-77,29,29,-76,]),'function':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[30,-2,30,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,30,-81,-25,-27,-28,-31,-32,30,30,-82,-83,30,30,-44,-75,-78,-79,-80,30,30,-77,30,30,-76,]),'ID':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,30,31,32,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[25,-2,25,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,38,50,51,52,-3,-5,-34,-24,-26,-29,-30,-33,25,-81,-25,-27,-28,-31,-32,25,25,-82,-83,25,25,-44,-75,-78,-79,-80,25,25,-77,25,25,-76,]),'class':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[31,-2,31,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,31,-81,-25,-27,-28,-31,-32,31,31,-82,-83,31,31,-44,-75,-78,-79,-80,31,31,-77,31,31,-76,]),'new':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[32,-2,32,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,32,-81,-25,-27,-28,-31,-32,32,32,-82,-83,32,32,-44,-75,-78,-79,-80,32,32,-77,32,32,-76,]),'CLOSE_TAG':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,83,92,130,132,133,134,135,137,141,143,144,151,152,155,160,163,164,165,168,170,172,173,174,176,],[33,-2,33,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,33,-81,-25,-27,-28,-31,-32,33,33,-82,-83,33,33,-44,-75,-78,-79,-80,33,33,-77,33,33,-76,]),'VARIABLE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,26,27,33,35,37,39,41,46,48,49,54,55,57,63,66,67,70,71,76,79,80,82,83,84,89,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,125,126,130,132,133,134,135,137,141,143,144,147,148,150,151,152,155,159,160,163,164,165,167,168,170,172,173,174,176,],[34,-2,34,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,34,-3,-5,-34,34,34,34,78,78,87,34,-24,-26,-29,-30,-33,78,78,-57,-58,34,34,34,78,-81,34,78,78,-70,-71,-72,-73,-74,-63,-64,-65,-66,-67,-68,-69,78,-59,-60,-61,-62,34,34,-25,-27,-28,-31,-32,34,34,-82,-83,34,34,78,34,34,-44,78,-75,-78,-79,-80,78,34,34,-77,34,34,-76,]),'RBLOCK':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,33,35,37,57,63,66,67,70,92,123,130,132,133,134,135,143,144,149,151,155,158,160,163,164,165,170,172,174,176,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-5,-34,-24,-26,-29,-30,-33,-81,143,-25,-27,-28,-31,-32,-82,-83,155,157,-44,165,-75,-78,-79,-80,172,-77,175,-76,]),'CADENA':([22,26,27,41,46,54,58,89,],[36,44,44,44,44,88,44,44,]),'SEMICOLON':([23,36,40,42,43,44,45,47,53,56,73,74,75,77,78,79,80,85,86,87,88,90,91,94,95,96,97,119,120,136,138,139,140,145,146,153,154,166,],[37,57,63,66,-22,-23,67,70,-35,-43,-45,-49,-51,-54,-55,-57,-58,-36,-54,-55,-39,-40,130,132,133,134,135,-52,-53,-56,-46,-47,-50,-37,-38,-41,-42,-48,]),'LPAREN':([25,26,27,28,29,48,49,50,52,54,71,76,79,80,89,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,150,159,161,167,],[39,41,46,48,49,71,71,82,84,71,71,71,-57,-58,71,71,71,-70,-71,-72,-73,-74,-63,-64,-65,-66,-67,-68,-69,71,-59,-60,-61,-62,71,71,167,71,]),'NUMBER':([26,27,41,46,48,49,54,58,71,76,79,80,89,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,150,159,167,],[43,43,43,43,77,77,86,43,77,77,-57,-58,129,77,77,-70,-71,-72,-73,-74,-63,-64,-65,-66,-67,-68,-69,77,-59,-60,-61,-62,77,77,77,]),'EQUAL':([34,38,],[54,58,]),'COMMA':([34,39,44,53,56,59,60,61,62,73,74,75,77,78,79,80,82,84,85,86,87,88,90,93,119,120,122,124,127,128,129,131,136,138,139,140,145,146,153,154,166,],[55,-88,-23,-35,-43,93,-84,-86,-87,-45,-49,-51,-54,-55,-57,-58,-88,-88,-36,125,126,-39,-40,-88,-52,-53,93,93,147,148,-22,-85,-56,-46,-47,-50,-37,-38,-41,-42,-48,]),'RBRACKET':([34,],[56,]),'RPAREN':([39,43,44,53,56,59,60,61,62,64,65,68,69,72,73,74,75,77,78,79,80,81,82,84,85,86,87,88,90,93,98,119,120,122,124,131,136,138,139,140,145,146,153,154,166,169,],[-88,-22,-23,-35,-43,92,-84,-86,-87,94,95,96,97,99,-45,-49,-51,-54,-55,-57,-58,121,-88,-88,-36,-54,-55,-39,-40,-88,136,-52,-53,142,144,-85,-56,-46,-47,-50,-37,-38,-41,-42,-48,171,]),'PLUSPLUS':([48,49,54,71,75,77,78,86,87,89,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,129,136,150,159,167,],[79,79,79,79,79,-54,-55,-54,-55,79,79,79,-70,-71,-72,-73,-74,-63,-64,-65,-66,-67,-68,-69,79,-59,-60,-61,-62,-54,-56,79,79,79,]),'MINUSMINUS':([48,49,54,71,75,77,78,86,87,89,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,129,136,150,159,167,],[80,80,80,80,80,-54,-55,-54,-55,80,80,80,-70,-71,-72,-73,-74,-63,-64,-65,-66,-67,-68,-69,80,-59,-60,-61,-62,-54,-56,80,80,80,]),'LBLOCK':([51,99,121,142,162,171,],[83,137,141,152,168,173,]),'LBRACKET':([54,],[89,]),'BOOL_OR':([73,74,75,77,78,79,80,86,87,119,120,129,136,139,140,],[102,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,102,-50,]),'BOOL_AND':([73,74,75,77,78,79,80,86,87,119,120,129,136,139,140,],[103,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,103,-50,]),'NOT':([73,74,75,77,78,79,80,86,87,119,120,129,136,139,140,],[104,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,104,-50,]),'or':([73,74,75,77,78,79,80,86,87,119,120,129,136,139,140,],[105,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,105,-50,]),'and':([73,74,75,77,78,79,80,86,87,119,120,129,136,139,140,],[106,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,106,-50,]),'LESS':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[107,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,107,]),'LESSEQUAL':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[108,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,108,]),'GREATER':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[109,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,109,]),'GREATEREQUAL':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[110,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,110,]),'DEQUAL':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[111,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,111,]),'DISTINT':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[112,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,112,]),'ISEQUAL':([73,74,75,77,78,79,80,86,87,119,120,129,136,140,156,],[113,-49,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,-50,113,]),'PLUS':([74,75,77,78,79,80,86,87,119,120,129,136,],[115,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,]),'MINUS':([74,75,77,78,79,80,86,87,119,120,129,136,],[116,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,]),'TIMES':([74,75,77,78,79,80,86,87,119,120,129,136,],[117,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,]),'DIVIDE':([74,75,77,78,79,80,86,87,119,120,129,136,],[118,-51,-54,-55,-57,-58,-54,-55,-52,-53,-54,-56,]),'elseif':([157,175,],[161,161,]),'else':([157,175,],[162,162,]),'endif':([157,175,],[163,163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'header':([0,],[2,]),'declaration_list':([2,141,168,173,],[4,151,170,174,]),'declaration':([2,4,83,137,141,151,152,168,170,173,174,],[5,35,123,149,5,35,158,5,35,5,35,]),'header_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[9,9,9,9,9,9,9,9,9,9,9,]),'var_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[10,10,10,10,10,10,10,10,10,10,10,]),'constant_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[11,11,11,11,11,11,11,11,11,11,11,]),'print_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[12,12,12,12,12,12,12,12,12,12,12,]),'echo_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[13,13,13,13,13,13,13,13,13,13,13,]),'iteration_stmt':([2,4,83,137,141,151,152,168,170,173,174,],[14,14,14,14,14,14,14,14,14,14,14,]),'if_statement':([2,4,83,137,141,151,152,168,170,173,174,],[15,15,15,15,15,15,15,15,15,15,15,]),'fun_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[16,16,16,16,16,16,16,16,16,16,16,]),'fun_call':([2,4,83,137,141,151,152,168,170,173,174,],[17,17,17,17,17,17,17,17,17,17,17,]),'obj_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[18,18,18,18,18,18,18,18,18,18,18,]),'create_obj_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[19,19,19,19,19,19,19,19,19,19,19,]),'footer_declaration':([2,4,83,137,141,151,152,168,170,173,174,],[20,20,20,20,20,20,20,20,20,20,20,]),'var_declaration2':([2,4,26,27,39,41,46,55,82,83,84,93,125,126,137,141,147,148,151,152,168,170,173,174,],[23,23,40,45,61,64,68,90,61,23,61,61,145,146,23,23,153,154,23,23,23,23,23,23,]),'data_type':([26,27,41,46,58,89,],[42,47,65,69,91,128,]),'assignment_tail':([34,],[53,]),'params':([39,82,84,],[59,122,124,]),'single_param':([39,82,84,93,],[60,60,60,131,]),'empty_function':([39,82,84,93,],[62,62,62,62,]),'expression':([48,49,54,71,89,167,],[72,81,85,98,127,169,]),'additive_expression':([48,49,54,71,89,100,101,150,159,167,],[73,73,73,73,73,138,139,156,166,73,]),'term':([48,49,54,71,89,100,101,114,150,159,167,],[74,74,74,74,74,74,74,140,74,74,74,]),'factor':([48,49,54,71,76,89,100,101,114,150,159,167,],[75,75,75,75,120,75,75,75,75,75,75,75,]),'increment_decrement_op':([48,49,54,71,75,89,100,101,114,150,159,167,],[76,76,76,76,119,76,76,76,76,76,76,76,]),'logical_op':([73,139,],[100,150,]),'comp_op':([73,156,],[101,159,]),'math_op':([74,],[114,]),'else_part':([157,175,],[160,176,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> header declaration_list','program',2,'p_program','Mini_parser_PHP.py',18),
  ('header -> OPEN_TAG','header',1,'p_header','Mini_parser_PHP.py',22),
  ('footer_declaration -> CLOSE_TAG','footer_declaration',1,'p_footer_declaration','Mini_parser_PHP.py',26),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','Mini_parser_PHP.py',30),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','Mini_parser_PHP.py',31),
  ('declaration -> COMMENT','declaration',1,'p_declaration','Mini_parser_PHP.py',35),
  ('declaration -> COMMENT_HASHTAG','declaration',1,'p_declaration','Mini_parser_PHP.py',36),
  ('declaration -> COMMENT_MULTI','declaration',1,'p_declaration','Mini_parser_PHP.py',37),
  ('declaration -> header_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',38),
  ('declaration -> var_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',39),
  ('declaration -> constant_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',40),
  ('declaration -> print_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',41),
  ('declaration -> echo_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',42),
  ('declaration -> iteration_stmt','declaration',1,'p_declaration','Mini_parser_PHP.py',43),
  ('declaration -> if_statement','declaration',1,'p_declaration','Mini_parser_PHP.py',44),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',45),
  ('declaration -> fun_call','declaration',1,'p_declaration','Mini_parser_PHP.py',46),
  ('declaration -> obj_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',47),
  ('declaration -> create_obj_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',48),
  ('declaration -> footer_declaration','declaration',1,'p_declaration','Mini_parser_PHP.py',49),
  ('declaration -> empty','declaration',1,'p_declaration','Mini_parser_PHP.py',50),
  ('data_type -> NUMBER','data_type',1,'p_data_type','Mini_parser_PHP.py',54),
  ('data_type -> CADENA','data_type',1,'p_data_type','Mini_parser_PHP.py',55),
  ('header_declaration -> include CADENA SEMICOLON','header_declaration',3,'p_header_declaration','Mini_parser_PHP.py',59),
  ('constant_declaration -> const ID EQUAL data_type SEMICOLON','constant_declaration',5,'p_constant_declaration','Mini_parser_PHP.py',63),
  ('print_declaration -> print var_declaration2 SEMICOLON','print_declaration',3,'p_print_declaration','Mini_parser_PHP.py',67),
  ('print_declaration -> print LPAREN var_declaration2 RPAREN SEMICOLON','print_declaration',5,'p_print_declaration','Mini_parser_PHP.py',68),
  ('print_declaration -> print LPAREN data_type RPAREN SEMICOLON','print_declaration',5,'p_print_declaration','Mini_parser_PHP.py',69),
  ('print_declaration -> print data_type SEMICOLON','print_declaration',3,'p_print_declaration','Mini_parser_PHP.py',70),
  ('echo_declaration -> echo var_declaration2 SEMICOLON','echo_declaration',3,'p_echo_declaration','Mini_parser_PHP.py',74),
  ('echo_declaration -> echo LPAREN var_declaration2 RPAREN SEMICOLON','echo_declaration',5,'p_echo_declaration','Mini_parser_PHP.py',75),
  ('echo_declaration -> echo LPAREN data_type RPAREN SEMICOLON','echo_declaration',5,'p_echo_declaration','Mini_parser_PHP.py',76),
  ('echo_declaration -> echo data_type SEMICOLON','echo_declaration',3,'p_echo_declaration','Mini_parser_PHP.py',77),
  ('var_declaration -> var_declaration2 SEMICOLON','var_declaration',2,'p_var_declaration_1','Mini_parser_PHP.py',81),
  ('var_declaration2 -> VARIABLE assignment_tail','var_declaration2',2,'p_var_declaration_2','Mini_parser_PHP.py',109),
  ('assignment_tail -> EQUAL expression','assignment_tail',2,'p_assignment_tail','Mini_parser_PHP.py',112),
  ('assignment_tail -> EQUAL NUMBER COMMA var_declaration2','assignment_tail',4,'p_assignment_tail','Mini_parser_PHP.py',113),
  ('assignment_tail -> EQUAL VARIABLE COMMA var_declaration2','assignment_tail',4,'p_assignment_tail','Mini_parser_PHP.py',114),
  ('assignment_tail -> EQUAL CADENA','assignment_tail',2,'p_assignment_tail','Mini_parser_PHP.py',115),
  ('assignment_tail -> COMMA var_declaration2','assignment_tail',2,'p_assignment_tail','Mini_parser_PHP.py',116),
  ('assignment_tail -> EQUAL LBRACKET expression COMMA var_declaration2','assignment_tail',5,'p_assignment_tail','Mini_parser_PHP.py',117),
  ('assignment_tail -> EQUAL LBRACKET data_type COMMA var_declaration2','assignment_tail',5,'p_assignment_tail','Mini_parser_PHP.py',118),
  ('assignment_tail -> RBRACKET','assignment_tail',1,'p_assignment_tail','Mini_parser_PHP.py',119),
  ('iteration_stmt -> while LPAREN expression RPAREN LBLOCK declaration RBLOCK','iteration_stmt',7,'p_iteration_stmt_1','Mini_parser_PHP.py',124),
  ('expression -> additive_expression','expression',1,'p_expression_1','Mini_parser_PHP.py',129),
  ('expression -> additive_expression logical_op additive_expression','expression',3,'p_expression_1','Mini_parser_PHP.py',130),
  ('expression -> additive_expression comp_op additive_expression','expression',3,'p_expression_1','Mini_parser_PHP.py',131),
  ('expression -> additive_expression comp_op additive_expression logical_op additive_expression comp_op additive_expression','expression',7,'p_expression_1','Mini_parser_PHP.py',132),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','Mini_parser_PHP.py',145),
  ('additive_expression -> term math_op term','additive_expression',3,'p_additive_expression','Mini_parser_PHP.py',146),
  ('term -> factor','term',1,'p_term','Mini_parser_PHP.py',150),
  ('term -> factor increment_decrement_op','term',2,'p_term','Mini_parser_PHP.py',151),
  ('term -> increment_decrement_op factor','term',2,'p_term','Mini_parser_PHP.py',152),
  ('factor -> NUMBER','factor',1,'p_factor','Mini_parser_PHP.py',155),
  ('factor -> VARIABLE','factor',1,'p_factor','Mini_parser_PHP.py',156),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','Mini_parser_PHP.py',157),
  ('increment_decrement_op -> PLUSPLUS','increment_decrement_op',1,'p_increment_decrement_op','Mini_parser_PHP.py',161),
  ('increment_decrement_op -> MINUSMINUS','increment_decrement_op',1,'p_increment_decrement_op','Mini_parser_PHP.py',162),
  ('math_op -> PLUS','math_op',1,'p_math_op','Mini_parser_PHP.py',166),
  ('math_op -> MINUS','math_op',1,'p_math_op','Mini_parser_PHP.py',167),
  ('math_op -> TIMES','math_op',1,'p_math_op','Mini_parser_PHP.py',168),
  ('math_op -> DIVIDE','math_op',1,'p_math_op','Mini_parser_PHP.py',169),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','Mini_parser_PHP.py',174),
  ('comp_op -> LESSEQUAL','comp_op',1,'p_comp_op','Mini_parser_PHP.py',175),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','Mini_parser_PHP.py',176),
  ('comp_op -> GREATEREQUAL','comp_op',1,'p_comp_op','Mini_parser_PHP.py',177),
  ('comp_op -> DEQUAL','comp_op',1,'p_comp_op','Mini_parser_PHP.py',178),
  ('comp_op -> DISTINT','comp_op',1,'p_comp_op','Mini_parser_PHP.py',179),
  ('comp_op -> ISEQUAL','comp_op',1,'p_comp_op','Mini_parser_PHP.py',180),
  ('logical_op -> BOOL_OR','logical_op',1,'p_logical_op','Mini_parser_PHP.py',185),
  ('logical_op -> BOOL_AND','logical_op',1,'p_logical_op','Mini_parser_PHP.py',186),
  ('logical_op -> NOT','logical_op',1,'p_logical_op','Mini_parser_PHP.py',187),
  ('logical_op -> or','logical_op',1,'p_logical_op','Mini_parser_PHP.py',188),
  ('logical_op -> and','logical_op',1,'p_logical_op','Mini_parser_PHP.py',189),
  ('if_statement -> if LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part','if_statement',8,'p_if_statement','Mini_parser_PHP.py',193),
  ('else_part -> elseif LPAREN expression RPAREN LBLOCK declaration_list RBLOCK else_part','else_part',8,'p_else_part','Mini_parser_PHP.py',196),
  ('else_part -> else LBLOCK declaration_list RBLOCK','else_part',4,'p_else_part','Mini_parser_PHP.py',197),
  ('else_part -> endif','else_part',1,'p_else_part','Mini_parser_PHP.py',198),
  ('else_part -> empty','else_part',1,'p_else_part','Mini_parser_PHP.py',199),
  ('fun_declaration -> function ID LPAREN params RPAREN LBLOCK declaration RBLOCK','fun_declaration',8,'p_fun_declaration','Mini_parser_PHP.py',202),
  ('fun_call -> ID LPAREN params RPAREN','fun_call',4,'p_fun_call','Mini_parser_PHP.py',206),
  ('obj_declaration -> class ID LBLOCK declaration RBLOCK','obj_declaration',5,'p_obj_declaration','Mini_parser_PHP.py',210),
  ('create_obj_declaration -> new ID LPAREN params RPAREN','create_obj_declaration',5,'p_create_obj_declaration','Mini_parser_PHP.py',214),
  ('params -> single_param','params',1,'p_params','Mini_parser_PHP.py',229),
  ('params -> params COMMA single_param','params',3,'p_params','Mini_parser_PHP.py',230),
  ('single_param -> var_declaration2','single_param',1,'p_single_param','Mini_parser_PHP.py',233),
  ('single_param -> empty_function','single_param',1,'p_single_param','Mini_parser_PHP.py',234),
  ('empty_function -> <empty>','empty_function',0,'p_empty_function','Mini_parser_PHP.py',238),
]
